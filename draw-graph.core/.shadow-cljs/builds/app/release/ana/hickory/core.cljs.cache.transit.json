["^ ","~:output",["^ ","~:js","goog.provide('hickory.core');\n\n/**\n * Objects that can be represented as Hiccup nodes implement this protocol in\n * order to make the conversion.\n * @interface\n */\nhickory.core.HiccupRepresentable = function(){};\n\n/**\n * Converts the node given into a hiccup-format data structure. The\n *   node must have an implementation of the HiccupRepresentable\n *   protocol; nodes created by parse or parse-fragment already do.\n */\nhickory.core.as_hiccup = (function hickory$core$as_hiccup(this$){\nif((((!((this$ == null)))) && ((!((this$.hickory$core$HiccupRepresentable$as_hiccup$arity$1 == null)))))){\nreturn this$.hickory$core$HiccupRepresentable$as_hiccup$arity$1(this$);\n} else {\nvar x__4433__auto__ = (((this$ == null))?null:this$);\nvar m__4434__auto__ = (hickory.core.as_hiccup[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4434__auto__.call(null,this$));\n} else {\nvar m__4431__auto__ = (hickory.core.as_hiccup[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4431__auto__.call(null,this$));\n} else {\nthrow cljs.core.missing_protocol(\"HiccupRepresentable.as-hiccup\",this$);\n}\n}\n}\n});\n\n\n/**\n * Objects that can be represented as HTML DOM node maps, similar to\n * clojure.xml, implement this protocol to make the conversion.\n * \n * Each DOM node will be a map or string (for Text/CDATASections). Nodes that\n * are maps have the appropriate subset of the keys\n * \n *   :type     - [:comment, :document, :document-type, :element]\n *   :tag      - node's tag, check :type to see if applicable\n *   :attrs    - node's attributes as a map, check :type to see if applicable\n *   :content  - node's child nodes, in a vector, check :type to see if\n *               applicable\n * @interface\n */\nhickory.core.HickoryRepresentable = function(){};\n\n/**\n * Converts the node given into a hickory-format data structure. The\n *   node must have an implementation of the HickoryRepresentable protocol;\n *   nodes created by parse or parse-fragment already do.\n */\nhickory.core.as_hickory = (function hickory$core$as_hickory(this$){\nif((((!((this$ == null)))) && ((!((this$.hickory$core$HickoryRepresentable$as_hickory$arity$1 == null)))))){\nreturn this$.hickory$core$HickoryRepresentable$as_hickory$arity$1(this$);\n} else {\nvar x__4433__auto__ = (((this$ == null))?null:this$);\nvar m__4434__auto__ = (hickory.core.as_hickory[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4434__auto__.call(null,this$));\n} else {\nvar m__4431__auto__ = (hickory.core.as_hickory[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4431__auto__.call(null,this$));\n} else {\nthrow cljs.core.missing_protocol(\"HickoryRepresentable.as-hickory\",this$);\n}\n}\n}\n});\n\nhickory.core.node_type = (function hickory$core$node_type(type){\nreturn (Node[[cljs.core.str.cljs$core$IFn$_invoke$arity$1(type),\"_NODE\"].join('')]);\n});\nhickory.core.Attribute = hickory.core.node_type(\"ATTRIBUTE\");\nhickory.core.Comment = hickory.core.node_type(\"COMMENT\");\nhickory.core.Document = hickory.core.node_type(\"DOCUMENT\");\nhickory.core.DocumentType = hickory.core.node_type(\"DOCUMENT_TYPE\");\nhickory.core.Element = hickory.core.node_type(\"ELEMENT\");\nhickory.core.Text = hickory.core.node_type(\"TEXT\");\nhickory.core.extend_type_with_seqable = (function hickory$core$extend_type_with_seqable(t){\nt.prototype.cljs$core$ISeqable$ = cljs.core.PROTOCOL_SENTINEL;\n\nreturn t.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (array){\nvar array__$1 = this;\nreturn cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(array__$1);\n});\n});\nhickory.core.extend_type_with_seqable(NodeList);\nif((typeof NamedNodeMap !== 'undefined')){\nhickory.core.extend_type_with_seqable(NamedNodeMap);\n} else {\n}\nif((typeof MozNamedAttrMap !== 'undefined')){\nhickory.core.extend_type_with_seqable(MozNamedAttrMap);\n} else {\n}\nhickory.core.format_doctype = (function hickory$core$format_doctype(dt){\nvar name = (dt[\"name\"]);\nvar publicId = (dt[\"publicId\"]);\nvar systemId = (dt[\"systemId\"]);\nif((!(cljs.core.empty_QMARK_(publicId)))){\nreturn goog.string.format(\"<!DOCTYPE %s PUBLIC \\\"%s\\\" \\\"%s\\\">\",name,publicId,systemId);\n} else {\nreturn [\"<!DOCTYPE \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name),\">\"].join('');\n}\n});\ngoog.object.set(hickory.core.HiccupRepresentable,\"object\",true);\n\nvar G__8978_9011 = hickory.core.as_hiccup;\nvar G__8979_9012 = \"object\";\nvar G__8980_9013 = ((function (G__8978_9011,G__8979_9012){\nreturn (function (this$){\nvar pred__8982 = cljs.core._EQ_;\nvar expr__8983 = (this$[\"nodeType\"]);\nif(cljs.core.truth_((pred__8982.cljs$core$IFn$_invoke$arity$2 ? pred__8982.cljs$core$IFn$_invoke$arity$2(hickory.core.Attribute,expr__8983) : pred__8982.call(null,hickory.core.Attribute,expr__8983)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hickory.utils.lower_case_keyword((this$[\"name\"])),(this$[\"value\"])], null);\n} else {\nif(cljs.core.truth_((pred__8982.cljs$core$IFn$_invoke$arity$2 ? pred__8982.cljs$core$IFn$_invoke$arity$2(hickory.core.Comment,expr__8983) : pred__8982.call(null,hickory.core.Comment,expr__8983)))){\nreturn [\"<!--\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((this$[\"data\"])),\"-->\"].join('');\n} else {\nif(cljs.core.truth_((pred__8982.cljs$core$IFn$_invoke$arity$2 ? pred__8982.cljs$core$IFn$_invoke$arity$2(hickory.core.Document,expr__8983) : pred__8982.call(null,hickory.core.Document,expr__8983)))){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(hickory.core.as_hiccup,(this$[\"childNodes\"]));\n} else {\nif(cljs.core.truth_((pred__8982.cljs$core$IFn$_invoke$arity$2 ? pred__8982.cljs$core$IFn$_invoke$arity$2(hickory.core.DocumentType,expr__8983) : pred__8982.call(null,hickory.core.DocumentType,expr__8983)))){\nreturn hickory.core.format_doctype(this$);\n} else {\nif(cljs.core.truth_((pred__8982.cljs$core$IFn$_invoke$arity$2 ? pred__8982.cljs$core$IFn$_invoke$arity$2(hickory.core.Element,expr__8983) : pred__8982.call(null,hickory.core.Element,expr__8983)))){\nvar tag = hickory.utils.lower_case_keyword((this$[\"tagName\"]));\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag,cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(hickory.core.as_hiccup,(this$[\"attributes\"])))], null),(cljs.core.truth_((hickory.utils.unescapable_content.cljs$core$IFn$_invoke$arity$1 ? hickory.utils.unescapable_content.cljs$core$IFn$_invoke$arity$1(tag) : hickory.utils.unescapable_content.call(null,tag)))?cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (tag,pred__8982,expr__8983,G__8978_9011,G__8979_9012){\nreturn (function (p1__8975_SHARP_){\nreturn (p1__8975_SHARP_[\"wholeText\"]);\n});})(tag,pred__8982,expr__8983,G__8978_9011,G__8979_9012))\n,(this$[\"childNodes\"])):cljs.core.map.cljs$core$IFn$_invoke$arity$2(hickory.core.as_hiccup,(this$[\"childNodes\"])))));\n} else {\nif(cljs.core.truth_((pred__8982.cljs$core$IFn$_invoke$arity$2 ? pred__8982.cljs$core$IFn$_invoke$arity$2(hickory.core.Text,expr__8983) : pred__8982.call(null,hickory.core.Text,expr__8983)))){\nreturn hickory.utils.html_escape((this$[\"wholeText\"]));\n} else {\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr__8983)].join('')));\n}\n}\n}\n}\n}\n}\n});})(G__8978_9011,G__8979_9012))\n;\ngoog.object.set(G__8978_9011,G__8979_9012,G__8980_9013);\ngoog.object.set(hickory.core.HickoryRepresentable,\"object\",true);\n\nvar G__8991_9023 = hickory.core.as_hickory;\nvar G__8992_9024 = \"object\";\nvar G__8993_9025 = ((function (G__8991_9023,G__8992_9024){\nreturn (function (this$){\nvar pred__8994 = cljs.core._EQ_;\nvar expr__8995 = (this$[\"nodeType\"]);\nif(cljs.core.truth_((pred__8994.cljs$core$IFn$_invoke$arity$2 ? pred__8994.cljs$core$IFn$_invoke$arity$2(hickory.core.Attribute,expr__8995) : pred__8994.call(null,hickory.core.Attribute,expr__8995)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hickory.utils.lower_case_keyword((this$[\"name\"])),(this$[\"value\"])], null);\n} else {\nif(cljs.core.truth_((pred__8994.cljs$core$IFn$_invoke$arity$2 ? pred__8994.cljs$core$IFn$_invoke$arity$2(hickory.core.Comment,expr__8995) : pred__8994.call(null,hickory.core.Comment,expr__8995)))){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),new cljs.core.Keyword(null,\"content\",\"content\",15833224),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(this$[\"data\"])], null)], null);\n} else {\nif(cljs.core.truth_((pred__8994.cljs$core$IFn$_invoke$arity$2 ? pred__8994.cljs$core$IFn$_invoke$arity$2(hickory.core.Document,expr__8995) : pred__8994.call(null,hickory.core.Document,expr__8995)))){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"document\",\"document\",-1329188687),new cljs.core.Keyword(null,\"content\",\"content\",15833224),cljs.core.not_empty(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(hickory.core.as_hickory,(this$[\"childNodes\"]))))], null);\n} else {\nif(cljs.core.truth_((pred__8994.cljs$core$IFn$_invoke$arity$2 ? pred__8994.cljs$core$IFn$_invoke$arity$2(hickory.core.DocumentType,expr__8995) : pred__8994.call(null,hickory.core.DocumentType,expr__8995)))){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"document-type\",\"document-type\",-1309437776),new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),(this$[\"name\"]),new cljs.core.Keyword(null,\"publicid\",\"publicid\",1557995850),(this$[\"publicId\"]),new cljs.core.Keyword(null,\"systemid\",\"systemid\",-2052878192),(this$[\"systemId\"])], null)], null);\n} else {\nif(cljs.core.truth_((pred__8994.cljs$core$IFn$_invoke$arity$2 ? pred__8994.cljs$core$IFn$_invoke$arity$2(hickory.core.Element,expr__8995) : pred__8994.call(null,hickory.core.Element,expr__8995)))){\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),cljs.core.not_empty(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(hickory.core.as_hickory,(this$[\"attributes\"])))),new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),hickory.utils.lower_case_keyword((this$[\"tagName\"])),new cljs.core.Keyword(null,\"content\",\"content\",15833224),cljs.core.not_empty(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(hickory.core.as_hickory,(this$[\"childNodes\"]))))], null);\n} else {\nif(cljs.core.truth_((pred__8994.cljs$core$IFn$_invoke$arity$2 ? pred__8994.cljs$core$IFn$_invoke$arity$2(hickory.core.Text,expr__8995) : pred__8994.call(null,hickory.core.Text,expr__8995)))){\nreturn (this$[\"wholeText\"]);\n} else {\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr__8995)].join('')));\n}\n}\n}\n}\n}\n}\n});})(G__8991_9023,G__8992_9024))\n;\ngoog.object.set(G__8991_9023,G__8992_9024,G__8993_9025);\nhickory.core.extract_doctype = (function hickory$core$extract_doctype(s){\nvar temp__5720__auto__ = cljs.core.second((function (){var or__4131__auto__ = cljs.core.re_find(/<!DOCTYPE ([^>]*)>/,s);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.re_find(/<!doctype ([^>]*)>/,s);\n}\n})());\nif(cljs.core.truth_(temp__5720__auto__)){\nvar doctype = temp__5720__auto__;\nreturn cljs.core.re_find(/([^\\s]*)(\\s+PUBLIC\\s+[\\\"]?([^\\\"]*)[\\\"]?\\s+[\\\"]?([^\\\"]*)[\\\"]?)?/,doctype);\n} else {\nreturn null;\n}\n});\nhickory.core.remove_el = (function hickory$core$remove_el(el){\nreturn (el[\"parentNode\"]).removeChild(el);\n});\nhickory.core.parse_dom_with_domparser = (function hickory$core$parse_dom_with_domparser(s){\nif((typeof DOMParser !== 'undefined')){\nreturn (new DOMParser()).parseFromString(s,\"text/html\");\n} else {\nreturn null;\n}\n});\n/**\n * Parse an HTML document (or fragment) as a DOM using document.implementation.createHTMLDocument and document.write.\n */\nhickory.core.parse_dom_with_write = (function hickory$core$parse_dom_with_write(s){\nvar doc = document.implementation.createHTMLDocument(\"\");\nvar doctype_el = (doc[\"doctype\"]);\nif(cljs.core.truth_(hickory.core.extract_doctype(s))){\n} else {\nhickory.core.remove_el(doctype_el);\n}\n\nvar temp__5720__auto___9051 = cljs.core.first((doc[\"head\"][\"childNodes\"]));\nif(cljs.core.truth_(temp__5720__auto___9051)){\nvar title_el_9054 = temp__5720__auto___9051;\nif(cljs.core.empty_QMARK_((title_el_9054[\"text\"]))){\nhickory.core.remove_el(title_el_9054);\n} else {\n}\n} else {\n}\n\ndoc.write(s);\n\nreturn doc;\n});\n/**\n * Parse an entire HTML document into a DOM structure that can be\n * used as input to as-hiccup or as-hickory.\n * \n * ```klipse\n *   (-> (parse \"<a style=\\\"visibility:hidden\\\">foo</a><div style=\\\"color:green\\\"><p>Hello</p></div>\")\n *  as-hiccup)\n * ```\n * \n * ```klipse\n *   (-> (parse \"<a style=\\\"visibility:hidden\\\">foo</a><div style=\\\"color:green\\\"><p>Hello</p></div>\")\n *  as-hickory)\n * ```\n * \n * \n *   \n */\nhickory.core.parse = (function hickory$core$parse(s){\nvar or__4131__auto__ = hickory.core.parse_dom_with_domparser(s);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn hickory.core.parse_dom_with_write(s);\n}\n});\n/**\n * Parse an HTML fragment (some group of tags that might be at home somewhere\n * in the tag hierarchy under <body>) into a list of DOM elements that can\n * each be passed as input to as-hiccup or as-hickory.\n */\nhickory.core.parse_fragment = (function hickory$core$parse_fragment(s){\nreturn (hickory.core.parse(s)[\"body\"][\"childNodes\"]);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","hickory/core.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$hickory.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$hickory.utils","^O","~$utils","^O","~$clojure.zip","^Q","~$zip","^Q","~$goog.string","^S","~$gstring","^S","~$cljs.core","^U","~$goog","^V"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^U","^U"],"~:form",["~#list",["~$ns","^J",["^10",["^X",["^O","~:as","^P"],["^Q","^12","^R"],["^S","^12","^T"]]]]],"~:flags",["^ ","^X",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^V","^U","^O","^Q","^S"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","hickory/core.cljs"],"~:compiled-at",1560836572221,"~:resource-name","hickory/core.cljs","~:warnings",[],"~:source","(ns hickory.core\n  (:require [hickory.utils :as utils]\n            [clojure.zip :as zip]\n            [goog.string :as gstring]))\n\n;;\n;; Protocols\n;;\n\n(defprotocol HiccupRepresentable\n  \"Objects that can be represented as Hiccup nodes implement this protocol in\n   order to make the conversion.\"\n  (as-hiccup [this]\n    \"Converts the node given into a hiccup-format data structure. The\n     node must have an implementation of the HiccupRepresentable\n     protocol; nodes created by parse or parse-fragment already do.\"))\n\n(defprotocol HickoryRepresentable\n  \"Objects that can be represented as HTML DOM node maps, similar to\n   clojure.xml, implement this protocol to make the conversion.\n\n   Each DOM node will be a map or string (for Text/CDATASections). Nodes that\n   are maps have the appropriate subset of the keys\n\n     :type     - [:comment, :document, :document-type, :element]\n     :tag      - node's tag, check :type to see if applicable\n     :attrs    - node's attributes as a map, check :type to see if applicable\n     :content  - node's child nodes, in a vector, check :type to see if\n                 applicable\"\n  (as-hickory [this]\n    \"Converts the node given into a hickory-format data structure. The\n     node must have an implementation of the HickoryRepresentable protocol;\n     nodes created by parse or parse-fragment already do.\"))\n\n(defn node-type\n  [type]\n  (aget js/Node (str type \"_NODE\")))\n\n(def Attribute (node-type \"ATTRIBUTE\"))\n(def Comment (node-type \"COMMENT\"))\n(def Document (node-type \"DOCUMENT\"))\n(def DocumentType (node-type \"DOCUMENT_TYPE\"))\n(def Element (node-type \"ELEMENT\"))\n(def Text (node-type \"TEXT\"))\n\n(defn extend-type-with-seqable\n  [t]\n  (extend-type t\n    ISeqable\n    (-seq [array] (array-seq array))))\n\n(extend-type-with-seqable js/NodeList)\n\n(when (exists? js/NamedNodeMap)\n  (extend-type-with-seqable js/NamedNodeMap))\n\n(when (exists? js/MozNamedAttrMap) ;;NamedNodeMap has been renamed on modern gecko implementations (see https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap)\n  (extend-type-with-seqable js/MozNamedAttrMap))\n\n(defn format-doctype\n  [dt]\n  (let [name (aget dt \"name\")\n        publicId (aget dt \"publicId\")\n        systemId (aget dt \"systemId\")]\n    (if (not (empty? publicId))\n      (gstring/format \"<!DOCTYPE %s PUBLIC \\\"%s\\\" \\\"%s\\\">\" name publicId systemId)\n      (str \"<!DOCTYPE \" name \">\"))))\n\n(extend-protocol HiccupRepresentable\n  object\n  (as-hiccup [this] (condp = (aget this \"nodeType\")\n                      Attribute [(utils/lower-case-keyword (aget this \"name\"))\n                                 (aget this \"value\")]\n                      Comment (str \"<!--\" (aget this \"data\") \"-->\")\n                      Document (map as-hiccup (aget this \"childNodes\"))\n                      DocumentType (format-doctype this)\n                      ;; There is an issue with the hiccup format, which is that it\n                      ;; can't quite cover all the pieces of HTML, so anything it\n                      ;; doesn't cover is thrown into a string containing the raw\n                      ;; HTML. This presents a problem because it is then never the case\n                      ;; that a string in a hiccup form should be html-escaped (except\n                      ;; in an attribute value) when rendering; it should already have\n                      ;; any escaping. Since the HTML parser quite properly un-escapes\n                      ;; HTML where it should, we have to go back and un-un-escape it\n                      ;; wherever text would have been un-escaped. We do this by\n                      ;; html-escaping the parsed contents of text nodes, and not\n                      ;; html-escaping comments, data-nodes, and the contents of\n                      ;; unescapable nodes.\n                      Element (let [tag (utils/lower-case-keyword (aget this \"tagName\"))]\n                                (into [] (concat [tag\n                                                  (into {} (map as-hiccup (aget this \"attributes\")))]\n                                                 (if (utils/unescapable-content tag)\n                                                   (map #(aget % \"wholeText\") (aget this \"childNodes\"))\n                                                   (map as-hiccup (aget this \"childNodes\"))))))\n                      Text (utils/html-escape (aget this \"wholeText\")))))\n\n(extend-protocol HickoryRepresentable\n  object\n  (as-hickory [this] (condp = (aget this \"nodeType\")\n                       Attribute [(utils/lower-case-keyword (aget this \"name\")) (aget this \"value\")]\n                       Comment {:type :comment\n                                :content [(aget this \"data\")]}\n                       Document {:type :document\n                                 :content (not-empty\n                                            (into [] (map as-hickory\n                                                          (aget this \"childNodes\"))))}\n                       DocumentType {:type :document-type\n                                     :attrs {:name (aget this \"name\")\n                                             :publicid (aget this \"publicId\")\n                                             :systemid (aget this \"systemId\")}}\n                       Element {:type :element\n                                :attrs (not-empty (into {} (map as-hickory (aget this \"attributes\"))))\n                                :tag (utils/lower-case-keyword (aget this \"tagName\"))\n                                :content (not-empty\n                                           (into [] (map as-hickory\n                                                         (aget this \"childNodes\"))))}\n                       Text (aget this \"wholeText\"))))\n\n(defn extract-doctype\n  [s]\n  ;;Starting HTML5 doctype definition can be uppercase\n  (when-let [doctype (second (or (re-find #\"<!DOCTYPE ([^>]*)>\" s)\n                                 (re-find #\"<!doctype ([^>]*)>\" s)))]\n    (re-find #\"([^\\s]*)(\\s+PUBLIC\\s+[\\\"]?([^\\\"]*)[\\\"]?\\s+[\\\"]?([^\\\"]*)[\\\"]?)?\" doctype)))\n\n(defn remove-el\n  [el]\n  (.removeChild (aget el \"parentNode\") el))\n\n(defn parse-dom-with-domparser\n  [s]\n  (if (exists? js/DOMParser)\n    (.parseFromString (js/DOMParser.) s \"text/html\")))\n\n(defn parse-dom-with-write\n  \"Parse an HTML document (or fragment) as a DOM using document.implementation.createHTMLDocument and document.write.\"\n  [s]\n  ;;See http://www.w3.org/TR/domcore/#dom-domimplementation-createhtmldocument for more details.\n  (let [doc (.createHTMLDocument js/document.implementation \"\") ;;empty title for older implementation\n        doctype-el (aget doc \"doctype\")]\n    (when-not (extract-doctype s);; Remove default doctype if parsed string does not define it.\n      (remove-el doctype-el))\n    (when-let [title-el (first (aget doc \"head\" \"childNodes\"))];; Remove default title if parsed string does not define it.\n      (when (empty? (aget title-el \"text\"))\n          (remove-el title-el)))\n    (.write doc s)\n    doc))\n\n(defn parse\n  \"Parse an entire HTML document into a DOM structure that can be\n   used as input to as-hiccup or as-hickory.\n\n```klipse\n  (-> (parse \\\"<a style=\\\\\\\"visibility:hidden\\\\\\\">foo</a><div style=\\\\\\\"color:green\\\\\\\"><p>Hello</p></div>\\\")\n    as-hiccup)\n```\n\n```klipse\n  (-> (parse \\\"<a style=\\\\\\\"visibility:hidden\\\\\\\">foo</a><div style=\\\\\\\"color:green\\\\\\\"><p>Hello</p></div>\\\")\n    as-hickory)\n```\n\n\n  \"\n  [s]\n  (or (parse-dom-with-domparser s) (parse-dom-with-write s)))\n\n(defn parse-fragment\n  \"Parse an HTML fragment (some group of tags that might be at home somewhere\n   in the tag hierarchy under <body>) into a list of DOM elements that can\n   each be passed as input to as-hiccup or as-hickory.\"\n  [s]\n  (aget (parse s) \"body\" \"childNodes\"))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["x__4433__auto__","m__4434__auto__","hickory.core/as-hiccup","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","hickory.core/HiccupRepresentable","this","hickory.core/as-hickory","hickory.core/HickoryRepresentable","hickory.core/node-type","type","js/Node","hickory.core/Attribute","hickory.core/Comment","hickory.core/Document","hickory.core/DocumentType","hickory.core/Element","hickory.core/Text","hickory.core/extend-type-with-seqable","t","cljs.core/PROTOCOL_SENTINEL","array","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","js/NodeList","js/NamedNodeMap","js/MozNamedAttrMap","hickory.core/format-doctype","dt","name","publicId","systemId","cljs.core/empty?","goog.string/format","goog.object/set","G__8978","G__8979","G__8980","pred__8982","expr__8983","js/Error","cljs.core/=","hickory.utils/lower-case-keyword","cljs.core.map.cljs$core$IFn$_invoke$arity$2","tag","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","hickory.utils/unescapable-content","p1__8975#","hickory.utils/html-escape","G__8991","G__8992","G__8993","pred__8994","expr__8995","cljs.core/not-empty","hickory.core/extract-doctype","s","temp__5720__auto__","doctype","cljs.core/second","or__4131__auto__","cljs.core/re-find","hickory.core/remove-el","el","hickory.core/parse-dom-with-domparser","js/DOMParser","hickory.core/parse-dom-with-write","doc","js/document.implementation","doctype-el","title-el","cljs.core/first","hickory.core/parse","hickory.core/parse-fragment"]]],"~:cache-keys",["~#cmap",[["~:macro","^U"],[1559826623000],["^17","goog/math/math.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^V","~$goog.array","~$goog.asserts"]]],["^17","goog/array/array.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V","^1J"]]],["^17","goog/debug/error.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V"]]],["^17","goog/dom/nodetype.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V"]]],["^17","goog/object/object.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^17","goog/math/long.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V","^1J","~$goog.reflect"]]],["^17","hickory/core.cljs"],[1547313541000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V","^U","^O","^Q","^S"]]],["^17","goog/string/internal.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V"]]],["^17","goog/functions/functions.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V"]]],["^17","goog/structs/map.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^17","goog/asserts/asserts.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^17","goog/uri/uri.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V","^1I","^1J","^S","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^17","hickory/utils.cljc"],[1547313541000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V","^U","~$clojure.string","^S"]]],["^17","goog/base.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",[]]],["^17","goog/structs/structs.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V","^1I","~$goog.object"]]],["^17","clojure/string.cljs"],[1559826623000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V","^U","^S","~$goog.string.StringBuffer"]]],["^17","goog/string/string.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V","~$goog.string.internal"]]],["^17","goog/reflect/reflect.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V"]]],["^17","clojure/zip.cljs"],[1559826623000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V","^U"]]],["^17","goog/string/stringbuffer.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V"]]],["^17","goog/iter/iter.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V","^1I","^1J","~$goog.functions","~$goog.math"]]],["^17","cljs/core.cljs"],[1559826623000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["~$goog.math.Long","~$goog.math.Integer","^S","^1W","^1I","~$goog.Uri","^1X"]]],["^17","goog/math/integer.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V"]]],["^17","goog/uri/utils.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^H",[]],"^1H",["^V","^1I","^1J","^S"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","hickory/core.cljs","^7",1,"^8",5,"^9",1,"^:",17],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"~:shadow/protocol-prefixes",["^H",["hickory$core$HickoryRepresentable$","hickory$core$HiccupRepresentable$"]],"^F",null,"^G",["^H",[]],"~:shadow/js-access-properties",["^H",["implementation"]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^Q","^S","^S","^T","^S","^U","^U","^V","^V"],"^W",["^H",["^X"]],"~:shadow/js-access-global",["^H",["document","DOMParser","MozNamedAttrMap","NamedNodeMap","Error","Node","NodeList"]],"^Y",null,"~:defs",["^ ","~$Attribute",["^ ","^I","~$hickory.core/Attribute","^6","hickory/core.cljs","^7",39,"^8",1,"^9",39,"^:",15,"^5",["^ ","^6","hickory/core.cljs","^7",39,"^8",6,"^9",39,"^:",15],"~:tag","~$any"],"~$Document",["^ ","^I","~$hickory.core/Document","^6","hickory/core.cljs","^7",41,"^8",1,"^9",41,"^:",14,"^5",["^ ","^6","hickory/core.cljs","^7",41,"^8",6,"^9",41,"^:",14],"^2:","^2;"],"~$parse-dom-with-write",["^ ","~:protocol-inline",null,"^5",["^ ","^6","hickory/core.cljs","^7",135,"^8",7,"^9",135,"^:",27,"~:arglists",["^10",["~$quote",["^10",[["~$s"]]]]],"~:doc","Parse an HTML document (or fragment) as a DOM using document.implementation.createHTMLDocument and document.write."],"^I","~$hickory.core/parse-dom-with-write","^6","hickory/core.cljs","^:",27,"~:method-params",["^10",[["~$s"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"~:variadic?",false,"^7",135,"~:ret-tag","~$js","^9",135,"~:max-fixed-arity",1,"~:fn-var",true,"^2@",["^10",["^2A",["^10",[["~$s"]]]]],"^2B","Parse an HTML document (or fragment) as a DOM using document.implementation.createHTMLDocument and document.write."],"~$HickoryRepresentable",["^ ","^5",["^ ","~:protocol-symbol",true,"^6","hickory/core.cljs","^:",34,"^8",14,"^7",18,"~:protocol-info",["^ ","~:methods",["^ ","~$as-hickory",[["~$this"]]]],"^9",18,"^2B","Objects that can be represented as HTML DOM node maps, similar to\n   clojure.xml, implement this protocol to make the conversion.\n\n   Each DOM node will be a map or string (for Text/CDATASections). Nodes that\n   are maps have the appropriate subset of the keys\n\n     :type     - [:comment, :document, :document-type, :element]\n     :tag      - node's tag, check :type to see if applicable\n     :attrs    - node's attributes as a map, check :type to see if applicable\n     :content  - node's child nodes, in a vector, check :type to see if\n                 applicable","~:jsdoc",["^10",["@interface"]]],"^2M",true,"^I","~$hickory.core/HickoryRepresentable","^6","hickory/core.cljs","^:",34,"^8",1,"^7",18,"^2N",["^ ","^2O",["^ ","^2P",[["^2Q"]]]],"~:info",null,"^9",18,"^2:","^2;","~:impls",["^H",["~$object"]],"^2B","Objects that can be represented as HTML DOM node maps, similar to\n   clojure.xml, implement this protocol to make the conversion.\n\n   Each DOM node will be a map or string (for Text/CDATASections). Nodes that\n   are maps have the appropriate subset of the keys\n\n     :type     - [:comment, :document, :document-type, :element]\n     :tag      - node's tag, check :type to see if applicable\n     :attrs    - node's attributes as a map, check :type to see if applicable\n     :content  - node's child nodes, in a vector, check :type to see if\n                 applicable","^2R",["^10",["@interface"]]],"~$parse-dom-with-domparser",["^ ","^2?",null,"^5",["^ ","^6","hickory/core.cljs","^7",130,"^8",7,"^9",130,"^:",31,"^2@",["^10",["^2A",["^10",[["~$s"]]]]]],"^I","~$hickory.core/parse-dom-with-domparser","^6","hickory/core.cljs","^:",31,"^2D",["^10",[["~$s"]]],"^2E",null,"^2F",["^10",[null,null]],"^8",1,"^2G",false,"^7",130,"^2H",["^H",["^2I","~$clj-nil"]],"^9",130,"^2J",1,"^2K",true,"^2@",["^10",["^2A",["^10",[["~$s"]]]]]],"~$extend-type-with-seqable",["^ ","^2?",null,"^5",["^ ","^6","hickory/core.cljs","^7",46,"^8",7,"^9",46,"^:",31,"^2@",["^10",["^2A",["^10",[["~$t"]]]]]],"^I","~$hickory.core/extend-type-with-seqable","^6","hickory/core.cljs","^:",31,"^2D",["^10",[["~$t"]]],"^2E",null,"^2F",["^10",[null,null]],"^8",1,"^2G",false,"^7",46,"^9",46,"^2J",1,"^2K",true,"^2@",["^10",["^2A",["^10",[["~$t"]]]]]],"~$remove-el",["^ ","^2?",null,"^5",["^ ","^6","hickory/core.cljs","^7",126,"^8",7,"^9",126,"^:",16,"^2@",["^10",["^2A",["^10",[["~$el"]]]]]],"^I","~$hickory.core/remove-el","^6","hickory/core.cljs","^:",16,"^2D",["^10",[["^31"]]],"^2E",null,"^2F",["^10",[null,null]],"^8",1,"^2G",false,"^7",126,"^2H","^2;","^9",126,"^2J",1,"^2K",true,"^2@",["^10",["^2A",["^10",[["^31"]]]]]],"~$Comment",["^ ","^I","~$hickory.core/Comment","^6","hickory/core.cljs","^7",40,"^8",1,"^9",40,"^:",13,"^5",["^ ","^6","hickory/core.cljs","^7",40,"^8",6,"^9",40,"^:",13],"^2:","^2;"],"^2P",["^ ","^2?",null,"^5",["^ ","^6","hickory/core.cljs","^7",30,"^8",4,"^9",30,"^:",14,"~:protocol","^2S","^2B","Converts the node given into a hickory-format data structure. The\n     node must have an implementation of the HickoryRepresentable protocol;\n     nodes created by parse or parse-fragment already do.","^2@",["^10",["^2A",["^10",[["^2Q"]]]]]],"^35","^2S","^I","~$hickory.core/as-hickory","^6","hickory/core.cljs","^:",14,"^2D",["^10",[["^2Q"]]],"^2E",null,"^2F",["^10",[null,null]],"^8",1,"^2G",false,"^7",18,"^2H","^2;","^9",30,"^2J",1,"^2K",true,"^2@",["^10",["^2A",["^10",[["^2Q"]]]]],"^2B","Converts the node given into a hickory-format data structure. The\n     node must have an implementation of the HickoryRepresentable protocol;\n     nodes created by parse or parse-fragment already do."],"~$Element",["^ ","^I","~$hickory.core/Element","^6","hickory/core.cljs","^7",43,"^8",1,"^9",43,"^:",13,"^5",["^ ","^6","hickory/core.cljs","^7",43,"^8",6,"^9",43,"^:",13],"^2:","^2;"],"~$extract-doctype",["^ ","^2?",null,"^5",["^ ","^6","hickory/core.cljs","^7",119,"^8",7,"^9",119,"^:",22,"^2@",["^10",["^2A",["^10",[["~$s"]]]]]],"^I","~$hickory.core/extract-doctype","^6","hickory/core.cljs","^:",22,"^2D",["^10",[["~$s"]]],"^2E",null,"^2F",["^10",[null,null]],"^8",1,"^2G",false,"^7",119,"^2H",["^H",["~$clj","~$cljs.core/IVector","^2;","~$cljs.core/MetaFn","^2Y"]],"^9",119,"^2J",1,"^2K",true,"^2@",["^10",["^2A",["^10",[["~$s"]]]]]],"~$parse-fragment",["^ ","^2?",null,"^5",["^ ","^6","hickory/core.cljs","^7",168,"^8",7,"^9",168,"^:",21,"^2@",["^10",["^2A",["^10",[["~$s"]]]]],"^2B","Parse an HTML fragment (some group of tags that might be at home somewhere\n   in the tag hierarchy under <body>) into a list of DOM elements that can\n   each be passed as input to as-hiccup or as-hickory."],"^I","~$hickory.core/parse-fragment","^6","hickory/core.cljs","^:",21,"^2D",["^10",[["~$s"]]],"^2E",null,"^2F",["^10",[null,null]],"^8",1,"^2G",false,"^7",168,"^2H","^2;","^9",168,"^2J",1,"^2K",true,"^2@",["^10",["^2A",["^10",[["~$s"]]]]],"^2B","Parse an HTML fragment (some group of tags that might be at home somewhere\n   in the tag hierarchy under <body>) into a list of DOM elements that can\n   each be passed as input to as-hiccup or as-hickory."],"~$node-type",["^ ","^2?",null,"^5",["^ ","^6","hickory/core.cljs","^7",35,"^8",7,"^9",35,"^:",16,"^2@",["^10",["^2A",["^10",[["~$type"]]]]]],"^I","~$hickory.core/node-type","^6","hickory/core.cljs","^:",16,"^2D",["^10",[["^3A"]]],"^2E",null,"^2F",["^10",[null,null]],"^8",1,"^2G",false,"^7",35,"^2H","^2;","^9",35,"^2J",1,"^2K",true,"^2@",["^10",["^2A",["^10",[["^3A"]]]]]],"~$DocumentType",["^ ","^I","~$hickory.core/DocumentType","^6","hickory/core.cljs","^7",42,"^8",1,"^9",42,"^:",18,"^5",["^ ","^6","hickory/core.cljs","^7",42,"^8",6,"^9",42,"^:",18],"^2:","^2;"],"~$as-hiccup",["^ ","^2?",null,"^5",["^ ","^6","hickory/core.cljs","^7",13,"^8",4,"^9",13,"^:",13,"^35","~$hickory.core/HiccupRepresentable","^2B","Converts the node given into a hiccup-format data structure. The\n     node must have an implementation of the HiccupRepresentable\n     protocol; nodes created by parse or parse-fragment already do.","^2@",["^10",["^2A",["^10",[["^2Q"]]]]]],"^35","^3F","^I","~$hickory.core/as-hiccup","^6","hickory/core.cljs","^:",13,"^2D",["^10",[["^2Q"]]],"^2E",null,"^2F",["^10",[null,null]],"^8",1,"^2G",false,"^7",10,"^2H","^2;","^9",13,"^2J",1,"^2K",true,"^2@",["^10",["^2A",["^10",[["^2Q"]]]]],"^2B","Converts the node given into a hiccup-format data structure. The\n     node must have an implementation of the HiccupRepresentable\n     protocol; nodes created by parse or parse-fragment already do."],"~$parse",["^ ","^2?",null,"^5",["^ ","^6","hickory/core.cljs","^7",149,"^8",7,"^9",149,"^:",12,"^2@",["^10",["^2A",["^10",[["~$s"]]]]],"^2B","Parse an entire HTML document into a DOM structure that can be\n   used as input to as-hiccup or as-hickory.\n\n```klipse\n  (-> (parse \"<a style=\\\"visibility:hidden\\\">foo</a><div style=\\\"color:green\\\"><p>Hello</p></div>\")\n    as-hiccup)\n```\n\n```klipse\n  (-> (parse \"<a style=\\\"visibility:hidden\\\">foo</a><div style=\\\"color:green\\\"><p>Hello</p></div>\")\n    as-hickory)\n```\n\n\n  "],"^I","~$hickory.core/parse","^6","hickory/core.cljs","^:",12,"^2D",["^10",[["~$s"]]],"^2E",null,"^2F",["^10",[null,null]],"^8",1,"^2G",false,"^7",149,"^2H","^2I","^9",149,"^2J",1,"^2K",true,"^2@",["^10",["^2A",["^10",[["~$s"]]]]],"^2B","Parse an entire HTML document into a DOM structure that can be\n   used as input to as-hiccup or as-hickory.\n\n```klipse\n  (-> (parse \"<a style=\\\"visibility:hidden\\\">foo</a><div style=\\\"color:green\\\"><p>Hello</p></div>\")\n    as-hiccup)\n```\n\n```klipse\n  (-> (parse \"<a style=\\\"visibility:hidden\\\">foo</a><div style=\\\"color:green\\\"><p>Hello</p></div>\")\n    as-hickory)\n```\n\n\n  "],"~$Text",["^ ","^I","~$hickory.core/Text","^6","hickory/core.cljs","^7",44,"^8",1,"^9",44,"^:",10,"^5",["^ ","^6","hickory/core.cljs","^7",44,"^8",6,"^9",44,"^:",10],"^2:","^2;"],"~$format-doctype",["^ ","^2?",null,"^5",["^ ","^6","hickory/core.cljs","^7",60,"^8",7,"^9",60,"^:",21,"^2@",["^10",["^2A",["^10",[["~$dt"]]]]]],"^I","~$hickory.core/format-doctype","^6","hickory/core.cljs","^:",21,"^2D",["^10",[["^3M"]]],"^2E",null,"^2F",["^10",[null,null]],"^8",1,"^2G",false,"^7",60,"^2H",["^H",["^2;","~$string"]],"^9",60,"^2J",1,"^2K",true,"^2@",["^10",["^2A",["^10",[["^3M"]]]]]],"~$HiccupRepresentable",["^ ","^5",["^ ","^2M",true,"^6","hickory/core.cljs","^:",33,"^8",14,"^7",10,"^2N",["^ ","^2O",["^ ","^3E",[["^2Q"]]]],"^9",10,"^2B","Objects that can be represented as Hiccup nodes implement this protocol in\n   order to make the conversion.","^2R",["^10",["@interface"]]],"^2M",true,"^I","^3F","^6","hickory/core.cljs","^:",33,"^8",1,"^7",10,"^2N",["^ ","^2O",["^ ","^3E",[["^2Q"]]]],"^2T",null,"^9",10,"^2:","^2;","^2U",["^H",["^2V"]],"^2B","Objects that can be represented as Hiccup nodes implement this protocol in\n   order to make the conversion.","^2R",["^10",["@interface"]]]],"^Z",["^ ","^U","^U"],"~:cljs.analyzer/constants",["^ ","^W",["^H",["~:element","~:content","^I","~:publicid","~:type","~:systemid","~:document-type","~:document","~:comment","~:attrs","^2:"]],"~:order",["^3U","^3S","^3Y","^3X","^3Z","^3W","^I","^3T","^3V","^2:","^3R"]],"^13",["^ ","^X",["^H",[]]],"^14",["^ "],"^15",["^V","^U","^O","^Q","^S"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1C",[["^42","~:static-fns"],true,["^42","~:elide-asserts"],true,["^42","~:optimize-constants"],null,["^42","^1:"],null,["^42","~:external-config"],null,["^42","~:tooling-config"],null,["^42","~:emit-constants"],null,["^42","~:load-tests"],false,["^42","~:infer-externs"],"~:auto",["^42","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^42","~:fn-invoke-direct"],null,["^42","~:source-map"],null]]]