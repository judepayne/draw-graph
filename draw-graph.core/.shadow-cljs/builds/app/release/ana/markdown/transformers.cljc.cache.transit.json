["^ ","~:output",["^ ","~:js","goog.provide('markdown.transformers');\nmarkdown.transformers.heading_QMARK_ = (function markdown$transformers$heading_QMARK_(text,type){\nif(cljs.core.every_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [\" \",null], null), null),cljs.core.take.cljs$core$IFn$_invoke$arity$2((4),text))){\nreturn null;\n} else {\nvar trimmed = (cljs.core.truth_(text)?clojure.string.trim(text):null);\nvar and__4120__auto__ = cljs.core.not_empty(trimmed);\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.every_QMARK_(cljs.core.PersistentHashSet.createAsIfByAssoc([type]),trimmed);\n} else {\nreturn and__4120__auto__;\n}\n}\n});\nmarkdown.transformers.h1_QMARK_ = (function markdown$transformers$h1_QMARK_(text){\nreturn markdown.transformers.heading_QMARK_(text,\"=\");\n});\nmarkdown.transformers.h2_QMARK_ = (function markdown$transformers$h2_QMARK_(text){\nreturn markdown.transformers.heading_QMARK_(text,\"-\");\n});\nmarkdown.transformers.empty_line = (function markdown$transformers$empty_line(text,p__9290){\nvar map__9291 = p__9290;\nvar map__9291__$1 = (((((!((map__9291 == null))))?(((((map__9291.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9291.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9291):map__9291);\nvar state = map__9291__$1;\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9291__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9291__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nif(cljs.core.truth_((function (){var or__4131__auto__ = code;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn codeblock;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__4131__auto__ = markdown.transformers.h1_QMARK_(text);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn markdown.transformers.h2_QMARK_(text);\n}\n})())?\"\":text),((clojure.string.blank_QMARK_(text))?cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"hr\",\"hr\",1377740067),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873)], 0)):state)], null);\n}\n});\nmarkdown.transformers.superscript = (function markdown$transformers$superscript(text,state){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar tokens = cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.contains_QMARK_,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"^\",null], null), null)),text);\nvar buf = cljs.core.PersistentVector.EMPTY;\nvar remaining = tokens;\nwhile(true){\nif(cljs.core.empty_QMARK_(remaining)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.cljs$core$IFn$_invoke$arity$1(buf),state], null);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(remaining),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"^\"], null))){\nvar G__9578 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(buf,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(\"<sup>\"),cljs.core.second(remaining),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.seq(\"</sup>\")], 0)));\nvar G__9579 = cljs.core.drop.cljs$core$IFn$_invoke$arity$2((2),remaining);\nbuf = G__9578;\nremaining = G__9579;\ncontinue;\n} else {\nvar G__9580 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(buf,cljs.core.first(remaining));\nvar G__9581 = cljs.core.rest(remaining);\nbuf = G__9580;\nremaining = G__9581;\ncontinue;\n\n}\n}\nbreak;\n}\n}\n});\nmarkdown.transformers.heading = (function markdown$transformers$heading(text,p__9313){\nvar map__9314 = p__9313;\nvar map__9314__$1 = (((((!((map__9314 == null))))?(((((map__9314.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9314.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9314):map__9314);\nvar state = map__9314__$1;\nvar buf = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9314__$1,new cljs.core.Keyword(null,\"buf\",\"buf\",-213913340));\nvar next_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9314__$1,new cljs.core.Keyword(null,\"next-line\",\"next-line\",-1187000287));\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9314__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9314__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nvar heading_anchors = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9314__$1,new cljs.core.Keyword(null,\"heading-anchors\",\"heading-anchors\",1713527866));\nif(cljs.core.truth_((function (){var or__4131__auto__ = codeblock;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn code;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(cljs.core.truth_(markdown.transformers.h1_QMARK_((function (){var or__4131__auto__ = buf;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn next_line;\n}\n})()))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<h1>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"</h1>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873),true)], null);\n} else {\nif(cljs.core.truth_(markdown.transformers.h2_QMARK_((function (){var or__4131__auto__ = buf;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn next_line;\n}\n})()))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<h2>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"</h2>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873),true)], null);\n} else {\nvar temp__5718__auto__ = markdown.common.make_heading(text,heading_anchors);\nif(cljs.core.truth_(temp__5718__auto__)){\nvar heading = temp__5718__auto__;\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [heading,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818),true)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n\n}\n}\n}\n});\nmarkdown.transformers.br = (function markdown$transformers$br(text,p__9327){\nvar map__9329 = p__9327;\nvar map__9329__$1 = (((((!((map__9329 == null))))?(((((map__9329.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9329.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9329):map__9329);\nvar state = map__9329__$1;\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9329__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9329__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",\" \"], null),cljs.core.take_last((2),text))) && (cljs.core.not((function (){var or__4131__auto__ = code;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn lists;\n}\n})()))))?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2((2),text))),\"<br />\"].join(''):text),state], null);\n});\nmarkdown.transformers.autourl_transformer = (function markdown$transformers$autourl_transformer(text,p__9332){\nvar map__9333 = p__9332;\nvar map__9333__$1 = (((((!((map__9333 == null))))?(((((map__9333.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9333.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9333):map__9333);\nvar state = map__9333__$1;\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9333__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar frozen_strings = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9333__$1,new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560));\nif(cljs.core.truth_(code)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar currently_frozen = cljs.core.volatile_BANG_(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),frozen_strings], null));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.replace(text,/<https?:\\/\\/[-A-Za-z0-9+&@#\\/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#\\/%=~_()|]>/,((function (currently_frozen,map__9333,map__9333__$1,state,code,frozen_strings){\nreturn (function (p1__9331_SHARP_){\nvar vec__9339 = markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.subs.cljs$core$IFn$_invoke$arity$3(p1__9331_SHARP_,(1),(cljs.core.count(p1__9331_SHARP_) - (1))),cljs.core.deref(currently_frozen)], 0));\nvar url = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9339,(0),null);\nvar frozen_strings__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9339,(1),null);\ncljs.core.vreset_BANG_(currently_frozen,frozen_strings__$1);\n\nreturn [\"<a href=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(url),\"\\\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(url),\"</a>\"].join('');\n});})(currently_frozen,map__9333,map__9333__$1,state,code,frozen_strings))\n),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([state,cljs.core.deref(currently_frozen)], 0))], null);\n}\n});\nmarkdown.transformers.autoemail_transformer = (function markdown$transformers$autoemail_transformer(text,state){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855).cljs$core$IFn$_invoke$arity$1(state);\n}\n})())?text:clojure.string.replace(text,/<[\\w._%+-]+@[\\w.-]+\\.[\\w]{2,4}>/,(function (p1__9342_SHARP_){\nvar encoded = (cljs.core.truth_(new cljs.core.Keyword(null,\"clojurescript\",\"clojurescript\",-299769403).cljs$core$IFn$_invoke$arity$1(state))?cljs.core.subs.cljs$core$IFn$_invoke$arity$3(p1__9342_SHARP_,(1),(cljs.core.count(p1__9342_SHARP_) - (1))):cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (c){\nif((cljs.core.rand.cljs$core$IFn$_invoke$arity$0() > 0.5)){\nvar G__9356 = \"&#x%02x;\";\nvar G__9357 = (c | (0));\nreturn (markdown.transformers._STAR_formatter_STAR_.cljs$core$IFn$_invoke$arity$2 ? markdown.transformers._STAR_formatter_STAR_.cljs$core$IFn$_invoke$arity$2(G__9356,G__9357) : markdown.transformers._STAR_formatter_STAR_.call(null,G__9356,G__9357));\n} else {\nreturn c;\n}\n}),cljs.core.subs.cljs$core$IFn$_invoke$arity$3(p1__9342_SHARP_,(1),(cljs.core.count(p1__9342_SHARP_) - (1))))));\nreturn [\"<a href=\\\"mailto:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(encoded),\"\\\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(encoded),\"</a>\"].join('');\n}))),state], null);\n});\nmarkdown.transformers.set_line_state = (function markdown$transformers$set_line_state(text,p__9361){\nvar map__9362 = p__9361;\nvar map__9362__$1 = (((((!((map__9362 == null))))?(((((map__9362.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9362.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9362):map__9362);\nvar state = map__9362__$1;\nvar inline_heading = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9362__$1,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.assoc_in(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"temp\",\"temp\",1791541284),new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818)], null),inline_heading)], null);\n});\nmarkdown.transformers.clear_line_state = (function markdown$transformers$clear_line_state(text,state){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"temp\",\"temp\",1791541284))], null);\n});\nmarkdown.transformers.paragraph_text = (function markdown$transformers$paragraph_text(last_line_empty_QMARK_,text){\nif(cljs.core.truth_((function (){var and__4120__auto__ = cljs.core.not(last_line_empty_QMARK_);\nif(and__4120__auto__){\nreturn cljs.core.not_empty(text);\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn [\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join('');\n} else {\nreturn text;\n}\n});\nmarkdown.transformers.open_paragraph = (function markdown$transformers$open_paragraph(text,p__9371){\nvar map__9375 = p__9371;\nvar map__9375__$1 = (((((!((map__9375 == null))))?(((((map__9375.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9375.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9375):map__9375);\nvar state = map__9375__$1;\nvar eof = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9375__$1,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\nvar paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9375__$1,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709));\nvar blockquote = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9375__$1,new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190));\nvar heading = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9375__$1,new cljs.core.Keyword(null,\"heading\",\"heading\",-1312171873));\nvar hr = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9375__$1,new cljs.core.Keyword(null,\"hr\",\"hr\",1377740067));\nvar temp = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9375__$1,new cljs.core.Keyword(null,\"temp\",\"temp\",1791541284));\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9375__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\nvar inline_heading = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9375__$1,new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818));\nvar last_line_empty_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9375__$1,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527));\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9375__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nif(cljs.core.truth_((function (){var and__4120__auto__ = paragraph;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn lists;\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"</p>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709))], null);\n} else {\nif(cljs.core.truth_((function (){var or__4131__auto__ = heading;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nvar or__4131__auto____$1 = inline_heading;\nif(cljs.core.truth_(or__4131__auto____$1)){\nreturn or__4131__auto____$1;\n} else {\nvar or__4131__auto____$2 = hr;\nif(cljs.core.truth_(or__4131__auto____$2)){\nreturn or__4131__auto____$2;\n} else {\nvar or__4131__auto____$3 = code;\nif(cljs.core.truth_(or__4131__auto____$3)){\nreturn or__4131__auto____$3;\n} else {\nvar or__4131__auto____$4 = lists;\nif(cljs.core.truth_(or__4131__auto____$4)){\nreturn or__4131__auto____$4;\n} else {\nreturn blockquote;\n}\n}\n}\n}\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(cljs.core.truth_(paragraph)){\nif(cljs.core.truth_((function (){var or__4131__auto__ = eof;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.empty_QMARK_(clojure.string.trim(text));\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.transformers.paragraph_text(last_line_empty_QMARK_,text)),\"</p>\"].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.paragraph_text(last_line_empty_QMARK_,text),state], null);\n}\n} else {\nif(cljs.core.truth_((function (){var and__4120__auto__ = cljs.core.not(eof);\nif(and__4120__auto__){\nvar and__4120__auto____$1 = (!(clojure.string.blank_QMARK_(text)));\nif(and__4120__auto____$1){\nvar or__4131__auto__ = new cljs.core.Keyword(null,\"inline-heading\",\"inline-heading\",-158773818).cljs$core$IFn$_invoke$arity$1(temp);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn last_line_empty_QMARK_;\n}\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<p>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),false], 0))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n\n}\n}\n}\n}\n});\nmarkdown.transformers.close_paragraph = (function markdown$transformers$close_paragraph(text,p__9400){\nvar map__9401 = p__9400;\nvar map__9401__$1 = (((((!((map__9401 == null))))?(((((map__9401.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9401.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9401):map__9401);\nvar state = map__9401__$1;\nvar next_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9401__$1,new cljs.core.Keyword(null,\"next-line\",\"next-line\",-1187000287));\nvar paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9401__$1,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709));\nif(cljs.core.truth_((function (){var and__4120__auto__ = paragraph;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"`\",\"`\",\"`\"], null),cljs.core.take_last((3),(function (){var G__9408 = next_line;\nif((G__9408 == null)){\nreturn null;\n} else {\nreturn clojure.string.trim(G__9408);\n}\n})()));\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"</p>\"].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"paragraph\",\"paragraph\",296707709))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n});\nmarkdown.transformers.paragraph = (function markdown$transformers$paragraph(text,state){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(markdown.transformers.close_paragraph,markdown.transformers.open_paragraph(text,state));\n});\nmarkdown.transformers.code = (function markdown$transformers$code(text,p__9410){\nvar map__9411 = p__9410;\nvar map__9411__$1 = (((((!((map__9411 == null))))?(((((map__9411.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9411.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9411):map__9411);\nvar state = map__9411__$1;\nvar eof = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9411__$1,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9411__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9411__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9411__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nif(cljs.core.truth_((function (){var or__4131__auto__ = lists;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn codeblock;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(cljs.core.truth_(code)){\nif(cljs.core.truth_((function (){var or__4131__auto__ = eof;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"    \",clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.take.cljs$core$IFn$_invoke$arity$2((4),text)));\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"</code></pre>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"indented-code\",\"indented-code\",-904930175),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"code\",\"code\",1586293142),new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527)], 0))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.common.escape_code(clojure.string.replace_first(text,/    /,\"\")))].join(''),state], null);\n}\n} else {\nif(cljs.core.empty_QMARK_(clojure.string.trim(text))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar num_spaces = cljs.core.count(cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,\" \"),text));\nif((num_spaces > (3))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<pre><code>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.common.escape_code(clojure.string.replace_first(text,/    /,\"\")))].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"code\",\"code\",1586293142),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"indented-code\",\"indented-code\",-904930175),true], 0))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n\n}\n}\n}\n});\nmarkdown.transformers.codeblock = (function markdown$transformers$codeblock(text,p__9426){\nvar map__9428 = p__9426;\nvar map__9428__$1 = (((((!((map__9428 == null))))?(((((map__9428.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9428.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9428):map__9428);\nvar state = map__9428__$1;\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9428__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nvar codeblock_end = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9428__$1,new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736));\nvar indented_code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9428__$1,new cljs.core.Keyword(null,\"indented-code\",\"indented-code\",-904930175));\nvar next_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9428__$1,new cljs.core.Keyword(null,\"next-line\",\"next-line\",-1187000287));\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9428__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\nvar trimmed = clojure.string.trim(text);\nvar next_line_closes_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"`\",\"`\",\"`\"], null),cljs.core.take_last((3),(function (){var G__9435 = next_line;\nif((G__9435 == null)){\nreturn null;\n} else {\nreturn clojure.string.trim(G__9435);\n}\n})()));\nif(cljs.core.truth_((function (){var and__4120__auto__ = lists;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn codeblock_end;\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"code\",\"code\",1586293142),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855),new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736)], 0))], null);\n} else {\nif(cljs.core.truth_(codeblock_end)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),true),new cljs.core.Keyword(null,\"code\",\"code\",1586293142),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855),new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736)], 0))], null);\n} else {\nif(cljs.core.truth_((function (){var and__4120__auto__ = next_line_closes_QMARK_;\nif(and__4120__auto__){\nreturn codeblock;\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.common.escape_code([cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.first(clojure.string.split.cljs$core$IFn$_invoke$arity$2(next_line,/```/))))].join(''))),\"</code></pre>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"skip-next-line?\",\"skip-next-line?\",1683617749),cljs.core.not(lists),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736),true,new cljs.core.Keyword(null,\"last-line-empty?\",\"last-line-empty?\",1279111527),cljs.core.not(lists)], 0))], null);\n} else {\nif(((cljs.core.not(indented_code)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"`\",\"`\",\"`\"], null),cljs.core.take.cljs$core$IFn$_invoke$arity$2((3),trimmed))))){\nvar vec__9442 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((3),trimmed));\nvar lang = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9442,(0),null);\nvar code = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9442,(1),null);\nvar s = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.rest(code));\nvar formatter = new cljs.core.Keyword(null,\"code-style\",\"code-style\",-2144009586).cljs$core$IFn$_invoke$arity$1(state);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<pre><code\",(cljs.core.truth_(cljs.core.not_empty(lang))?[\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1((cljs.core.truth_(formatter)?(function (){var G__9455 = clojure.string.join.cljs$core$IFn$_invoke$arity$1(lang);\nreturn (formatter.cljs$core$IFn$_invoke$arity$1 ? formatter.cljs$core$IFn$_invoke$arity$1(G__9455) : formatter.call(null,G__9455));\n})():[\"class=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.join.cljs$core$IFn$_invoke$arity$1(lang)),\"\\\"\"].join('')))].join(''):null),\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.common.escape_code(((cljs.core.empty_QMARK_(s))?s:[cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),\"\\n\"].join('')))),((next_line_closes_QMARK_)?\"</code></pre>\":null)].join(''),((next_line_closes_QMARK_)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"codeblock-end\",\"codeblock-end\",1507794736),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"skip-next-line?\",\"skip-next-line?\",1683617749),true], 0)):cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"code\",\"code\",1586293142),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855),true], 0)))], null);\n} else {\nif(cljs.core.truth_(codeblock)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.common.escape_code(text)),\"\\n\"].join(''),state], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n\n}\n}\n}\n}\n}\n});\nmarkdown.transformers.hr = (function markdown$transformers$hr(text,state){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(((((cljs.core.empty_QMARK_(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"*\",null], null), null),text))) || (cljs.core.empty_QMARK_(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"-\",null], null), null),text))) || (cljs.core.empty_QMARK_(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\" \",null,\"_\",null], null), null),text))))) && ((cljs.core.count(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [\" \",null], null), null),text)) > (2))))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"<hr/>\",cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"hr\",\"hr\",1377740067),true)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n}\n});\n/**\n * Check for blockquotes and signal to blockquote-2 function with\n *   states blockquote-start and blockquote-end so that tags can be added.\n *   This approach enables lists to be included in blockquotes.\n */\nmarkdown.transformers.blockquote_1 = (function markdown$transformers$blockquote_1(text,p__9460){\nvar map__9466 = p__9460;\nvar map__9466__$1 = (((((!((map__9466 == null))))?(((((map__9466.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9466.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9466):map__9466);\nvar state = map__9466__$1;\nvar eof = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9466__$1,new cljs.core.Keyword(null,\"eof\",\"eof\",-489063237));\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9466__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9466__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9466__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\nvar trimmed = clojure.string.trim(text);\nif(cljs.core.truth_((function (){var or__4131__auto__ = code;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn codeblock;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190).cljs$core$IFn$_invoke$arity$1(state))){\nif(cljs.core.truth_((function (){var or__4131__auto__ = eof;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.empty_QMARK_(trimmed);\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"blockquote-end\",\"blockquote-end\",1122544964),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190),false], 0))], null);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",trimmed)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?\"</p>\":null),\"<p>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true)], null);\n} else {\nif((((cljs.core.count(trimmed) >= (2))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">-\",cljs.core.subs.cljs$core$IFn$_invoke$arity$3(trimmed,(0),(2)))))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?\"</p>\":null),\"<footer>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(text,(2))),\"</footer>\"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),false)], null);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",cljs.core.subs.cljs$core$IFn$_invoke$arity$3(trimmed,(0),(1)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?null:\"<p>\"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(text,(1))),\" \"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[(cljs.core.truth_(new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682).cljs$core$IFn$_invoke$arity$1(state))?null:\"<p>\"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),\" \"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true)], null);\n\n}\n}\n}\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",cljs.core.first(text))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.rest(text))),\" \"].join(''),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"blockquote-start\",\"blockquote-start\",276074935),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190),true,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),true], 0))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n\n}\n}\n});\n/**\n * Check for change in blockquote states and add start or end tags.\n *   Closing a blockquote with a list in it is a bit more complex,\n *   as the list is not closed until the following blank line.\n */\nmarkdown.transformers.blockquote_2 = (function markdown$transformers$blockquote_2(text,p__9486){\nvar map__9487 = p__9486;\nvar map__9487__$1 = (((((!((map__9487 == null))))?(((((map__9487.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9487.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9487):map__9487);\nvar state = map__9487__$1;\nvar blockquote_start = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9487__$1,new cljs.core.Keyword(null,\"blockquote-start\",\"blockquote-start\",276074935));\nvar blockquote_end = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9487__$1,new cljs.core.Keyword(null,\"blockquote-end\",\"blockquote-end\",1122544964));\nvar blockquote_paragraph = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9487__$1,new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682));\nvar lists = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9487__$1,new cljs.core.Keyword(null,\"lists\",\"lists\",-884730684));\nvar not_in_list = ((cljs.core.not(lists)) || (cljs.core.empty_QMARK_(lists)));\nif(cljs.core.truth_(blockquote_start)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"<blockquote><p>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"blockquote-start\",\"blockquote-start\",276074935))], null);\n} else {\nif(cljs.core.truth_((function (){var and__4120__auto__ = blockquote_end;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn not_in_list;\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(text),(cljs.core.truth_(blockquote_paragraph)?\"</p>\":null),\"</blockquote>\"].join(''),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(state,new cljs.core.Keyword(null,\"blockquote\",\"blockquote\",372264190),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"blockquote-paragraph\",\"blockquote-paragraph\",1931783682),new cljs.core.Keyword(null,\"blockquote-end\",\"blockquote-end\",1122544964)], 0))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n\n}\n}\n});\nmarkdown.transformers.footer = (function markdown$transformers$footer(footnotes){\nif(cljs.core.empty_QMARK_(new cljs.core.Keyword(null,\"processed\",\"processed\",800622264).cljs$core$IFn$_invoke$arity$1(footnotes))){\nreturn \"\";\n} else {\nvar G__9509 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (footnotes__$1,p__9513){\nvar vec__9514 = p__9513;\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9514,(0),null);\nvar label = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9514,(1),null);\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(footnotes__$1),\"<li id='fn-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"'>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\" \",label))),\"<a href='#fnref\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"'>&#8617;</a></li>\"].join('');\n}),\"\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.sorted_map(),new cljs.core.Keyword(null,\"processed\",\"processed\",800622264).cljs$core$IFn$_invoke$arity$1(footnotes)));\nvar fexpr__9508 = ((function (G__9509){\nreturn (function (p1__9500_SHARP_){\nreturn [\"<ol class='footnotes'>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__9500_SHARP_),\"</ol>\"].join('');\n});})(G__9509))\n;\nreturn fexpr__9508(G__9509);\n}\n});\n/**\n * Given a line of metadata header text return either a list containing a parsed\n *   and normalizd key and the original text of the value, or if no header is found\n *   (this is a continuation or new value from a pervious header key) simply\n *   return the text. If a blank or invalid line is found return nil.\n */\nmarkdown.transformers.parse_metadata_line = (function markdown$transformers$parse_metadata_line(line){\nif(cljs.core.truth_(line)){\nvar vec__9542 = cljs.core.re_matches(/^([0-9A-Za-z_-]*):(.*)$/,line);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9542,(0),null);\nvar key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9542,(1),null);\nvar val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9542,(2),null);\nvar vec__9545 = cljs.core.re_matches(/^    (.*)$/,line);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9545,(0),null);\nvar next_val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9545,(1),null);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(clojure.string.trim(line),\"\")){\nif(cljs.core.truth_(key)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case(key)),val], null);\n} else {\nif(cljs.core.truth_(next_val)){\nreturn line;\n} else {\nreturn null;\n}\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given a list of maps which contain a single key/value, flatten them all into\n *   a single map with all the leading spaces removed. If an empty list is provided\n *   then return nil.\n */\nmarkdown.transformers.flatten_metadata = (function markdown$transformers$flatten_metadata(metadata){\nif((cljs.core.count(metadata) > (0))){\nvar acc = cljs.core.PersistentArrayMap.EMPTY;\nvar remain = metadata;\nvar prev_key = null;\nwhile(true){\nif((!(cljs.core.empty_QMARK_(remain)))){\nvar data = cljs.core.first(remain);\nvar vec__9561 = ((cljs.core.sequential_QMARK_(data))?data:new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [prev_key,data], null));\nvar key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9561,(0),null);\nvar val = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9561,(1),null);\nvar prev_val = cljs.core.get.cljs$core$IFn$_invoke$arity$3(acc,key,cljs.core.PersistentVector.EMPTY);\nvar postfix = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",\" \"], null),cljs.core.take_last((2),val)))?\"\\n\":\"\");\nvar norm_val = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.trim(val)),postfix].join('');\nvar new_val = (((!(cljs.core.empty_QMARK_(norm_val))))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(prev_val,norm_val):prev_val);\nvar G__9887 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([acc,cljs.core.PersistentArrayMap.createAsIfByAssoc([key,new_val])], 0));\nvar G__9888 = cljs.core.rest(remain);\nvar G__9889 = key;\nacc = G__9887;\nremain = G__9888;\nprev_key = G__9889;\ncontinue;\n} else {\nreturn acc;\n}\nbreak;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given a sequence of lines from a markdown document, attempt to parse a\n *   metadata header if it exists.\n */\nmarkdown.transformers.parse_metadata_headers = (function markdown$transformers$parse_metadata_headers(lines_seq){\n\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,line){\nvar temp__5718__auto__ = markdown.transformers.parse_metadata_line(line);\nif(cljs.core.truth_(temp__5718__auto__)){\nvar parsed = temp__5718__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(acc,parsed);\n} else {\nreturn cljs.core.reduced(markdown.transformers.flatten_metadata(acc));\n}\n}),cljs.core.PersistentVector.EMPTY,lines_seq);\n});\nmarkdown.transformers.transformer_vector = cljs.core.PersistentVector.fromArray([markdown.transformers.set_line_state,markdown.transformers.empty_line,markdown.common.inhibit,markdown.common.escape_inhibit_separator,markdown.transformers.code,markdown.transformers.codeblock,markdown.common.escaped_chars,markdown.common.inline_code,markdown.transformers.autoemail_transformer,markdown.transformers.autourl_transformer,markdown.links.image,markdown.links.image_reference_link,markdown.links.link,markdown.links.implicit_reference_link,markdown.links.reference_link,markdown.links.footnote_link,markdown.transformers.hr,markdown.transformers.blockquote_1,markdown.lists.li,markdown.transformers.heading,markdown.transformers.blockquote_2,markdown.common.italics,markdown.common.bold_italic,markdown.common.em,markdown.common.strong,markdown.common.bold,markdown.common.strikethrough,markdown.transformers.superscript,markdown.tables.table,markdown.transformers.paragraph,markdown.transformers.br,markdown.common.thaw_strings,markdown.common.dashes,markdown.transformers.clear_line_state], true);\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/transformers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",26],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.transformers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^O","~$string","^O","~$markdown.links","^Q","~$markdown.lists","^R","~$markdown.tables","^S","~$markdown.common","^T","~$cljs.core","^U","~$goog","^V"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$italics","^T","~$separator","^T","~$make-heading","^T","~$dashes","^T","~$thaw-strings","^T","~$inhibit","^T","~$implicit-reference-link","^Q","~$bold","^T","~$freeze-string","^T","~$footnote-link","^Q","~$escape-code","^T","~$table","^S","~$strong","^T","~$li","^R","~$reference-link","^Q","~$image-reference-link","^Q","~$em","^T","~$escaped-chars","^T","~$inline-code","^T","~$strikethrough","^T","~$bold-italic","^T","~$link","^Q","~$escape-inhibit-separator","^T","~$image","^Q"],"~:require-macros",["^ ","^U","^U"],"~:form",["~#list",["~$ns","^J",["^1H",["^X",["^O","~:as","^P"],["^Q","~:refer",["^1C","^1E","^1<","^1=","^14","^17"]],["^R","^1K",["^1;"]],["^S","^1K",["^19"]],["^T","^1K",["^18","^1?","^16","^[","^12","^1:","^15","^1B","^1>","^Z","^1A","^1@","^1D","^13","^10","^11"]]]]]],"~:flags",["^ ","^X",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^V","^U","^O","^Q","^R","^S","^T"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","markdown/transformers.cljc"],"~:compiled-at",1560836572580,"~:resource-name","markdown/transformers.cljc","~:warnings",[],"~:source","(ns markdown.transformers\n  (:require [clojure.string :as string]\n            [markdown.links\n             :refer [link\n                     image\n                     reference-link\n                     image-reference-link\n                     implicit-reference-link\n                     footnote-link]]\n            [markdown.lists :refer [li]]\n            [markdown.tables :refer [table]]\n            [markdown.common\n             :refer\n             [escape-code\n              escaped-chars\n              freeze-string\n              separator\n              thaw-strings\n              strong\n              bold\n              bold-italic\n              em\n              italics\n              strikethrough\n              inline-code\n              escape-inhibit-separator\n              inhibit\n              make-heading\n              dashes]]))\n\n(declare ^:dynamic *formatter*)\n\n(defn heading? [text type]\n  (when-not (every? #{\\space} (take 4 text))\n    (let [trimmed (if text (string/trim text))]\n      (and (not-empty trimmed) (every? #{type} trimmed)))))\n\n(defn h1? [text]\n  (heading? text \\=))\n\n(defn h2? [text]\n  (heading? text \\-))\n\n(defn empty-line [text {:keys [code codeblock] :as state}]\n  (if (or code codeblock)\n    [text state]\n    [(if (or (h1? text) (h2? text)) \"\" text)\n     (if (string/blank? text) (dissoc state :hr :heading) state)]))\n\n(defn superscript [text state]\n  (if (:code state)\n    [text state]\n    (let [tokens (partition-by (partial contains? #{\\^ \\space}) text)]\n      (loop [buf       []\n             remaining tokens]\n        (cond\n          (empty? remaining)\n          [(string/join buf) state]\n\n          (= (first remaining) [\\^])\n          (recur (into buf (concat (seq \"<sup>\") (second remaining) (seq \"</sup>\")))\n                 (drop 2 remaining))\n\n          :default\n          (recur (into buf (first remaining)) (rest remaining)))))))\n\n(defn heading [text {:keys [buf next-line code codeblock heading-anchors] :as state}]\n  (cond\n    (or codeblock code)\n    [text state]\n\n    (h1? (or buf next-line))\n    [(str \"<h1>\" text \"</h1>\") (assoc state :heading true)]\n\n    (h2? (or buf next-line))\n    [(str \"<h2>\" text \"</h2>\") (assoc state :heading true)]\n\n    :else\n    (if-let [heading (make-heading text heading-anchors)]\n      [heading (assoc state :inline-heading true)]\n      [text state])))\n\n(defn br [text {:keys [code lists] :as state}]\n  [(if (and (= [\\space \\space] (take-last 2 text))\n            (not (or code lists)))\n     (str (apply str (drop-last 2 text)) \"<br />\")\n     text)\n   state])\n\n(defn autourl-transformer [text {:keys [code frozen-strings] :as state}]\n  (if code\n    [text state]\n    (let [currently-frozen (volatile! {:frozen-strings frozen-strings})]\n      [(string/replace\n         text\n         #\"<https?://[-A-Za-z0-9+&@#/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#/%=~_()|]>\"\n         #(let [[url frozen-strings] (freeze-string (subs % 1 (dec (count %))) @currently-frozen)]\n            (vreset! currently-frozen frozen-strings)\n            (str \"<a href=\\\"\" url \"\\\">\" url \"</a>\")))\n       (merge state @currently-frozen)])))\n\n(defn autoemail-transformer [text state]\n  [(if (or (:code state) (:codeblock state))\n     text\n     (string/replace\n       text\n       #\"<[\\w._%+-]+@[\\w.-]+\\.[\\w]{2,4}>\"\n       #(let [encoded (if (:clojurescript state)\n                        (subs % 1 (dec (count %)))\n                        (->> (subs % 1 (dec (count %)))\n                             (map (fn [c] (if (> (rand) 0.5) (*formatter* \"&#x%02x;\" (int c)) c)))\n                             (apply str)))]\n          (str \"<a href=\\\"mailto:\" encoded \"\\\">\" encoded \"</a>\"))))\n   state])\n\n(defn set-line-state [text {:keys [inline-heading] :as state}]\n  [text\n   (-> state\n       (dissoc :inline-heading)\n       (assoc-in [:temp :inline-heading] inline-heading))])\n\n(defn clear-line-state [text state]\n  [text (dissoc state :temp)])\n\n(defn paragraph-text [last-line-empty? text]\n  (if (and (not last-line-empty?) (not-empty text))\n    (str \" \" text)\n    text))\n\n(defn open-paragraph\n  [text {:keys [eof heading inline-heading temp hr code lists blockquote paragraph last-line-empty?] :as state}]\n  (cond\n    (and paragraph lists)\n    [(str \"</p>\" text) (dissoc state :paragraph)]\n\n    (or heading inline-heading hr code lists blockquote)\n    [text state]\n\n    paragraph\n    (if (or eof (empty? (string/trim text)))\n      [(str (paragraph-text last-line-empty? text) \"</p>\") (dissoc state :paragraph)]\n      [(paragraph-text last-line-empty? text) state])\n\n    (and (not eof) (not (string/blank? text)) (or (:inline-heading temp) last-line-empty?))\n    [(str \"<p>\" text) (assoc state :paragraph true :last-line-empty? false)]\n\n    :default\n    [text state]))\n\n(defn close-paragraph [text {:keys [next-line paragraph] :as state}]\n  (if (and paragraph (= [\\` \\` \\`] (take-last 3 (some-> next-line string/trim))))\n    [(str text \"</p>\") (dissoc state :paragraph)]\n    [text state]))\n\n(defn paragraph [text state]\n  (apply close-paragraph (open-paragraph text state)))\n\n(defn code [text {:keys [eof lists code codeblock] :as state}]\n  (cond\n    (or lists codeblock)\n    [text state]\n\n    code\n    (if (or eof (not= \"    \" (string/join (take 4 text))))\n      [(str \"</code></pre>\" text) (dissoc state :indented-code :code :last-line-empty?)]\n      [(str \"\\n\" (escape-code (string/replace-first text #\"    \" \"\"))) state])\n\n    (empty? (string/trim text))\n    [text state]\n\n    :default\n    (let [num-spaces (count (take-while (partial = \\space) text))]\n      (if (> num-spaces 3)\n        [(str \"<pre><code>\" (escape-code (string/replace-first text #\"    \" \"\")))\n         (assoc state :code true :indented-code true)]\n        [text state]))))\n\n(defn codeblock [text {:keys [codeblock codeblock-end indented-code next-line lists] :as state}]\n  (let [trimmed (string/trim text)\n        next-line-closes? (= [\\` \\` \\`] (take-last 3 (some-> next-line string/trim)))]\n    (cond\n      (and lists codeblock-end)\n      [\"\" (dissoc state :code :codeblock :codeblock-end)]\n\n      codeblock-end\n      [text (-> state\n                (assoc :last-line-empty? true)\n                (dissoc :code :codeblock :codeblock-end))]\n\n      (and next-line-closes? codeblock)\n      [(str (escape-code (str text \"\\n\" (apply str (first (string/split next-line #\"```\"))))) \"</code></pre>\")\n       (assoc state :skip-next-line? (not lists)\n                    :codeblock-end true\n                    :last-line-empty? (not lists))]\n\n      (and\n        (not indented-code)\n        (= [\\` \\` \\`] (take 3 trimmed)))\n      (let [[lang code] (split-with (partial not= \\space) (drop 3 trimmed))\n            s         (apply str (rest code))\n            formatter (:code-style state)]\n        [(str \"<pre><code\" (if (not-empty lang)\n                             (str \" \"\n                                  (if formatter\n                                    (formatter (string/join lang))\n                                    (str \"class=\\\"\" (string/join lang) \"\\\"\")))) \">\"\n              (escape-code (if (empty? s) s (str s \"\\n\")))\n              (when next-line-closes? \"</code></pre>\"))\n         (if next-line-closes?\n           (assoc state :codeblock-end true :skip-next-line? true)\n           (assoc state :code true :codeblock true))])\n\n      codeblock\n      [(str (escape-code text) \"\\n\") state]\n\n      :default\n      [text state])))\n\n(defn hr [text state]\n  (if (:code state)\n    [text state]\n    (if (and\n          (or (empty? (drop-while #{\\* \\space} text))\n              (empty? (drop-while #{\\- \\space} text))\n              (empty? (drop-while #{\\_ \\space} text)))\n          (> (count (remove #{\\space} text)) 2))\n      [(str \"<hr/>\") (assoc state :hr true)]\n      [text state])))\n\n(defn blockquote-1\n  \"Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes.\"\n  [text {:keys [eof code codeblock lists] :as state}]\n  (let [trimmed (string/trim text)]\n    (cond\n      (or code codeblock)\n      [text state]\n\n      (:blockquote state)\n      (cond (or eof (empty? trimmed))\n            [text (assoc state :blockquote-end true :blockquote false)]\n\n            (= \">\" trimmed)\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<p>\") (assoc state :blockquote-paragraph true)]\n\n            (and (>= (count trimmed) 2) (= \">-\" (subs trimmed 0 2)))\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<footer>\" (subs text 2) \"</footer>\") (assoc state :blockquote-paragraph false)]\n\n            (= \">\" (subs trimmed 0 1))\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") (subs text 1) \" \") (assoc state :blockquote-paragraph true)]\n\n            :default\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") text \" \") (assoc state :blockquote-paragraph true)])\n\n      :default\n      (if (= \\> (first text))\n        [(str (string/join (rest text)) \" \")\n         (assoc state :blockquote-start true :blockquote true :blockquote-paragraph true)]\n        [text state]))))\n\n(defn blockquote-2\n  \"Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line.\"\n  [text {:keys [blockquote-start blockquote-end blockquote-paragraph lists] :as state}]\n  (let [not-in-list (or (not lists) (empty? lists))]\n    (cond blockquote-start\n          [(str \"<blockquote><p>\" text)\n           (dissoc state :blockquote-start)]\n\n          (and blockquote-end not-in-list)\n          [(str text (when blockquote-paragraph \"</p>\") \"</blockquote>\")\n           (dissoc state :blockquote :blockquote-paragraph :blockquote-end )]\n\n          :default\n          [text state])))\n\n(defn footer [footnotes]\n  (if (empty? (:processed footnotes))\n    \"\"\n    (->> (:processed footnotes)\n         (into (sorted-map))\n         (reduce\n           (fn [footnotes [id label]]\n             (str footnotes\n                  \"<li id='fn-\" id \"'>\"\n                  (apply str (interpose \" \" label))\n                  \"<a href='#fnref\" id \"'>&#8617;</a></li>\"))\n           \"\")\n         (#(str \"<ol class='footnotes'>\" % \"</ol>\")))))\n\n(defn parse-metadata-line\n  \"Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil.\"\n  [line]\n  (when line\n    (let [[_ key val] (re-matches #\"^([0-9A-Za-z_-]*):(.*)$\" line)\n          [_ next-val] (re-matches #\"^    (.*)$\" line)]\n      (when (not= (string/trim line) \"\")\n        (cond\n          key [(keyword (string/lower-case key)) val]\n          next-val line)))))\n\n(defn flatten-metadata\n  \"Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil.\"\n  [metadata]\n  (when (pos? (count metadata))\n    (loop [acc      {}\n           remain   metadata\n           prev-key nil]\n      (if (not (empty? remain))\n        (let [data     (first remain)\n              [key val] (if (sequential? data) data [prev-key data])\n              prev-val (get acc key [])\n              postfix  (if (= [\\space \\space] (take-last 2 val)) \"\\n\" \"\")\n              norm-val (str (string/trim val) postfix)\n              new-val  (if-not (empty? norm-val)\n                         (conj prev-val norm-val)\n                         prev-val)]\n          (recur (merge acc {key new-val}) (rest remain) key))\n        acc))))\n\n(defn parse-metadata-headers\n  \"Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists.\"\n  [lines-seq]\n  {:pre [(sequential? lines-seq)\n         (every? string? lines-seq)]}\n  (reduce\n    (fn [acc line]\n      (if-let [parsed (parse-metadata-line line)]\n        (conj acc parsed)\n        (reduced (flatten-metadata acc))))\n    [] lines-seq))\n\n(def transformer-vector\n  [set-line-state\n   empty-line\n   inhibit\n   escape-inhibit-separator\n   code\n   codeblock\n   escaped-chars\n   inline-code\n   autoemail-transformer\n   autourl-transformer\n   image\n   image-reference-link\n   link\n   implicit-reference-link\n   reference-link\n   footnote-link\n   hr\n   blockquote-1\n   li\n   heading\n   blockquote-2\n   italics\n   bold-italic\n   em\n   strong\n   bold\n   strikethrough\n   superscript\n   table\n   paragraph\n   br\n   thaw-strings\n   dashes\n   clear-line-state])\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["markdown.transformers/heading?","text","type","cljs.core/every?","cljs.core.take.cljs$core$IFn$_invoke$arity$2","trimmed","clojure.string/trim","and__4120__auto__","cljs.core/not-empty","markdown.transformers/h1?","markdown.transformers/h2?","p__9290","map__9291","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","markdown.transformers/empty-line","code","codeblock","state","or__4131__auto__","clojure.string/blank?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","markdown.transformers/superscript","tokens","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/contains?","buf","remaining","cljs.core/empty?","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/seq","cljs.core/second","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","p__9313","map__9314","markdown.transformers/heading","next-line","heading-anchors","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","temp__5718__auto__","heading","markdown.common/make-heading","p__9327","map__9329","markdown.transformers/br","lists","cljs.core/take-last","cljs.core/not","cljs.core/str","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2","p__9332","map__9333","markdown.transformers/autourl-transformer","frozen-strings","currently-frozen","cljs.core/volatile!","p1__9331#","clojure.string/replace","vec__9339","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","url","cljs.core/deref","markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","cljs.core/vreset!","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","markdown.transformers/autoemail-transformer","p1__9342#","encoded","cljs.core.map.cljs$core$IFn$_invoke$arity$2","c","cljs.core.rand.cljs$core$IFn$_invoke$arity$0","G__9356","G__9357","markdown.transformers/*formatter*","p__9361","map__9362","markdown.transformers/set-line-state","inline-heading","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc-in","markdown.transformers/clear-line-state","markdown.transformers/paragraph-text","last-line-empty?","p__9371","map__9375","markdown.transformers/open-paragraph","eof","temp","hr","blockquote","paragraph","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__9400","map__9401","markdown.transformers/close-paragraph","G__9408","markdown.transformers/paragraph","p__9410","map__9411","markdown.transformers/code","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","markdown.common/escape-code","clojure.string/replace-first","num-spaces","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/=","p__9426","map__9428","markdown.transformers/codeblock","codeblock-end","indented-code","next-line-closes?","G__9435","clojure.string.split.cljs$core$IFn$_invoke$arity$2","vec__9442","lang","cljs.core/split-with","cljs.core/not=","s","formatter","G__9455","markdown.transformers/hr","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__9460","map__9466","markdown.transformers/blockquote-1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","p__9486","map__9487","markdown.transformers/blockquote-2","blockquote-start","blockquote-end","blockquote-paragraph","not-in-list","markdown.transformers/footer","footnotes","cljs.core/sorted-map","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__9513","vec__9514","id","label","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","G__9509","fexpr__9508","p1__9500#","markdown.transformers/parse-metadata-line","line","vec__9542","vec__9545","_","key","val","cljs.core/re-matches","next-val","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","clojure.string/lower-case","markdown.transformers/flatten-metadata","metadata","acc","remain","prev-key","vec__9561","data","cljs.core/sequential?","prev-val","cljs.core.get.cljs$core$IFn$_invoke$arity$3","postfix","norm-val","new-val","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","markdown.transformers/parse-metadata-headers","lines-seq","parsed","cljs.core/reduced","markdown.transformers/transformer-vector","markdown.common/inhibit","markdown.common/escape-inhibit-separator","markdown.common/escaped-chars","markdown.common/inline-code","markdown.links/image","markdown.links/image-reference-link","markdown.links/link","markdown.links/implicit-reference-link","markdown.links/reference-link","markdown.links/footnote-link","markdown.lists/li","markdown.common/italics","markdown.common/bold-italic","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.tables/table","markdown.common/thaw-strings","markdown.common/dashes"]]],"~:cache-keys",["~#cmap",[["~:macro","^U"],[1559826623000],["^1P","goog/math/math.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^V","~$goog.array","~$goog.asserts"]]],["^1P","goog/array/array.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","^27"]]],["^1P","goog/debug/error.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V"]]],["^1P","markdown/transformers.cljc"],[1547313541000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","^U","^O","^Q","^R","^S","^T"]]],["^1P","goog/dom/nodetype.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V"]]],["^1P","markdown/common.cljc"],[1547313541000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","^U","^O"]]],["^1P","goog/object/object.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^1P","goog/math/long.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","^27","~$goog.reflect"]]],["^1P","goog/string/internal.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V"]]],["^1P","goog/functions/functions.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V"]]],["^1P","goog/structs/map.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1P","goog/asserts/asserts.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1P","goog/uri/uri.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","^26","^27","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1P","markdown/tables.cljc"],[1547313541000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","^U","^O"]]],["^1P","goog/base.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",[]]],["^1P","goog/structs/structs.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","^26","~$goog.object"]]],["^1P","markdown/lists.cljc"],[1547313541000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","^U","^O","^T"]]],["^1P","clojure/string.cljs"],[1559826623000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","^U","^2>","~$goog.string.StringBuffer"]]],["^1P","goog/string/string.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","~$goog.string.internal"]]],["^1P","goog/reflect/reflect.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V"]]],["^1P","goog/string/stringbuffer.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V"]]],["^1P","goog/iter/iter.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","^26","^27","~$goog.functions","~$goog.math"]]],["^1P","cljs/core.cljs"],[1559826623000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["~$goog.math.Long","~$goog.math.Integer","^2>","^2D","^26","~$goog.Uri","^2E"]]],["^1P","goog/math/integer.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V"]]],["^1P","markdown/links.cljc"],[1547313541000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","^U","^O","^T"]]],["^1P","goog/uri/utils.js"],[1560546089000,"^22",["^ ","^23",null,"^24",["^H",[]],"^25",["^V","^26","^27","^2>"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/transformers.cljc","^7",1,"^8",5,"^9",1,"^:",26],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^R","^S","^S","^T","^T","^U","^U","^V","^V"],"^W",["^H",["^X"]],"^Y",["^ ","^Z","^T","^[","^T","^10","^T","^11","^T","^12","^T","^13","^T","^14","^Q","^15","^T","^16","^T","^17","^Q","^18","^T","^19","^S","^1:","^T","^1;","^R","^1<","^Q","^1=","^Q","^1>","^T","^1?","^T","^1@","^T","^1A","^T","^1B","^T","^1C","^Q","^1D","^T","^1E","^Q"],"~:defs",["^ ","~$h2?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",41,"^8",7,"^9",41,"^:",10,"~:arglists",["^1H",["~$quote",["^1H",[["~$text"]]]]]],"^I","~$markdown.transformers/h2?","^6","markdown/transformers.cljc","^:",10,"~:method-params",["^1H",[["^2R"]]],"~:protocol-impl",null,"~:arglists-meta",["^1H",[null,null]],"^8",1,"~:variadic?",false,"^7",41,"~:ret-tag",["^H",[null,"~$boolean","~$clj-nil"]],"^9",41,"~:max-fixed-arity",1,"~:fn-var",true,"^2P",["^1H",["^2Q",["^1H",[["^2R"]]]]]],"~$*formatter*",["^ ","^5",["^ ","^6","markdown/transformers.cljc","^7",31,"^8",20,"^9",31,"^:",31,"~:dynamic",true,"~:declared",true],"^I","~$markdown.transformers/*formatter*","^6","markdown/transformers.cljc","^:",31,"^8",1,"^32",true,"^7",31,"^33",true,"^9",31],"~$paragraph",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",155,"^8",7,"^9",155,"^:",16,"^2P",["^1H",["^2Q",["^1H",[["^2R","~$state"]]]]]],"^I","~$markdown.transformers/paragraph","^6","markdown/transformers.cljc","^:",16,"^2T",["^1H",[["^2R","^36"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",155,"^2X","~$any","^9",155,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R","^36"]]]]]],"~$close-paragraph",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",150,"^8",7,"^9",150,"^:",22,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","~:keys",["~$next-line","^35"],"^1J","^36"]]]]]]],"^I","~$markdown.transformers/close-paragraph","^6","markdown/transformers.cljc","^:",22,"^2T",["^1H",[["^2R","~$p__9400"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",150,"^2X","~$cljs.core/IVector","^9",150,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3;","^35"],"^1J","^36"]]]]]]],"~$blockquote-1",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",230,"^8",7,"^9",230,"^:",19,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["~$eof","~$code","~$codeblock","~$lists"],"^1J","^36"]]]]]],"~:doc","Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes."],"^I","~$markdown.transformers/blockquote-1","^6","markdown/transformers.cljc","^:",19,"^2T",["^1H",[["^2R","~$p__9460"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",230,"^2X","^3>","^9",230,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3@","^3A","^3B","^3C"],"^1J","^36"]]]]]],"^3D","Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes."],"~$heading",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",67,"^8",7,"^9",67,"^:",14,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["~$buf","^3;","^3A","^3B","~$heading-anchors"],"^1J","^36"]]]]]]],"^I","~$markdown.transformers/heading","^6","markdown/transformers.cljc","^:",14,"^2T",["^1H",[["^2R","~$p__9313"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",67,"^2X","^3>","^9",67,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3H","^3;","^3A","^3B","^3I"],"^1J","^36"]]]]]]],"~$superscript",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",50,"^8",7,"^9",50,"^:",18,"^2P",["^1H",["^2Q",["^1H",[["^2R","^36"]]]]]],"^I","~$markdown.transformers/superscript","^6","markdown/transformers.cljc","^:",18,"^2T",["^1H",[["^2R","^36"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",50,"^2X","^3>","^9",50,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R","^36"]]]]]],"~$autourl-transformer",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",90,"^8",7,"^9",90,"^:",26,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3A","~$frozen-strings"],"^1J","^36"]]]]]]],"^I","~$markdown.transformers/autourl-transformer","^6","markdown/transformers.cljc","^:",26,"^2T",["^1H",[["^2R","~$p__9332"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",90,"^2X","^3>","^9",90,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3A","^3O"],"^1J","^36"]]]]]]],"~$h1?",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",38,"^8",7,"^9",38,"^:",10,"^2P",["^1H",["^2Q",["^1H",[["^2R"]]]]]],"^I","~$markdown.transformers/h1?","^6","markdown/transformers.cljc","^:",10,"^2T",["^1H",[["^2R"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",38,"^2X",["^H",[null,"^2Y","^2Z"]],"^9",38,"^2[",1,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R"]]]]]],"^3B",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",178,"^8",7,"^9",178,"^:",16,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3B","~$codeblock-end","~$indented-code","^3;","^3C"],"^1J","^36"]]]]]]],"^I","~$markdown.transformers/codeblock","^6","markdown/transformers.cljc","^:",16,"^2T",["^1H",[["^2R","~$p__9426"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",178,"^2X","^3>","^9",178,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3B","^3T","^3U","^3;","^3C"],"^1J","^36"]]]]]]],"~$flatten-metadata",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",307,"^8",7,"^9",307,"^:",23,"^2P",["^1H",["^2Q",["^1H",[["~$metadata"]]]]],"^3D","Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil."],"^I","~$markdown.transformers/flatten-metadata","^6","markdown/transformers.cljc","^:",23,"^2T",["^1H",[["^3Y"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",307,"^2X",["^H",["^38","^2Z"]],"^9",307,"^2[",1,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^3Y"]]]]],"^3D","Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil."],"~$hr",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",219,"^8",7,"^9",219,"^:",9,"^2P",["^1H",["^2Q",["^1H",[["^2R","^36"]]]]]],"^I","~$markdown.transformers/hr","^6","markdown/transformers.cljc","^:",9,"^2T",["^1H",[["^2R","^36"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",219,"^2X","^3>","^9",219,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R","^36"]]]]]],"~$transformer-vector",["^ ","^I","~$markdown.transformers/transformer-vector","^6","markdown/transformers.cljc","^7",341,"^8",1,"^9",341,"^:",24,"^5",["^ ","^6","markdown/transformers.cljc","^7",341,"^8",6,"^9",341,"^:",24],"~:tag","^3>"],"~$autoemail-transformer",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",102,"^8",7,"^9",102,"^:",28,"^2P",["^1H",["^2Q",["^1H",[["^2R","^36"]]]]]],"^I","~$markdown.transformers/autoemail-transformer","^6","markdown/transformers.cljc","^:",28,"^2T",["^1H",[["^2R","^36"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",102,"^2X","^3>","^9",102,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R","^36"]]]]]],"~$parse-metadata-line",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",293,"^8",7,"^9",293,"^:",26,"^2P",["^1H",["^2Q",["^1H",[["~$line"]]]]],"^3D","Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil."],"^I","~$markdown.transformers/parse-metadata-line","^6","markdown/transformers.cljc","^:",26,"^2T",["^1H",[["^47"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",293,"^2X",["^H",[null,"^3>","^2Z"]],"^9",293,"^2[",1,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^47"]]]]],"^3D","Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil."],"~$blockquote-2",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",262,"^8",7,"^9",262,"^:",19,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["~$blockquote-start","~$blockquote-end","~$blockquote-paragraph","^3C"],"^1J","^36"]]]]]],"^3D","Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line."],"^I","~$markdown.transformers/blockquote-2","^6","markdown/transformers.cljc","^:",19,"^2T",["^1H",[["^2R","~$p__9486"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",262,"^2X","^3>","^9",262,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^4:","^4;","^4<","^3C"],"^1J","^36"]]]]]],"^3D","Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line."],"~$empty-line",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",44,"^8",7,"^9",44,"^:",17,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3A","^3B"],"^1J","^36"]]]]]]],"^I","~$markdown.transformers/empty-line","^6","markdown/transformers.cljc","^:",17,"^2T",["^1H",[["^2R","~$p__9290"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",44,"^2X","^3>","^9",44,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3A","^3B"],"^1J","^36"]]]]]]],"~$open-paragraph",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",130,"^8",7,"^9",130,"^:",21,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3@","^3G","~$inline-heading","~$temp","^3[","^3A","^3C","~$blockquote","^35","~$last-line-empty?"],"^1J","^36"]]]]]]],"^I","~$markdown.transformers/open-paragraph","^6","markdown/transformers.cljc","^:",21,"^2T",["^1H",[["^2R","~$p__9371"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",130,"^2X","^3>","^9",130,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3@","^3G","^4C","^4D","^3[","^3A","^3C","^4E","^35","^4F"],"^1J","^36"]]]]]]],"~$footer",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",279,"^8",7,"^9",279,"^:",13,"^2P",["^1H",["^2Q",["^1H",[["~$footnotes"]]]]]],"^I","~$markdown.transformers/footer","^6","markdown/transformers.cljc","^:",13,"^2T",["^1H",[["^4J"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",279,"^2X","^P","^9",279,"^2[",1,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^4J"]]]]]],"~$heading?",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",33,"^8",7,"^9",33,"^:",15,"^2P",["^1H",["^2Q",["^1H",[["^2R","~$type"]]]]]],"^I","~$markdown.transformers/heading?","^6","markdown/transformers.cljc","^:",15,"^2T",["^1H",[["^2R","^4M"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",33,"^2X",["^H",[null,"^2Y","^2Z"]],"^9",33,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R","^4M"]]]]]],"~$set-line-state",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",116,"^8",7,"^9",116,"^:",21,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^4C"],"^1J","^36"]]]]]]],"^I","~$markdown.transformers/set-line-state","^6","markdown/transformers.cljc","^:",21,"^2T",["^1H",[["^2R","~$p__9361"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",116,"^2X","^3>","^9",116,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^4C"],"^1J","^36"]]]]]]],"~$clear-line-state",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",122,"^8",7,"^9",122,"^:",23,"^2P",["^1H",["^2Q",["^1H",[["^2R","^36"]]]]]],"^I","~$markdown.transformers/clear-line-state","^6","markdown/transformers.cljc","^:",23,"^2T",["^1H",[["^2R","^36"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",122,"^2X","^3>","^9",122,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R","^36"]]]]]],"^3A",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",158,"^8",7,"^9",158,"^:",11,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3@","^3C","^3A","^3B"],"^1J","^36"]]]]]]],"^I","~$markdown.transformers/code","^6","markdown/transformers.cljc","^:",11,"^2T",["^1H",[["^2R","~$p__9410"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",158,"^2X","^3>","^9",158,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3@","^3C","^3A","^3B"],"^1J","^36"]]]]]]],"~$parse-metadata-headers",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",328,"^8",7,"^9",328,"^:",29,"^2P",["^1H",["^2Q",["^1H",[["~$lines-seq"]]]]],"^3D","Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists."],"^I","~$markdown.transformers/parse-metadata-headers","^6","markdown/transformers.cljc","^:",29,"^2T",["^1H",[["^4W"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",328,"^2X",["^H",[null,"^38"]],"^9",328,"^2[",1,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^4W"]]]]],"^3D","Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists."],"~$br",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",83,"^8",7,"^9",83,"^:",9,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3A","^3C"],"^1J","^36"]]]]]]],"^I","~$markdown.transformers/br","^6","markdown/transformers.cljc","^:",9,"^2T",["^1H",[["^2R","~$p__9327"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",83,"^2X","^3>","^9",83,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^2R",["^ ","^3:",["^3A","^3C"],"^1J","^36"]]]]]]],"~$paragraph-text",["^ ","^2O",null,"^5",["^ ","^6","markdown/transformers.cljc","^7",125,"^8",7,"^9",125,"^:",21,"^2P",["^1H",["^2Q",["^1H",[["^4F","^2R"]]]]]],"^I","~$markdown.transformers/paragraph-text","^6","markdown/transformers.cljc","^:",21,"^2T",["^1H",[["^4F","^2R"]]],"^2U",null,"^2V",["^1H",[null,null]],"^8",1,"^2W",false,"^7",125,"^2X",["^H",[null,"^P"]],"^9",125,"^2[",2,"^30",true,"^2P",["^1H",["^2Q",["^1H",[["^4F","^2R"]]]]]]],"^1F",["^ ","^U","^U"],"~:cljs.analyzer/constants",["^ ","^W",["^H",["~:next-line","~:codeblock","~:indented-code","~:blockquote-paragraph","~:hr","~:temp","~:lists","~:buf","~:blockquote-end","~:clojurescript","~:inline-heading","~:else","~:last-line-empty?","~:default","~:frozen-strings","~:code-style","~:codeblock-end","~:skip-next-line?","~:code","~:blockquote-start","~:processed","~:heading-anchors","~:eof","~:paragraph","~:blockquote","~:heading"]],"~:order",["^5E","^54","^57","^5L","^5@","^5:","^53","^5H","^5>","^5=","^59","^5A","^5<","^58","^5I","^5J","^5K","^5?","^55","^5C","^5D","^5B","^5;","^56","^5F","^5G"]],"^1L",["^ ","^X",["^H",[]]],"^1M",["^ "],"^1N",["^V","^U","^O","^Q","^R","^S","^T"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^20",[["^5P","~:static-fns"],true,["^5P","~:elide-asserts"],true,["^5P","~:optimize-constants"],null,["^5P","^1S"],null,["^5P","~:external-config"],null,["^5P","~:tooling-config"],null,["^5P","~:emit-constants"],null,["^5P","~:load-tests"],false,["^5P","~:infer-externs"],"~:auto",["^5P","^1U"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^5P","~:fn-invoke-direct"],null,["^5P","~:source-map"],null]]]