["^ ","~:output",["^ ","~:js","goog.provide('markdown.common');\nmarkdown.common._STAR_inhibit_separator_STAR_ = null;\nmarkdown.common.escape_delimiter = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$((254))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$((491)))].join('');\nmarkdown.common.gen_token = (function markdown$common$gen_token(n){\nreturn [markdown.common.escape_delimiter,cljs.core.str.cljs$core$IFn$_invoke$arity$1(n),markdown.common.escape_delimiter].join('');\n});\n/**\n * Freezes an output string.  Converts to a placeholder token and puts that into the output.\n *   Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n *   So that it can be unfrozen later.\n */\nmarkdown.common.freeze_string = (function markdown$common$freeze_string(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___9003 = arguments.length;\nvar i__4731__auto___9004 = (0);\nwhile(true){\nif((i__4731__auto___9004 < len__4730__auto___9003)){\nargs__4736__auto__.push((arguments[i__4731__auto___9004]));\n\nvar G__9005 = (i__4731__auto___9004 + (1));\ni__4731__auto___9004 = G__9005;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nmarkdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar state = cljs.core.last(args);\nvar token = markdown.common.gen_token(cljs.core.count(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state)));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [token,cljs.core.assoc_in(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),token], null),cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.flatten(cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(args))))], null);\n});\n\nmarkdown.common.freeze_string.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nmarkdown.common.freeze_string.cljs$lang$applyTo = (function (seq8905){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8905));\n});\n\n/**\n * Recursively replaces the frozen strings in the output with the original text.\n */\nmarkdown.common.thaw_string = (function markdown$common$thaw_string(text,state){\nwhile(true){\nvar temp__5718__auto__ = cljs.core.re_seq(cljs.core.re_pattern([markdown.common.escape_delimiter,\"\\\\d+\",markdown.common.escape_delimiter].join('')),text);\nif(cljs.core.truth_(temp__5718__auto__)){\nvar matches = temp__5718__auto__;\nvar G__9006 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (text,state,matches,temp__5718__auto__){\nreturn (function (s,r){\nreturn clojure.string.replace(s,cljs.core.re_pattern(r),((function (text,state,matches,temp__5718__auto__){\nreturn (function (p1__8911_SHARP_){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state),p1__8911_SHARP_,p1__8911_SHARP_);\n});})(text,state,matches,temp__5718__auto__))\n);\n});})(text,state,matches,temp__5718__auto__))\n,text,matches);\nvar G__9007 = cljs.core.update.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),((function (text,state,matches,temp__5718__auto__){\nreturn (function (p1__8912_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,p1__8912_SHARP_,matches);\n});})(text,state,matches,temp__5718__auto__))\n);\ntext = G__9006;\nstate = G__9007;\ncontinue;\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\nbreak;\n}\n});\n/**\n * Terminally encoded strings are ones that we've determined should no longer be processed or evaluated\n */\nmarkdown.common.thaw_strings = (function markdown$common$thaw_strings(text,state){\nif((!(cljs.core.empty_QMARK_(new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state))))){\nreturn markdown.common.thaw_string(text,state);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n});\nmarkdown.common.escape_code = (function markdown$common$escape_code(s){\nreturn clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(s,/&/,\"&amp;\"),/\\*/,\"&#42;\"),/\\^/,\"&#94;\"),/\\_/,\"&#95;\"),/\\~/,\"&#126;\"),/\\</,\"&lt;\"),/\\>/,\"&gt;\"),/\\[/,\"&#91;\"),/\\]/,\"&#93;\"),/\\(/,\"&#40;\"),/\\)/,\"&#41;\"),/\\\"/,\"&quot;\");\n});\nmarkdown.common.escaped_chars = (function markdown$common$escaped_chars(text,state){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855).cljs$core$IFn$_invoke$arity$1(state);\n}\n})())?text:clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(text,/\\\\\\\\/,\"&#92;\"),/\\\\`/,\"&#8216;\"),/\\\\\\*/,\"&#42;\"),/\\\\_/,\"&#95;\"),/\\\\\\{/,\"&#123;\"),/\\\\\\}/,\"&#125;\"),/\\\\\\[/,\"&#91;\"),/\\\\\\]/,\"&#93;\"),/\\\\\\(/,\"&#40;\"),/\\\\\\)/,\"&#41;\"),/\\\\#/,\"&#35;\"),/\\\\\\+/,\"&#43;\"),/\\\\-/,\"&#45;\"),/\\\\\\./,\"&#46;\"),/\\\\!/,\"&#33;\")),state], null);\n});\n/**\n * Return a transformer to\n * - find all the chunks of the string delimited by the `separator',\n * - wrap the output with the `open' and `close' markers, and\n * - apply the `transformer' to the text inside the chunk.\n */\nmarkdown.common.make_separator = (function markdown$common$make_separator(var_args){\nvar G__8935 = arguments.length;\nswitch (G__8935) {\ncase 3:\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmarkdown.common.make_separator.cljs$core$IFn$_invoke$arity$3 = (function (separator,open,close){\nreturn markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(separator,open,close,cljs.core.identity);\n});\n\nmarkdown.common.make_separator.cljs$core$IFn$_invoke$arity$4 = (function (separator,open,close,transformer){\nvar separator__$1 = cljs.core.seq(separator);\nreturn ((function (separator__$1){\nreturn (function (text,state){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar out = cljs.core.PersistentVector.EMPTY;\nvar buf = cljs.core.PersistentVector.EMPTY;\nvar tokens = cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,cljs.core.first(separator__$1)),cljs.core.seq(text));\nvar cur_state = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576),false);\nwhile(true){\nif(cljs.core.empty_QMARK_(tokens)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.into.cljs$core$IFn$_invoke$arity$2((cljs.core.truth_(new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576).cljs$core$IFn$_invoke$arity$1(cur_state))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(out,separator__$1):out),buf)),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cur_state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576))], null);\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576).cljs$core$IFn$_invoke$arity$1(cur_state))){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(tokens),separator__$1)){\nvar vec__8962 = (((transformer === cljs.core.identity))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [buf,cur_state], null):(function (){var vec__8966 = (function (){var G__8970 = clojure.string.join.cljs$core$IFn$_invoke$arity$1(buf);\nvar G__8971 = cur_state;\nreturn (transformer.cljs$core$IFn$_invoke$arity$2 ? transformer.cljs$core$IFn$_invoke$arity$2(G__8970,G__8971) : transformer.call(null,G__8970,G__8971));\n})();\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8966,(0),null);\nvar new_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8966,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.seq(s),new_state], null);\n})());\nvar new_buf = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8962,(0),null);\nvar new_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8962,(1),null);\nvar G__9075 = cljs.core.vec(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,cljs.core.seq(open),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new_buf,cljs.core.seq(close)], 0)));\nvar G__9076 = cljs.core.PersistentVector.EMPTY;\nvar G__9077 = cljs.core.rest(tokens);\nvar G__9078 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576),false);\nout = G__9075;\nbuf = G__9076;\ntokens = G__9077;\ncur_state = G__9078;\ncontinue;\n} else {\nvar G__9086 = out;\nvar G__9087 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(buf,cljs.core.first(tokens));\nvar G__9088 = cljs.core.rest(tokens);\nvar G__9089 = cur_state;\nout = G__9086;\nbuf = G__9087;\ntokens = G__9088;\ncur_state = G__9089;\ncontinue;\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(tokens),separator__$1)){\nvar G__9091 = out;\nvar G__9092 = buf;\nvar G__9093 = cljs.core.rest(tokens);\nvar G__9094 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cur_state,new cljs.core.Keyword(null,\"found-token\",\"found-token\",113525576),true);\nout = G__9091;\nbuf = G__9092;\ntokens = G__9093;\ncur_state = G__9094;\ncontinue;\n} else {\nvar G__9095 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(out,cljs.core.first(tokens));\nvar G__9096 = buf;\nvar G__9097 = cljs.core.rest(tokens);\nvar G__9098 = cur_state;\nout = G__9095;\nbuf = G__9096;\ntokens = G__9097;\ncur_state = G__9098;\ncontinue;\n\n}\n}\n}\nbreak;\n}\n}\n});\n;})(separator__$1))\n});\n\nmarkdown.common.make_separator.cljs$lang$maxFixedArity = 4;\n\nmarkdown.common.escape_code_transformer = (function markdown$common$escape_code_transformer(text,state){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.common.escape_code(text),state], null);\n});\nmarkdown.common.separator = (function markdown$common$separator(escape_QMARK_,text,open,close,separator,state){\nvar fexpr__8972 = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(separator,open,close,(cljs.core.truth_(escape_QMARK_)?markdown.common.escape_code_transformer:cljs.core.identity));\nreturn (fexpr__8972.cljs$core$IFn$_invoke$arity$2 ? fexpr__8972.cljs$core$IFn$_invoke$arity$2(text,state) : fexpr__8972.call(null,text,state));\n});\nmarkdown.common.strong = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"**\",\"<strong>\",\"</strong>\");\nmarkdown.common.bold_italic = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"***\",\"<b><i>\",\"</i></b>\");\nmarkdown.common.bold = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"__\",\"<b>\",\"</b>\");\nmarkdown.common.em = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"*\",\"<em>\",\"</em>\");\nmarkdown.common.italics = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"_\",\"<i>\",\"</i>\");\nmarkdown.common.strikethrough = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3(\"~~\",\"<del>\",\"</del>\");\nmarkdown.common.inline_code = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(\"`\",\"<code>\",\"</code>\",markdown.common.escape_code_transformer);\nmarkdown.common.inhibit = (function markdown$common$inhibit(text,state){\nif(cljs.core.truth_(markdown.common._STAR_inhibit_separator_STAR_)){\nvar fexpr__8974 = markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4(markdown.common._STAR_inhibit_separator_STAR_,\"\",\"\",markdown.common.freeze_string);\nreturn (fexpr__8974.cljs$core$IFn$_invoke$arity$2 ? fexpr__8974.cljs$core$IFn$_invoke$arity$2(text,state) : fexpr__8974.call(null,text,state));\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n}\n});\nmarkdown.common.escape_inhibit_separator = (function markdown$common$escape_inhibit_separator(text,state){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_(markdown.common._STAR_inhibit_separator_STAR_)?clojure.string.replace(text,clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(markdown.common._STAR_inhibit_separator_STAR_,markdown.common._STAR_inhibit_separator_STAR_)),clojure.string.join.cljs$core$IFn$_invoke$arity$1(markdown.common._STAR_inhibit_separator_STAR_)):text),state], null);\n});\nmarkdown.common.heading_text = (function markdown$common$heading_text(text){\nreturn clojure.string.trim(clojure.string.replace(clojure.string.replace(text,/^([ ]+)?[#]+/,\"\"),/[#]+$/,\"\"));\n});\nmarkdown.common.heading_level = (function markdown$common$heading_level(text){\nvar num_hashes = cljs.core.count(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__8976_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\" \",p1__8976_SHARP_);\n}),cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__8977_SHARP_){\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"#\",p1__8977_SHARP_)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\" \",p1__8977_SHARP_)));\n}),cljs.core.seq(text))));\nif((num_hashes > (0))){\nreturn num_hashes;\n} else {\nreturn null;\n}\n});\nmarkdown.common.make_heading = (function markdown$common$make_heading(text,heading_anchors){\nvar temp__5720__auto__ = markdown.common.heading_level(text);\nif(cljs.core.truth_(temp__5720__auto__)){\nvar heading = temp__5720__auto__;\nvar text__$1 = markdown.common.heading_text(text);\nreturn [\"<h\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(heading),(cljs.core.truth_(heading_anchors)?[\" id=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.replace(clojure.string.lower_case(text__$1),\" \",\"&#95;\")),\"\\\"\"].join(''):null),\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(text__$1),\"</h\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(heading),\">\"].join('');\n} else {\nreturn null;\n}\n});\nmarkdown.common.dashes = (function markdown$common$dashes(text,state){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_((function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"code\",\"code\",1586293142).cljs$core$IFn$_invoke$arity$1(state);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855).cljs$core$IFn$_invoke$arity$1(state);\n}\n})())?text:clojure.string.replace(clojure.string.replace(text,/\\-\\-\\-/,\"&mdash;\"),/\\-\\-/,\"&ndash;\")),state], null);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/common.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.common","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^O","~$string","^O","~$cljs.core","^Q","~$goog","^R"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^Q","^Q"],"~:form",["~#list",["~$ns","^J",["^X",["^T",["^O","~:as","^P"]]]]],"~:flags",["^ ","^T",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^R","^Q","^O"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","markdown/common.cljc"],"~:compiled-at",1560836572258,"~:resource-name","markdown/common.cljc","~:warnings",[],"~:source","(ns markdown.common\n  (:require [clojure.string :as string]))\n\n(declare ^{:dynamic true} *substring*)\n\n(def ^:dynamic *inhibit-separator* nil)\n\n(def escape-delimiter (str (char 254) (char 491)))\n\n(defn gen-token [n]\n  (str escape-delimiter n escape-delimiter))\n\n(defn freeze-string\n  \"Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later.\"\n  [& args]\n  (let [state (last args)\n        token (gen-token (count (:frozen-strings state)))]\n    [token (assoc-in state\n                     [:frozen-strings token]\n                     (reduce str (flatten (drop-last args))))]))\n\n(defn thaw-string\n  \"Recursively replaces the frozen strings in the output with the original text.\"\n  [text state]\n  (if-let [matches (re-seq (re-pattern (str escape-delimiter \"\\\\d+\" escape-delimiter)) text)]\n    (recur\n      (reduce\n        (fn [s r]\n          (string/replace s (re-pattern r) #(get (:frozen-strings state) % %)))\n        text matches)\n      (update state :frozen-strings #(apply dissoc % matches)))\n    [text state]))\n\n(defn thaw-strings\n  \"Terminally encoded strings are ones that we've determined should no longer be processed or evaluated\"\n  [text state]\n  (if-not (empty? (:frozen-strings state))\n    (thaw-string text state)\n    [text state]))\n\n(defn escape-code [s]\n  (-> s\n      (string/replace #\"&\" \"&amp;\")\n      (string/replace #\"\\*\" \"&#42;\")\n      (string/replace #\"\\^\" \"&#94;\")\n      (string/replace #\"\\_\" \"&#95;\")\n      (string/replace #\"\\~\" \"&#126;\")\n      (string/replace #\"\\<\" \"&lt;\")\n      (string/replace #\"\\>\" \"&gt;\")\n      ;(string/replace #\"\\/\" \"&frasl;\") ;screws up ClojureScript compiling\n      (string/replace #\"\\[\" \"&#91;\")\n      (string/replace #\"\\]\" \"&#93;\")\n      (string/replace #\"\\(\" \"&#40;\")\n      (string/replace #\"\\)\" \"&#41;\")\n      (string/replace #\"\\\"\" \"&quot;\")))\n\n(defn escaped-chars [text state]\n  [(if (or (:code state) (:codeblock state))\n     text\n     (-> text\n         (string/replace #\"\\\\\\\\\" \"&#92;\")\n         (string/replace #\"\\\\`\" \"&#8216;\")\n         (string/replace #\"\\\\\\*\" \"&#42;\")\n         (string/replace #\"\\\\_\" \"&#95;\")\n         (string/replace #\"\\\\\\{\" \"&#123;\")\n         (string/replace #\"\\\\\\}\" \"&#125;\")\n         (string/replace #\"\\\\\\[\" \"&#91;\")\n         (string/replace #\"\\\\\\]\" \"&#93;\")\n         (string/replace #\"\\\\\\(\" \"&#40;\")\n         (string/replace #\"\\\\\\)\" \"&#41;\")\n         (string/replace #\"\\\\#\" \"&#35;\")\n         (string/replace #\"\\\\\\+\" \"&#43;\")\n         (string/replace #\"\\\\-\" \"&#45;\")\n         (string/replace #\"\\\\\\.\" \"&#46;\")\n         (string/replace #\"\\\\!\" \"&#33;\")))\n   state])\n\n(defn make-separator\n  \"Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk.\"\n  ([separator open close]\n   (make-separator separator open close identity))\n  ([separator open close transformer]\n   (let [separator (seq separator)]  ;; allow char seq or string\n     (fn [text state]\n       (if (:code state)\n         [text state]\n         (loop [out       []\n                buf       []\n                tokens    (partition-by (partial = (first separator)) (seq text))\n                cur-state (assoc state :found-token false)]\n           (cond\n             (empty? tokens)\n             [(string/join (into (if (:found-token cur-state) (into out separator) out) buf))\n              (dissoc cur-state :found-token)]\n\n             (:found-token cur-state)\n             (if (= (first tokens) separator)\n               (let [[new-buf new-state]\n                     (if (identical? transformer identity)\n                       ;; Skip the buf->string->buf conversions in the common\n                       ;; case.\n                       [buf cur-state]\n                       (let [[s new-state] (transformer (string/join buf) cur-state)]\n                         [(seq s) new-state]))]\n                 (recur (vec (concat out (seq open) new-buf (seq close)))\n                        []\n                        (rest tokens)\n                        (assoc new-state :found-token false)))\n               (recur out\n                      (into buf (first tokens))\n                      (rest tokens)\n                      cur-state))\n\n             (= (first tokens) separator)\n             (recur out buf (rest tokens) (assoc cur-state :found-token true))\n\n             :default\n             (recur (into out (first tokens)) buf (rest tokens) cur-state))))))))\n\n(defn escape-code-transformer [text state]\n  [(escape-code text) state])\n\n;; Not used any more internally; kept around just in case third party code\n;; depends on this.\n(defn separator [escape? text open close separator state]\n  ((make-separator separator open close (if escape? escape-code-transformer identity))\n   text state))\n\n(def strong (make-separator \"**\" \"<strong>\" \"</strong>\"))\n\n(def bold-italic (make-separator \"***\" \"<b><i>\" \"</i></b>\"))\n\n(def bold (make-separator \"__\" \"<b>\" \"</b>\"))\n\n(def em (make-separator \"*\" \"<em>\" \"</em>\"))\n\n(def italics (make-separator \"_\" \"<i>\" \"</i>\"))\n\n(def strikethrough (make-separator \"~~\" \"<del>\" \"</del>\"))\n\n(def inline-code (make-separator \"`\" \"<code>\" \"</code>\" escape-code-transformer))\n\n(defn inhibit [text state]\n  (if *inhibit-separator*\n    ((make-separator *inhibit-separator* \"\" \"\" freeze-string)\n     text state)\n    [text state]))\n\n(defn escape-inhibit-separator [text state]\n  [(if *inhibit-separator*\n     (string/replace text\n                     (string/join (concat *inhibit-separator* *inhibit-separator*))\n                     (string/join *inhibit-separator*))\n     text)\n   state])\n\n(defn heading-text [text]\n  (-> (clojure.string/replace text #\"^([ ]+)?[#]+\" \"\")\n      (clojure.string/replace #\"[#]+$\" \"\")\n      string/trim))\n\n(defn heading-level [text]\n  (let [num-hashes (count (filter #(not= \\space %) (take-while #(or (= \\# %) (= \\space %)) (seq text))))]\n    (if (pos? num-hashes) num-hashes)))\n\n(defn make-heading [text heading-anchors]\n  (when-let [heading (heading-level text)]\n    (let [text (heading-text text)]\n      ;; We do not need to process the id string, HTML5 ids can contain anything except the space character.\n      ;; (https://www.w3.org/TR/html5/dom.html#the-id-attribute)\n      (str \"<h\" heading (when heading-anchors (str \" id=\\\"\" (-> text string/lower-case (string/replace \" \" \"&#95;\")) \"\\\"\")) \">\"\n           text \"</h\" heading \">\"))))\n\n(defn dashes [text state]\n  [(if (or (:code state) (:codeblock state))\n     text\n     (-> text\n         (string/replace #\"\\-\\-\\-\" \"&mdash;\")\n         (string/replace #\"\\-\\-\" \"&ndash;\")))\n   state])\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["markdown.common/*inhibit-separator*","markdown.common/escape-delimiter","cljs.core/char","markdown.common/gen-token","n","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","markdown.common/freeze-string","seq8905","self__4718__auto__","cljs.core/seq","args","state","cljs.core/last","token","cljs.core/count","cljs.core/assoc-in","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core/flatten","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1","markdown.common/thaw-string","text","temp__5718__auto__","matches","cljs.core/re-seq","cljs.core/re-pattern","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","s","r","p1__8911#","clojure.string/replace","cljs.core.get.cljs$core$IFn$_invoke$arity$3","p1__8912#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","markdown.common/thaw-strings","cljs.core/empty?","markdown.common/escape-code","markdown.common/escaped-chars","or__4131__auto__","G__8935","markdown.common/make-separator","js/Error","separator","open","close","markdown.common.make_separator.cljs$core$IFn$_invoke$arity$4","cljs.core/identity","transformer","out","buf","tokens","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/=","cljs.core/first","cur-state","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","vec__8962","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","new-buf","new-state","vec__8966","G__8970","G__8971","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/rest","markdown.common/escape-code-transformer","markdown.common/separator","escape?","fexpr__8972","markdown.common/strong","markdown.common.make_separator.cljs$core$IFn$_invoke$arity$3","markdown.common/bold-italic","markdown.common/bold","markdown.common/em","markdown.common/italics","markdown.common/strikethrough","markdown.common/inline-code","markdown.common/inhibit","fexpr__8974","markdown.common/escape-inhibit-separator","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","markdown.common/heading-text","clojure.string/trim","markdown.common/heading-level","num-hashes","p1__8976#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","p1__8977#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","markdown.common/make-heading","heading-anchors","temp__5720__auto__","heading","clojure.string/lower-case","markdown.common/dashes"]]],"~:cache-keys",["~#cmap",[["~:macro","^Q"],[1559826623000],["^13","goog/math/math.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^R","~$goog.array","~$goog.asserts"]]],["^13","goog/array/array.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^1F"]]],["^13","goog/debug/error.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","goog/dom/nodetype.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","markdown/common.cljc"],[1547313541000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^Q","^O"]]],["^13","goog/object/object.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^13","goog/math/long.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^1F","~$goog.reflect"]]],["^13","goog/string/internal.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","goog/functions/functions.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","goog/structs/map.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^13","goog/asserts/asserts.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^13","goog/uri/uri.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^1E","^1F","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^13","goog/base.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",[]]],["^13","goog/structs/structs.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^1E","~$goog.object"]]],["^13","clojure/string.cljs"],[1559826623000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^Q","^1M","~$goog.string.StringBuffer"]]],["^13","goog/string/string.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","~$goog.string.internal"]]],["^13","goog/reflect/reflect.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","goog/string/stringbuffer.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","goog/iter/iter.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^1E","^1F","~$goog.functions","~$goog.math"]]],["^13","cljs/core.cljs"],[1559826623000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["~$goog.math.Long","~$goog.math.Integer","^1M","^1S","^1E","~$goog.Uri","^1T"]]],["^13","goog/math/integer.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","goog/uri/utils.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^1E","^1F","^1M"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/common.cljc","^7",1,"^8",5,"^9",1,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^R"],"^S",["^H",["^T"]],"~:shadow/js-access-global",["^H",["Error"]],"^U",null,"~:defs",["^ ","~$italics",["^ ","^I","~$markdown.common/italics","^6","markdown/common.cljc","^7",142,"^8",1,"^9",142,"^:",13,"^5",["^ ","^6","markdown/common.cljc","^7",142,"^8",6,"^9",142,"^:",13],"~:tag","~$any"],"~$separator",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/common.cljc","^7",130,"^8",7,"^9",130,"^:",16,"~:arglists",["^X",["~$quote",["^X",[["~$escape?","~$text","~$open","~$close","^26","~$state"]]]]]],"^I","~$markdown.common/separator","^6","markdown/common.cljc","^:",16,"~:method-params",["^X",[["^2:","^2;","^2<","^2=","^26","^2>"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^8",1,"~:variadic?",false,"^7",130,"~:ret-tag","^25","^9",130,"~:max-fixed-arity",6,"~:fn-var",true,"^28",["^X",["^29",["^X",[["^2:","^2;","^2<","^2=","^26","^2>"]]]]]],"~$make-heading",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",171,"^8",7,"^9",171,"^:",19,"^28",["^X",["^29",["^X",[["^2;","~$heading-anchors"]]]]]],"^I","~$markdown.common/make-heading","^6","markdown/common.cljc","^:",19,"^2@",["^X",[["^2;","^2H"]]],"^2A",null,"^2B",["^X",[null,null]],"^8",1,"^2C",false,"^7",171,"^2D",["^H",["^P","~$clj-nil"]],"^9",171,"^2E",2,"^2F",true,"^28",["^X",["^29",["^X",[["^2;","^2H"]]]]]],"~$*substring*",["^ ","^5",["^ ","^6","markdown/common.cljc","^7",4,"^8",27,"^9",4,"^:",38,"~:dynamic",true,"~:declared",true],"^I","~$markdown.common/*substring*","^6","markdown/common.cljc","^:",38,"^8",1,"^2L",true,"^7",4,"^2M",true,"^9",4],"~$dashes",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",179,"^8",7,"^9",179,"^:",13,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]]],"^I","~$markdown.common/dashes","^6","markdown/common.cljc","^:",13,"^2@",["^X",[["^2;","^2>"]]],"^2A",null,"^2B",["^X",[null,null]],"^8",1,"^2C",false,"^7",179,"^2D","~$cljs.core/IVector","^9",179,"^2E",2,"^2F",true,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]]],"~$thaw-strings",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",36,"^8",7,"^9",36,"^:",19,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]],"~:doc","Terminally encoded strings are ones that we've determined should no longer be processed or evaluated"],"^I","~$markdown.common/thaw-strings","^6","markdown/common.cljc","^:",19,"^2@",["^X",[["^2;","^2>"]]],"^2A",null,"^2B",["^X",[null,null]],"^8",1,"^2C",false,"^7",36,"^2D","^2Q","^9",36,"^2E",2,"^2F",true,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]],"^2S","Terminally encoded strings are ones that we've determined should no longer be processed or evaluated"],"~$escape-delimiter",["^ ","^I","~$markdown.common/escape-delimiter","^6","markdown/common.cljc","^7",8,"^8",1,"^9",8,"^:",22,"^5",["^ ","^6","markdown/common.cljc","^7",8,"^8",6,"^9",8,"^:",22],"^24","^P"],"~$inhibit",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",148,"^8",7,"^9",148,"^:",14,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]]],"^I","~$markdown.common/inhibit","^6","markdown/common.cljc","^:",14,"^2@",["^X",[["^2;","^2>"]]],"^2A",null,"^2B",["^X",[null,null]],"^8",1,"^2C",false,"^7",148,"^2D",["^H",["^2Q","^25"]],"^9",148,"^2E",2,"^2F",true,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]]],"~$heading-text",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",162,"^8",7,"^9",162,"^:",19,"^28",["^X",["^29",["^X",[["^2;"]]]]]],"^I","~$markdown.common/heading-text","^6","markdown/common.cljc","^:",19,"^2@",["^X",[["^2;"]]],"^2A",null,"^2B",["^X",[null,null]],"^8",1,"^2C",false,"^7",162,"^2D","^25","^9",162,"^2E",1,"^2F",true,"^28",["^X",["^29",["^X",[["^2;"]]]]]],"~$*inhibit-separator*",["^ ","^5",["^ ","^6","markdown/common.cljc","^7",6,"^8",16,"^9",6,"^:",35,"^2L",true],"^I","~$markdown.common/*inhibit-separator*","^6","markdown/common.cljc","^:",35,"^8",1,"^2L",true,"^7",6,"^9",6,"^24","^2J"],"~$bold",["^ ","^I","~$markdown.common/bold","^6","markdown/common.cljc","^7",138,"^8",1,"^9",138,"^:",10,"^5",["^ ","^6","markdown/common.cljc","^7",138,"^8",6,"^9",138,"^:",10],"^24","^25"],"~$freeze-string",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",13,"^8",7,"^9",13,"^:",20,"^28",["^X",["^29",["^X",[["~$&","~$args"]]]]],"^2S","Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later.","~:top-fn",["^ ","^2C",true,"~:fixed-arity",0,"^2E",0,"^2@",[["^X",["^34"]]],"^28",["^X",[["~$&","^34"]]],"^2B",["^X",[null]]]],"^I","~$markdown.common/freeze-string","^6","markdown/common.cljc","^:",20,"^35",["^ ","^2C",true,"^36",0,"^2E",0,"^2@",[["^X",["^34"]]],"^28",["^X",[["~$&","^34"]]],"^2B",["^X",[null]]],"^2@",[["^X",["^34"]]],"^2A",null,"^36",0,"^2B",["^X",[null]],"^8",1,"^2C",true,"~:methods",[["^ ","^36",0,"^2C",true,"^24","^2Q"]],"^7",13,"^2D","^25","^9",13,"^2E",0,"^2F",true,"^28",["^X",[["~$&","^34"]]],"^2S","Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later."],"~$thaw-string",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",24,"^8",7,"^9",24,"^:",18,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]],"^2S","Recursively replaces the frozen strings in the output with the original text."],"^I","~$markdown.common/thaw-string","^6","markdown/common.cljc","^:",18,"^2@",["^X",[["^2;","^2>"]]],"^2A",null,"^2B",["^X",[null,null]],"^8",1,"^2C",false,"^7",24,"^2D","^2Q","^9",24,"^2E",2,"^2F",true,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]],"^2S","Recursively replaces the frozen strings in the output with the original text."],"~$make-separator",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",80,"^8",7,"^9",80,"^:",21,"^28",["^X",["^29",["^X",[["^26","^2<","^2="],["^26","^2<","^2=","~$transformer"]]]]],"^2S","Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk.","^35",["^ ","^2C",false,"^36",4,"^2E",4,"^2@",["^X",[["^26","^2<","^2="],["^26","^2<","^2=","^3<"]]],"^28",["^X",[["^26","^2<","^2="],["^26","^2<","^2=","^3<"]]],"^2B",["^X",[null,null]]]],"^I","~$markdown.common/make-separator","^6","markdown/common.cljc","^:",21,"^35",["^ ","^2C",false,"^36",4,"^2E",4,"^2@",["^X",[["^26","^2<","^2="],["^26","^2<","^2=","^3<"]]],"^28",["^X",[["^26","^2<","^2="],["^26","^2<","^2=","^3<"]]],"^2B",["^X",[null,null]]],"^2@",["^X",[["^26","^2<","^2="],["^26","^2<","^2=","^3<"]]],"^2A",null,"^36",4,"^2B",["^X",[null,null]],"^8",1,"^2C",false,"^38",[["^ ","^36",3,"^2C",false,"^24","^25"],["^ ","^36",4,"^2C",false,"^24","~$function"]],"^7",80,"^9",80,"^2E",4,"^2F",true,"^28",["^X",[["^26","^2<","^2="],["^26","^2<","^2=","^3<"]]],"^2S","Return a transformer to\n   - find all the chunks of the string delimited by the `separator',\n   - wrap the output with the `open' and `close' markers, and\n   - apply the `transformer' to the text inside the chunk."],"~$escape-code",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",43,"^8",7,"^9",43,"^:",18,"^28",["^X",["^29",["^X",[["~$s"]]]]]],"^I","~$markdown.common/escape-code","^6","markdown/common.cljc","^:",18,"^2@",["^X",[["~$s"]]],"^2A",null,"^2B",["^X",[null,null]],"^8",1,"^2C",false,"^7",43,"^2D","^25","^9",43,"^2E",1,"^2F",true,"^28",["^X",["^29",["^X",[["~$s"]]]]]],"~$gen-token",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",10,"^8",7,"^9",10,"^:",16,"^28",["^X",["^29",["^X",[["~$n"]]]]]],"^I","~$markdown.common/gen-token","^6","markdown/common.cljc","^:",16,"^2@",["^X",[["~$n"]]],"^2A",null,"^2B",["^X",[null,null]],"^8",1,"^2C",false,"^7",10,"^2D","^P","^9",10,"^2E",1,"^2F",true,"^28",["^X",["^29",["^X",[["~$n"]]]]]],"~$strong",["^ ","^I","~$markdown.common/strong","^6","markdown/common.cljc","^7",134,"^8",1,"^9",134,"^:",12,"^5",["^ ","^6","markdown/common.cljc","^7",134,"^8",6,"^9",134,"^:",12],"^24","^25"],"~$escape-code-transformer",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",125,"^8",7,"^9",125,"^:",30,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]]],"^I","~$markdown.common/escape-code-transformer","^6","markdown/common.cljc","^:",30,"^2@",["^X",[["^2;","^2>"]]],"^2A",null,"^2B",["^X",[null,null]],"^8",1,"^2C",false,"^7",125,"^2D","^2Q","^9",125,"^2E",2,"^2F",true,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]]],"~$em",["^ ","^I","~$markdown.common/em","^6","markdown/common.cljc","^7",140,"^8",1,"^9",140,"^:",8,"^5",["^ ","^6","markdown/common.cljc","^7",140,"^8",6,"^9",140,"^:",8],"^24","^25"],"~$heading-level",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",167,"^8",7,"^9",167,"^:",20,"^28",["^X",["^29",["^X",[["^2;"]]]]]],"^I","~$markdown.common/heading-level","^6","markdown/common.cljc","^:",20,"^2@",["^X",[["^2;"]]],"^2A",null,"^2B",["^X",[null,null]],"^8",1,"^2C",false,"^7",167,"^2D",["^H",["~$number","^2J"]],"^9",167,"^2E",1,"^2F",true,"^28",["^X",["^29",["^X",[["^2;"]]]]]],"~$escaped-chars",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",59,"^8",7,"^9",59,"^:",20,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]]],"^I","~$markdown.common/escaped-chars","^6","markdown/common.cljc","^:",20,"^2@",["^X",[["^2;","^2>"]]],"^2A",null,"^2B",["^X",[null,null]],"^8",1,"^2C",false,"^7",59,"^2D","^2Q","^9",59,"^2E",2,"^2F",true,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]]],"~$inline-code",["^ ","^I","~$markdown.common/inline-code","^6","markdown/common.cljc","^7",146,"^8",1,"^9",146,"^:",17,"^5",["^ ","^6","markdown/common.cljc","^7",146,"^8",6,"^9",146,"^:",17],"^24","^3>"],"~$strikethrough",["^ ","^I","~$markdown.common/strikethrough","^6","markdown/common.cljc","^7",144,"^8",1,"^9",144,"^:",19,"^5",["^ ","^6","markdown/common.cljc","^7",144,"^8",6,"^9",144,"^:",19],"^24","^25"],"~$bold-italic",["^ ","^I","~$markdown.common/bold-italic","^6","markdown/common.cljc","^7",136,"^8",1,"^9",136,"^:",17,"^5",["^ ","^6","markdown/common.cljc","^7",136,"^8",6,"^9",136,"^:",17],"^24","^25"],"~$escape-inhibit-separator",["^ ","^27",null,"^5",["^ ","^6","markdown/common.cljc","^7",154,"^8",7,"^9",154,"^:",31,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]]],"^I","~$markdown.common/escape-inhibit-separator","^6","markdown/common.cljc","^:",31,"^2@",["^X",[["^2;","^2>"]]],"^2A",null,"^2B",["^X",[null,null]],"^8",1,"^2C",false,"^7",154,"^2D","^2Q","^9",154,"^2E",2,"^2F",true,"^28",["^X",["^29",["^X",[["^2;","^2>"]]]]]]],"^V",["^ ","^Q","^Q"],"~:cljs.analyzer/constants",["^ ","^S",["^H",["~:codeblock","~:default","~:frozen-strings","~:found-token","~:code"]],"~:order",["^3Y","^3[","^3W","^3Z","^3X"]],"^[",["^ ","^T",["^H",[]]],"^10",["^ "],"^11",["^R","^Q","^O"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1?",[["^43","~:static-fns"],true,["^43","~:elide-asserts"],true,["^43","~:optimize-constants"],null,["^43","^16"],null,["^43","~:external-config"],null,["^43","~:tooling-config"],null,["^43","~:emit-constants"],null,["^43","~:load-tests"],false,["^43","~:infer-externs"],"~:auto",["^43","^18"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^43","~:fn-invoke-direct"],null,["^43","~:source-map"],null]]]