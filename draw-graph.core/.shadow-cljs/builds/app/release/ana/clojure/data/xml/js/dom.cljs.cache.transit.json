["^ ","~:output",["^ ","~:js","goog.provide('clojure.data.xml.js.dom');\nclojure.data.xml.js.dom.doc = (new DOMParser()).parseFromString(\"<d />\",\"text/xml\");\n/**\n * Create a Text node\n */\nclojure.data.xml.js.dom.text_node = (function clojure$data$xml$js$dom$text_node(s){\nreturn clojure.data.xml.js.dom.doc.createTextNode(s);\n});\n/**\n * Create an xml element from a content collection and optional metadata\n */\nclojure.data.xml.js.dom.element_STAR_ = (function clojure$data$xml$js$dom$element_STAR_(var_args){\nvar G__30566 = arguments.length;\nswitch (G__30566) {\ncase 4:\nreturn clojure.data.xml.js.dom.element_STAR_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ncase 3:\nreturn clojure.data.xml.js.dom.element_STAR_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.data.xml.js.dom.element_STAR_.cljs$core$IFn$_invoke$arity$4 = (function (tag,attrs,content,meta){\nvar el = clojure.data.xml.js.dom.element_STAR_.cljs$core$IFn$_invoke$arity$3(tag,attrs,content);\nvar x30569_30803 = el;\nx30569_30803.cljs$core$IMeta$ = cljs.core.PROTOCOL_SENTINEL;\n\nx30569_30803.cljs$core$IMeta$_meta$arity$1 = ((function (x30569_30803,el){\nreturn (function (_){\nvar ___$1 = this;\nreturn meta;\n});})(x30569_30803,el))\n;\n\nx30569_30803.cljs$core$IWithMeta$ = cljs.core.PROTOCOL_SENTINEL;\n\nx30569_30803.cljs$core$IWithMeta$_with_meta$arity$2 = ((function (x30569_30803,el){\nreturn (function (_,meta__$1){\nvar ___$1 = this;\nvar x30572 = cljs.core.clone(el);\nx30572.cljs$core$IMeta$ = cljs.core.PROTOCOL_SENTINEL;\n\nx30572.cljs$core$IMeta$_meta$arity$1 = ((function (x30572,___$1,x30569_30803,el){\nreturn (function (___$2){\nvar ___$3 = this;\nreturn meta__$1;\n});})(x30572,___$1,x30569_30803,el))\n;\n\nx30572.cljs$core$IWithMeta$ = cljs.core.PROTOCOL_SENTINEL;\n\nx30572.cljs$core$IWithMeta$_with_meta$arity$2 = ((function (x30572,___$1,x30569_30803,el){\nreturn (function (___$2,meta__$2){\nvar ___$3 = this;\nreturn cljs.core._with_meta(el,meta__$2);\n});})(x30572,___$1,x30569_30803,el))\n;\n\nreturn x30572;\n});})(x30569_30803,el))\n;\n\n\nreturn el;\n});\n\nclojure.data.xml.js.dom.element_STAR_.cljs$core$IFn$_invoke$arity$3 = (function (tag,attrs,content){\nvar el = clojure.data.xml.js.dom.doc.createElementNS(clojure.data.xml.name.qname_uri(tag),clojure.data.xml.name.qname_local(tag));\ncljs.core.reduce_kv(((function (el){\nreturn (function (_,k,v){\nvar uri = clojure.data.xml.name.qname_uri(k);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(uri,\"http://www.w3.org/2000/xmlns/\")){\nreturn el.setAttribute([\"xmlns:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.data.xml.name.qname_local(k))].join(''),v);\n} else {\nreturn el.setAttributeNS(uri,clojure.data.xml.name.qname_local(k),v);\n}\n});})(el))\n,null,attrs);\n\ncljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (el){\nreturn (function (_,n){\nreturn el.appendChild(((typeof n === 'string')?clojure.data.xml.js.dom.text_node(n):n));\n});})(el))\n,null,content);\n\nreturn el;\n});\n\nclojure.data.xml.js.dom.element_STAR_.cljs$lang$maxFixedArity = 4;\n\n/**\n * Create an xml Element from content varargs\n */\nclojure.data.xml.js.dom.element = (function clojure$data$xml$js$dom$element(var_args){\nvar G__30579 = arguments.length;\nswitch (G__30579) {\ncase 1:\nreturn clojure.data.xml.js.dom.element.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.data.xml.js.dom.element.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4751__auto__ = [];\nvar len__4730__auto___30810 = arguments.length;\nvar i__4731__auto___30811 = (0);\nwhile(true){\nif((i__4731__auto___30811 < len__4730__auto___30810)){\nargs_arr__4751__auto__.push((arguments[i__4731__auto___30811]));\n\nvar G__30812 = (i__4731__auto___30811 + (1));\ni__4731__auto___30811 = G__30812;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4752__auto__ = (new cljs.core.IndexedSeq(args_arr__4751__auto__.slice((2)),(0),null));\nreturn clojure.data.xml.js.dom.element.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4752__auto__);\n\n}\n});\n\nclojure.data.xml.js.dom.element.cljs$core$IFn$_invoke$arity$1 = (function (tag){\nreturn clojure.data.xml.js.dom.element_STAR_.cljs$core$IFn$_invoke$arity$3(tag,null,null);\n});\n\nclojure.data.xml.js.dom.element.cljs$core$IFn$_invoke$arity$2 = (function (tag,attrs){\nreturn clojure.data.xml.js.dom.element_STAR_.cljs$core$IFn$_invoke$arity$3(tag,attrs,null);\n});\n\nclojure.data.xml.js.dom.element.cljs$core$IFn$_invoke$arity$variadic = (function (tag,attrs,content){\nreturn clojure.data.xml.js.dom.element_STAR_.cljs$core$IFn$_invoke$arity$3(tag,attrs,content);\n});\n\n/** @this {Function} */\nclojure.data.xml.js.dom.element.cljs$lang$applyTo = (function (seq30575){\nvar G__30576 = cljs.core.first(seq30575);\nvar seq30575__$1 = cljs.core.next(seq30575);\nvar G__30577 = cljs.core.first(seq30575__$1);\nvar seq30575__$2 = cljs.core.next(seq30575__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__30576,G__30577,seq30575__$2);\n});\n\nclojure.data.xml.js.dom.element.cljs$lang$maxFixedArity = (2);\n\n/**\n * Create a CData node\n */\nclojure.data.xml.js.dom.cdata = (function clojure$data$xml$js$dom$cdata(content){\nreturn clojure.data.xml.js.dom.doc.createCDATASection(content);\n});\n/**\n * Create a Comment node\n */\nclojure.data.xml.js.dom.xml_comment = (function clojure$data$xml$js$dom$xml_comment(content){\nreturn clojure.data.xml.js.dom.doc.createComment(content);\n});\n/**\n * Create a NodeList\n */\nclojure.data.xml.js.dom.node_list = (function clojure$data$xml$js$dom$node_list(elements){\nvar f = clojure.data.xml.js.dom.doc.createDocumentFragment();\nvar seq__30600_30818 = cljs.core.seq(elements);\nvar chunk__30601_30819 = null;\nvar count__30602_30820 = (0);\nvar i__30603_30821 = (0);\nwhile(true){\nif((i__30603_30821 < count__30602_30820)){\nvar el_30824 = chunk__30601_30819.cljs$core$IIndexed$_nth$arity$2(null,i__30603_30821);\nf.appendChild((clojure.data.xml.js.dom.element_node.cljs$core$IFn$_invoke$arity$1 ? clojure.data.xml.js.dom.element_node.cljs$core$IFn$_invoke$arity$1(el_30824) : clojure.data.xml.js.dom.element_node.call(null,el_30824)));\n\n\nvar G__30825 = seq__30600_30818;\nvar G__30826 = chunk__30601_30819;\nvar G__30827 = count__30602_30820;\nvar G__30828 = (i__30603_30821 + (1));\nseq__30600_30818 = G__30825;\nchunk__30601_30819 = G__30826;\ncount__30602_30820 = G__30827;\ni__30603_30821 = G__30828;\ncontinue;\n} else {\nvar temp__5720__auto___30829 = cljs.core.seq(seq__30600_30818);\nif(temp__5720__auto___30829){\nvar seq__30600_30830__$1 = temp__5720__auto___30829;\nif(cljs.core.chunked_seq_QMARK_(seq__30600_30830__$1)){\nvar c__4550__auto___30831 = cljs.core.chunk_first(seq__30600_30830__$1);\nvar G__30832 = cljs.core.chunk_rest(seq__30600_30830__$1);\nvar G__30833 = c__4550__auto___30831;\nvar G__30834 = cljs.core.count(c__4550__auto___30831);\nvar G__30835 = (0);\nseq__30600_30818 = G__30832;\nchunk__30601_30819 = G__30833;\ncount__30602_30820 = G__30834;\ni__30603_30821 = G__30835;\ncontinue;\n} else {\nvar el_30836 = cljs.core.first(seq__30600_30830__$1);\nf.appendChild((clojure.data.xml.js.dom.element_node.cljs$core$IFn$_invoke$arity$1 ? clojure.data.xml.js.dom.element_node.cljs$core$IFn$_invoke$arity$1(el_30836) : clojure.data.xml.js.dom.element_node.call(null,el_30836)));\n\n\nvar G__30838 = cljs.core.next(seq__30600_30830__$1);\nvar G__30839 = null;\nvar G__30840 = (0);\nvar G__30841 = (0);\nseq__30600_30818 = G__30838;\nchunk__30601_30819 = G__30839;\ncount__30602_30820 = G__30840;\ni__30603_30821 = G__30841;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn f.childNodes;\n});\nclojure.data.xml.js.dom.Text = cljs.core.type(clojure.data.xml.js.dom.text_node(\"\"));\nclojure.data.xml.js.dom.Element = cljs.core.type(clojure.data.xml.js.dom.element.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"e\",\"e\",1381269198)));\nclojure.data.xml.js.dom.NamedNodeMap = cljs.core.type(clojure.data.xml.js.dom.element.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"e\",\"e\",1381269198)).attributes);\nclojure.data.xml.js.dom.NodeList = cljs.core.type(clojure.data.xml.js.dom.node_list(cljs.core.PersistentVector.EMPTY));\nclojure.data.xml.js.dom.Attr = cljs.core.type((clojure.data.xml.js.dom.element.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"e\",\"e\",1381269198),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"a\",\"a\",-2123407586),\"1\"], null)).attributes[(0)]));\nclojure.data.xml.js.dom.CData = cljs.core.type(clojure.data.xml.js.dom.cdata(\"\"));\nclojure.data.xml.js.dom.Comment = cljs.core.type(clojure.data.xml.js.dom.xml_comment(\"\"));\n/**\n * Coerce xml elements to dom nodes\n */\nclojure.data.xml.js.dom.element_node = (function clojure$data$xml$js$dom$element_node(el){\nif(typeof el === 'string'){\nreturn clojure.data.xml.js.dom.text_node(el);\n} else {\nif((el instanceof clojure.data.xml.node.CData)){\nreturn clojure.data.xml.js.dom.cdata(new cljs.core.Keyword(null,\"content\",\"content\",15833224).cljs$core$IFn$_invoke$arity$1(el));\n} else {\nif((el instanceof clojure.data.xml.node.Comment)){\nreturn clojure.data.xml.js.dom.xml_comment(new cljs.core.Keyword(null,\"content\",\"content\",15833224).cljs$core$IFn$_invoke$arity$1(el));\n} else {\nif((el instanceof clojure.data.xml.js.dom.Element)){\nreturn el;\n} else {\nif((el instanceof clojure.data.xml.js.dom.CData)){\nreturn el;\n} else {\nif((el instanceof clojure.data.xml.js.dom.Comment)){\nreturn el;\n} else {\nif((!((el.item == null)))){\nreturn el;\n} else {\nif((el instanceof clojure.data.xml.js.dom.Text)){\nreturn el;\n} else {\nif((((!((el == null))))?(((((el.cljs$lang$protocol_mask$partition0$ & (256))) || ((cljs.core.PROTOCOL_SENTINEL === el.cljs$core$ILookup$))))?true:(((!el.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.ILookup,el):false)):cljs.core.native_satisfies_QMARK_(cljs.core.ILookup,el))){\nreturn clojure.data.xml.js.dom.element_STAR_.cljs$core$IFn$_invoke$arity$3(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(el),new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713).cljs$core$IFn$_invoke$arity$1(el),cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.data.xml.js.dom.element_node,new cljs.core.Keyword(null,\"content\",\"content\",15833224).cljs$core$IFn$_invoke$arity$1(el)));\n} else {\nif((((!((el == null))))?(((((el.cljs$lang$protocol_mask$partition0$ & (16777216))) || ((cljs.core.PROTOCOL_SENTINEL === el.cljs$core$ISequential$))))?true:(((!el.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.ISequential,el):false)):cljs.core.native_satisfies_QMARK_(cljs.core.ISequential,el))){\nreturn clojure.data.xml.js.dom.node_list(el);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Cannot coerce\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"form\",\"form\",-1624062471),el], null));\n\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n});\nclojure.data.xml.js.dom.dom_element_tag = (function clojure$data$xml$js$dom$dom_element_tag(el){\nreturn clojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$2(el.namespaceURI,el.localName);\n});\nclojure.data.xml.js.dom.xmlns_attr_QMARK_ = (function clojure$data$xml$js$dom$xmlns_attr_QMARK_(a){\nreturn (clojure.data.xml.name.xmlns_uri === a.namespaceURI);\n});\nclojure.data.xml.js.dom.remove_xmlns_attrs_xf = cljs.core.remove.cljs$core$IFn$_invoke$arity$1(clojure.data.xml.js.dom.xmlns_attr_QMARK_);\nclojure.data.xml.js.dom.remove_xmlns_attrs = cljs.core.partial.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.PersistentArrayMap.EMPTY,clojure.data.xml.js.dom.remove_xmlns_attrs_xf);\nclojure.data.xml.js.dom.filter_xmlns_attrs_xf = cljs.core.filter.cljs$core$IFn$_invoke$arity$1(clojure.data.xml.js.dom.xmlns_attr_QMARK_);\nclojure.data.xml.js.dom.filter_xmlns_attrs = cljs.core.partial.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.PersistentArrayMap.EMPTY,clojure.data.xml.js.dom.filter_xmlns_attrs_xf);\nclojure.data.xml.js.dom.dom_element_attrs = (function clojure$data$xml$js$dom$dom_element_attrs(var_args){\nvar G__30642 = arguments.length;\nswitch (G__30642) {\ncase 1:\nreturn clojure.data.xml.js.dom.dom_element_attrs.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.data.xml.js.dom.dom_element_attrs.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.data.xml.js.dom.dom_element_attrs.cljs$core$IFn$_invoke$arity$1 = (function (el){\nreturn clojure.data.xml.js.dom.dom_element_attrs.cljs$core$IFn$_invoke$arity$2(clojure.data.xml.js.dom.remove_xmlns_attrs_xf,el);\n});\n\nclojure.data.xml.js.dom.dom_element_attrs.cljs$core$IFn$_invoke$arity$2 = (function (xf,el){\nreturn cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xf,cljs.core.completing.cljs$core$IFn$_invoke$arity$2((function (ta,attr_node){\nreturn cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ta,clojure.data.xml.js.dom.dom_element_tag(attr_node),attr_node.value);\n}),cljs.core.persistent_BANG_),cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY),cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(el));\n});\n\nclojure.data.xml.js.dom.dom_element_attrs.cljs$lang$maxFixedArity = 2;\n\nclojure.data.xml.js.dom.node_list_vec = (function clojure$data$xml$js$dom$node_list_vec(nl){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(clojure.data.xml.js.dom.element_data),cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(nl));\n});\nclojure.data.xml.js.dom.as_node = (function clojure$data$xml$js$dom$as_node(n){\nif((n instanceof clojure.data.xml.js.dom.Text)){\nreturn n.nodeValue;\n} else {\nreturn n;\n}\n});\n/**\n * Coerce xml elements to element maps / content vectors\n */\nclojure.data.xml.js.dom.element_data = (function clojure$data$xml$js$dom$element_data(el){\nif((el instanceof clojure.data.xml.js.dom.Comment)){\nreturn clojure.data.xml.node.xml_comment(el.data);\n} else {\nif((el instanceof clojure.data.xml.js.dom.CData)){\nreturn clojure.data.xml.node.cdata(el.data);\n} else {\nif((el instanceof clojure.data.xml.js.dom.Text)){\nreturn el.nodeValue;\n} else {\nif((el instanceof clojure.data.xml.js.dom.Element)){\nreturn clojure.data.xml.node.element_STAR_.cljs$core$IFn$_invoke$arity$4(clojure.data.xml.js.dom.dom_element_tag(el),clojure.data.xml.js.dom.dom_element_attrs.cljs$core$IFn$_invoke$arity$1(el.attributes),clojure.data.xml.js.dom.node_list_vec(el.childNodes),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"clojure.data.xml\",\"nss\",\"clojure.data.xml/nss\",-1153428346),clojure.data.xml.js.dom.dom_element_attrs.cljs$core$IFn$_invoke$arity$2(clojure.data.xml.js.dom.filter_xmlns_attrs_xf,el.attributes)], null));\n} else {\nif(cljs.core.truth_(el.getNamedItemNS)){\nreturn clojure.data.xml.js.dom.dom_element_attrs.cljs$core$IFn$_invoke$arity$1(el);\n} else {\nif((el instanceof clojure.data.xml.js.dom.NodeList)){\nreturn clojure.data.xml.js.dom.node_list_vec(el);\n} else {\nif(typeof el === 'string'){\nreturn el;\n} else {\nif((((!((el == null))))?(((((el.cljs$lang$protocol_mask$partition0$ & (256))) || ((cljs.core.PROTOCOL_SENTINEL === el.cljs$core$ILookup$))))?true:(((!el.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.ILookup,el):false)):cljs.core.native_satisfies_QMARK_(cljs.core.ILookup,el))){\nreturn el;\n} else {\nif((((!((el == null))))?(((((el.cljs$lang$protocol_mask$partition0$ & (16777216))) || ((cljs.core.PROTOCOL_SENTINEL === el.cljs$core$ISequential$))))?true:(((!el.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.ISequential,el):false)):cljs.core.native_satisfies_QMARK_(cljs.core.ISequential,el))){\nreturn el;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Element cannot be converted to data\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),el], null));\n\n}\n}\n}\n}\n}\n}\n}\n}\n}\n});\nclojure.data.xml.js.dom.extend_dom_as_data_BANG_ = (function clojure$data$xml$js$dom$extend_dom_as_data_BANG_(){\nclojure.data.xml.js.dom.Element.prototype.cljs$core$IMap$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.Element.prototype.cljs$core$IMeta$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.Element.prototype.cljs$core$IMeta$_meta$arity$1 = (function (el){\nvar el__$1 = this;\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"clojure.data.xml\",\"nss\",\"clojure.data.xml/nss\",-1153428346),(function (){var G__30675 = el__$1.attributes;\nreturn (clojure.data.xml.js.dom.filter_xmlns_attrs.cljs$core$IFn$_invoke$arity$1 ? clojure.data.xml.js.dom.filter_xmlns_attrs.cljs$core$IFn$_invoke$arity$1(G__30675) : clojure.data.xml.js.dom.filter_xmlns_attrs.call(null,G__30675));\n})()], null);\n});\n\nclojure.data.xml.js.dom.Element.prototype.cljs$core$ILookup$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.Element.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (el,k){\nvar el__$1 = this;\nvar G__30680 = k;\nvar G__30680__$1 = (((G__30680 instanceof cljs.core.Keyword))?G__30680.fqn:null);\nswitch (G__30680__$1) {\ncase \"tag\":\nreturn clojure.data.xml.js.dom.dom_element_tag(el__$1);\n\nbreak;\ncase \"attrs\":\nreturn el__$1.attributes;\n\nbreak;\ncase \"content\":\nreturn el__$1.childNodes;\n\nbreak;\ndefault:\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"XML tag has no key\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),k,new cljs.core.Keyword(null,\"el\",\"el\",-1618201118),el__$1], null));\n\n}\n});\n\nclojure.data.xml.js.dom.Element.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (el,k,nf){\nvar el__$1 = this;\nvar G__30685 = k;\nvar G__30685__$1 = (((G__30685 instanceof cljs.core.Keyword))?G__30685.fqn:null);\nswitch (G__30685__$1) {\ncase \"tag\":\nreturn clojure.data.xml.js.dom.dom_element_tag(el__$1);\n\nbreak;\ncase \"attrs\":\nvar G__30687 = el__$1.attributes;\nreturn (clojure.data.xml.js.dom.remove_xmlns_attrs.cljs$core$IFn$_invoke$arity$1 ? clojure.data.xml.js.dom.remove_xmlns_attrs.cljs$core$IFn$_invoke$arity$1(G__30687) : clojure.data.xml.js.dom.remove_xmlns_attrs.call(null,G__30687));\n\nbreak;\ncase \"content\":\nreturn el__$1.childNodes;\n\nbreak;\ndefault:\nreturn nf;\n\n}\n});\n\nclojure.data.xml.js.dom.Element.prototype.cljs$core$ICounted$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.Element.prototype.cljs$core$ICounted$_count$arity$1 = (function (nm){\nvar nm__$1 = this;\nreturn (3);\n});\n\nclojure.data.xml.js.dom.Element.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.Element.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (el0,el1){\nvar el0__$1 = this;\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(el0__$1),new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(el1))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713).cljs$core$IFn$_invoke$arity$1(el0__$1),new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713).cljs$core$IFn$_invoke$arity$1(el1))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"content\",\"content\",15833224).cljs$core$IFn$_invoke$arity$1(el0__$1),new cljs.core.Keyword(null,\"content\",\"content\",15833224).cljs$core$IFn$_invoke$arity$1(el1))));\n\n});\n\nclojure.data.xml.js.dom.NamedNodeMap.prototype.cljs$core$IMap$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.NamedNodeMap.prototype.cljs$core$ISeqable$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.NamedNodeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (nm){\nvar nm__$1 = this;\nreturn cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(nm__$1);\n});\n\nclojure.data.xml.js.dom.NamedNodeMap.prototype.cljs$core$ILookup$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.NamedNodeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (attrs,attr){\nvar attrs__$1 = this;\nvar temp__5718__auto__ = attrs__$1.getNamedItemNS(clojure.data.xml.name.qname_uri(attr),clojure.data.xml.name.qname_local(attr));\nif(cljs.core.truth_(temp__5718__auto__)){\nvar i = temp__5718__auto__;\nreturn i.value;\n} else {\nreturn null;\n}\n});\n\nclojure.data.xml.js.dom.NamedNodeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (attrs,attr,not_found){\nvar attrs__$1 = this;\nvar temp__5718__auto__ = attrs__$1.getNamedItemNS(clojure.data.xml.name.qname_uri(attr),clojure.data.xml.name.qname_local(attr));\nif(cljs.core.truth_(temp__5718__auto__)){\nvar i = temp__5718__auto__;\nreturn i.value;\n} else {\nreturn not_found;\n}\n});\n\nclojure.data.xml.js.dom.NamedNodeMap.prototype.cljs$core$ICounted$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.NamedNodeMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (nm){\nvar nm__$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (nm__$1){\nreturn (function (acc,attr){\nif(clojure.data.xml.js.dom.xmlns_attr_QMARK_(attr)){\nreturn acc;\n} else {\nreturn (acc + (1));\n}\n});})(nm__$1))\n,(0),nm__$1);\n});\n\nclojure.data.xml.js.dom.NamedNodeMap.prototype.cljs$core$IKVReduce$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.NamedNodeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (nm,f,init){\nvar nm__$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (nm__$1){\nreturn (function (acc,attr){\nif(clojure.data.xml.js.dom.xmlns_attr_QMARK_(attr)){\nreturn acc;\n} else {\nvar G__30711 = acc;\nvar G__30712 = clojure.data.xml.js.dom.dom_element_tag(attr);\nvar G__30713 = attr.value;\nreturn (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__30711,G__30712,G__30713) : f.call(null,G__30711,G__30712,G__30713));\n}\n});})(nm__$1))\n,init,nm__$1);\n});\n\nclojure.data.xml.js.dom.NamedNodeMap.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.NamedNodeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (nm0,nm1){\nvar nm0__$1 = this;\nvar or__4131__auto__ = (nm0__$1 === nm1);\nif(or__4131__auto__){\nreturn or__4131__auto__;\n} else {\nvar and__4120__auto__ = (cljs.core.count(nm0__$1) === cljs.core.count(nm1));\nif(and__4120__auto__){\nreturn cljs.core.reduce_kv(((function (and__4120__auto__,or__4131__auto__,nm0__$1){\nreturn (function (_,qn,v){\nvar or__4131__auto____$1 = (v === cljs.core.get.cljs$core$IFn$_invoke$arity$3(nm1,qn,\"\"));\nif(or__4131__auto____$1){\nreturn or__4131__auto____$1;\n} else {\nreturn cljs.core.reduced(false);\n}\n});})(and__4120__auto__,or__4131__auto__,nm0__$1))\n,true,nm0__$1);\n} else {\nreturn and__4120__auto__;\n}\n}\n});\n\nclojure.data.xml.js.dom.NodeList.prototype.cljs$core$ISeqable$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.NodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (nl){\nvar nl__$1 = this;\nreturn cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.data.xml.js.dom.as_node,cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(nl__$1)));\n});\n\nclojure.data.xml.js.dom.NodeList.prototype.cljs$core$ISequential$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.NodeList.prototype.cljs$core$ICounted$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.NodeList.prototype.cljs$core$ICounted$_count$arity$1 = (function (nl){\nvar nl__$1 = this;\nreturn nl__$1.length;\n});\n\nclojure.data.xml.js.dom.NodeList.prototype.cljs$core$IIndexed$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.NodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (nl,n){\nvar nl__$1 = this;\nreturn clojure.data.xml.js.dom.as_node((nl__$1[n]));\n});\n\nclojure.data.xml.js.dom.NodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (nl,n,nf){\nvar nl__$1 = this;\nif(((((0) <= n)) && ((n < nl__$1.length)))){\nreturn clojure.data.xml.js.dom.as_node((nl__$1[n]));\n} else {\nreturn nf;\n}\n});\n\nclojure.data.xml.js.dom.NodeList.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.NodeList.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (nl0,nl1){\nvar nl0__$1 = this;\nvar or__4131__auto__ = (nl0__$1 === nl1);\nif(or__4131__auto__){\nreturn or__4131__auto__;\n} else {\nvar and__4120__auto__ = (cljs.core.count(nl0__$1) === cljs.core.count(nl1));\nif(and__4120__auto__){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (and__4120__auto__,or__4131__auto__,nl0__$1){\nreturn (function (_,n){\nvar or__4131__auto____$1 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(nl0__$1,n),cljs.core.nth.cljs$core$IFn$_invoke$arity$2(nl1,n));\nif(or__4131__auto____$1){\nreturn or__4131__auto____$1;\n} else {\nreturn cljs.core.reduced(false);\n}\n});})(and__4120__auto__,or__4131__auto__,nl0__$1))\n,true,cljs.core.range.cljs$core$IFn$_invoke$arity$1(cljs.core.count(nl0__$1)));\n} else {\nreturn and__4120__auto__;\n}\n}\n});\n\nclojure.data.xml.js.dom.Text.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.Text.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (t0,t1){\nvar t0__$1 = this;\nreturn (t0__$1.nodeValue === (((t1 instanceof clojure.data.xml.js.dom.Text))?t1.nodeValue:t1));\n});\n\nclojure.data.xml.js.dom.Attr.prototype.cljs$core$ISeqable$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.Attr.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (attr){\nvar attr__$1 = this;\nreturn cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1([cljs.core.key(attr__$1),cljs.core.key(attr__$1)]);\n});\n\nclojure.data.xml.js.dom.Attr.prototype.cljs$core$IMapEntry$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.Attr.prototype.cljs$core$IMapEntry$_key$arity$1 = (function (attr){\nvar attr__$1 = this;\nreturn clojure.data.xml.js.dom.dom_element_tag(attr__$1);\n});\n\nclojure.data.xml.js.dom.Attr.prototype.cljs$core$IMapEntry$_val$arity$1 = (function (attr){\nvar attr__$1 = this;\nreturn attr__$1.value;\n});\n\nclojure.data.xml.js.dom.Attr.prototype.cljs$core$ISequential$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.Attr.prototype.cljs$core$ICounted$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.Attr.prototype.cljs$core$ICounted$_count$arity$1 = (function (_){\nvar ___$1 = this;\nreturn (2);\n});\n\nclojure.data.xml.js.dom.Attr.prototype.cljs$core$IIndexed$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.data.xml.js.dom.Attr.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (attr,n){\nvar attr__$1 = this;\nvar G__30781 = n;\nswitch (G__30781) {\ncase (0):\nreturn cljs.core.key(attr__$1);\n\nbreak;\ncase (1):\nreturn cljs.core.val(attr__$1);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__30781)].join('')));\n\n}\n});\n\nclojure.data.xml.js.dom.Attr.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (attr,n,nf){\nvar attr__$1 = this;\nvar G__30787 = n;\nswitch (G__30787) {\ncase (0):\nreturn clojure.data.xml.js.dom.dom_element_tag(attr__$1);\n\nbreak;\ncase (1):\nreturn attr__$1.value;\n\nbreak;\ndefault:\nreturn nf;\n\n}\n});\n\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Symbol(null,\"Text\",\"Text\",-2054460644,null),clojure.data.xml.js.dom.Text,new cljs.core.Symbol(null,\"Element\",\"Element\",1498489072,null),clojure.data.xml.js.dom.Element,new cljs.core.Symbol(null,\"NamedNodeMap\",\"NamedNodeMap\",1757390858,null),clojure.data.xml.js.dom.NamedNodeMap,new cljs.core.Symbol(null,\"NodeList\",\"NodeList\",-2117955024,null),clojure.data.xml.js.dom.NodeList], null);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/data/xml/js/dom.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",28],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.data.xml.js.dom","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.data.xml.name","^O","~$clojure.data.xml.node","^P","~$node","^P","~$cljs.core","^R","~$goog","^S"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$qname-uri","^O","~$qname-local","^O","~$qname","^O","~$xmlns-uri","^O"],"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^J",["^11",["^U",["^O","~:refer",["^W","^X","^Y","^Z"]],["^P","~:as","^Q"]]]]],"~:flags",["^ ","^U",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^O","^P"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","clojure/data/xml/js/dom.cljs"],"~:compiled-at",1560836581227,"~:resource-name","clojure/data/xml/js/dom.cljs","~:warnings",[],"~:source","(ns clojure.data.xml.js.dom\n  (:require\n   [clojure.data.xml.name :refer [qname-uri qname-local qname xmlns-uri]]\n   [clojure.data.xml.node :as node]))\n\n(def doc\n  (.. (js/DOMParser.)\n      (parseFromString \"<d />\" \"text/xml\")))\n\n(defn text-node\n  \"Create a Text node\"\n  [s]\n  (.createTextNode doc s))\n\n(defn element*\n  \"Create an xml element from a content collection and optional metadata\"\n  ([tag attrs content meta]\n   (let [el (element* tag attrs content)]\n     (specify! el\n       IMeta\n       (-meta [_] meta)\n       IWithMeta\n       (-with-meta [_ meta]\n         (specify el\n           IMeta\n           (-meta [_] meta)\n           IWithMeta\n           (-with-meta [_ meta]\n             (-with-meta el meta)))))\n     el))\n  ([tag attrs content]\n   (let [el (.createElementNS doc (qname-uri tag) (qname-local tag))]\n     (reduce-kv (fn [_ k v]\n                  (let [uri (qname-uri k)]\n                    (if (= uri \"http://www.w3.org/2000/xmlns/\")\n                      (.setAttribute el (str \"xmlns:\" (qname-local k)) v)\n                      (.setAttributeNS el uri (qname-local k) v))))\n                nil attrs)\n     (reduce (fn [_ n]\n               (.appendChild el (if (string? n)\n                                  (text-node n)\n                                  n)))\n             nil content)\n     el)))\n\n(defn element\n  \"Create an xml Element from content varargs\"\n  ([tag] (element* tag nil nil))\n  ([tag attrs] (element* tag attrs nil))\n  ([tag attrs & content] (element* tag attrs content)))\n\n(defn cdata\n  \"Create a CData node\"\n  [content]\n  (.createCDATASection doc content))\n\n(defn xml-comment\n  \"Create a Comment node\"\n  [content]\n  (.createComment doc content))\n\n(declare element-node)\n\n(defn node-list\n  \"Create a NodeList\"\n  [elements]\n  (let [f (.createDocumentFragment doc)]\n    (doseq [el elements]\n      (.appendChild f (element-node el)))\n    (.-childNodes f)))\n\n;; ## Types\n\n;; we get these from reflection, to only depend only on js/DOMParser and js/XMLSerializer\n;; these can easily be provided in nashorn, ...\n\n(def Text (type (text-node \"\")))\n(def Element (type (element :e)))\n(def NamedNodeMap (type (.-attributes (element :e))))\n(def NodeList (type (node-list [])))\n(def Attr (type (aget (.-attributes (element :e {:a \"1\"})) 0)))\n(def CData (type (cdata \"\")))\n(def Comment (type (xml-comment \"\")))\n\n;; ## Coercions\n\n;; ## -> DOM\n\n(defn element-node\n  \"Coerce xml elements to dom nodes\"\n  [el]\n  (cond\n    (string? el) (text-node el)\n    (instance? node/CData el) (cdata (:content el))\n    (instance? node/Comment el) (xml-comment (:content el))\n    (instance? Element el) el\n    (instance? CData el) el\n    (instance? Comment el) el\n    ;; stupid xmldom, (some? (.-item el))\n    #_(instance? NodeList el)\n    (some? (.-item el)) el\n    (instance? Text el) el\n    (satisfies? ILookup el) (element* (:tag el)\n                                      (:attrs el)\n                                      (map element-node (:content el)))\n    (satisfies? ISequential el) (node-list el)\n    :else (throw (ex-info \"Cannot coerce\" {:form el}))))\n\n;; ## -> DATA\n\n(defn- dom-element-tag [el]\n  (qname (.-namespaceURI el)\n         (.-localName el)))\n\n(defn- xmlns-attr? [a]\n  (identical? xmlns-uri (.-namespaceURI a)))\n(def remove-xmlns-attrs-xf (remove xmlns-attr?))\n(def remove-xmlns-attrs (partial into {} remove-xmlns-attrs-xf))\n(def filter-xmlns-attrs-xf (filter xmlns-attr?))\n(def filter-xmlns-attrs (partial into {} filter-xmlns-attrs-xf))\n\n(defn dom-element-attrs\n  ([el] (dom-element-attrs remove-xmlns-attrs-xf el))\n  ([xf el]\n   (transduce\n    xf\n    (completing\n     (fn [ta attr-node]\n       (assoc! ta\n               (dom-element-tag attr-node)\n               (.-value attr-node)))\n     persistent!)\n    (transient {})\n    (array-seq el))))\n\n(declare element-data)\n\n(defn- node-list-vec [nl]\n  (into [] (map element-data) (array-seq nl)))\n\n(defn- as-node [n]\n  (if (instance? Text n)\n    (.-nodeValue n) ;; .-data\n    n))\n\n(defn element-data\n  \"Coerce xml elements to element maps / content vectors\"\n  [el]\n  (cond\n    (instance? Comment el)\n    (node/xml-comment (.-data el))\n    (instance? CData el)\n    (node/cdata (.-data el))\n    (instance? Text el)\n    (.-nodeValue el)\n    (instance? Element el)\n    (node/element* (dom-element-tag el)\n                   (dom-element-attrs (.-attributes el))\n                   (node-list-vec (.-childNodes el))\n                   {:clojure.data.xml/nss (dom-element-attrs\n                                           filter-xmlns-attrs-xf\n                                           (.-attributes el))})\n    ;;(instance? NamedNodeMap el)\n    (.-getNamedItemNS el)\n    (dom-element-attrs el)\n    (instance? NodeList el) (node-list-vec el)\n    (string? el) el\n    (satisfies? ILookup el) el\n    (satisfies? ISequential el) el\n    :else (throw (ex-info \"Element cannot be converted to data\" {:element el}))))\n\n(defn extend-dom-as-data! []\n  (extend-type Element\n    IMap\n    IMeta\n    (-meta [el]\n      {:clojure.data.xml/nss (filter-xmlns-attrs\n                              (.-attributes el))})\n    ILookup\n    (-lookup\n      ([el k]\n       (case k\n         :tag (dom-element-tag el)\n         :attrs (.-attributes el)\n         :content (.-childNodes el)\n         (throw (ex-info \"XML tag has no key\" {:key k :el el}))))\n      ([el k nf]\n       #_(println \"Element\" k \"=>\" (case k\n                                     :tag (dom-element-tag el)\n                                     :attrs (.-attributes el)\n                                     :content (.-childNodes el)\n                                     nf))\n       (case k\n         :tag (dom-element-tag el)\n         :attrs (remove-xmlns-attrs (.-attributes el))\n         :content (.-childNodes el)\n         nf)))\n    ICounted\n    (-count [nm] 3)\n    IEquiv\n    (-equiv [el0 el1]\n      (if false #_(instance? Element el1)\n          (do\n            ;; we can't use .isEqualNode, since that has bugs with namespaces\n            (.log js/console el0 el1)\n            (println 'isEqualNode (.isEqualNode el0 el1))\n            (.isEqualNode el0 el1))\n          (and (= (:tag el0) (:tag el1))\n               (= (:attrs el0) (:attrs el1))\n               (= (:content el0) (:content el1))))))\n  (extend-type NamedNodeMap\n    IMap\n    ISeqable\n    (-seq [nm] (array-seq nm))\n    ILookup\n    (-lookup\n      ([attrs attr]\n       (if-let [i (.getNamedItemNS attrs (qname-uri attr) (qname-local attr))]\n         (.-value i)\n         nil))\n      ([attrs attr not-found]\n       #_(println \"Attrs\" attr \"=>\" (if-let [i (.getNamedItemNS attrs (qname-uri attr) (qname-local attr))]\n                                      (.-value i)\n                                      not-found))\n       (if-let [i (.getNamedItemNS attrs (qname-uri attr) (qname-local attr))]\n         (.-value i)\n         not-found)))\n    ICounted\n    (-count [nm] (reduce (fn [acc attr]\n                           (if (xmlns-attr? attr)\n                             acc\n                             (inc acc)))\n                         0 nm))\n    IKVReduce\n    (-kv-reduce [nm f init]\n      (reduce (fn [acc attr]\n                (if (xmlns-attr? attr)\n                  acc\n                  (f acc (dom-element-tag attr) (.-value attr))))\n              init nm))\n    IEquiv\n    (-equiv [nm0 nm1]\n      #_(println \"NamedNodeMap.-equiv\" (identical? nm0 nm1) (count nm0) (count nm1))\n      (or (identical? nm0 nm1)\n          (and (identical? (count nm0) (count nm1))\n               (reduce-kv (fn [_ qn v]\n                            #_(println \"=\" v 'qn qn '(get nm1 qn \"\") (get nm1 qn \"\"))\n                            (or (identical? v (get nm1 qn \"\"))\n                                (reduced false)))\n                          true nm0)))))\n  (extend-type NodeList\n                                        ;specify! (.. (node-list []) -constructor -prototype)\n    ISeqable\n    (-seq [nl] (seq (map as-node (array-seq nl))))\n    ISequential\n    ICounted\n    (-count [nl] (alength nl))\n    IIndexed\n    (-nth\n      ([nl n]\n       (as-node (aget nl n)))\n      ([nl n nf]\n       (if (and (<= 0 n) (< n (alength nl)))\n         (as-node (aget nl n))\n         nf)))\n    IEquiv\n    (-equiv [nl0 nl1]\n      #_(println \"NodeList.-equiv\")\n      (or (identical? nl0 nl1)\n          (and (identical? (count nl0) (count nl1))\n               (reduce (fn [_ n]\n                         (or (= (nth nl0 n) (nth nl1 n))\n                             (reduced false)))\n                       true (range (count nl0)))))))\n  (extend-type Text\n    IEquiv\n    (-equiv [t0 t1]\n      (identical? (.-nodeValue t0)\n                  (if (instance? Text t1)\n                    (.-nodeValue t1)\n                    t1))))\n  (extend-type Attr\n    ISeqable\n    (-seq [attr] (array-seq #js[(key attr) (key attr)]))\n    IMapEntry\n    (-key [attr] (dom-element-tag attr))\n    (-val [attr] (.-value attr))\n    ISequential\n    ICounted\n    (-count [_] 2)\n    IIndexed\n    (-nth\n      ([attr n] (case n\n                  0 (key attr)\n                  1 (val attr)))\n      ([attr n nf]\n       (case n\n         0 (dom-element-tag attr)\n         1 (.-value attr)\n         nf))))\n  {'Text Text\n   'Element Element\n   'NamedNodeMap NamedNodeMap\n   'NodeList NodeList})\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.data.xml.js.dom/doc","js/DOMParser","clojure.data.xml.js.dom/text-node","s","var_args","G__30566","clojure.data.xml.js.dom/element*","js/Error","tag","attrs","content","meta","el","clojure.data.xml.js.dom.element_STAR_.cljs$core$IFn$_invoke$arity$3","x30569","cljs.core/PROTOCOL_SENTINEL","_","x30572","cljs.core/clone","cljs.core/-with-meta","clojure.data.xml.name/qname-uri","clojure.data.xml.name/qname-local","cljs.core/reduce-kv","k","v","uri","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","n","G__30579","clojure.data.xml.js.dom/element","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq30575","G__30576","cljs.core/first","cljs.core/next","G__30577","self__4717__auto__","clojure.data.xml.js.dom/cdata","clojure.data.xml.js.dom/xml-comment","clojure.data.xml.js.dom/node-list","elements","f","seq__30600","cljs.core/seq","chunk__30601","count__30602","i__30603","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","clojure.data.xml.js.dom/element-node","clojure.data.xml.js.dom/Text","cljs.core/type","clojure.data.xml.js.dom/Element","clojure.data.xml.js.dom.element.cljs$core$IFn$_invoke$arity$1","clojure.data.xml.js.dom/NamedNodeMap","clojure.data.xml.js.dom/NodeList","clojure.data.xml.js.dom/Attr","clojure.data.xml.js.dom.element.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.js.dom/CData","clojure.data.xml.js.dom/Comment","clojure.data.xml.node/CData","clojure.data.xml.node/Comment","cljs.core/native-satisfies?","cljs.core/ILookup","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/ISequential","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.js.dom/dom-element-tag","clojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.js.dom/xmlns-attr?","a","clojure.data.xml.name/xmlns-uri","clojure.data.xml.js.dom/remove-xmlns-attrs-xf","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","clojure.data.xml.js.dom/remove-xmlns-attrs","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","cljs.core/into","clojure.data.xml.js.dom/filter-xmlns-attrs-xf","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","clojure.data.xml.js.dom/filter-xmlns-attrs","G__30642","clojure.data.xml.js.dom/dom-element-attrs","clojure.data.xml.js.dom.dom_element_attrs.cljs$core$IFn$_invoke$arity$2","xf","cljs.core.transduce.cljs$core$IFn$_invoke$arity$4","cljs.core.completing.cljs$core$IFn$_invoke$arity$2","ta","attr-node","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/persistent!","cljs.core/transient","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","clojure.data.xml.js.dom/node-list-vec","nl","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","clojure.data.xml.js.dom/element-data","clojure.data.xml.js.dom/as-node","clojure.data.xml.node/xml-comment","clojure.data.xml.node/cdata","clojure.data.xml.node.element_STAR_.cljs$core$IFn$_invoke$arity$4","clojure.data.xml.js.dom.dom_element_attrs.cljs$core$IFn$_invoke$arity$1","clojure.data.xml.js.dom/extend-dom-as-data!","G__30675","G__30680","cljs.core/Keyword","nf","G__30685","G__30687","nm","el0","el1","attr","temp__5718__auto__","i","not-found","acc","init","G__30711","G__30712","G__30713","nm0","nm1","or__4131__auto__","and__4120__auto__","qn","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/reduced","nl0","nl1","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$1","t0","t1","cljs.core/key","G__30781","cljs.core/val","G__30787"]]],"~:cache-keys",["~#cmap",[["^19","clojure/data/xml/node.cljc"],[1551120970000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^S","^R","^O"]]],["~:macro","^R"],[1559826623000],["^19","goog/math/math.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","~$goog.array","~$goog.asserts"]]],["^19","goog/array/array.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","^1L"]]],["^19","goog/debug/error.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S"]]],["^19","goog/dom/nodetype.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S"]]],["^19","goog/object/object.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^19","goog/math/long.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","^1L","~$goog.reflect"]]],["^19","goog/string/internal.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S"]]],["^19","goog/functions/functions.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S"]]],["^19","clojure/data/xml/js/dom.cljs"],[1551120970000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","^R","^O","^P"]]],["^19","goog/structs/map.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^19","clojure/data/xml/js/name.cljs"],[1551120970000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","^R","~$clojure.data.xml.protocols","~$clojure.string"]]],["^19","goog/asserts/asserts.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^19","goog/uri/uri.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","^1K","^1L","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^19","goog/base.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",[]]],["^19","goog/structs/structs.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","^1K","~$goog.object"]]],["^19","clojure/data/xml/protocols.cljc"],[1551120970000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","^R"]]],["^19","clojure/string.cljs"],[1559826623000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","^R","^1U","~$goog.string.StringBuffer"]]],["^19","goog/string/string.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","~$goog.string.internal"]]],["^19","goog/reflect/reflect.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S"]]],["^19","goog/string/stringbuffer.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S"]]],["^19","clojure/data/xml/name.cljc"],[1551120970000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","^R","^1R","~$clojure.data.xml.js.name","^1Q","^20"]]],["^19","goog/iter/iter.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","^1K","^1L","~$goog.functions","~$goog.math"]]],["^19","cljs/core.cljs"],[1559826623000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["~$goog.math.Long","~$goog.math.Integer","^1U","^1[","^1K","~$goog.Uri","^20"]]],["^19","goog/math/integer.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S"]]],["^19","goog/uri/utils.js"],[1560546089000,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^S","^1K","^1L","^1U"]]],["^1J","~$clojure.data.xml.impl"],[1551120970000]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",1,"^8",5,"^9",1,"^:",28],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^P","^Q","^P","^R","^R","^S","^S"],"^T",["^H",["^U"]],"~:shadow/js-access-global",["^H",["DOMParser","Error"]],"^V",["^ ","^W","^O","^X","^O","^Y","^O","^Z","^O"],"~:defs",["^ ","~$filter-xmlns-attrs-xf",["^ ","^I","~$clojure.data.xml.js.dom/filter-xmlns-attrs-xf","^6","clojure/data/xml/js/dom.cljs","^7",119,"^8",1,"^9",119,"^:",27,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",119,"^8",6,"^9",119,"^:",27],"~:tag","~$function"],"~$node-list",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",64,"^8",7,"^9",64,"^:",16,"~:arglists",["^11",["~$quote",["^11",[["~$elements"]]]]],"~:doc","Create a NodeList"],"^I","~$clojure.data.xml.js.dom/node-list","^6","clojure/data/xml/js/dom.cljs","^:",16,"~:method-params",["^11",[["^2D"]]],"~:protocol-impl",null,"~:arglists-meta",["^11",[null,null]],"^8",1,"~:variadic?",false,"^7",64,"~:ret-tag","~$js","^9",64,"~:max-fixed-arity",1,"~:fn-var",true,"^2B",["^11",["^2C",["^11",[["^2D"]]]]],"^2E","Create a NodeList"],"~$doc",["^ ","^I","~$clojure.data.xml.js.dom/doc","^6","clojure/data/xml/js/dom.cljs","^7",6,"^8",1,"^9",6,"^:",9,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",6,"^8",6,"^9",6,"^:",9],"^2>","^2L"],"~$node-list-vec",["^ ","^2A",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",138,"^8",8,"^9",138,"^:",21,"~:private",true,"^2B",["^11",["^2C",["^11",[["~$nl"]]]]]],"^2R",true,"^I","~$clojure.data.xml.js.dom/node-list-vec","^6","clojure/data/xml/js/dom.cljs","^:",21,"^2G",["^11",[["^2S"]]],"^2H",null,"^2I",["^11",[null,null]],"^8",1,"^2J",false,"^7",138,"^2K",["^H",["~$clj","~$any"]],"^9",138,"^2M",1,"^2N",true,"^2B",["^11",["^2C",["^11",[["^2S"]]]]]],"~$cdata",["^ ","^2A",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",52,"^8",7,"^9",52,"^:",12,"^2B",["^11",["^2C",["^11",[["~$content"]]]]],"^2E","Create a CData node"],"^I","~$clojure.data.xml.js.dom/cdata","^6","clojure/data/xml/js/dom.cljs","^:",12,"^2G",["^11",[["^2X"]]],"^2H",null,"^2I",["^11",[null,null]],"^8",1,"^2J",false,"^7",52,"^2K","^2L","^9",52,"^2M",1,"^2N",true,"^2B",["^11",["^2C",["^11",[["^2X"]]]]],"^2E","Create a CData node"],"~$xmlns-attr?",["^ ","^2A",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",115,"^8",8,"^9",115,"^:",19,"^2R",true,"^2B",["^11",["^2C",["^11",[["~$a"]]]]]],"^2R",true,"^I","~$clojure.data.xml.js.dom/xmlns-attr?","^6","clojure/data/xml/js/dom.cljs","^:",19,"^2G",["^11",[["~$a"]]],"^2H",null,"^2I",["^11",[null,null]],"^8",1,"^2J",false,"^7",115,"^2K","~$boolean","^9",115,"^2M",1,"^2N",true,"^2B",["^11",["^2C",["^11",[["~$a"]]]]]],"~$filter-xmlns-attrs",["^ ","^I","~$clojure.data.xml.js.dom/filter-xmlns-attrs","^6","clojure/data/xml/js/dom.cljs","^7",120,"^8",1,"^9",120,"^:",24,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",120,"^8",6,"^9",120,"^:",24],"^2>","^2?"],"~$Attr",["^ ","^I","~$clojure.data.xml.js.dom/Attr","^6","clojure/data/xml/js/dom.cljs","^7",81,"^8",1,"^9",81,"^:",10,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",81,"^8",6,"^9",81,"^:",10],"^2>",["^H",["^2V","~$clj-nil"]]],"~$NamedNodeMap",["^ ","^I","~$clojure.data.xml.js.dom/NamedNodeMap","^6","clojure/data/xml/js/dom.cljs","^7",79,"^8",1,"^9",79,"^:",18,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",79,"^8",6,"^9",79,"^:",18],"^2>",["^H",["^2V","^35"]]],"~$element",["^ ","^2A",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",46,"^8",7,"^9",46,"^:",14,"^2B",["^11",["^2C",["^11",[["~$tag"],["^39","~$attrs"],["^39","^3:","~$&","^2X"]]]]],"^2E","Create an xml Element from content varargs","~:top-fn",["^ ","^2J",true,"~:fixed-arity",2,"^2M",2,"^2G",["^11",[["^39"],["^39","^3:"]]],"^2B",["^11",[["^39"],["^39","^3:"],["^39","^3:","~$&","^2X"]]],"^2I",["^11",[null,null,null]]]],"^I","~$clojure.data.xml.js.dom/element","^6","clojure/data/xml/js/dom.cljs","^:",14,"^3;",["^ ","^2J",true,"^3<",2,"^2M",2,"^2G",["^11",[["^39"],["^39","^3:"]]],"^2B",["^11",[["^39"],["^39","^3:"],["^39","^3:","~$&","^2X"]]],"^2I",["^11",[null,null,null]]],"^2G",["^11",[["^39"],["^39","^3:"]]],"^2H",null,"^3<",2,"^2I",["^11",[null,null,null]],"^8",1,"^2J",true,"~:methods",[["^ ","^3<",1,"^2J",false,"^2>","^2L"],["^ ","^3<",2,"^2J",false,"^2>","^2L"],["^ ","^3<",2,"^2J",true,"^2>","^2L"]],"^7",46,"^9",46,"^2M",2,"^2N",true,"^2B",["^11",[["^39"],["^39","^3:"],["^39","^3:","~$&","^2X"]]],"^2E","Create an xml Element from content varargs"],"~$remove-xmlns-attrs-xf",["^ ","^I","~$clojure.data.xml.js.dom/remove-xmlns-attrs-xf","^6","clojure/data/xml/js/dom.cljs","^7",117,"^8",1,"^9",117,"^:",27,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",117,"^8",6,"^9",117,"^:",27],"^2>","^2?"],"~$remove-xmlns-attrs",["^ ","^I","~$clojure.data.xml.js.dom/remove-xmlns-attrs","^6","clojure/data/xml/js/dom.cljs","^7",118,"^8",1,"^9",118,"^:",24,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",118,"^8",6,"^9",118,"^:",24],"^2>","^2?"],"~$extend-dom-as-data!",["^ ","^2A",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",172,"^8",7,"^9",172,"^:",26,"^2B",["^11",["^2C",["^11",[[]]]]]],"^I","~$clojure.data.xml.js.dom/extend-dom-as-data!","^6","clojure/data/xml/js/dom.cljs","^:",26,"^2G",["^11",[[]]],"^2H",null,"^2I",["^11",[null,null]],"^8",1,"^2J",false,"^7",172,"^2K","~$cljs.core/IMap","^9",172,"^2M",0,"^2N",true,"^2B",["^11",["^2C",["^11",[[]]]]]],"~$Comment",["^ ","^I","~$clojure.data.xml.js.dom/Comment","^6","clojure/data/xml/js/dom.cljs","^7",83,"^8",1,"^9",83,"^:",13,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",83,"^8",6,"^9",83,"^:",13],"^2>",["^H",["^2V","^35"]]],"~$Element",["^ ","^I","~$clojure.data.xml.js.dom/Element","^6","clojure/data/xml/js/dom.cljs","^7",78,"^8",1,"^9",78,"^:",13,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",78,"^8",6,"^9",78,"^:",13],"^2>",["^H",["^2V","^35"]]],"~$NodeList",["^ ","^I","~$clojure.data.xml.js.dom/NodeList","^6","clojure/data/xml/js/dom.cljs","^7",80,"^8",1,"^9",80,"^:",14,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",80,"^8",6,"^9",80,"^:",14],"^2>",["^H",["^2V","^35"]]],"~$text-node",["^ ","^2A",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",10,"^8",7,"^9",10,"^:",16,"^2B",["^11",["^2C",["^11",[["~$s"]]]]],"^2E","Create a Text node"],"^I","~$clojure.data.xml.js.dom/text-node","^6","clojure/data/xml/js/dom.cljs","^:",16,"^2G",["^11",[["~$s"]]],"^2H",null,"^2I",["^11",[null,null]],"^8",1,"^2J",false,"^7",10,"^2K","^2L","^9",10,"^2M",1,"^2N",true,"^2B",["^11",["^2C",["^11",[["~$s"]]]]],"^2E","Create a Text node"],"~$CData",["^ ","^I","~$clojure.data.xml.js.dom/CData","^6","clojure/data/xml/js/dom.cljs","^7",82,"^8",1,"^9",82,"^:",11,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",82,"^8",6,"^9",82,"^:",11],"^2>",["^H",["^2V","^35"]]],"~$element-data",["^ ","^2A",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",146,"^8",7,"^9",146,"^:",19,"^2B",["^11",["^2C",["^11",[["~$el"]]]]],"^2E","Coerce xml elements to element maps / content vectors"],"^I","~$clojure.data.xml.js.dom/element-data","^6","clojure/data/xml/js/dom.cljs","^:",19,"^2G",["^11",[["^3Q"]]],"^2H",null,"^2I",["^11",[null,null]],"^8",1,"^2J",false,"^7",146,"^2K",["^H",[null,"~$clojure.data.xml.node/Comment","^2U","~$clojure.data.xml.node/Element","^2V","~$clojure.data.xml.node/CData","~$string"]],"^9",146,"^2M",1,"^2N",true,"^2B",["^11",["^2C",["^11",[["^3Q"]]]]],"^2E","Coerce xml elements to element maps / content vectors"],"~$dom-element-attrs",["^ ","^2A",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",122,"^8",7,"^9",122,"^:",24,"^2B",["^11",["^2C",["^11",[["^3Q"],["~$xf","^3Q"]]]]],"^3;",["^ ","^2J",false,"^3<",2,"^2M",2,"^2G",["^11",[["^3Q"],["^3X","^3Q"]]],"^2B",["^11",[["^3Q"],["^3X","^3Q"]]],"^2I",["^11",[null,null]]]],"^I","~$clojure.data.xml.js.dom/dom-element-attrs","^6","clojure/data/xml/js/dom.cljs","^:",24,"^3;",["^ ","^2J",false,"^3<",2,"^2M",2,"^2G",["^11",[["^3Q"],["^3X","^3Q"]]],"^2B",["^11",[["^3Q"],["^3X","^3Q"]]],"^2I",["^11",[null,null]]],"^2G",["^11",[["^3Q"],["^3X","^3Q"]]],"^2H",null,"^3<",2,"^2I",["^11",[null,null]],"^8",1,"^2J",false,"^3>",[["^ ","^3<",1,"^2J",false,"^2>","^2V"],["^ ","^3<",2,"^2J",false,"^2>","^2V"]],"^7",122,"^9",122,"^2M",2,"^2N",true,"^2B",["^11",[["^3Q"],["^3X","^3Q"]]]],"~$element*",["^ ","^2A",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",15,"^8",7,"^9",15,"^:",15,"^2B",["^11",["^2C",["^11",[["^39","^3:","^2X","~$meta"],["^39","^3:","^2X"]]]]],"^2E","Create an xml element from a content collection and optional metadata","^3;",["^ ","^2J",false,"^3<",4,"^2M",4,"^2G",["^11",[["^39","^3:","^2X","^3["],["^39","^3:","^2X"]]],"^2B",["^11",[["^39","^3:","^2X","^3["],["^39","^3:","^2X"]]],"^2I",["^11",[null,null]]]],"^I","~$clojure.data.xml.js.dom/element*","^6","clojure/data/xml/js/dom.cljs","^:",15,"^3;",["^ ","^2J",false,"^3<",4,"^2M",4,"^2G",["^11",[["^39","^3:","^2X","^3["],["^39","^3:","^2X"]]],"^2B",["^11",[["^39","^3:","^2X","^3["],["^39","^3:","^2X"]]],"^2I",["^11",[null,null]]],"^2G",["^11",[["^39","^3:","^2X","^3["],["^39","^3:","^2X"]]],"^2H",null,"^3<",4,"^2I",["^11",[null,null]],"^8",1,"^2J",false,"^3>",[["^ ","^3<",4,"^2J",false,"^2>","^2V"],["^ ","^3<",3,"^2J",false,"^2>","^2L"]],"^7",15,"^9",15,"^2M",4,"^2N",true,"^2B",["^11",[["^39","^3:","^2X","^3["],["^39","^3:","^2X"]]],"^2E","Create an xml element from a content collection and optional metadata"],"~$xml-comment",["^ ","^2A",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",57,"^8",7,"^9",57,"^:",18,"^2B",["^11",["^2C",["^11",[["^2X"]]]]],"^2E","Create a Comment node"],"^I","~$clojure.data.xml.js.dom/xml-comment","^6","clojure/data/xml/js/dom.cljs","^:",18,"^2G",["^11",[["^2X"]]],"^2H",null,"^2I",["^11",[null,null]],"^8",1,"^2J",false,"^7",57,"^2K","^2L","^9",57,"^2M",1,"^2N",true,"^2B",["^11",["^2C",["^11",[["^2X"]]]]],"^2E","Create a Comment node"],"~$element-node",["^ ","^2A",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",89,"^8",7,"^9",89,"^:",19,"^2B",["^11",["^2C",["^11",[["^3Q"]]]]],"^2E","Coerce xml elements to dom nodes"],"^I","~$clojure.data.xml.js.dom/element-node","^6","clojure/data/xml/js/dom.cljs","^:",19,"^2G",["^11",[["^3Q"]]],"^2H",null,"^2I",["^11",[null,null]],"^8",1,"^2J",false,"^7",89,"^2K",["^H",[null,"^2L","^3O","~$clojure.data.xml.js.dom/Text","^3G","^3I"]],"^9",89,"^2M",1,"^2N",true,"^2B",["^11",["^2C",["^11",[["^3Q"]]]]],"^2E","Coerce xml elements to dom nodes"],"~$Text",["^ ","^I","^45","^6","clojure/data/xml/js/dom.cljs","^7",77,"^8",1,"^9",77,"^:",10,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",77,"^8",6,"^9",77,"^:",10],"^2>",["^H",["^2V","^35"]]],"~$dom-element-tag",["^ ","^2A",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",111,"^8",8,"^9",111,"^:",23,"^2R",true,"^2B",["^11",["^2C",["^11",[["^3Q"]]]]]],"^2R",true,"^I","~$clojure.data.xml.js.dom/dom-element-tag","^6","clojure/data/xml/js/dom.cljs","^:",23,"^2G",["^11",[["^3Q"]]],"^2H",null,"^2I",["^11",[null,null]],"^8",1,"^2J",false,"^7",111,"^2K","~$cljs.core/Keyword","^9",111,"^2M",1,"^2N",true,"^2B",["^11",["^2C",["^11",[["^3Q"]]]]]],"~$as-node",["^ ","^2A",null,"^5",["^ ","^6","clojure/data/xml/js/dom.cljs","^7",141,"^8",8,"^9",141,"^:",15,"^2R",true,"^2B",["^11",["^2C",["^11",[["~$n"]]]]]],"^2R",true,"^I","~$clojure.data.xml.js.dom/as-node","^6","clojure/data/xml/js/dom.cljs","^:",15,"^2G",["^11",[["~$n"]]],"^2H",null,"^2I",["^11",[null,null]],"^8",1,"^2J",false,"^7",141,"^2K",["^H",[null,"^2V"]],"^9",141,"^2M",1,"^2N",true,"^2B",["^11",["^2C",["^11",[["~$n"]]]]]]],"^[",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^H",["~:el","~:key","~:element","~:clojure.data.xml/nss","~:else","~:content","^36","~:e","^3H","^3J","~:attrs","^10","^2>","^46","~$isEqualNode","~:a"]],"~:order",["~:e","~:a","^4B","^2>","^4C","^4A","^10","^4@","^4?","^4>","^4=","^4D","^46","^3H","^36","^3J"]],"^15",["^ ","^U",["^H",[]]],"^16",["^ "],"^17",["^S","^R","^O","^P"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1E",[["^4H","~:static-fns"],true,["^4H","~:elide-asserts"],true,["^4H","~:optimize-constants"],null,["^4H","^1<"],null,["^4H","~:external-config"],null,["^4H","~:tooling-config"],null,["^4H","~:emit-constants"],null,["^4H","~:load-tests"],false,["^4H","~:infer-externs"],"~:auto",["^4H","^1>"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^4H","~:fn-invoke-direct"],null,["^4H","~:source-map"],null]]]