["^ ","~:output",["^ ","~:js","goog.provide('lib_draw_graph.postprocessor');\n/**\n * Returns clusters that (a) contain clusters (b) contain no nodes directly.\n */\nlib_draw_graph.postprocessor.free_clusters = (function lib_draw_graph$postprocessor$free_clusters(g){\nvar clstrs = lib_draw_graph.clustered.clusters(g);\nvar has_chdn = cljs.core.filter.cljs$core$IFn$_invoke$arity$2(((function (clstrs){\nreturn (function (p1__18616_SHARP_){\nreturn (!((lib_draw_graph.clustered.cluster_children(g,p1__18616_SHARP_) == null)));\n});})(clstrs))\n,clstrs);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,has_chdn);\n});\n/**\n * Returns set s with x removed.\n */\nlib_draw_graph.postprocessor.without = (function lib_draw_graph$postprocessor$without(s,x){\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2(s,cljs.core.PersistentHashSet.createAsIfByAssoc([x]));\n});\n/**\n * Returns the pair [element, s'] where s' is set s with element removed.\n */\nlib_draw_graph.postprocessor.take_1 = (function lib_draw_graph$postprocessor$take_1(s){\n\nvar item = cljs.core.first(s);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [item,lib_draw_graph.postprocessor.without(s,item)], null);\n});\n/**\n * Returns the set of nodes in graph g for which there are no incoming\n *   edges, where g is a map of nodes to sets of nodes.\n */\nlib_draw_graph.postprocessor.no_incoming = (function lib_draw_graph$postprocessor$no_incoming(g){\nvar nodes = cljs.core.set(cljs.core.keys(g));\nvar have_incoming = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(clojure.set.union,cljs.core.vals(g));\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2(nodes,have_incoming);\n});\n/**\n * Returns g with empty outgoing edges added for nodes with incoming\n *   edges only.  Example: {:a #{:b}} => {:a #{:b}, :b #{}}\n */\nlib_draw_graph.postprocessor.normalize = (function lib_draw_graph$postprocessor$normalize(g){\nvar have_incoming = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(clojure.set.union,cljs.core.vals(g));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (have_incoming){\nreturn (function (p1__18626_SHARP_,p2__18627_SHARP_){\nif(cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(p1__18626_SHARP_,p2__18627_SHARP_))){\nreturn p1__18626_SHARP_;\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(p1__18626_SHARP_,p2__18627_SHARP_,cljs.core.PersistentHashSet.EMPTY);\n}\n});})(have_incoming))\n,g,have_incoming);\n});\n/**\n * Proposes a topological sort for directed graph g using Kahn's\n *   algorithm, where g is a map of nodes to sets of nodes. If g is\n *   cyclic, returns nil.\n */\nlib_draw_graph.postprocessor.kahn_sort = (function lib_draw_graph$postprocessor$kahn_sort(var_args){\nvar G__18631 = arguments.length;\nswitch (G__18631) {\ncase 1:\nreturn lib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn lib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nlib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$1 = (function (g){\nreturn lib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$3(lib_draw_graph.postprocessor.normalize(g),cljs.core.PersistentVector.EMPTY,lib_draw_graph.postprocessor.no_incoming(g));\n});\n\nlib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$3 = (function (g,l,s){\nwhile(true){\nif(cljs.core.empty_QMARK_(s)){\nif(cljs.core.every_QMARK_(cljs.core.empty_QMARK_,cljs.core.vals(g))){\nreturn l;\n} else {\nreturn null;\n}\n} else {\nvar vec__18637 = lib_draw_graph.postprocessor.take_1(s);\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18637,(0),null);\nvar s_SINGLEQUOTE_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18637,(1),null);\nvar m = (g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(n) : g.call(null,n));\nvar g_SINGLEQUOTE_ = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (g,l,s,vec__18637,n,s_SINGLEQUOTE_,m){\nreturn (function (p1__18628_SHARP_,p2__18629_SHARP_){\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(p1__18628_SHARP_,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [n], null),lib_draw_graph.postprocessor.without,p2__18629_SHARP_);\n});})(g,l,s,vec__18637,n,s_SINGLEQUOTE_,m))\n,g,m);\nvar G__18703 = g_SINGLEQUOTE_;\nvar G__18704 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(l,n);\nvar G__18705 = clojure.set.union.cljs$core$IFn$_invoke$arity$2(s_SINGLEQUOTE_,clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(lib_draw_graph.postprocessor.no_incoming(g_SINGLEQUOTE_),m));\ng = G__18703;\nl = G__18704;\ns = G__18705;\ncontinue;\n}\nbreak;\n}\n});\n\nlib_draw_graph.postprocessor.kahn_sort.cljs$lang$maxFixedArity = 3;\n\n/**\n * Kahn sorted free clusters\n */\nlib_draw_graph.postprocessor.sorted_free_clusters = (function lib_draw_graph$postprocessor$sorted_free_clusters(g){\nreturn cljs.core.filter.cljs$core$IFn$_invoke$arity$2(lib_draw_graph.postprocessor.free_clusters(g),lib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$1(lib_draw_graph.clustered.cluster_graph(g)));\n});\n/**\n * Returns a vec of clusters with their children.\n */\nlib_draw_graph.postprocessor.with_chdn = (function lib_draw_graph$postprocessor$with_chdn(g,clstrs){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__18640_SHARP_){\nreturn (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[p1__18640_SHARP_,lib_draw_graph.clustered.cluster_children(g,p1__18640_SHARP_)],null));\n}),clstrs);\n});\n/**\n * Provides the targets for annealing in the graph.\n */\nlib_draw_graph.postprocessor.free_clusters_with_children = (function lib_draw_graph$postprocessor$free_clusters_with_children(g){\nreturn lib_draw_graph.postprocessor.with_chdn(g,lib_draw_graph.postprocessor.sorted_free_clusters(g));\n});\nlib_draw_graph.postprocessor.svg__GT_zipper = (function lib_draw_graph$postprocessor$svg__GT_zipper(svg){\nreturn lib_draw_graph.svg.__GT_zipper(lib_draw_graph.svg.parse_svg(svg));\n});\n/**\n * Get the bounding boxes for the clusters from the zipper over the svg.\n */\nlib_draw_graph.postprocessor.clusters__GT_boxes = (function lib_draw_graph$postprocessor$clusters__GT_boxes(z,clstrs){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (a,c){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(a,c,lib_draw_graph.svg.cluster__GT_rect(z,c));\n}),cljs.core.PersistentArrayMap.EMPTY,clstrs);\n});\n/**\n * Converts anneal-tasks to a set of clusters\n */\nlib_draw_graph.postprocessor.tasks__GT_clusters = (function lib_draw_graph$postprocessor$tasks__GT_clusters(tasks){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (a,c){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(a,cljs.core.first(c)),cljs.core.second(c));\n}),cljs.core.PersistentHashSet.EMPTY,tasks);\n});\n/**\n * Returns the separation map between the bounding\n */\nlib_draw_graph.postprocessor.sep = (function lib_draw_graph$postprocessor$sep(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___18706 = arguments.length;\nvar i__4731__auto___18707 = (0);\nwhile(true){\nif((i__4731__auto___18707 < len__4730__auto___18706)){\nargs__4736__auto__.push((arguments[i__4731__auto___18707]));\n\nvar G__18708 = (i__4731__auto___18707 + (1));\ni__4731__auto___18707 = G__18708;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn lib_draw_graph.postprocessor.sep.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nlib_draw_graph.postprocessor.sep.cljs$core$IFn$_invoke$arity$variadic = (function (bounding,rects){\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"l\",\"l\",1395893423),(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.min,cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"x\",\"x\",2099068185),rects)) - new cljs.core.Keyword(null,\"x\",\"x\",2099068185).cljs$core$IFn$_invoke$arity$1(bounding)),new cljs.core.Keyword(null,\"t\",\"t\",-1397832519),(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.min,cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"y\",\"y\",-1757859776),rects)) - new cljs.core.Keyword(null,\"y\",\"y\",-1757859776).cljs$core$IFn$_invoke$arity$1(bounding)),new cljs.core.Keyword(null,\"r\",\"r\",-471384190),((new cljs.core.Keyword(null,\"x\",\"x\",2099068185).cljs$core$IFn$_invoke$arity$1(bounding) + new cljs.core.Keyword(null,\"w\",\"w\",354169001).cljs$core$IFn$_invoke$arity$1(bounding)) - cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.max,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (o){\nreturn (new cljs.core.Keyword(null,\"x\",\"x\",2099068185).cljs$core$IFn$_invoke$arity$1(o) + new cljs.core.Keyword(null,\"w\",\"w\",354169001).cljs$core$IFn$_invoke$arity$1(o));\n}),rects))),new cljs.core.Keyword(null,\"b\",\"b\",1482224470),((new cljs.core.Keyword(null,\"y\",\"y\",-1757859776).cljs$core$IFn$_invoke$arity$1(bounding) + new cljs.core.Keyword(null,\"h\",\"h\",1109658740).cljs$core$IFn$_invoke$arity$1(bounding)) - cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.max,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (o){\nreturn (new cljs.core.Keyword(null,\"y\",\"y\",-1757859776).cljs$core$IFn$_invoke$arity$1(o) + new cljs.core.Keyword(null,\"h\",\"h\",1109658740).cljs$core$IFn$_invoke$arity$1(o));\n}),rects)))], null);\n});\n\nlib_draw_graph.postprocessor.sep.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nlib_draw_graph.postprocessor.sep.cljs$lang$applyTo = (function (seq18650){\nvar G__18651 = cljs.core.first(seq18650);\nvar seq18650__$1 = cljs.core.next(seq18650);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__18651,seq18650__$1);\n});\n\nlib_draw_graph.postprocessor.collision_sep = (8);\n/**\n * takes a sep, preserves the top but adjusts other seps to minimum.\n */\nlib_draw_graph.postprocessor.adjust_sep = (function lib_draw_graph$postprocessor$adjust_sep(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___18709 = arguments.length;\nvar i__4731__auto___18710 = (0);\nwhile(true){\nif((i__4731__auto___18710 < len__4730__auto___18709)){\nargs__4736__auto__.push((arguments[i__4731__auto___18710]));\n\nvar G__18711 = (i__4731__auto___18710 + (1));\ni__4731__auto___18710 = G__18711;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn lib_draw_graph.postprocessor.adjust_sep.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nlib_draw_graph.postprocessor.adjust_sep.cljs$core$IFn$_invoke$arity$variadic = (function (sep,p__18663){\nvar map__18664 = p__18663;\nvar map__18664__$1 = (((((!((map__18664 == null))))?(((((map__18664.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__18664.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__18664):map__18664);\nvar cluster_sep = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__18664__$1,new cljs.core.Keyword(null,\"cluster-sep\",\"cluster-sep\",127315253),null);\nvar BT_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__18664__$1,new cljs.core.Keyword(null,\"BT?\",\"BT?\",664855515),false);\nif(cljs.core.not(BT_QMARK_)){\nif(cljs.core.truth_(cluster_sep)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(sep,new cljs.core.Keyword(null,\"l\",\"l\",1395893423),cluster_sep,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"r\",\"r\",-471384190),cluster_sep,new cljs.core.Keyword(null,\"b\",\"b\",1482224470),cluster_sep], 0));\n} else {\nvar min_lrb = (function (){var x__4222__auto__ = (function (){var x__4222__auto__ = new cljs.core.Keyword(null,\"l\",\"l\",1395893423).cljs$core$IFn$_invoke$arity$1(sep);\nvar y__4223__auto__ = new cljs.core.Keyword(null,\"r\",\"r\",-471384190).cljs$core$IFn$_invoke$arity$1(sep);\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})();\nvar y__4223__auto__ = new cljs.core.Keyword(null,\"b\",\"b\",1482224470).cljs$core$IFn$_invoke$arity$1(sep);\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})();\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(sep,new cljs.core.Keyword(null,\"l\",\"l\",1395893423),min_lrb,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"r\",\"r\",-471384190),min_lrb,new cljs.core.Keyword(null,\"b\",\"b\",1482224470),min_lrb], 0));\n}\n} else {\nif(cljs.core.truth_(cluster_sep)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(sep,new cljs.core.Keyword(null,\"l\",\"l\",1395893423),cluster_sep,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"r\",\"r\",-471384190),cluster_sep,new cljs.core.Keyword(null,\"t\",\"t\",-1397832519),cluster_sep], 0));\n} else {\nvar min_lrt = (function (){var x__4222__auto__ = (function (){var x__4222__auto__ = new cljs.core.Keyword(null,\"l\",\"l\",1395893423).cljs$core$IFn$_invoke$arity$1(sep);\nvar y__4223__auto__ = new cljs.core.Keyword(null,\"r\",\"r\",-471384190).cljs$core$IFn$_invoke$arity$1(sep);\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})();\nvar y__4223__auto__ = new cljs.core.Keyword(null,\"t\",\"t\",-1397832519).cljs$core$IFn$_invoke$arity$1(sep);\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})();\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(sep,new cljs.core.Keyword(null,\"l\",\"l\",1395893423),min_lrt,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"r\",\"r\",-471384190),min_lrt,new cljs.core.Keyword(null,\"t\",\"t\",-1397832519),min_lrt], 0));\n}\n}\n});\n\nlib_draw_graph.postprocessor.adjust_sep.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nlib_draw_graph.postprocessor.adjust_sep.cljs$lang$applyTo = (function (seq18660){\nvar G__18661 = cljs.core.first(seq18660);\nvar seq18660__$1 = cljs.core.next(seq18660);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__18661,seq18660__$1);\n});\n\nlib_draw_graph.postprocessor.parse_int = (function lib_draw_graph$postprocessor$parse_int(s){\nreturn parseInt(s);\n});\nlib_draw_graph.postprocessor.str__GT_int = (function lib_draw_graph$postprocessor$str__GT_int(cs,error_msg){\nif(cljs.core.integer_QMARK_(cs)){\nreturn cs;\n} else {\ntry{return lib_draw_graph.postprocessor.parse_int(cs);\n}catch (e18671){if((e18671 instanceof Error)){\nvar e = e18671;\nthrow lib_draw_graph.util.err(error_msg);\n} else {\nthrow e18671;\n\n}\n}}\n});\n/**\n * Constructs a nested map which parameters required for annealing\n * from a zipper, a graph and the key clustered on in the graph.\n */\nlib_draw_graph.postprocessor.env = (function lib_draw_graph$postprocessor$env(z,g,opts,node_label_fn){\nvar cluster_sep = (cljs.core.truth_(new cljs.core.Keyword(null,\"pp-cluster-sep\",\"pp-cluster-sep\",335802146).cljs$core$IFn$_invoke$arity$1(opts))?lib_draw_graph.postprocessor.str__GT_int(new cljs.core.Keyword(null,\"pp-cluster-sep\",\"pp-cluster-sep\",335802146).cljs$core$IFn$_invoke$arity$1(opts),\"cluster separation should be an integer\"):null);\nvar BT_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"rankdir\",\"rankdir\",-2029540135).cljs$core$IFn$_invoke$arity$1(opts),\"BT\");\nvar tasks = lib_draw_graph.postprocessor.free_clusters_with_children(g);\nvar clstrs = lib_draw_graph.postprocessor.tasks__GT_clusters(tasks);\nvar rects = lib_draw_graph.postprocessor.clusters__GT_boxes(z,clstrs);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (cluster_sep,BT_QMARK_,tasks,clstrs,rects){\nreturn (function (a,p__18678){\nvar vec__18679 = p__18678;\nvar prnt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18679,(0),null);\nvar chdn = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18679,(1),null);\nvar p_rect = cljs.core.get.cljs$core$IFn$_invoke$arity$2(rects,prnt);\nvar c_rects = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (p_rect,vec__18679,prnt,chdn,cluster_sep,BT_QMARK_,tasks,clstrs,rects){\nreturn (function (p1__18673_SHARP_){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(rects,p1__18673_SHARP_);\n});})(p_rect,vec__18679,prnt,chdn,cluster_sep,BT_QMARK_,tasks,clstrs,rects))\n,chdn);\nvar sep = (cljs.core.truth_(cluster_sep)?lib_draw_graph.postprocessor.adjust_sep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.apply.cljs$core$IFn$_invoke$arity$3(lib_draw_graph.postprocessor.sep,p_rect,c_rects),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"cluster-sep\",\"cluster-sep\",127315253),cluster_sep,new cljs.core.Keyword(null,\"BT?\",\"BT?\",664855515),BT_QMARK_], 0)):lib_draw_graph.postprocessor.adjust_sep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.apply.cljs$core$IFn$_invoke$arity$3(lib_draw_graph.postprocessor.sep,p_rect,c_rects),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"BT?\",\"BT?\",664855515),BT_QMARK_], 0)));\nvar state = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (p_rect,c_rects,sep,vec__18679,prnt,chdn,cluster_sep,BT_QMARK_,tasks,clstrs,rects){\nreturn (function (p1__18674_SHARP_){\nreturn (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[p1__18674_SHARP_,cljs.core.get.cljs$core$IFn$_invoke$arity$2(rects,p1__18674_SHARP_)],null));\n});})(p_rect,c_rects,sep,vec__18679,prnt,chdn,cluster_sep,BT_QMARK_,tasks,clstrs,rects))\n,chdn));\nvar constr = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"boundary\",\"boundary\",-2000996754),lib_draw_graph.geometry.inner_rect(sep,p_rect),new cljs.core.Keyword(null,\"grow\",\"grow\",-524118895),true,new cljs.core.Keyword(null,\"collision\",\"collision\",-201625508),(cljs.core.truth_(cluster_sep)?cluster_sep:lib_draw_graph.postprocessor.collision_sep),new cljs.core.Keyword(null,\"obstacles\",\"obstacles\",1370670211),cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (p_rect,c_rects,sep,state,vec__18679,prnt,chdn,cluster_sep,BT_QMARK_,tasks,clstrs,rects){\nreturn (function (acc,cur){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,(node_label_fn.cljs$core$IFn$_invoke$arity$1 ? node_label_fn.cljs$core$IFn$_invoke$arity$1(cur) : node_label_fn.call(null,cur)),lib_draw_graph.svg.node__GT_rect(z,(node_label_fn.cljs$core$IFn$_invoke$arity$1 ? node_label_fn.cljs$core$IFn$_invoke$arity$1(cur) : node_label_fn.call(null,cur))));\n});})(p_rect,c_rects,sep,state,vec__18679,prnt,chdn,cluster_sep,BT_QMARK_,tasks,clstrs,rects))\n,cljs.core.PersistentArrayMap.EMPTY,lib_draw_graph.clustered.cluster__GT_nodes.cljs$core$IFn$_invoke$arity$2(g,prnt))], null);\nreturn cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(a,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [prnt,new cljs.core.Keyword(null,\"constraints\",\"constraints\",422775616)], null),constr),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [prnt,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099)], null),state),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [prnt,new cljs.core.Keyword(null,\"boundary-sep\",\"boundary-sep\",959091714)], null),sep),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [prnt,new cljs.core.Keyword(null,\"rect\",\"rect\",-108902628)], null),p_rect);\n});})(cluster_sep,BT_QMARK_,tasks,clstrs,rects))\n,cljs.core.PersistentArrayMap.EMPTY,tasks);\n});\n/**\n * Flattens an environment back rectangles\n */\nlib_draw_graph.postprocessor.env__GT_map = (function lib_draw_graph$postprocessor$env__GT_map(env){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (a,p__18683){\nvar vec__18684 = p__18683;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18684,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18684,(1),null);\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(a,k,new cljs.core.Keyword(null,\"rect\",\"rect\",-108902628).cljs$core$IFn$_invoke$arity$1(v)),new cljs.core.Keyword(null,\"state\",\"state\",-1988618099).cljs$core$IFn$_invoke$arity$1(v)], 0));\n}),cljs.core.PersistentArrayMap.EMPTY,env);\n});\nlib_draw_graph.postprocessor.max_move_factor = (50);\nlib_draw_graph.postprocessor.do_annealing = (function lib_draw_graph$postprocessor$do_annealing(z,g,opts,label_fn){\nvar env = lib_draw_graph.postprocessor.env(z,g,opts,label_fn);\nvar rankdir = new cljs.core.Keyword(null,\"rankdir\",\"rankdir\",-2029540135).cljs$core$IFn$_invoke$arity$1(opts);\nvar y_retard = ((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"TB\",rankdir)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"BT\",rankdir))))?lib_draw_graph.postprocessor.str__GT_int(new cljs.core.Keyword(null,\"pp-anneal-bias\",\"pp-anneal-bias\",1268244973).cljs$core$IFn$_invoke$arity$1(opts),\"anneal bias should be an integer\"):null);\nvar x_retard = ((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"LR\",rankdir)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"RL\",rankdir))))?lib_draw_graph.postprocessor.str__GT_int(new cljs.core.Keyword(null,\"pp-anneal-bias\",\"pp-anneal-bias\",1268244973).cljs$core$IFn$_invoke$arity$1(opts),\"anneal bias should be an integer\"):null);\nvar dims = (cljs.core.truth_(new cljs.core.Keyword(null,\"pp-clusters\",\"pp-clusters\",478062894).cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.reduce_kv(((function (env,rankdir,y_retard,x_retard){\nreturn (function (m,k,v){\nif(cljs.core.truth_(v)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(m,k);\n} else {\nreturn m;\n}\n});})(env,rankdir,y_retard,x_retard))\n,cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"pp-clusters\",\"pp-clusters\",478062894).cljs$core$IFn$_invoke$arity$1(opts)):new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"x\",\"x\",2099068185),new cljs.core.Keyword(null,\"w\",\"w\",354169001),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776),new cljs.core.Keyword(null,\"h\",\"h\",1109658740)], null));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (env,rankdir,y_retard,x_retard,dims){\nreturn (function (a,p__18692){\nvar vec__18693 = p__18692;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18693,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18693,(1),null);\nvar new_st = lib_draw_graph.anneal.annealing.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"state\",\"state\",-1988618099).cljs$core$IFn$_invoke$arity$1(v),(10000),(0),new cljs.core.Keyword(null,\"constraints\",\"constraints\",422775616).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(a,k)),lib_draw_graph.anneal.neighbor_fn,lib_draw_graph.anneal.cost_fn,lib_draw_graph.anneal.p_fn,lib_draw_graph.anneal.temp_fn,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"terminate-early?\",\"terminate-early?\",-74748151),true,new cljs.core.Keyword(null,\"dims\",\"dims\",-466522889),dims,new cljs.core.Keyword(null,\"x-retard\",\"x-retard\",1308817436),x_retard,new cljs.core.Keyword(null,\"y-retard\",\"y-retard\",1549838503),y_retard,new cljs.core.Keyword(null,\"max-move\",\"max-move\",-879805405),((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"TB\",rankdir)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"BT\",rankdir))))?cljs.core.quot(new cljs.core.Keyword(null,\"w\",\"w\",354169001).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"boundary\",\"boundary\",-2000996754).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"constraints\",\"constraints\",422775616).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(a,k)))),lib_draw_graph.postprocessor.max_move_factor):cljs.core.quot(new cljs.core.Keyword(null,\"h\",\"h\",1109658740).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"boundary\",\"boundary\",-2000996754).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"constraints\",\"constraints\",422775616).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(a,k)))),lib_draw_graph.postprocessor.max_move_factor))], 0));\nvar adj_env = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (new_st,vec__18693,k,v,env,rankdir,y_retard,x_retard,dims){\nreturn (function (acc,p__18696){\nvar vec__18697 = p__18696;\nvar k_SINGLEQUOTE_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18697,(0),null);\nvar v_SINGLEQUOTE_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18697,(1),null);\nif((!((cljs.core.get.cljs$core$IFn$_invoke$arity$2(acc,k_SINGLEQUOTE_) == null)))){\nreturn cljs.core.assoc_in(cljs.core.assoc_in(acc,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k_SINGLEQUOTE_,new cljs.core.Keyword(null,\"rect\",\"rect\",-108902628)], null),v_SINGLEQUOTE_),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [k_SINGLEQUOTE_,new cljs.core.Keyword(null,\"constraints\",\"constraints\",422775616),new cljs.core.Keyword(null,\"boundary\",\"boundary\",-2000996754)], null),lib_draw_graph.geometry.inner_rect(new cljs.core.Keyword(null,\"boundary-sep\",\"boundary-sep\",959091714).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(acc,k_SINGLEQUOTE_)),v_SINGLEQUOTE_));\n} else {\nreturn acc;\n}\n});})(new_st,vec__18693,k,v,env,rankdir,y_retard,x_retard,dims))\n,a,new_st);\nreturn cljs.core.assoc_in(adj_env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099)], null),new_st);\n});})(env,rankdir,y_retard,x_retard,dims))\n,env,env);\n});\nlib_draw_graph.postprocessor.editor_rects = (function lib_draw_graph$postprocessor$editor_rects(env,clstr,node){\nvar temp__5718__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(env,clstr);\nif(cljs.core.truth_(temp__5718__auto__)){\nvar edited = temp__5718__auto__;\nvar ps = (lib_draw_graph.svg.rect__GT_svg.cljs$core$IFn$_invoke$arity$1 ? lib_draw_graph.svg.rect__GT_svg.cljs$core$IFn$_invoke$arity$1(edited) : lib_draw_graph.svg.rect__GT_svg.call(null,edited));\nreturn cljs.core.assoc_in(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),cljs.core.first(ps)], null),cljs.core.second(ps));\n} else {\nreturn node;\n}\n});\nlib_draw_graph.postprocessor.edit_cluster_rects = (function lib_draw_graph$postprocessor$edit_cluster_rects(z,env){\nreturn lib_draw_graph.svg.tree_edit.cljs$core$IFn$_invoke$arity$6(z,lib_draw_graph.svg.all_clusters,(7),(function (n){\nreturn cljs.core.first(new cljs.core.Keyword(null,\"content\",\"content\",15833224).cljs$core$IFn$_invoke$arity$1(n));\n}),(5),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(lib_draw_graph.postprocessor.editor_rects,env));\n});\nlib_draw_graph.postprocessor.x_label_spacer = (10);\nlib_draw_graph.postprocessor.y_label_spacer = (18);\nlib_draw_graph.postprocessor.y_label_spacer_BT = (10);\nlib_draw_graph.postprocessor.editor_label_posn = (function lib_draw_graph$postprocessor$editor_label_posn(env,g,opts,clstr,node){\nvar BT_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"BT\",new cljs.core.Keyword(null,\"rankdir\",\"rankdir\",-2029540135).cljs$core$IFn$_invoke$arity$1(opts));\nif((!(BT_QMARK_))){\nvar temp__5718__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(env,clstr);\nif(cljs.core.truth_(temp__5718__auto__)){\nvar edited = temp__5718__auto__;\nvar G__18700 = new cljs.core.Keyword(null,\"labeljust\",\"labeljust\",-370267851).cljs$core$IFn$_invoke$arity$1(lib_draw_graph.clustered.merged_cluster_attr(g,clstr,new cljs.core.Keyword(null,\"style\",\"style\",-496642736)));\nswitch (G__18700) {\ncase \"l\":\nreturn cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"x\",\"x\",2099068185)], null),(new cljs.core.Keyword(null,\"x\",\"x\",2099068185).cljs$core$IFn$_invoke$arity$1(edited) + lib_draw_graph.postprocessor.x_label_spacer)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776)], null),(new cljs.core.Keyword(null,\"y\",\"y\",-1757859776).cljs$core$IFn$_invoke$arity$1(edited) + lib_draw_graph.postprocessor.y_label_spacer)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"text-anchor\",\"text-anchor\",585613696)], null),\"start\");\n\nbreak;\ncase \"r\":\nreturn cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"x\",\"x\",2099068185)], null),((new cljs.core.Keyword(null,\"x\",\"x\",2099068185).cljs$core$IFn$_invoke$arity$1(edited) + new cljs.core.Keyword(null,\"w\",\"w\",354169001).cljs$core$IFn$_invoke$arity$1(edited)) - lib_draw_graph.postprocessor.x_label_spacer)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776)], null),(new cljs.core.Keyword(null,\"y\",\"y\",-1757859776).cljs$core$IFn$_invoke$arity$1(edited) + lib_draw_graph.postprocessor.y_label_spacer)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"text-anchor\",\"text-anchor\",585613696)], null),\"end\");\n\nbreak;\ndefault:\nreturn cljs.core.assoc_in(cljs.core.assoc_in(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"x\",\"x\",2099068185)], null),(new cljs.core.Keyword(null,\"x\",\"x\",2099068185).cljs$core$IFn$_invoke$arity$1(edited) + (new cljs.core.Keyword(null,\"w\",\"w\",354169001).cljs$core$IFn$_invoke$arity$1(edited) / (2)))),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776)], null),(new cljs.core.Keyword(null,\"y\",\"y\",-1757859776).cljs$core$IFn$_invoke$arity$1(edited) + lib_draw_graph.postprocessor.y_label_spacer));\n\n}\n} else {\nreturn node;\n}\n} else {\nvar temp__5718__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(env,clstr);\nif(cljs.core.truth_(temp__5718__auto__)){\nvar edited = temp__5718__auto__;\nvar G__18701 = new cljs.core.Keyword(null,\"labeljust\",\"labeljust\",-370267851).cljs$core$IFn$_invoke$arity$1(lib_draw_graph.clustered.merged_cluster_attr(g,clstr,new cljs.core.Keyword(null,\"style\",\"style\",-496642736)));\nswitch (G__18701) {\ncase \"l\":\nreturn cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"x\",\"x\",2099068185)], null),(new cljs.core.Keyword(null,\"x\",\"x\",2099068185).cljs$core$IFn$_invoke$arity$1(edited) + lib_draw_graph.postprocessor.x_label_spacer)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776)], null),((new cljs.core.Keyword(null,\"y\",\"y\",-1757859776).cljs$core$IFn$_invoke$arity$1(edited) + new cljs.core.Keyword(null,\"h\",\"h\",1109658740).cljs$core$IFn$_invoke$arity$1(edited)) - lib_draw_graph.postprocessor.y_label_spacer_BT)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"text-anchor\",\"text-anchor\",585613696)], null),\"start\");\n\nbreak;\ncase \"r\":\nreturn cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"x\",\"x\",2099068185)], null),((new cljs.core.Keyword(null,\"x\",\"x\",2099068185).cljs$core$IFn$_invoke$arity$1(edited) + new cljs.core.Keyword(null,\"w\",\"w\",354169001).cljs$core$IFn$_invoke$arity$1(edited)) - lib_draw_graph.postprocessor.x_label_spacer)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776)], null),((new cljs.core.Keyword(null,\"y\",\"y\",-1757859776).cljs$core$IFn$_invoke$arity$1(edited) + new cljs.core.Keyword(null,\"h\",\"h\",1109658740).cljs$core$IFn$_invoke$arity$1(edited)) - lib_draw_graph.postprocessor.y_label_spacer_BT)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"text-anchor\",\"text-anchor\",585613696)], null),\"end\");\n\nbreak;\ndefault:\nreturn cljs.core.assoc_in(cljs.core.assoc_in(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"x\",\"x\",2099068185)], null),(new cljs.core.Keyword(null,\"x\",\"x\",2099068185).cljs$core$IFn$_invoke$arity$1(edited) + (new cljs.core.Keyword(null,\"w\",\"w\",354169001).cljs$core$IFn$_invoke$arity$1(edited) / (2)))),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776)], null),((new cljs.core.Keyword(null,\"y\",\"y\",-1757859776).cljs$core$IFn$_invoke$arity$1(edited) + new cljs.core.Keyword(null,\"h\",\"h\",1109658740).cljs$core$IFn$_invoke$arity$1(edited)) - lib_draw_graph.postprocessor.y_label_spacer_BT));\n\n}\n} else {\nreturn node;\n}\n}\n});\nlib_draw_graph.postprocessor.edit_cluster_labels = (function lib_draw_graph$postprocessor$edit_cluster_labels(z,g,opts,env){\nreturn lib_draw_graph.svg.tree_edit.cljs$core$IFn$_invoke$arity$6(z,lib_draw_graph.svg.all_clusters,(7),(function (n){\nreturn cljs.core.first(new cljs.core.Keyword(null,\"content\",\"content\",15833224).cljs$core$IFn$_invoke$arity$1(n));\n}),(7),cljs.core.partial.cljs$core$IFn$_invoke$arity$4(lib_draw_graph.postprocessor.editor_label_posn,env,g,opts));\n});\n/**\n * Anneals free clusters in z & g.\n * z is a zipper over the svg and g the underlying graph.\n * Returns svg.\n */\nlib_draw_graph.postprocessor.optimize_clusters = (function lib_draw_graph$postprocessor$optimize_clusters(svg,g,label_fn,opts){\nvar z = lib_draw_graph.postprocessor.svg__GT_zipper(svg);\nvar env_out = lib_draw_graph.postprocessor.env__GT_map(lib_draw_graph.postprocessor.do_annealing(z,g,opts,label_fn));\nreturn lib_draw_graph.svg.__GT_xml(lib_draw_graph.postprocessor.edit_cluster_labels(lib_draw_graph.svg.__GT_zipper(lib_draw_graph.postprocessor.edit_cluster_rects(z,env_out)),g,opts,env_out));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","lib_draw_graph/postprocessor.cljc","~:line",3,"~:column",3,"~:end-line",3,"~:end-column",31,"~:doc","Post process the svg.","~:author","Jude Payne"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$lib-draw-graph.postprocessor","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clstr","~$lib-draw-graph.clustered","~$lib-draw-graph.anneal","^S","^R","^R","~$lib-draw-graph.geometry","^T","~$anneal","^S","~$lib-draw-graph.util","^V","~$cljs.core","^W","~$goog","^X","~$clojure.set","^Y","~$util","^V","~$s","^Y","~$g","^T","~$lib-draw-graph.svg","^[","~$svg","^["],"~:seen",["^J",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^W","^W"],"~:form",["~#list",["~$ns","^L",["^16",["^12",["^[","~:as","^10"],["^S","^18","^U"],["^R","^18","^Q"],["^T","^18","~$g"],["^V","^18","^Z"],["^Y","^18","~$s"]]]]],"~:flags",["^ ","^12",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^X","^W","^[","^S","^R","^T","^V","^Y"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","lib_draw_graph/postprocessor.cljc"],"~:compiled-at",1560891761803,"~:resource-name","lib_draw_graph/postprocessor.cljc","~:warnings",[],"~:source","(ns ^{:doc \"Post process the svg.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.postprocessor\n  (:require [lib-draw-graph.svg :as svg]\n            [lib-draw-graph.anneal :as anneal]\n            [lib-draw-graph.clustered :as clstr]\n            [lib-draw-graph.geometry :as g]\n            [lib-draw-graph.util :as util]\n            [clojure.set :as s]))\n\n\n(defn free-clusters\n  \"Returns clusters that (a) contain clusters (b) contain no nodes directly.\"\n  ;; TODO: remove the (b) restriction by parsing all svg nodes and adding\n  ;; 'obstacles' into the annealing routine.\n  [g]\n  (let [clstrs (clstr/clusters g)\n        ;with-nodes (into #{} (keys (nodes-by-cluster g)))\n        has-chdn (filter #(some? (clstr/cluster-children g %)) clstrs)]\n    ;(s/difference clstrs with-nodes)\n    (into #{} has-chdn)))\n\n\n;;Kahn sort - topological sort of a graph\n;; https://github.com/cloverage/cloverage/blob/HEAD/cloverage/src/cloverage/kahn.clj#L30\n(defn without\n  \"Returns set s with x removed.\"\n  [s x] (s/difference s #{x}))\n\n\n(defn take-1\n  \"Returns the pair [element, s'] where s' is set s with element removed.\"\n  [s] {:pre [(not (empty? s))]}\n  (let [item (first s)]\n    [item (without s item)]))\n\n\n(defn no-incoming\n  \"Returns the set of nodes in graph g for which there are no incoming\n  edges, where g is a map of nodes to sets of nodes.\"\n  [g]\n  (let [nodes (set (keys g))\n        have-incoming (apply s/union (vals g))]\n    (s/difference nodes have-incoming)))\n\n\n(defn normalize\n  \"Returns g with empty outgoing edges added for nodes with incoming\n  edges only.  Example: {:a #{:b}} => {:a #{:b}, :b #{}}\"\n  [g]\n  (let [have-incoming (apply s/union (vals g))]\n    (reduce #(if (get % %2) % (assoc % %2 #{})) g have-incoming)))\n\n\n(defn kahn-sort\n  \"Proposes a topological sort for directed graph g using Kahn's\n  algorithm, where g is a map of nodes to sets of nodes. If g is\n  cyclic, returns nil.\"\n  ([g]\n   (kahn-sort (normalize g) [] (no-incoming g)))\n  ([g l s]\n   (if (empty? s)\n     (when (every? empty? (vals g)) l)\n     (let [[n s'] (take-1 s)\n           m (g n)\n           g' (reduce #(update-in % [n] without %2) g m)]\n       (recur g' (conj l n) (s/union s' (s/intersection (no-incoming g') m)))))))\n\n\n(defn sorted-free-clusters\n  \"Kahn sorted free clusters\"\n  [g]\n  (filter (free-clusters g) (kahn-sort (clstr/cluster-graph g))))\n\n\n(defn with-chdn\n  \"Returns a vec of clusters with their children.\"\n  [g clstrs]\n  (mapv #(vector % (clstr/cluster-children g %)) clstrs))\n\n\n(defn free-clusters-with-children\n  \"Provides the targets for annealing in the graph.\"\n  [g]\n  (->> (sorted-free-clusters g)\n       (with-chdn g)))\n\n;; Now we need to set up the annealing jobs by reading in the svg\n;; Since graphviz labels clusters at the top, we'll use the top\n;; of the uppermost sibling as the top boundary (taking into account\n;; the SEP) otherwise the bounding box of the containing cluster.\n;; we'll calculate SEP for each annealing job by finding the minimum\n;; distance between a children cluster's bounding box (LRB) and the boundary.\n\n\n(defn svg->zipper [svg]\n  (svg/->zipper (svg/parse-svg svg)))\n\n\n(defn clusters->boxes\n  \"Get the bounding boxes for the clusters from the zipper over the svg.\"\n  [z clstrs]\n  (reduce \n   (fn [a c] (assoc a c (svg/cluster->rect z c)))\n   {}\n   clstrs))\n\n\n(defn tasks->clusters \n  \"Converts anneal-tasks to a set of clusters\"\n  [tasks]\n  (reduce (fn [a c]\n            (-> a\n                (conj (first c))\n                (clojure.set/union (second c))))\n          #{}\n          tasks))\n\n\n(defn sep\n  \"Returns the separation map between the bounding\"\n  [bounding & rects]\n  {:l (- (apply min (map :x rects)) (:x bounding))\n   :t (- (apply min (map :y rects)) (:y bounding))\n   :r (- (+ (:x bounding) (:w bounding))\n         (apply max (map (fn [o] (+ (:x o) (:w o))) rects)))\n   :b (- (+ (:y bounding) (:h bounding))\n         (apply max (map (fn [o] (+ (:y o) (:h o))) rects)))})\n\n\n(def collision-sep 8)\n\n\n(defn adjust-sep\n  \"takes a sep, preserves the top but adjusts other seps to minimum.\"\n  ([sep & {:keys [cluster-sep BT?] :or {cluster-sep nil BT? false}}]\n   (if (not BT?)\n     (if cluster-sep\n       (assoc sep :l cluster-sep :r cluster-sep :b cluster-sep)\n       (let [min-lrb (min (:l sep) (:r sep) (:b sep))]\n         (assoc sep :l min-lrb :r min-lrb :b min-lrb)))\n     ;; Bottom Top layout. Need to constraint differently\n     (if cluster-sep\n       (assoc sep :l cluster-sep :r cluster-sep :t cluster-sep)\n       (let [min-lrt (min (:l sep) (:r sep) (:t sep))]\n         (assoc sep :l min-lrt :r min-lrt :t min-lrt))))))\n\n\n(defn parse-int [s]\n  #?(:clj (Integer/parseInt s)\n     :cljs (js/parseInt s)))\n\n\n(defn str->int [cs error-msg]\n  (if (integer? cs)\n    cs\n    (try\n      (parse-int cs)\n      #?(:clj (catch Exception e (throw (util/err error-msg)))\n         :cljs (catch js/Error e (throw (util/err error-msg)))))))\n\n\n(defn env\n  \"Constructs a nested map which parameters required for annealing\n   from a zipper, a graph and the key clustered on in the graph.\"\n  [z g opts node-label-fn]\n  (let [cluster-sep (when (-> opts :pp-cluster-sep)\n                      (str->int  (-> opts :pp-cluster-sep) \"cluster separation should be an integer\"))\n        BT? (= (-> opts :rankdir) \"BT\")\n        tasks (free-clusters-with-children g)\n        clstrs (tasks->clusters tasks)\n        rects (clusters->boxes z clstrs)]\n    (reduce\n     (fn [a [prnt chdn]]\n       (let [p-rect (get rects prnt)\n             c-rects (map #(get rects %) chdn)\n             sep (if cluster-sep\n                   (adjust-sep (apply sep p-rect c-rects) :cluster-sep cluster-sep :BT? BT?)\n                   (adjust-sep (apply sep p-rect c-rects) :BT? BT?))\n             state (into {} (map #(vector % (get rects %)) chdn))\n             constr {:boundary (g/inner-rect sep p-rect)\n                     :grow true\n                     :collision (if cluster-sep\n                                  cluster-sep\n                                  collision-sep)\n                     :obstacles (reduce\n                                 (fn [acc cur]\n                                   (assoc acc\n                                          (node-label-fn cur)\n                                          (svg/node->rect z (node-label-fn cur))))\n                                 {}\n                                 (clstr/cluster->nodes g prnt))}]\n         (-> a\n             (assoc-in [prnt :constraints] constr)\n             (assoc-in [prnt :state] state)\n             (assoc-in [prnt :boundary-sep] sep)\n             (assoc-in [prnt :rect] p-rect))))\n     {}\n     tasks)))\n\n\n(defn env->map\n  \"Flattens an environment back rectangles\"\n  [env]\n  (reduce\n   (fn [a [k v]]\n     (-> a\n         (assoc k (-> v :rect))\n         (merge (-> v :state))))\n   {}\n   env))\n\n\n(def max-move-factor 50)  ;; max move defined by size of primary annealing dimension / this\n\n\n(defn do-annealing\n  [z g opts label-fn]\n  (let [env (env z g opts label-fn)\n        rankdir (-> opts :rankdir)\n        y-retard (if (or (= \"TB\" rankdir) (= \"BT\" rankdir))\n                   (str->int (-> opts :pp-anneal-bias) \"anneal bias should be an integer\") nil)\n        x-retard (if (or (= \"LR\" rankdir) (= \"RL\" rankdir))\n                   (str->int (-> opts :pp-anneal-bias) \"anneal bias should be an integer\") nil)\n        dims (if (-> opts :pp-clusters)\n               (reduce-kv (fn [m k v] (if v (conj m k) m))\n                                        []\n                                        (-> opts :pp-clusters))\n               [:x :w :y :h])]\n    (reduce (fn [a [k v]]\n              (let [new-st (anneal/annealing (-> v :state)\n                                      10000\n                                      0\n                                      (-> (get a k) :constraints)\n                                      anneal/neighbor-fn\n                                      anneal/cost-fn\n                                      anneal/p-fn\n                                      anneal/temp-fn\n                                      :terminate-early? true\n                                      :dims dims\n                                      :x-retard x-retard\n                                      :y-retard y-retard\n                                      :max-move (if (or (= \"TB\" rankdir) (= \"BT\" rankdir))\n                                                  (quot\n                                                   (-> (get a k) :constraints :boundary :w)\n                                                   max-move-factor)\n                                                  (quot\n                                                   (-> (get a k) :constraints :boundary :h)\n                                                   max-move-factor)))\n                    adj-env (reduce\n                             (fn [acc [k' v']]\n                               (if (some?  (get acc k'))\n                                 (-> acc\n                                     (assoc-in [k' :rect] v')\n                                     (assoc-in [k' :constraints :boundary]\n                                               (g/inner-rect\n                                                (-> (get acc k') :boundary-sep)\n                                                v')))\n                                 acc))\n                             a\n                             new-st)]\n                (-> adj-env\n                    (assoc-in [k :state] new-st))))\n            env\n            env)))\n\n\n(defn editor-rects [env clstr node]\n  (if-let [edited (get env clstr)]\n    (let [ps (svg/rect->svg edited)]\n      (assoc-in node [:attrs (first ps)] (second ps)))\n    node))\n\n\n(defn edit-cluster-rects [z env]\n  (svg/tree-edit z\n                 svg/all-clusters\n                 7\n                 (fn [n] (first (:content n)))\n                 5\n                 (partial editor-rects env)))\n\n\n;; Section on moving text around (cluster labels)\n\n(def x-label-spacer 10) ;; x dist insider bounding rect\n(def y-label-spacer 18) ;; y dist below bounding rect's top\n(def y-label-spacer-BT 10)\n\n\n(defn editor-label-posn [env g opts clstr node]\n  ;; repositions cluster label\n  (let [BT? (= \"BT\" (-> opts :rankdir))]\n    (if (not BT?)\n      (if-let [edited (get env clstr)]\n        (case (-> (clstr/merged-cluster-attr g clstr :style) :labeljust)\n          \n          \"l\" (-> node\n                  (assoc-in [:attrs :x] (+ (:x edited) x-label-spacer))\n                  (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))\n                  (assoc-in [:attrs :text-anchor] \"start\"))\n\n          \"r\" (-> node\n                  (assoc-in [:attrs :x] (- (+ (:x edited) (:w edited)) x-label-spacer))\n                  (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))\n                  (assoc-in [:attrs :text-anchor] \"end\"))\n\n          (-> node\n              (assoc-in [:attrs :x] (+ (:x edited) (/ (:w edited) 2)))\n              (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))))\n        node)\n\n      ;; Bottom Top layout. position labels at bottom\n      (if-let [edited (get env clstr)]\n        (case (-> (clstr/merged-cluster-attr g clstr :style) :labeljust)\n          \n          \"l\" (-> node\n                  (assoc-in [:attrs :x] (+ (:x edited) x-label-spacer))\n                  (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))\n                  (assoc-in [:attrs :text-anchor] \"start\"))\n\n          \"r\" (-> node\n                  (assoc-in [:attrs :x] (- (+ (:x edited) (:w edited)) x-label-spacer))\n                  (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))\n                  (assoc-in [:attrs :text-anchor] \"end\"))\n\n          (-> node\n              (assoc-in [:attrs :x] (+ (:x edited) (/ (:w edited) 2)))\n              (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))))\n        node))))\n\n\n(defn edit-cluster-labels [z g opts env]\n  (svg/tree-edit z\n                 svg/all-clusters\n                 7\n                 (fn [n] (first (:content n)))\n                 7\n                 (partial editor-label-posn env g opts)))\n\n\n(defn optimize-clusters\n  \"Anneals free clusters in z & g.\n   z is a zipper over the svg and g the underlying graph.\n   Returns svg.\"\n  [svg g label-fn opts]\n  (let [z (svg->zipper svg)\n        env-out (env->map (do-annealing z g opts label-fn))]\n    (-> (edit-cluster-rects z env-out)\n        svg/->zipper\n        (edit-cluster-labels g opts env-out)\n        svg/->xml)))\n\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["lib-draw-graph.postprocessor/free-clusters","g","clstrs","lib-draw-graph.clustered/clusters","has-chdn","p1__18616#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.clustered/cluster-children","cljs.core.into.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/without","s","x","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/take-1","item","cljs.core/first","lib-draw-graph.postprocessor/no-incoming","nodes","cljs.core/set","cljs.core/keys","have-incoming","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","clojure.set/union","cljs.core/vals","lib-draw-graph.postprocessor/normalize","p1__18626#","p2__18627#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","var_args","G__18631","lib-draw-graph.postprocessor/kahn-sort","js/Error","lib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$3","l","cljs.core/empty?","cljs.core/every?","vec__18637","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","n","s'","m","g'","p1__18628#","p2__18629#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.set.union.cljs$core$IFn$_invoke$arity$2","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/sorted-free-clusters","lib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$1","lib-draw-graph.clustered/cluster-graph","lib-draw-graph.postprocessor/with-chdn","p1__18640#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","lib-draw-graph.postprocessor/free-clusters-with-children","lib-draw-graph.postprocessor/svg->zipper","svg","lib-draw-graph.svg/->zipper","lib-draw-graph.svg/parse-svg","lib-draw-graph.postprocessor/clusters->boxes","z","a","c","lib-draw-graph.svg/cluster->rect","lib-draw-graph.postprocessor/tasks->clusters","tasks","cljs.core/second","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lib-draw-graph.postprocessor/sep","seq18650","G__18651","cljs.core/next","self__4717__auto__","bounding","rects","cljs.core/min","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/max","o","lib-draw-graph.postprocessor/collision-sep","lib-draw-graph.postprocessor/adjust-sep","p__18663","map__18664","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq18660","G__18661","sep","cluster-sep","BT?","cljs.core/not","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","min-lrb","x__4222__auto__","y__4223__auto__","min-lrt","lib-draw-graph.postprocessor/parse-int","js/parseInt","lib-draw-graph.postprocessor/str->int","cs","error-msg","cljs.core/integer?","e18671","e","lib-draw-graph.util/err","lib-draw-graph.postprocessor/env","opts","node-label-fn","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__18678","vec__18679","prnt","chdn","p-rect","c-rects","p1__18673#","lib_draw_graph.postprocessor.adjust_sep.cljs$core$IFn$_invoke$arity$variadic","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","state","p1__18674#","constr","lib-draw-graph.geometry/inner-rect","acc","cur","lib-draw-graph.svg/node->rect","lib_draw_graph.clustered.cluster__GT_nodes.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc-in","lib-draw-graph.postprocessor/env->map","env","p__18683","vec__18684","k","v","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.postprocessor/max-move-factor","lib-draw-graph.postprocessor/do-annealing","label-fn","rankdir","y-retard","x-retard","dims","cljs.core/reduce-kv","p__18692","vec__18693","new-st","lib_draw_graph.anneal.annealing.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.anneal/neighbor-fn","lib-draw-graph.anneal/cost-fn","lib-draw-graph.anneal/p-fn","lib-draw-graph.anneal/temp-fn","cljs.core/quot","adj-env","p__18696","vec__18697","k'","v'","lib-draw-graph.postprocessor/editor-rects","clstr","node","temp__5718__auto__","edited","ps","lib-draw-graph.svg/rect->svg","lib-draw-graph.postprocessor/edit-cluster-rects","lib_draw_graph.svg.tree_edit.cljs$core$IFn$_invoke$arity$6","lib-draw-graph.svg/all-clusters","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/x-label-spacer","lib-draw-graph.postprocessor/y-label-spacer","lib-draw-graph.postprocessor/y-label-spacer-BT","lib-draw-graph.postprocessor/editor-label-posn","G__18700","lib-draw-graph.clustered/merged-cluster-attr","G__18701","lib-draw-graph.postprocessor/edit-cluster-labels","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","lib-draw-graph.postprocessor/optimize-clusters","env-out","lib-draw-graph.svg/->xml"]]],"~:cache-keys",["~#cmap",[["^1=","clojure/data/xml/node.cljc"],[1551120970000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^X","^W","~$clojure.data.xml.name"]]],["~:macro","~$loom.cljs"],[1545217035000],["^1=","instaparse/auto_flatten_seq.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W"]]],["^1O","^W"],[1559826623000],["^1=","cljs/tools/reader/impl/utils.cljs"],[1560546087000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","~$clojure.string","~$goog.string"]]],["^1=","goog/math/math.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","~$goog.array","~$goog.asserts"]]],["^1=","goog/string/stringformat.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^1R"]]],["^1=","instaparse/gll.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","~$instaparse.auto-flatten-seq","~$instaparse.failure","~$instaparse.reduction","~$instaparse.combinators-source","~$instaparse.print","~$instaparse.util","~$goog.i18n.uChar"]]],["^1=","instaparse/abnf.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","~$instaparse.transform","~$instaparse.cfg","~$instaparse.gll","^1W","^1Z","^1X","~$goog.string.format","~$clojure.walk"]]],["^1=","goog/array/array.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^1T"]]],["^1O","~$cljs.tools.reader.reader-types"],[1560546087000],["^1=","goog/debug/error.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X"]]],["^1=","loom/attr.cljc"],[1545217035000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","~$loom.graph"]]],["^1=","goog/dom/nodetype.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X"]]],["^1=","cljs/tools/reader/impl/inspect.cljs"],[1560546087000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W"]]],["^1=","loom/graph.cljc"],[1545217035000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","~$loom.alg-generic"]]],["^1=","instaparse/viz.cljs"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W"]]],["^1=","cljs/tools/reader.cljs"],[1560546087000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^25","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader.impl.errors","^1S","^1R","~$goog.string.StringBuffer"]]],["^1O","~$instaparse.abnf"],[1548085352000],["^1=","instaparse/transform.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^22","^1Z"]]],["^1=","goog/object/object.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^1=","goog/math/long.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^1T","~$goog.reflect"]]],["^1=","instaparse/reduction.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^1U","^1Z"]]],["^1=","clojure/data/zip/xml.cljs"],[1551120970000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^1Q","~$clojure.data.zip","~$clojure.zip"]]],["^1=","goog/string/internal.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X"]]],["^1=","goog/i18n/uchar.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X"]]],["^1=","goog/functions/functions.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X"]]],["^1=","clojure/walk.cljs"],[1559826623000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W"]]],["^1=","clojure/data/xml.cljs"],[1551120970000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^1N","~$clojure.data.xml.node","~$clojure.data.xml.js.dom","~$clojure.data.xml.protocols"]]],["^1=","clojure/data/xml/js/dom.cljs"],[1551120970000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^1N","^2A"]]],["^1=","goog/structs/map.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1O","~$instaparse.macros"],[1548085352000],["^1=","clojure/data/xml/js/name.cljs"],[1551120970000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^2C","^1Q"]]],["^1=","instaparse/failure.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^1Y"]]],["^1=","lib_draw_graph/anneal.cljc"],[1560891623000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^T","^V"]]],["^1=","goog/asserts/asserts.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1=","goog/uri/uri.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^1S","^1T","^1R","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","instaparse/print.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^1Q"]]],["^1O","^22"],[1548085352000],["^1=","lib_draw_graph/postprocessor.cljc"],[1560891623000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^[","^S","^R","^T","^V","^Y"]]],["^1=","goog/base.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",[]]],["^1=","goog/structs/structs.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^1S","~$goog.object"]]],["^1=","cljs/tools/reader/impl/errors.cljs"],[1560546087000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^25","^1Q","~$cljs.tools.reader.impl.inspect"]]],["^1=","lib_draw_graph/svg.cljc"],[1560891623000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^2@","~$clojure.data.zip.xml","~$clojure.data.xml","^V","~$instaparse.core"]]],["^1=","clojure/data/xml/protocols.cljc"],[1551120970000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W"]]],["^1=","clojure/string.cljs"],[1559826623000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^1R","^2;"]]],["^1=","goog/string/string.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","~$goog.string.internal"]]],["^1=","lib_draw_graph/clustered.cljc"],[1560891623000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^26","~$loom.attr","^27","^Y"]]],["^1=","goog/reflect/reflect.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X"]]],["^1=","lib_draw_graph/geometry.cljc"],[1560891623000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W"]]],["^1=","clojure/zip.cljs"],[1559826623000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W"]]],["^1=","goog/string/stringbuffer.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X"]]],["^1=","instaparse/cfg.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^1X","^1W","^22","^1Z","^1Q","~$cljs.tools.reader","^25"]]],["^1=","cljs/tools/reader/reader_types.cljs"],[1560546087000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^28","^1R","^2;"]]],["^1=","clojure/data/xml/name.cljc"],[1551120970000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^1Q","~$clojure.data.xml.js.name","^2C","^2;"]]],["^1=","goog/iter/iter.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^1S","^1T","~$goog.functions","~$goog.math"]]],["^1=","loom/alg_generic.cljc"],[1545217035000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W"]]],["^1O","^2R"],[1548085352000],["^1=","clojure/data/zip.cljs"],[1551120970000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^2@"]]],["^1=","cljs/tools/reader/impl/commons.cljs"],[1560546087000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^2:","^25","^28"]]],["^1=","instaparse/repeat.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^22","^1X","^1U","~$instaparse.viz","^1W","^1V"]]],["^1=","cljs/core.cljs"],[1559826623000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["~$goog.math.Long","~$goog.math.Integer","^1R","^2N","^1S","~$goog.Uri","^2;"]]],["^1=","instaparse/util.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W"]]],["^1=","goog/math/integer.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X"]]],["^1=","instaparse/line_col.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^20","^1Z"]]],["^1=","clojure/set.cljs"],[1559826623000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W"]]],["^1=","goog/uri/utils.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^1S","^1T","^1R"]]],["^1=","lib_draw_graph/util.cljc"],[1560891623000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W"]]],["^1=","instaparse/core.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^24","^22","^21","^1V","^1Y","^1W","^20","^2<","~$instaparse.repeat","^1X","~$instaparse.line-col","^2Y","^1Z"]]],["^1O","~$clojure.data.xml.impl"],[1551120970000],["^1=","instaparse/combinators_source.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^J",[]],"^1M",["^X","^W","^1W","^1Z"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",3,"^8",3,"^9",3,"^:",31,"^;","Post process the svg.","^<","Jude Payne"],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^R","^S","^S","^R","^R","^T","^T","^U","^S","^V","^V","^W","^W","^X","^X","^Y","^Y","^Z","^V","~$s","^Y","~$g","^T","^[","^[","^10","^["],"^11",["^J",["^12"]],"~:shadow/js-access-global",["^J",["Error","parseInt"]],"^13",null,"~:defs",["^ ","~$edit-cluster-labels",["^ ","~:protocol-inline",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",333,"^8",7,"^9",333,"^:",26,"~:arglists",["^16",["~$quote",["^16",[["~$z","~$g","~$opts","~$env"]]]]]],"^K","~$lib-draw-graph.postprocessor/edit-cluster-labels","^6","lib_draw_graph/postprocessor.cljc","^:",26,"~:method-params",["^16",[["~$z","~$g","^3;","^3<"]]],"~:protocol-impl",null,"~:arglists-meta",["^16",[null,null]],"^8",1,"~:variadic?",false,"^7",333,"~:ret-tag","~$any","^9",333,"~:max-fixed-arity",4,"~:fn-var",true,"^39",["^16",["^3:",["^16",[["~$z","~$g","^3;","^3<"]]]]]],"~$take-1",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",31,"^8",7,"^9",31,"^:",13,"^39",["^16",["^3:",["^16",[["~$s"]]]]],"^;","Returns the pair [element, s'] where s' is set s with element removed."],"^K","~$lib-draw-graph.postprocessor/take-1","^6","lib_draw_graph/postprocessor.cljc","^:",13,"^3>",["^16",[["~$s"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",31,"^3B","~$cljs.core/IVector","^9",31,"^3D",1,"^3E",true,"^39",["^16",["^3:",["^16",[["~$s"]]]]],"^;","Returns the pair [element, s'] where s' is set s with element removed."],"~$normalize",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",47,"^8",7,"^9",47,"^:",16,"^39",["^16",["^3:",["^16",[["~$g"]]]]],"^;","Returns g with empty outgoing edges added for nodes with incoming\n  edges only.  Example: {:a #{:b}} => {:a #{:b}, :b #{}}"],"^K","~$lib-draw-graph.postprocessor/normalize","^6","lib_draw_graph/postprocessor.cljc","^:",16,"^3>",["^16",[["~$g"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",47,"^3B",["^J",[null,"^3C"]],"^9",47,"^3D",1,"^3E",true,"^39",["^16",["^3:",["^16",[["~$g"]]]]],"^;","Returns g with empty outgoing edges added for nodes with incoming\n  edges only.  Example: {:a #{:b}} => {:a #{:b}, :b #{}}"],"~$free-clusters",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",12,"^8",7,"^9",12,"^:",20,"^39",["^16",["^3:",["^16",[["~$g"]]]]],"^;","Returns clusters that (a) contain clusters (b) contain no nodes directly."],"^K","~$lib-draw-graph.postprocessor/free-clusters","^6","lib_draw_graph/postprocessor.cljc","^:",20,"^3>",["^16",[["~$g"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",12,"^3B",["^J",[null,"~$clj","^3C"]],"^9",12,"^3D",1,"^3E",true,"^39",["^16",["^3:",["^16",[["~$g"]]]]],"^;","Returns clusters that (a) contain clusters (b) contain no nodes directly."],"~$sep",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",120,"^8",7,"^9",120,"^:",10,"^39",["^16",["^3:",["^16",[["~$bounding","~$&","~$rects"]]]]],"^;","Returns the separation map between the bounding","~:top-fn",["^ ","^3A",true,"~:fixed-arity",1,"^3D",1,"^3>",[["^16",["^3O","^3P"]]],"^39",["^16",[["^3O","~$&","^3P"]]],"^3@",["^16",[null]]]],"^K","~$lib-draw-graph.postprocessor/sep","^6","lib_draw_graph/postprocessor.cljc","^:",10,"^3Q",["^ ","^3A",true,"^3R",1,"^3D",1,"^3>",[["^16",["^3O","^3P"]]],"^39",["^16",[["^3O","~$&","^3P"]]],"^3@",["^16",[null]]],"^3>",[["^16",["^3O","^3P"]]],"^3?",null,"^3R",1,"^3@",["^16",[null]],"^8",1,"^3A",true,"~:methods",[["^ ","^3R",1,"^3A",true,"~:tag","~$cljs.core/IMap"]],"^7",120,"^3B","^3C","^9",120,"^3D",1,"^3E",true,"^39",["^16",[["^3O","~$&","^3P"]]],"^;","Returns the separation map between the bounding"],"~$with-chdn",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",76,"^8",7,"^9",76,"^:",16,"^39",["^16",["^3:",["^16",[["~$g","~$clstrs"]]]]],"^;","Returns a vec of clusters with their children."],"^K","~$lib-draw-graph.postprocessor/with-chdn","^6","lib_draw_graph/postprocessor.cljc","^:",16,"^3>",["^16",[["~$g","^3X"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",76,"^3B","^3M","^9",76,"^3D",2,"^3E",true,"^39",["^16",["^3:",["^16",[["~$g","^3X"]]]]],"^;","Returns a vec of clusters with their children."],"~$free-clusters-with-children",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",82,"^8",7,"^9",82,"^:",34,"^39",["^16",["^3:",["^16",[["~$g"]]]]],"^;","Provides the targets for annealing in the graph."],"^K","~$lib-draw-graph.postprocessor/free-clusters-with-children","^6","lib_draw_graph/postprocessor.cljc","^:",34,"^3>",["^16",[["~$g"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",82,"^3B","^3M","^9",82,"^3D",1,"^3E",true,"^39",["^16",["^3:",["^16",[["~$g"]]]]],"^;","Provides the targets for annealing in the graph."],"~$kahn-sort",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",55,"^8",7,"^9",55,"^:",16,"^39",["^16",["^3:",["^16",[["~$g"],["~$g","~$l","~$s"]]]]],"^;","Proposes a topological sort for directed graph g using Kahn's\n  algorithm, where g is a map of nodes to sets of nodes. If g is\n  cyclic, returns nil.","^3Q",["^ ","^3A",false,"^3R",3,"^3D",3,"^3>",["^16",[["~$g"],["~$g","~$l","~$s"]]],"^39",["^16",[["~$g"],["~$g","~$l","~$s"]]],"^3@",["^16",[null,null]]]],"^K","~$lib-draw-graph.postprocessor/kahn-sort","^6","lib_draw_graph/postprocessor.cljc","^:",16,"^3Q",["^ ","^3A",false,"^3R",3,"^3D",3,"^3>",["^16",[["~$g"],["~$g","~$l","~$s"]]],"^39",["^16",[["~$g"],["~$g","~$l","~$s"]]],"^3@",["^16",[null,null]]],"^3>",["^16",[["~$g"],["~$g","~$l","~$s"]]],"^3?",null,"^3R",3,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^3T",[["^ ","^3R",1,"^3A",false,"^3U","^3C"],["^ ","^3R",3,"^3A",false,"^3U",["^J",[null,"~$clj-nil"]]]],"^7",55,"^9",55,"^3D",3,"^3E",true,"^39",["^16",[["~$g"],["~$g","~$l","~$s"]]],"^;","Proposes a topological sort for directed graph g using Kahn's\n  algorithm, where g is a map of nodes to sets of nodes. If g is\n  cyclic, returns nil."],"~$env->map",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",202,"^8",7,"^9",202,"^:",15,"^39",["^16",["^3:",["^16",[["^3<"]]]]],"^;","Flattens an environment back rectangles"],"^K","~$lib-draw-graph.postprocessor/env->map","^6","lib_draw_graph/postprocessor.cljc","^:",15,"^3>",["^16",[["^3<"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",202,"^3B",["^J",[null,"^3C"]],"^9",202,"^3D",1,"^3E",true,"^39",["^16",["^3:",["^16",[["^3<"]]]]],"^;","Flattens an environment back rectangles"],"~$svg->zipper",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",96,"^8",7,"^9",96,"^:",18,"^39",["^16",["^3:",["^16",[["^10"]]]]]],"^K","~$lib-draw-graph.postprocessor/svg->zipper","^6","lib_draw_graph/postprocessor.cljc","^:",18,"^3>",["^16",[["^10"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",96,"^3B","^3C","^9",96,"^3D",1,"^3E",true,"^39",["^16",["^3:",["^16",[["^10"]]]]]],"~$no-incoming",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",38,"^8",7,"^9",38,"^:",18,"^39",["^16",["^3:",["^16",[["~$g"]]]]],"^;","Returns the set of nodes in graph g for which there are no incoming\n  edges, where g is a map of nodes to sets of nodes."],"^K","~$lib-draw-graph.postprocessor/no-incoming","^6","lib_draw_graph/postprocessor.cljc","^:",18,"^3>",["^16",[["~$g"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",38,"^3B",["^J",[null,"^3C"]],"^9",38,"^3D",1,"^3E",true,"^39",["^16",["^3:",["^16",[["~$g"]]]]],"^;","Returns the set of nodes in graph g for which there are no incoming\n  edges, where g is a map of nodes to sets of nodes."],"~$collision-sep",["^ ","^K","~$lib-draw-graph.postprocessor/collision-sep","^6","lib_draw_graph/postprocessor.cljc","^7",131,"^8",1,"^9",131,"^:",19,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",131,"^8",6,"^9",131,"^:",19],"^3U","~$number"],"~$y-label-spacer",["^ ","^K","~$lib-draw-graph.postprocessor/y-label-spacer","^6","lib_draw_graph/postprocessor.cljc","^7",287,"^8",1,"^9",287,"^:",20,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",287,"^8",6,"^9",287,"^:",20],"^3U","^4;"],"~$adjust-sep",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",134,"^8",7,"^9",134,"^:",17,"^39",["^16",["^3:",["^16",[["^3N","~$&",["^ ","~:keys",["~$cluster-sep","~$BT?"],"~:or",["^ ","^4@",null,"^4A",false]]]]]]],"^;","takes a sep, preserves the top but adjusts other seps to minimum.","^3Q",["^ ","^3A",true,"^3R",1,"^3D",1,"^3>",[["^16",["^3N",["^ ","^4?",["^4@","^4A"],"^4B",["^ ","^4@",null,"^4A",false]]]]],"^39",["^16",[["^3N","~$&",["^ ","^4?",["^4@","^4A"],"^4B",["^ ","^4@",null,"^4A",false]]]]],"^3@",["^16",[null]]]],"^K","~$lib-draw-graph.postprocessor/adjust-sep","^6","lib_draw_graph/postprocessor.cljc","^:",17,"^3Q",["^ ","^3A",true,"^3R",1,"^3D",1,"^3>",[["^16",["^3N",["^ ","^4?",["^4@","^4A"],"^4B",["^ ","^4@",null,"^4A",false]]]]],"^39",["^16",[["^3N","~$&",["^ ","^4?",["^4@","^4A"],"^4B",["^ ","^4@",null,"^4A",false]]]]],"^3@",["^16",[null]]],"^3>",[["^16",["^3N",["^ ","^4?",["^4@","^4A"],"^4B",["^ ","^4@",null,"^4A",false]]]]],"^3?",null,"^3R",1,"^3@",["^16",[null]],"^8",1,"^3A",true,"^3T",[["^ ","^3R",1,"^3A",true,"^3U",["^J",["^3M","^3C"]]]],"^7",134,"^3B","^3C","^9",134,"^3D",1,"^3E",true,"^39",["^16",[["^3N","~$&",["^ ","^4?",["^4@","^4A"],"^4B",["^ ","^4@",null,"^4A",false]]]]],"^;","takes a sep, preserves the top but adjusts other seps to minimum."],"~$x-label-spacer",["^ ","^K","~$lib-draw-graph.postprocessor/x-label-spacer","^6","lib_draw_graph/postprocessor.cljc","^7",286,"^8",1,"^9",286,"^:",20,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",286,"^8",6,"^9",286,"^:",20],"^3U","^4;"],"~$do-annealing",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",217,"^8",7,"^9",217,"^:",19,"^39",["^16",["^3:",["^16",[["~$z","~$g","^3;","~$label-fn"]]]]]],"^K","~$lib-draw-graph.postprocessor/do-annealing","^6","lib_draw_graph/postprocessor.cljc","^:",19,"^3>",["^16",[["~$z","~$g","^3;","^4G"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",217,"^3B",["^J",[null,"^3C"]],"^9",217,"^3D",4,"^3E",true,"^39",["^16",["^3:",["^16",[["~$z","~$g","^3;","^4G"]]]]]],"^3<",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",163,"^8",7,"^9",163,"^:",10,"^39",["^16",["^3:",["^16",[["~$z","~$g","^3;","~$node-label-fn"]]]]],"^;","Constructs a nested map which parameters required for annealing\n   from a zipper, a graph and the key clustered on in the graph."],"^K","~$lib-draw-graph.postprocessor/env","^6","lib_draw_graph/postprocessor.cljc","^:",10,"^3>",["^16",[["~$z","~$g","^3;","^4I"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",163,"^3B",["^J",[null,"^3C"]],"^9",163,"^3D",4,"^3E",true,"^39",["^16",["^3:",["^16",[["~$z","~$g","^3;","^4I"]]]]],"^;","Constructs a nested map which parameters required for annealing\n   from a zipper, a graph and the key clustered on in the graph."],"~$edit-cluster-rects",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",275,"^8",7,"^9",275,"^:",25,"^39",["^16",["^3:",["^16",[["~$z","^3<"]]]]]],"^K","~$lib-draw-graph.postprocessor/edit-cluster-rects","^6","lib_draw_graph/postprocessor.cljc","^:",25,"^3>",["^16",[["~$z","^3<"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",275,"^3B","^3C","^9",275,"^3D",2,"^3E",true,"^39",["^16",["^3:",["^16",[["~$z","^3<"]]]]]],"~$max-move-factor",["^ ","^K","~$lib-draw-graph.postprocessor/max-move-factor","^6","lib_draw_graph/postprocessor.cljc","^7",214,"^8",1,"^9",214,"^:",21,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",214,"^8",6,"^9",214,"^:",21],"^3U","^4;"],"~$without",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",26,"^8",7,"^9",26,"^:",14,"^39",["^16",["^3:",["^16",[["~$s","~$x"]]]]],"^;","Returns set s with x removed."],"^K","~$lib-draw-graph.postprocessor/without","^6","lib_draw_graph/postprocessor.cljc","^:",14,"^3>",["^16",[["~$s","~$x"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",26,"^3B",["^J",[null,"^3C"]],"^9",26,"^3D",2,"^3E",true,"^39",["^16",["^3:",["^16",[["~$s","~$x"]]]]],"^;","Returns set s with x removed."],"~$editor-rects",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",268,"^8",7,"^9",268,"^:",19,"^39",["^16",["^3:",["^16",[["^3<","^Q","~$node"]]]]]],"^K","~$lib-draw-graph.postprocessor/editor-rects","^6","lib_draw_graph/postprocessor.cljc","^:",19,"^3>",["^16",[["^3<","^Q","^4R"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",268,"^3B",["^J",[null,"^3M","^3C"]],"^9",268,"^3D",3,"^3E",true,"^39",["^16",["^3:",["^16",[["^3<","^Q","^4R"]]]]]],"~$parse-int",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",149,"^8",7,"^9",149,"^:",16,"^39",["^16",["^3:",["^16",[["~$s"]]]]]],"^K","~$lib-draw-graph.postprocessor/parse-int","^6","lib_draw_graph/postprocessor.cljc","^:",16,"^3>",["^16",[["~$s"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",149,"^3B","~$js","^9",149,"^3D",1,"^3E",true,"^39",["^16",["^3:",["^16",[["~$s"]]]]]],"~$sorted-free-clusters",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",70,"^8",7,"^9",70,"^:",27,"^39",["^16",["^3:",["^16",[["~$g"]]]]],"^;","Kahn sorted free clusters"],"^K","~$lib-draw-graph.postprocessor/sorted-free-clusters","^6","lib_draw_graph/postprocessor.cljc","^:",27,"^3>",["^16",[["~$g"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",70,"^3B","~$cljs.core/LazySeq","^9",70,"^3D",1,"^3E",true,"^39",["^16",["^3:",["^16",[["~$g"]]]]],"^;","Kahn sorted free clusters"],"~$clusters->boxes",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",100,"^8",7,"^9",100,"^:",22,"^39",["^16",["^3:",["^16",[["~$z","^3X"]]]]],"^;","Get the bounding boxes for the clusters from the zipper over the svg."],"^K","~$lib-draw-graph.postprocessor/clusters->boxes","^6","lib_draw_graph/postprocessor.cljc","^:",22,"^3>",["^16",[["~$z","^3X"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",100,"^3B",["^J",[null,"^3C"]],"^9",100,"^3D",2,"^3E",true,"^39",["^16",["^3:",["^16",[["~$z","^3X"]]]]],"^;","Get the bounding boxes for the clusters from the zipper over the svg."],"~$str->int",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",154,"^8",7,"^9",154,"^:",15,"^39",["^16",["^3:",["^16",[["~$cs","~$error-msg"]]]]]],"^K","~$lib-draw-graph.postprocessor/str->int","^6","lib_draw_graph/postprocessor.cljc","^:",15,"^3>",["^16",[["^51","^52"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",154,"^3B",["^J",[null,"^4;"]],"^9",154,"^3D",2,"^3E",true,"^39",["^16",["^3:",["^16",[["^51","^52"]]]]]],"~$editor-label-posn",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",291,"^8",7,"^9",291,"^:",24,"^39",["^16",["^3:",["^16",[["^3<","~$g","^3;","^Q","^4R"]]]]]],"^K","~$lib-draw-graph.postprocessor/editor-label-posn","^6","lib_draw_graph/postprocessor.cljc","^:",24,"^3>",["^16",[["^3<","~$g","^3;","^Q","^4R"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",291,"^9",291,"^3D",5,"^3E",true,"^39",["^16",["^3:",["^16",[["^3<","~$g","^3;","^Q","^4R"]]]]]],"~$tasks->clusters",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",109,"^8",7,"^9",109,"^:",22,"^39",["^16",["^3:",["^16",[["~$tasks"]]]]],"^;","Converts anneal-tasks to a set of clusters"],"^K","~$lib-draw-graph.postprocessor/tasks->clusters","^6","lib_draw_graph/postprocessor.cljc","^:",22,"^3>",["^16",[["^57"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",109,"^3B",["^J",[null,"^3C"]],"^9",109,"^3D",1,"^3E",true,"^39",["^16",["^3:",["^16",[["^57"]]]]],"^;","Converts anneal-tasks to a set of clusters"],"~$optimize-clusters",["^ ","^38",null,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",342,"^8",7,"^9",342,"^:",24,"^39",["^16",["^3:",["^16",[["^10","~$g","^4G","^3;"]]]]],"^;","Anneals free clusters in z & g.\n   z is a zipper over the svg and g the underlying graph.\n   Returns svg."],"^K","~$lib-draw-graph.postprocessor/optimize-clusters","^6","lib_draw_graph/postprocessor.cljc","^:",24,"^3>",["^16",[["^10","~$g","^4G","^3;"]]],"^3?",null,"^3@",["^16",[null,null]],"^8",1,"^3A",false,"^7",342,"^3B","^3C","^9",342,"^3D",4,"^3E",true,"^39",["^16",["^3:",["^16",[["^10","~$g","^4G","^3;"]]]]],"^;","Anneals free clusters in z & g.\n   z is a zipper over the svg and g the underlying graph.\n   Returns svg."],"~$y-label-spacer-BT",["^ ","^K","~$lib-draw-graph.postprocessor/y-label-spacer-BT","^6","lib_draw_graph/postprocessor.cljc","^7",288,"^8",1,"^9",288,"^:",23,"^5",["^ ","^6","lib_draw_graph/postprocessor.cljc","^7",288,"^8",6,"^9",288,"^:",23],"^3U","^4;"]],"^14",["^ ","^W","^W"],"~:cljs.analyzer/constants",["^ ","^11",["^J",["~:y","~:text-anchor","~:constraints","~:boundary-sep","~:pp-cluster-sep","~:r","~:max-move","~:obstacles","~:else","~:y-retard","~:content","~:w","~:terminate-early?","~:state","~:pp-anneal-bias","~:pp-clusters","~:boundary","~:l","~:style","~:grow","~:h","~:labeljust","~:cluster-sep","~:b","~:dims","~:attrs","~:t","~:rankdir","~:x","~:BT?","~:x-retard","~:collision","~:rect"]],"~:order",["~:l","~:t","~:r","~:b","~:x","~:y","~:w","~:h","^5O","^5S","^5D","^5A","^5R","^5K","^5M","^5U","^5C","^5?","^5H","^5@","^5V","^5I","^5J","^5G","^5P","^5T","^5E","^5B","^5Q","^5F","^5N","^5L","^5>"]],"^19",["^ ","^12",["^J",[]]],"^1:",["^ "],"^1;",["^X","^W","^[","^S","^R","^T","^V","^Y"]],"^N","^L","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1I",[["^5Z","~:static-fns"],true,["^5Z","~:elide-asserts"],true,["^5Z","~:optimize-constants"],null,["^5Z","^1@"],null,["^5Z","~:external-config"],null,["^5Z","~:tooling-config"],null,["^5Z","~:emit-constants"],null,["^5Z","~:load-tests"],false,["^5Z","~:infer-externs"],"~:auto",["^5Z","^1B"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^5Z","~:fn-invoke-direct"],null,["^5Z","~:source-map"],null]]]