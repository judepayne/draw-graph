["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/invariant.js"],"~:js","shadow$provide[8]=function(q,B,H,y){B(3);\"use strict\";H.exports=function(q,x,m,K,N,a,d,A){if(!q){if(void 0===x)q=Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else{var h=[m,K,N,a,d,A],u=0;q=Error(x.replace(/%s/g,function(){return h[u++]}));q.name=\"Invariant Violation\"}q.framesToPop=1;throw q;}}}","~:source","shadow$provide[8] = function(global,require,module,exports) {\nvar process = require('process');\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$process$browser","~$shadow.js"]],"~:properties",["^5",["framesToPop","name"]],"~:compiled-at",1560806460867,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$invariant.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,CAAf,CAAA,CAAoB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAC9CF,CAAA,CAAQ,CAAR,CASd,aA4CAC,EAAAC,QAAA,CArBAC,QAAkB,CAACC,CAAD,CAAYC,CAAZ,CAAoBC,CAApB,CAAuBC,CAAvB,CAA0BC,CAA1B,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAmCC,CAAnC,CAAsC,CAGtD,GAAI,CAACP,CAAL,CAAgB,CAEd,GAAeQ,IAAAA,EAAf,GAAIP,CAAJ,CACEQ,CAAA,CAAYC,KAAJ,CAAU,+HAAV,CADV,KAEO,CACL,IAAIC,EAAO,CAACT,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAaC,CAAb,CAAgBC,CAAhB,CAAX,CACIK,EAAW,CACfH,EAAA,CAAYC,KAAJ,CAAUT,CAAAY,QAAA,CAAe,KAAf,CAAsB,QAAS,EAAG,CAClD,MAAOF,EAAA,CAAKC,CAAA,EAAL,CAD2C,CAAlC,CAAV,CAGRH,EAAAK,KAAA,CAAa,qBANR,CASPL,CAAAM,YAAA,CAAoB,CACpB,MAAMN,EAAN,CAdc,CAHsC,CAjCI;\",\n\"sources\":[\"node_modules/fbjs/lib/invariant.js\"],\n\"sourcesContent\":[\"shadow$provide[8] = function(global,require,module,exports) {\\nvar process = require('process');\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n */\\n\\n'use strict';\\n\\n/**\\n * Use invariant() to assert state which your program assumes to be true.\\n *\\n * Provide sprintf-style format (only %s is supported) and arguments\\n * to provide information about what broke and what you were\\n * expecting.\\n *\\n * The invariant message will be stripped in production, but the invariant\\n * will remain to ensure logic does not differ in production.\\n */\\n\\nvar validateFormat = function validateFormat(format) {};\\n\\nif (process.env.NODE_ENV !== 'production') {\\n  validateFormat = function validateFormat(format) {\\n    if (format === undefined) {\\n      throw new Error('invariant requires an error message argument');\\n    }\\n  };\\n}\\n\\nfunction invariant(condition, format, a, b, c, d, e, f) {\\n  validateFormat(format);\\n\\n  if (!condition) {\\n    var error;\\n    if (format === undefined) {\\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\\n    } else {\\n      var args = [a, b, c, d, e, f];\\n      var argIndex = 0;\\n      error = new Error(format.replace(/%s/g, function () {\\n        return args[argIndex++];\\n      }));\\n      error.name = 'Invariant Violation';\\n    }\\n\\n    error.framesToPop = 1; // we don't care about invariant's own frame\\n    throw error;\\n  }\\n}\\n\\nmodule.exports = invariant;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"invariant\",\"condition\",\"format\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"undefined\",\"error\",\"Error\",\"args\",\"argIndex\",\"replace\",\"name\",\"framesToPop\"]\n}\n"]