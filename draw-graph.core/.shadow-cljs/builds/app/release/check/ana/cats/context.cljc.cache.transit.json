["^ ","~:output",["^ ","~:js","goog.provide('cats.context');\ncats.context._STAR_context_STAR_ = null;\ncats.context.throw_illegal_argument = (function cats$context$throw_illegal_argument(text){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(text,cljs.core.PersistentArrayMap.EMPTY);\n});\n/**\n * Returnt `true` if the provided value satisfies\n *   the Context protocol.\n */\ncats.context.context_QMARK_ = (function cats$context$context_QMARK_(v){\nif((!((v == null)))){\nif(((false) || ((cljs.core.PROTOCOL_SENTINEL === v.cats$protocols$Context$)))){\nreturn true;\n} else {\nif((!v.cljs$lang$protocol_mask$partition$)){\nreturn cljs.core.native_satisfies_QMARK_(cats.protocols.Context,v);\n} else {\nreturn false;\n}\n}\n} else {\nreturn cljs.core.native_satisfies_QMARK_(cats.protocols.Context,v);\n}\n});\n/**\n * Given an optional value infer its context. If context is already set, it\n *   is returned as is without any inference operation.\n * @param {...*} var_args\n */\ncats.context.infer = (function cats$context$infer(var_args){\nvar G__18819 = arguments.length;\nswitch (G__18819) {\ncase 0:\nreturn cats.context.infer.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn cats.context.infer.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncats.context.infer.cljs$core$IFn$_invoke$arity$0 = (function (){\nif((cats.context._STAR_context_STAR_ == null)){\ncats.context.throw_illegal_argument(\"No context is set.\");\n} else {\n}\n\nreturn cats.context._STAR_context_STAR_;\n});\n\ncats.context.infer.cljs$core$IFn$_invoke$arity$1 = (function (v){\nif((!((cats.context._STAR_context_STAR_ == null)))){\nreturn cats.context._STAR_context_STAR_;\n} else {\nif((((!((v == null))))?((((false) || ((cljs.core.PROTOCOL_SENTINEL === v.cats$protocols$Contextual$))))?true:(((!v.cljs$lang$protocol_mask$partition$))?cljs.core.native_satisfies_QMARK_(cats.protocols.Contextual,v):false)):cljs.core.native_satisfies_QMARK_(cats.protocols.Contextual,v))){\nreturn cats.protocols._get_context(v);\n} else {\nreturn cats.context.throw_illegal_argument([\"No context is set and it can not be automatically \",\"resolved from provided value\"].join(''));\n\n}\n}\n});\n\ncats.context.infer.cljs$lang$maxFixedArity = 1;\n\n/**\n * Deprecated alias to `infer`.\n * @param {...*} var_args\n */\ncats.context.get_current = (function cats$context$get_current(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___18823 = arguments.length;\nvar i__4731__auto___18824 = (0);\nwhile(true){\nif((i__4731__auto___18824 < len__4730__auto___18823)){\nargs__4736__auto__.push((arguments[i__4731__auto___18824]));\n\nvar G__18825 = (i__4731__auto___18824 + (1));\ni__4731__auto___18824 = G__18825;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn cats.context.get_current.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncats.context.get_current.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cats.context.infer,args);\n});\n\ncats.context.get_current.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncats.context.get_current.cljs$lang$applyTo = (function (seq18821){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq18821));\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","A cats context management.","~:file","cats/context.cljc","~:line",26,"~:column",5,"~:end-line",26,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$cats.context","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cats.protocols","^P","~$p","^P","~$cljs.core","^Q","~$goog","^R"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^Q","^Q"],"~:form",["~#list",["~$ns","^K","A cats context management.",["^X",["^T",["^P","~:as","~$p"]]]]],"~:flags",["^ ","^T",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^R","^Q","^P"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","cats/context.cljc"],"~:compiled-at",1560578445215,"~:resource-name","cats/context.cljc","~:warnings",[],"~:source",";; Copyright (c) 2014-2016 Andrey Antukh <niwi@niwi.nz>\n;; Copyright (c) 2014-2016 Alejandro GÃ³mez <alejandro@dialelo.com>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns cats.context\n  \"A cats context management.\"\n  (:require [cats.protocols :as p]))\n\n(def ^:dynamic *context* nil)\n\n(defn throw-illegal-argument\n  {:no-doc true :internal true}\n  [^String text]\n  #?(:cljs (throw (ex-info text {}))\n     :clj  (throw (IllegalArgumentException. text))))\n\n(defn context?\n  \"Returnt `true` if the provided value satisfies\n  the Context protocol.\"\n  [v]\n  (satisfies? p/Context v))\n\n#?(:clj\n   (defmacro with-context\n     \"Set current context to specific monad.\"\n     [ctx & body]\n     `(do\n        (when-not (context? ~ctx)\n          (throw-illegal-argument\n           \"The provided context does not implements Context.\"))\n        (binding [*context* ~ctx]\n          ~@body))))\n\n#?(:clj\n   (defmacro with-monad\n     \"Semantic alias for `with-context`.\"\n     [ctx & body]\n     `(with-context ~ctx\n        ~@body)))\n\n(defn infer\n  \"Given an optional value infer its context. If context is already set, it\n  is returned as is without any inference operation.\"\n  {:no-doc true}\n  ([]\n   (when (nil? *context*)\n     (throw-illegal-argument \"No context is set.\"))\n   *context*)\n  ([v]\n   (cond\n     (not (nil? *context*))\n     *context*\n\n     (satisfies? p/Contextual v)\n     (p/-get-context v)\n\n     :else\n     (throw-illegal-argument\n      (str \"No context is set and it can not be automatically \"\n           \"resolved from provided value\")))))\n\n(defn get-current\n  \"Deprecated alias to `infer`.\"\n  {:deprecated true}\n  [& args]\n  (apply infer args))\n\n\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AA6BA,AAAA,AAAeA;AAEf,AAAA,AAAMC,AAEKC;AAFX,AAGW,AAAO,AAAA,AAACC,AAAQD;;AAG3B;;;;AAAA,AAAME,AAGHC;AAHH,AAIE,AAAA,AAAA,AAAA,AAAsBA;AAAtB,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAsBD;AAAtB;;AAAA,AAAA,AAAA,AAAsBA;AAAtB,AAAAE,AAAYC,AAAUH;;AAAtB;;;;AAAA,AAAAE,AAAYC,AAAUH;;;AAoBxB,AAAA;;;;;AAAA,AAAAI,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAKG,AAAM,AAAA,AAAMX;AAAZ,AACE,AAAA,AAACC;;AADH;;AAEAD;;;AAPH,AAAA,AAAA,AAAMW,AAQFN;AARJ,AASG,AACE,AAAK,AAAA,AAAML;AACXA;;AAFF,AAIE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAYM,AAAAA,AAAaR,AAAAA,AAAAA,AAAAA,AAAAA;AACzB,AAACS,AAAeT;;AALlB,AAQE,AAACJ,AACA,AAAA,AAAA;;;;;;AAlBN,AAAA,AAAA,AAAMU;;AAAN,AAqBA,AAAA;;;;AAAA,AAAAF,AAAMW;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAGDI;AAHL,AAIE,AAACC,AAAMd,AAAMa;;;AAJf,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA","names",["cats.context/*context*","cats.context/throw-illegal-argument","text","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cats.context/context?","v","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cats.protocols/Context","var_args","G__18819","cats.context/infer","js/Error","cats.protocols/Contextual","cats.protocols/-get-context","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","cats.context/get-current","seq18821","self__4718__auto__","cljs.core/seq","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]]],"~:cache-keys",["~#cmap",[["~:macro","^Q"],[1559826623000],["^13","goog/math/math.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^R","~$goog.array","~$goog.asserts"]]],["^13","goog/array/array.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R","^1F"]]],["^13","goog/debug/error.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R"]]],["^13","cats/protocols.cljc"],[1547383501000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R","^Q"]]],["^13","goog/dom/nodetype.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R"]]],["^13","goog/object/object.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^13","goog/math/long.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R","^1F","~$goog.reflect"]]],["^13","goog/string/internal.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R"]]],["^13","goog/functions/functions.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R"]]],["^13","goog/structs/map.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^13","cats/context.cljc"],[1547383501000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R","^Q","^P"]]],["^13","goog/asserts/asserts.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^13","goog/uri/uri.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R","^1E","^1F","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^13","goog/base.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",[]]],["^13","goog/structs/structs.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R","^1E","~$goog.object"]]],["^13","goog/string/string.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R","~$goog.string.internal"]]],["^13","goog/reflect/reflect.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R"]]],["^13","goog/string/stringbuffer.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R"]]],["^13","goog/iter/iter.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R","^1E","^1F","~$goog.functions","~$goog.math"]]],["^13","cljs/core.cljs"],[1559826623000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["~$goog.math.Long","~$goog.math.Integer","^1M","^1S","^1E","~$goog.Uri","~$goog.string.StringBuffer"]]],["^13","goog/math/integer.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R"]]],["^13","goog/uri/utils.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^I",[]],"^1D",["^R","^1E","^1F","^1M"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","A cats context management.","^7","cats/context.cljc","^8",26,"^9",5,"^:",26,"^;",17],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^N",null,"^O",["^ ","^P","^P","~$p","^P","^Q","^Q","^R","^R"],"^S",["^I",["^T"]],"~:shadow/js-access-global",["^I",["Error"]],"^U",null,"~:defs",["^ ","~$*context*",["^ ","^5",["^ ","^7","cats/context.cljc","^8",30,"^9",16,"^:",30,"^;",25,"~:dynamic",true],"^J","~$cats.context/*context*","^7","cats/context.cljc","^;",25,"^9",1,"^23",true,"^8",30,"^:",30,"~:tag","~$clj-nil"],"~$throw-illegal-argument",["^ ","~:no-doc",true,"~:protocol-inline",null,"^5",["^ ","^7","cats/context.cljc","^8",32,"^9",7,"^:",32,"^;",29,"~:arglists",["^X",["~$quote",["^X",[["~$text"]]]]],"^28",true,"~:internal",true],"^J","~$cats.context/throw-illegal-argument","^7","cats/context.cljc","^;",29,"~:method-params",["^X",[["^2<"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^9",1,"^2=",true,"~:variadic?",false,"^8",32,"~:ret-tag","~$ignore","^:",32,"~:max-fixed-arity",1,"~:fn-var",true,"^2:",["^X",["^2;",["^X",[["^2<"]]]]]],"~$context?",["^ ","^29",null,"^5",["^ ","^7","cats/context.cljc","^8",38,"^9",7,"^:",38,"^;",15,"^2:",["^X",["^2;",["^X",[["~$v"]]]]],"^6","Returnt `true` if the provided value satisfies\n  the Context protocol."],"^J","~$cats.context/context?","^7","cats/context.cljc","^;",15,"^2?",["^X",[["~$v"]]],"^2@",null,"^2A",["^X",[null,null]],"^9",1,"^2B",false,"^8",38,"^2C","~$boolean","^:",38,"^2E",1,"^2F",true,"^2:",["^X",["^2;",["^X",[["~$v"]]]]],"^6","Returnt `true` if the provided value satisfies\n  the Context protocol."],"~$infer",["^ ","^28",true,"^29",null,"^5",["^ ","^28",true,"^7","cats/context.cljc","^;",12,"~:top-fn",["^ ","^2B",false,"~:fixed-arity",1,"^2E",1,"^2?",["^X",[[],["~$v"]]],"^2:",["^X",[[],["~$v"]]],"^2A",["^X",[null,null]]],"^9",7,"^8",62,"^:",62,"^2:",["^X",["^2;",["^X",[[],["~$v"]]]]],"^6","Given an optional value infer its context. If context is already set, it\n  is returned as is without any inference operation.","~:jsdoc",["^X",["@param {...*} var_args"]]],"^J","~$cats.context/infer","^7","cats/context.cljc","^;",12,"^2K",["^ ","^2B",false,"^2L",1,"^2E",1,"^2?",["^X",[[],["~$v"]]],"^2:",["^X",[[],["~$v"]]],"^2A",["^X",[null,null]]],"^2?",["^X",[[],["~$v"]]],"^2@",null,"^2L",1,"^2A",["^X",[null,null]],"^9",1,"^2B",false,"~:methods",[["^ ","^2L",0,"^2B",false,"^25","^26"],["^ ","^2L",1,"^2B",false,"^25",["^I",["~$any","^26"]]]],"^8",62,"^:",62,"^2E",1,"^2F",true,"^2:",["^X",[[],["~$v"]]],"^6","Given an optional value infer its context. If context is already set, it\n  is returned as is without any inference operation.","^2M",["^X",["@param {...*} var_args"]]],"~$get-current",["^ ","^29",null,"^5",["^ ","^7","cats/context.cljc","^;",18,"^2K",["^ ","^2B",true,"^2L",0,"^2E",0,"^2?",[["^X",["~$args"]]],"^2:",["^X",[["~$&","^2R"]]],"^2A",["^X",[null]]],"^9",7,"^8",83,"~:deprecated",true,"^:",83,"^2:",["^X",["^2;",["^X",[["~$&","^2R"]]]]],"^6","Deprecated alias to `infer`.","^2M",["^X",["@param {...*} var_args"]]],"^J","~$cats.context/get-current","^7","cats/context.cljc","^;",18,"^2K",["^ ","^2B",true,"^2L",0,"^2E",0,"^2?",[["^X",["^2R"]]],"^2:",["^X",[["~$&","^2R"]]],"^2A",["^X",[null]]],"^2?",[["^X",["^2R"]]],"^2@",null,"^2L",0,"^2A",["^X",[null]],"^9",1,"^2B",true,"^2O",[["^ ","^2L",0,"^2B",true,"^25","^2P"]],"^8",83,"^2S",true,"^2C","^2P","^:",83,"^2E",0,"^2F",true,"^2:",["^X",[["~$&","^2R"]]],"^6","Deprecated alias to `infer`.","^2M",["^X",["@param {...*} var_args"]]]],"^V",["^ ","^Q","^Q"],"~:cljs.analyzer/constants",["^ ","^S",["^I",["~:else"]],"~:order",["^2V"]],"^[",["^ ","^T",["^I",[]]],"^10",["^ "],"^11",["^R","^Q","^P"]],"^M","^K","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1?",[["^2Z","~:static-fns"],true,["^2Z","~:elide-asserts"],true,["^2Z","~:optimize-constants"],null,["^2Z","^16"],null,["^2Z","~:external-config"],null,["^2Z","~:tooling-config"],null,["^2Z","~:emit-constants"],null,["^2Z","~:load-tests"],false,["^2Z","~:infer-externs"],true,["^2Z","^18"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^2Z","~:fn-invoke-direct"],null,["^2Z","~:source-map"],"/dev/null"]]]