["^ ","~:output",["^ ","~:js","goog.provide('lib_draw_graph.preprocessor');\n/**\n * Checks whether m contains all entries in sub.\n */\nlib_draw_graph.preprocessor.submap_QMARK_ = (function lib_draw_graph$preprocessor$submap_QMARK_(sub,m){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(sub,cljs.core.select_keys(m,cljs.core.keys(sub)));\n});\nlib_draw_graph.preprocessor.parse_num = (function lib_draw_graph$preprocessor$parse_num(s){\ntry{var n = cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1(s);\nif(typeof n === 'number'){\nreturn n;\n} else {\nthrow lib_draw_graph.util.err(\"Both terms in an inequality filter must be numbers.\");\n}\n}catch (e30563){if((e30563 instanceof Error)){\nvar e = e30563;\nthrow lib_draw_graph.util.err(\"Both terms in an inequality filter must be numbers.\");\n} else {\nthrow e30563;\n\n}\n}});\n/**\n * Checks if part-node is part of one of the nodes in the graph. Both part-node\n *   and the nodes in the graph must be in map format. e.g. part-node {:id 12} and\n *   a node in the graph {:id 12 :name ....}. Returns the first node matched or nil.\n */\nlib_draw_graph.preprocessor.find_node = (function lib_draw_graph$preprocessor$find_node(g,part_node){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2((function (acc,cur){\nif(lib_draw_graph.preprocessor.submap_QMARK_(part_node,cur)){\nreturn cljs.core.reduced(cur);\n} else {\nreturn null;\n}\n}),loom.graph.nodes(g));\n});\n/**\n * Returns a sub(di)graph of g going depth first from the first occurrence of\n * the (part) node n.\n * @param {...*} var_args\n */\nlib_draw_graph.preprocessor.subgraph = (function lib_draw_graph$preprocessor$subgraph(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___30871 = arguments.length;\nvar i__4731__auto___30872 = (0);\nwhile(true){\nif((i__4731__auto___30872 < len__4730__auto___30871)){\nargs__4736__auto__.push((arguments[i__4731__auto___30872]));\n\nvar G__30873 = (i__4731__auto___30872 + (1));\ni__4731__auto___30872 = G__30873;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn lib_draw_graph.preprocessor.subgraph.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\nlib_draw_graph.preprocessor.subgraph.cljs$core$IFn$_invoke$arity$variadic = (function (g,n,p__30585){\nvar map__30586 = p__30585;\nvar map__30586__$1 = (((((!((map__30586 == null))))?(((((map__30586.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__30586.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__30586):map__30586);\nvar part_node_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__30586__$1,new cljs.core.Keyword(null,\"part-node?\",\"part-node?\",242747632),false);\nvar node = (cljs.core.truth_(part_node_QMARK_)?lib_draw_graph.preprocessor.find_node(g,n):n);\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(loom.graph.digraph,loom.alg_generic.pre_edge_traverse(((function (node,map__30586,map__30586__$1,part_node_QMARK_){\nreturn (function (p1__30573_SHARP_){\nreturn loom.graph.successors_STAR_(g,p1__30573_SHARP_);\n});})(node,map__30586,map__30586__$1,part_node_QMARK_))\n,node));\n});\n\nlib_draw_graph.preprocessor.subgraph.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\nlib_draw_graph.preprocessor.subgraph.cljs$lang$applyTo = (function (seq30574){\nvar G__30575 = cljs.core.first(seq30574);\nvar seq30574__$1 = cljs.core.next(seq30574);\nvar G__30576 = cljs.core.first(seq30574__$1);\nvar seq30574__$2 = cljs.core.next(seq30574__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__30575,G__30576,seq30574__$2);\n});\n\n/**\n * Returns the leaves in the graph.\n */\nlib_draw_graph.preprocessor.leaves = (function lib_draw_graph$preprocessor$leaves(g){\nreturn cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__30598_SHARP_){\nreturn lib_draw_graph.graph.leaf_QMARK_(g,p1__30598_SHARP_);\n}),loom.graph.nodes(g));\n});\n/**\n * Returns the nodes that are parents of nodes.\n */\nlib_draw_graph.preprocessor.parents_of = (function lib_draw_graph$preprocessor$parents_of(g,nodes){\nvar visible_parents = (function lib_draw_graph$preprocessor$parents_of_$_visible_parents(g__$1,n){\nvar prnts = loom.graph.predecessors_STAR_(g__$1,n);\nreturn cljs.core.filter.cljs$core$IFn$_invoke$arity$2(((function (prnts){\nreturn (function (p1__30601_SHARP_){\nreturn cljs.core.not(lib_draw_graph.graph.edge_invisible_QMARK_(g__$1,p1__30601_SHARP_,n));\n});})(prnts))\n,prnts);\n});\nreturn cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__30602_SHARP_){\nreturn visible_parents(g,p1__30602_SHARP_);\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([nodes], 0)));\n});\n/**\n * Removes the n lowest levels from the graph.\n */\nlib_draw_graph.preprocessor.remove_levels = (function lib_draw_graph$preprocessor$remove_levels(g,n){\nvar clustered_QMARK_ = lib_draw_graph.clustered.clustered_QMARK_(g);\nvar grph = g;\nvar nds = lib_draw_graph.preprocessor.leaves(g);\nvar lvls = n;\nwhile(true){\nif((lvls === (0))){\nreturn grph;\n} else {\nvar next_gen = lib_draw_graph.preprocessor.parents_of(grph,nds);\nvar grph_STAR_ = ((clustered_QMARK_)?new cljs.core.Keyword(null,\"graph\",\"graph\",1558099509).cljs$core$IFn$_invoke$arity$1(lib_draw_graph.clustered.remove_nodes(grph,nds)):loom.graph.remove_nodes_STAR_(grph,nds));\nvar G__30896 = grph_STAR_;\nvar G__30897 = next_gen;\nvar G__30898 = (lvls - (1));\ngrph = G__30896;\nnds = G__30897;\nlvls = G__30898;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Eager depth first search that collects state as it goes.\n * successors is a function of 1 arg that returns successors of node passed.\n * start is the starting node.\n * init is a map of initial state.\n * f is a function of 3 args: current state (map), current nodes and one of its children.\n */\nlib_draw_graph.preprocessor.eager_stateful_dfs = (function lib_draw_graph$preprocessor$eager_stateful_dfs(successors,start,f,init){\nvar vertices = cljs.core.PersistentVector.EMPTY;\nvar explored = cljs.core.PersistentHashSet.createAsIfByAssoc([start]);\nvar frontier = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [start], null);\nvar state = init;\nwhile(true){\nif(cljs.core.empty_QMARK_(frontier)){\nreturn state;\n} else {\nvar v = cljs.core.peek(frontier);\nvar neighbours = (successors.cljs$core$IFn$_invoke$arity$1 ? successors.cljs$core$IFn$_invoke$arity$1(v) : successors.call(null,v));\nvar G__30899 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(vertices,v);\nvar G__30900 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(explored,neighbours);\nvar G__30901 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.pop(frontier),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(explored,neighbours));\nvar G__30902 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vertices,explored,frontier,state,v,neighbours){\nreturn (function (acc,cur){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,cur,(f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(acc,v,cur) : f.call(null,acc,v,cur)));\n});})(vertices,explored,frontier,state,v,neighbours))\n,state,neighbours);\nvertices = G__30899;\nexplored = G__30900;\nfrontier = G__30901;\nstate = G__30902;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Returns rank for the next (node) given state map.\n */\nlib_draw_graph.preprocessor.update_rank = (function lib_draw_graph$preprocessor$update_rank(state,node,next){\nvar mx = (function (x,y){\nif((x == null)){\nreturn y;\n} else {\nvar x__4219__auto__ = x;\nvar y__4220__auto__ = y;\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n}\n});\nreturn mx(cljs.core.get.cljs$core$IFn$_invoke$arity$2(state,next),(cljs.core.get.cljs$core$IFn$_invoke$arity$2(state,node) + (1)));\n});\n/**\n * Returns predecessors not including self\n */\nlib_draw_graph.preprocessor.predecessors_not_self = (function lib_draw_graph$preprocessor$predecessors_not_self(g,n){\nvar predec = loom.graph.predecessors_STAR_(g,n);\nreturn cljs.core.filter.cljs$core$IFn$_invoke$arity$2(((function (predec){\nreturn (function (p1__30633_SHARP_){\nreturn (!(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(n,p1__30633_SHARP_)));\n});})(predec))\n,predec);\n});\n/**\n * Returns successors not including self\n */\nlib_draw_graph.preprocessor.successors_not_self = (function lib_draw_graph$preprocessor$successors_not_self(g,n){\nvar succs = loom.graph.successors_STAR_(g,n);\nreturn cljs.core.filter.cljs$core$IFn$_invoke$arity$2(((function (succs){\nreturn (function (p1__30634_SHARP_){\nreturn (!(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(n,p1__30634_SHARP_)));\n});})(succs))\n,succs);\n});\n/**\n * Returns ranks for each node in g. 0-indexed.\n */\nlib_draw_graph.preprocessor.ranks = (function lib_draw_graph$preprocessor$ranks(g){\nvar root_QMARK_ = (function (p1__30640_SHARP_){\nreturn cljs.core.empty_QMARK_(lib_draw_graph.preprocessor.predecessors_not_self(g,p1__30640_SHARP_));\n});\nvar roots = cljs.core.filter.cljs$core$IFn$_invoke$arity$2(root_QMARK_,loom.graph.nodes(g));\nvar init = cljs.core.zipmap(roots,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1((0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (root_QMARK_,roots,init){\nreturn (function (acc,cur){\nreturn lib_draw_graph.preprocessor.eager_stateful_dfs(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(lib_draw_graph.preprocessor.successors_not_self,g),cur,lib_draw_graph.preprocessor.update_rank,acc);\n});})(root_QMARK_,roots,init))\n,init,roots);\n});\nlib_draw_graph.preprocessor.fmap = (function lib_draw_graph$preprocessor$fmap(f,m){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(m),(function (){var iter__4523__auto__ = (function lib_draw_graph$preprocessor$fmap_$_iter__30649(s__30650){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__30650__$1 = s__30650;\nwhile(true){\nvar temp__5720__auto__ = cljs.core.seq(s__30650__$1);\nif(temp__5720__auto__){\nvar s__30650__$2 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__30650__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__30650__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__30652 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__30651 = (0);\nwhile(true){\nif((i__30651 < size__4522__auto__)){\nvar vec__30657 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__30651);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30657,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30657,(1),null);\ncljs.core.chunk_append(b__30652,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(v) : f.call(null,v))], null));\n\nvar G__30923 = (i__30651 + (1));\ni__30651 = G__30923;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__30652),lib_draw_graph$preprocessor$fmap_$_iter__30649(cljs.core.chunk_rest(s__30650__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__30652),null);\n}\n} else {\nvar vec__30662 = cljs.core.first(s__30650__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30662,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30662,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(v) : f.call(null,v))], null),lib_draw_graph$preprocessor$fmap_$_iter__30649(cljs.core.rest(s__30650__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4523__auto__(m);\n})());\n});\n/**\n * Applies f to every value in nested map.\n */\nlib_draw_graph.preprocessor.fmap_STAR_ = (function lib_draw_graph$preprocessor$fmap_STAR_(f,m){\nreturn lib_draw_graph.preprocessor.fmap((function (p1__30669_SHARP_){\nif(cljs.core.map_QMARK_(p1__30669_SHARP_)){\nreturn (lib_draw_graph.preprocessor.fmap_STAR_.cljs$core$IFn$_invoke$arity$2 ? lib_draw_graph.preprocessor.fmap_STAR_.cljs$core$IFn$_invoke$arity$2(f,p1__30669_SHARP_) : lib_draw_graph.preprocessor.fmap_STAR_.call(null,f,p1__30669_SHARP_));\n} else {\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__30669_SHARP_) : f.call(null,p1__30669_SHARP_));\n}\n}),m);\n});\n/**\n * Organizes ranks by k. k is usually a cluster.\n */\nlib_draw_graph.preprocessor.rank_info = (function lib_draw_graph$preprocessor$rank_info(ranks,k){\nvar r = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__30678){\nvar vec__30679 = p__30678;\nvar k__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30679,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30679,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k__$1,cljs.core.group_by(cljs.core.second,v)], null);\n})),cljs.core.group_by((function (n){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.first(n),k);\n}),ranks));\nreturn lib_draw_graph.preprocessor.fmap_STAR_(((function (r){\nreturn (function (p1__30672_SHARP_){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,p1__30672_SHARP_);\n});})(r))\n,r);\n});\n/**\n * Returns seq of nodes at the max rank for the k. k is usually a cluster.\n */\nlib_draw_graph.preprocessor.max_ranked_nodes = (function lib_draw_graph$preprocessor$max_ranked_nodes(info,k,n){\nvar m = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.sorted_map_by(cljs.core._GT_),cljs.core.get.cljs$core$IFn$_invoke$arity$2(info,k));\nvar m_SINGLEQUOTE_ = cljs.core.flatten(cljs.core.vals(m));\nreturn cljs.core.take.cljs$core$IFn$_invoke$arity$2(n,m_SINGLEQUOTE_);\n});\n/**\n * Returns seq of nodes at the min rank for the k. k is usually a cluster.\n */\nlib_draw_graph.preprocessor.min_ranked_nodes = (function lib_draw_graph$preprocessor$min_ranked_nodes(info,k,n){\nvar m = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.sorted_map(),cljs.core.get.cljs$core$IFn$_invoke$arity$2(info,k));\nvar m_SINGLEQUOTE_ = cljs.core.flatten(cljs.core.vals(m));\nreturn cljs.core.take.cljs$core$IFn$_invoke$arity$2(n,m_SINGLEQUOTE_);\n});\nlib_draw_graph.preprocessor.cluster_edges = new cljs.core.PersistentArrayMap(null, 7, [(16),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(4),(4)], null),(12),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(4),(3)], null),(9),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(3),(3)], null),(6),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(3),(2)], null),(4),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(2)], null),(2),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(1)], null),(1),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(1)], null)], null);\n/**\n * Returns a set of edges between all of the min ranked nodes of clstr1\n * and one of the max ranked nodes in clstr2. edges already in the graph\n * are returned marked with :constraint\n */\nlib_draw_graph.preprocessor.edges_between = (function lib_draw_graph$preprocessor$edges_between(g,info,ce_uppers,ce_lowers,clstr1,clstr2){\nvar edges = loom.graph.edges(g);\nvar clstr1s = lib_draw_graph.clustered.cluster_descendants(g,clstr1);\nvar clstr2s = lib_draw_graph.clustered.cluster_descendants(g,clstr2);\nvar clstr1s_mins = cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(((function (edges,clstr1s,clstr2s){\nreturn (function (p1__30689_SHARP_){\nreturn lib_draw_graph.preprocessor.max_ranked_nodes(info,p1__30689_SHARP_,ce_uppers);\n});})(edges,clstr1s,clstr2s))\n,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clstr1s], 0));\nvar clstr2s_maxs = cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(((function (edges,clstr1s,clstr2s,clstr1s_mins){\nreturn (function (p1__30690_SHARP_){\nreturn lib_draw_graph.preprocessor.min_ranked_nodes(info,p1__30690_SHARP_,ce_lowers);\n});})(edges,clstr1s,clstr2s,clstr1s_mins))\n,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clstr2s], 0));\nvar iter__4523__auto__ = ((function (edges,clstr1s,clstr2s,clstr1s_mins,clstr2s_maxs){\nreturn (function lib_draw_graph$preprocessor$edges_between_$_iter__30696(s__30697){\nreturn (new cljs.core.LazySeq(null,((function (edges,clstr1s,clstr2s,clstr1s_mins,clstr2s_maxs){\nreturn (function (){\nvar s__30697__$1 = s__30697;\nwhile(true){\nvar temp__5720__auto__ = cljs.core.seq(s__30697__$1);\nif(temp__5720__auto__){\nvar xs__6277__auto__ = temp__5720__auto__;\nvar x = cljs.core.first(xs__6277__auto__);\nvar iterys__4519__auto__ = ((function (s__30697__$1,x,xs__6277__auto__,temp__5720__auto__,edges,clstr1s,clstr2s,clstr1s_mins,clstr2s_maxs){\nreturn (function lib_draw_graph$preprocessor$edges_between_$_iter__30696_$_iter__30698(s__30699){\nreturn (new cljs.core.LazySeq(null,((function (s__30697__$1,x,xs__6277__auto__,temp__5720__auto__,edges,clstr1s,clstr2s,clstr1s_mins,clstr2s_maxs){\nreturn (function (){\nvar s__30699__$1 = s__30699;\nwhile(true){\nvar temp__5720__auto____$1 = cljs.core.seq(s__30699__$1);\nif(temp__5720__auto____$1){\nvar s__30699__$2 = temp__5720__auto____$1;\nif(cljs.core.chunked_seq_QMARK_(s__30699__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__30699__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__30701 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__30700 = (0);\nwhile(true){\nif((i__30700 < size__4522__auto__)){\nvar y = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__30700);\ncljs.core.chunk_append(b__30701,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y,(cljs.core.truth_(cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null)]),edges))?new cljs.core.Keyword(null,\"constraint\",\"constraint\",1725147424):null)], null));\n\nvar G__30946 = (i__30700 + (1));\ni__30700 = G__30946;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__30701),lib_draw_graph$preprocessor$edges_between_$_iter__30696_$_iter__30698(cljs.core.chunk_rest(s__30699__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__30701),null);\n}\n} else {\nvar y = cljs.core.first(s__30699__$2);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y,(cljs.core.truth_(cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null)]),edges))?new cljs.core.Keyword(null,\"constraint\",\"constraint\",1725147424):null)], null),lib_draw_graph$preprocessor$edges_between_$_iter__30696_$_iter__30698(cljs.core.rest(s__30699__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(s__30697__$1,x,xs__6277__auto__,temp__5720__auto__,edges,clstr1s,clstr2s,clstr1s_mins,clstr2s_maxs))\n,null,null));\n});})(s__30697__$1,x,xs__6277__auto__,temp__5720__auto__,edges,clstr1s,clstr2s,clstr1s_mins,clstr2s_maxs))\n;\nvar fs__4520__auto__ = cljs.core.seq(iterys__4519__auto__(clstr2s_maxs));\nif(fs__4520__auto__){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fs__4520__auto__,lib_draw_graph$preprocessor$edges_between_$_iter__30696(cljs.core.rest(s__30697__$1)));\n} else {\nvar G__30951 = cljs.core.rest(s__30697__$1);\ns__30697__$1 = G__30951;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(edges,clstr1s,clstr2s,clstr1s_mins,clstr2s_maxs))\n,null,null));\n});})(edges,clstr1s,clstr2s,clstr1s_mins,clstr2s_maxs))\n;\nreturn iter__4523__auto__(clstr1s_mins);\n});\nlib_draw_graph.preprocessor.get_rank_info = (function lib_draw_graph$preprocessor$get_rank_info(g,cluster_on){\nvar rks = lib_draw_graph.preprocessor.ranks(g);\nvar ri = lib_draw_graph.preprocessor.rank_info(rks,cluster_on);\nreturn ri;\n});\n/**\n * Adds a stack of clusters to the graph. cluster-edge-nums is a 2-vector where\n * the first is the number of nodes in the upper cluster and the second the lower.\n */\nlib_draw_graph.preprocessor.add_stack = (function lib_draw_graph$preprocessor$add_stack(g,ri,stack,cluster_edge_nums){\nvar edges = cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__30707_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(lib_draw_graph.preprocessor.edges_between,g,ri,cljs.core.first(cluster_edge_nums),cljs.core.second(cluster_edge_nums),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p1__30707_SHARP_], 0));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.partition.cljs$core$IFn$_invoke$arity$3((2),(1),stack)], 0));\nvar edges_SINGLEQUOTE_ = cljs.core.group_by(((function (edges){\nreturn (function (p1__30708_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"constraint\",\"constraint\",1725147424),cljs.core.nth.cljs$core$IFn$_invoke$arity$2(p1__30708_SHARP_,(2)));\n});})(edges))\n,edges);\nvar edges_SINGLEQUOTE__f = cljs.core.get.cljs$core$IFn$_invoke$arity$2(edges_SINGLEQUOTE_,false);\nvar edges_SINGLEQUOTE__t = cljs.core.get.cljs$core$IFn$_invoke$arity$2(edges_SINGLEQUOTE_,true);\nreturn loom.attr.add_attr_to_edges(loom.attr.add_attr_to_edges(cljs.core.apply.cljs$core$IFn$_invoke$arity$3(loom.graph.add_edges,g,edges_SINGLEQUOTE__f),new cljs.core.Keyword(null,\"style\",\"style\",-496642736),\"invis\",edges_SINGLEQUOTE__f),new cljs.core.Keyword(null,\"constraint\",\"constraint\",1725147424),true,edges_SINGLEQUOTE__f);\n});\nlib_draw_graph.preprocessor.add_invisible_cluster_edges = (function lib_draw_graph$preprocessor$add_invisible_cluster_edges(g,opts,edges){\nvar ri = lib_draw_graph.preprocessor.get_rank_info(g,lib_draw_graph.clustered.cluster_key(g));\nvar edge_nums = cljs.core.get.cljs$core$IFn$_invoke$arity$3(lib_draw_graph.preprocessor.cluster_edges,lib_draw_graph.preprocessor.parse_num(new cljs.core.Keyword(null,\"num-cluster-edges\",\"num-cluster-edges\",1635811939).cljs$core$IFn$_invoke$arity$1(opts)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(2)], null));\nvar g_SINGLEQUOTE_ = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (ri,edge_nums){\nreturn (function (acc,p__30712){\nvar vec__30713 = p__30712;\nvar c1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30713,(0),null);\nvar c2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30713,(1),null);\nreturn lib_draw_graph.preprocessor.add_stack(acc,ri,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [c1,c2], null),edge_nums);\n});})(ri,edge_nums))\n,g,edges);\nreturn g_SINGLEQUOTE_;\n});\n/**\n * Takes the ranks from an old graph and a subset of clusters and returns\n * the clusters in rank order.\n */\nlib_draw_graph.preprocessor.sort_clusters_by_rank = (function lib_draw_graph$preprocessor$sort_clusters_by_rank(ranks,clusters){\nvar r_SINGLEQUOTE_ = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.vals(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,p__30719){\nvar vec__30720 = p__30719;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30720,(0),null);\nvar vs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30720,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,k,cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,vs)));\n}),cljs.core.PersistentArrayMap.EMPTY,cljs.core.group_by(cljs.core.val,ranks))));\nvar old_ranks = r_SINGLEQUOTE_;\nvar acc = cljs.core.PersistentVector.EMPTY;\nvar clstrs = clusters;\nwhile(true){\nif(cljs.core.empty_QMARK_(old_ranks)){\nreturn acc;\n} else {\nvar items_at = cljs.core.first(old_ranks);\nvar matched = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(clstrs,items_at);\nvar unmatched = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(clstrs,items_at);\nif(cljs.core.empty_QMARK_(matched)){\nvar G__30959 = cljs.core.rest(old_ranks);\nvar G__30960 = acc;\nvar G__30961 = clstrs;\nold_ranks = G__30959;\nacc = G__30960;\nclstrs = G__30961;\ncontinue;\n} else {\nvar G__30963 = cljs.core.rest(old_ranks);\nvar G__30964 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(acc,matched);\nvar G__30965 = unmatched;\nold_ranks = G__30963;\nacc = G__30964;\nclstrs = G__30965;\ncontinue;\n}\n}\nbreak;\n}\n});\nlib_draw_graph.preprocessor.rankseq__GT_edges = (function lib_draw_graph$preprocessor$rankseq__GT_edges(rankseq){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p__30726){\nvar vec__30727 = p__30726;\nvar srcs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30727,(0),null);\nvar dests = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30727,(1),null);\nvar iter__4523__auto__ = ((function (vec__30727,srcs,dests){\nreturn (function lib_draw_graph$preprocessor$rankseq__GT_edges_$_iter__30730(s__30731){\nreturn (new cljs.core.LazySeq(null,((function (vec__30727,srcs,dests){\nreturn (function (){\nvar s__30731__$1 = s__30731;\nwhile(true){\nvar temp__5720__auto__ = cljs.core.seq(s__30731__$1);\nif(temp__5720__auto__){\nvar xs__6277__auto__ = temp__5720__auto__;\nvar x = cljs.core.first(xs__6277__auto__);\nvar iterys__4519__auto__ = ((function (s__30731__$1,x,xs__6277__auto__,temp__5720__auto__,vec__30727,srcs,dests){\nreturn (function lib_draw_graph$preprocessor$rankseq__GT_edges_$_iter__30730_$_iter__30732(s__30733){\nreturn (new cljs.core.LazySeq(null,((function (s__30731__$1,x,xs__6277__auto__,temp__5720__auto__,vec__30727,srcs,dests){\nreturn (function (){\nvar s__30733__$1 = s__30733;\nwhile(true){\nvar temp__5720__auto____$1 = cljs.core.seq(s__30733__$1);\nif(temp__5720__auto____$1){\nvar s__30733__$2 = temp__5720__auto____$1;\nif(cljs.core.chunked_seq_QMARK_(s__30733__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__30733__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__30735 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__30734 = (0);\nwhile(true){\nif((i__30734 < size__4522__auto__)){\nvar y = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__30734);\ncljs.core.chunk_append(b__30735,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null));\n\nvar G__30972 = (i__30734 + (1));\ni__30734 = G__30972;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__30735),lib_draw_graph$preprocessor$rankseq__GT_edges_$_iter__30730_$_iter__30732(cljs.core.chunk_rest(s__30733__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__30735),null);\n}\n} else {\nvar y = cljs.core.first(s__30733__$2);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null),lib_draw_graph$preprocessor$rankseq__GT_edges_$_iter__30730_$_iter__30732(cljs.core.rest(s__30733__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(s__30731__$1,x,xs__6277__auto__,temp__5720__auto__,vec__30727,srcs,dests))\n,null,null));\n});})(s__30731__$1,x,xs__6277__auto__,temp__5720__auto__,vec__30727,srcs,dests))\n;\nvar fs__4520__auto__ = cljs.core.seq(iterys__4519__auto__(dests));\nif(fs__4520__auto__){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fs__4520__auto__,lib_draw_graph$preprocessor$rankseq__GT_edges_$_iter__30730(cljs.core.rest(s__30731__$1)));\n} else {\nvar G__30973 = cljs.core.rest(s__30731__$1);\ns__30731__$1 = G__30973;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(vec__30727,srcs,dests))\n,null,null));\n});})(vec__30727,srcs,dests))\n;\nreturn iter__4523__auto__(srcs);\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.partition.cljs$core$IFn$_invoke$arity$3((2),(1),rankseq)], 0));\n});\n/**\n * Filter's the graph's edge-graph to just supplied clusters.\n */\nlib_draw_graph.preprocessor.filter_edge_graph = (function lib_draw_graph$preprocessor$filter_edge_graph(g,clusters){\nvar old_edge_graph = new cljs.core.Keyword(null,\"edge-graph\",\"edge-graph\",936862687).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275).cljs$core$IFn$_invoke$arity$1(g));\nvar old_ranks = lib_draw_graph.preprocessor.ranks(old_edge_graph);\nvar sorted_clusters = lib_draw_graph.preprocessor.sort_clusters_by_rank(old_ranks,clusters);\nvar new_edges = lib_draw_graph.preprocessor.rankseq__GT_edges(sorted_clusters);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (old_edge_graph,old_ranks,sorted_clusters,new_edges){\nreturn (function (acc,p__30760){\nvar vec__30763 = p__30760;\nvar c1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30763,(0),null);\nvar c2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30763,(1),null);\nreturn lib_draw_graph.clustered.add_cluster_edge(acc,c1,c2);\n});})(old_edge_graph,old_ranks,sorted_clusters,new_edges))\n,lib_draw_graph.clustered.delete_edge_graph(g),new_edges);\n});\nlib_draw_graph.preprocessor._STAR_part_sep_STAR_ = /[^=:<>(<=)(>=)]+|[=:<>(<=)(>=)]/;\nlib_draw_graph.preprocessor.split_parts = (function lib_draw_graph$preprocessor$split_parts(s){\nreturn clojure.string.split.cljs$core$IFn$_invoke$arity$3(s,lib_draw_graph.preprocessor._STAR_part_sep_STAR_,(-1));\n});\nlib_draw_graph.preprocessor._STAR_group_STAR_ = /\\[.*\\]/;\nlib_draw_graph.preprocessor.remove_first_and_last = (function lib_draw_graph$preprocessor$remove_first_and_last(s){\nreturn cljs.core.subs.cljs$core$IFn$_invoke$arity$3(s,(1),(cljs.core.count(s) - (1)));\n});\n/**\n * takes a term key and term value (which may represent a choice in the form\n * [a or b or c] and assesses whether the key and value (or one of the values) is a\n * submap of item.\n */\nlib_draw_graph.preprocessor.equality_match_QMARK_ = (function lib_draw_graph$preprocessor$equality_match_QMARK_(term_k,term_v,item){\nvar choice_QMARK_ = (!((cljs.core.re_matches(lib_draw_graph.preprocessor._STAR_group_STAR_,term_v) == null)));\nif((!(choice_QMARK_))){\nreturn lib_draw_graph.preprocessor.submap_QMARK_(cljs.core.PersistentArrayMap.createAsIfByAssoc([term_k,term_v]),item);\n} else {\nvar opts = clojure.string.split.cljs$core$IFn$_invoke$arity$2(lib_draw_graph.preprocessor.remove_first_and_last(term_v),/ or /);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (opts,choice_QMARK_){\nreturn (function (acc,cur){\nvar or__4131__auto__ = acc;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn lib_draw_graph.preprocessor.submap_QMARK_(cljs.core.PersistentArrayMap.createAsIfByAssoc([term_k,cur]),item);\n}\n});})(opts,choice_QMARK_))\n,false,opts);\n}\n});\n/**\n * takes a term key, an op and term value and assessing whether the value of the\n * key in the item matches the condition.\n */\nlib_draw_graph.preprocessor.inequality_match_QMARK_ = (function lib_draw_graph$preprocessor$inequality_match_QMARK_(term_k,op,term_v,item){\nvar v = lib_draw_graph.preprocessor.parse_num(term_v);\nvar v_item = lib_draw_graph.preprocessor.parse_num((term_k.cljs$core$IFn$_invoke$arity$1 ? term_k.cljs$core$IFn$_invoke$arity$1(item) : term_k.call(null,item)));\nif((!(typeof v_item === 'number'))){\nthrow lib_draw_graph.util.err(\"internal oops!\");\n} else {\n}\n\nvar G__30775 = op;\nswitch (G__30775) {\ncase \">\":\nreturn (v_item > v);\n\nbreak;\ncase \"<\":\nreturn (v_item < v);\n\nbreak;\ncase \">=\":\nreturn (v_item >= v);\n\nbreak;\ncase \"<=\":\nreturn (v_item <= v);\n\nbreak;\ndefault:\nthrow lib_draw_graph.util.err([cljs.core.str.cljs$core$IFn$_invoke$arity$1(op),\" is not a valid comparison operator.\"].join(''));\n\n}\n});\nlib_draw_graph.preprocessor.sub_matches_QMARK_ = (function lib_draw_graph$preprocessor$sub_matches_QMARK_(term,item){\nif((!(cljs.core.contains_QMARK_(item,cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.first(term)))))){\nreturn true;\n} else {\nvar op = cljs.core.second(term);\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"=\",op)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\":\",op)))){\nreturn lib_draw_graph.preprocessor.equality_match_QMARK_(cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.first(term)),cljs.core.nth.cljs$core$IFn$_invoke$arity$2(term,(2)),item);\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">\",op)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"<\",op)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\">=\",op)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"<=\",op)))){\nreturn lib_draw_graph.preprocessor.inequality_match_QMARK_(cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.first(term)),cljs.core.second(term),cljs.core.nth.cljs$core$IFn$_invoke$arity$2(term,(2)),item);\n} else {\nthrow lib_draw_graph.util.err([cljs.core.str.cljs$core$IFn$_invoke$arity$1(op),\" is not a valid comparison operator.\"].join(''));\n\n}\n}\n}\n});\n/**\n * Returns a filtered graph where nodes where is not a submap are filtered out.\n * @param {...*} var_args\n */\nlib_draw_graph.preprocessor.filter_graph = (function lib_draw_graph$preprocessor$filter_graph(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___31018 = arguments.length;\nvar i__4731__auto___31020 = (0);\nwhile(true){\nif((i__4731__auto___31020 < len__4730__auto___31018)){\nargs__4736__auto__.push((arguments[i__4731__auto___31020]));\n\nvar G__31021 = (i__4731__auto___31020 + (1));\ni__4731__auto___31020 = G__31021;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn lib_draw_graph.preprocessor.filter_graph.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\nlib_draw_graph.preprocessor.filter_graph.cljs$core$IFn$_invoke$arity$variadic = (function (g,subs,p__30791){\nvar map__30792 = p__30791;\nvar map__30792__$1 = (((((!((map__30792 == null))))?(((((map__30792.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__30792.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__30792):map__30792);\nvar filter_edges_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__30792__$1,new cljs.core.Keyword(null,\"filter-edges?\",\"filter-edges?\",1330813465),true);\nvar subs__$1 = clojure.string.split.cljs$core$IFn$_invoke$arity$2(subs,/( or )(?![^\\[]*\\])/);\nvar subs__$2 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (subs__$1,map__30792,map__30792__$1,filter_edges_QMARK_){\nreturn (function (p1__30778_SHARP_){\nreturn cljs.core.re_seq(lib_draw_graph.preprocessor._STAR_part_sep_STAR_,p1__30778_SHARP_);\n});})(subs__$1,map__30792,map__30792__$1,filter_edges_QMARK_))\n,subs__$1);\nvar filtered_nodes = cljs.core.filter.cljs$core$IFn$_invoke$arity$2(((function (subs__$1,subs__$2,map__30792,map__30792__$1,filter_edges_QMARK_){\nreturn (function (p1__30779_SHARP_){\nreturn cljs.core.not(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (subs__$1,subs__$2,map__30792,map__30792__$1,filter_edges_QMARK_){\nreturn (function (acc,term){\nvar or__4131__auto__ = acc;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn lib_draw_graph.preprocessor.sub_matches_QMARK_(term,p1__30779_SHARP_);\n}\n});})(subs__$1,subs__$2,map__30792,map__30792__$1,filter_edges_QMARK_))\n,false,subs__$2));\n});})(subs__$1,subs__$2,map__30792,map__30792__$1,filter_edges_QMARK_))\n,loom.graph.nodes(g));\nvar g_SINGLEQUOTE_ = ((lib_draw_graph.clustered.clustered_QMARK_(g))?lib_draw_graph.clustered.remove_nodes(g,filtered_nodes):cljs.core.apply.cljs$core$IFn$_invoke$arity$3(loom.graph.remove_nodes,g,filtered_nodes));\nif(cljs.core.truth_(filter_edges_QMARK_)){\nvar filtered_edges = cljs.core.filter.cljs$core$IFn$_invoke$arity$2(((function (subs__$1,subs__$2,filtered_nodes,g_SINGLEQUOTE_,map__30792,map__30792__$1,filter_edges_QMARK_){\nreturn (function (p__30799){\nvar vec__30800 = p__30799;\nvar src = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30800,(0),null);\nvar dst = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30800,(1),null);\nreturn cljs.core.not(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__30800,src,dst,subs__$1,subs__$2,filtered_nodes,g_SINGLEQUOTE_,map__30792,map__30792__$1,filter_edges_QMARK_){\nreturn (function (acc,term){\nvar or__4131__auto__ = acc;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(loom.attr.attr.cljs$core$IFn$_invoke$arity$4(g_SINGLEQUOTE_,src,dst,new cljs.core.Keyword(null,\"style\",\"style\",-496642736)),\"invis\")){\nreturn true;\n} else {\nreturn lib_draw_graph.preprocessor.sub_matches_QMARK_(term,loom.attr.attr.cljs$core$IFn$_invoke$arity$4(g_SINGLEQUOTE_,src,dst,new cljs.core.Keyword(null,\"meta\",\"meta\",1499536964)));\n}\n}\n});})(vec__30800,src,dst,subs__$1,subs__$2,filtered_nodes,g_SINGLEQUOTE_,map__30792,map__30792__$1,filter_edges_QMARK_))\n,false,subs__$2));\n});})(subs__$1,subs__$2,filtered_nodes,g_SINGLEQUOTE_,map__30792,map__30792__$1,filter_edges_QMARK_))\n,loom.graph.edges(g_SINGLEQUOTE_));\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(loom.graph.remove_edges,g_SINGLEQUOTE_,filtered_edges);\n} else {\nreturn g_SINGLEQUOTE_;\n}\n});\n\nlib_draw_graph.preprocessor.filter_graph.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\nlib_draw_graph.preprocessor.filter_graph.cljs$lang$applyTo = (function (seq30786){\nvar G__30787 = cljs.core.first(seq30786);\nvar seq30786__$1 = cljs.core.next(seq30786);\nvar G__30788 = cljs.core.first(seq30786__$1);\nvar seq30786__$2 = cljs.core.next(seq30786__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__30787,G__30788,seq30786__$2);\n});\n\n/**\n * Returns a graph with only nodes on paths between start filtering term and the end.\n */\nlib_draw_graph.preprocessor.paths = (function lib_draw_graph$preprocessor$paths(g,start_subs,end_subs){\nvar start_nodes = loom.graph.nodes(lib_draw_graph.preprocessor.filter_graph.cljs$core$IFn$_invoke$arity$variadic(g,start_subs,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"filter-edges?\",\"filter-edges?\",1330813465),false], 0)));\nvar end_nodes = loom.graph.nodes(lib_draw_graph.preprocessor.filter_graph.cljs$core$IFn$_invoke$arity$variadic(g,end_subs,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"filter-edges?\",\"filter-edges?\",1330813465),false], 0)));\nvar combins = (function (){var iter__4523__auto__ = ((function (start_nodes,end_nodes){\nreturn (function lib_draw_graph$preprocessor$paths_$_iter__30824(s__30825){\nreturn (new cljs.core.LazySeq(null,((function (start_nodes,end_nodes){\nreturn (function (){\nvar s__30825__$1 = s__30825;\nwhile(true){\nvar temp__5720__auto__ = cljs.core.seq(s__30825__$1);\nif(temp__5720__auto__){\nvar xs__6277__auto__ = temp__5720__auto__;\nvar s = cljs.core.first(xs__6277__auto__);\nvar iterys__4519__auto__ = ((function (s__30825__$1,s,xs__6277__auto__,temp__5720__auto__,start_nodes,end_nodes){\nreturn (function lib_draw_graph$preprocessor$paths_$_iter__30824_$_iter__30826(s__30827){\nreturn (new cljs.core.LazySeq(null,((function (s__30825__$1,s,xs__6277__auto__,temp__5720__auto__,start_nodes,end_nodes){\nreturn (function (){\nvar s__30827__$1 = s__30827;\nwhile(true){\nvar temp__5720__auto____$1 = cljs.core.seq(s__30827__$1);\nif(temp__5720__auto____$1){\nvar s__30827__$2 = temp__5720__auto____$1;\nif(cljs.core.chunked_seq_QMARK_(s__30827__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__30827__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__30829 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__30828 = (0);\nwhile(true){\nif((i__30828 < size__4522__auto__)){\nvar e = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__30828);\ncljs.core.chunk_append(b__30829,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s,e], null));\n\nvar G__31043 = (i__30828 + (1));\ni__30828 = G__31043;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__30829),lib_draw_graph$preprocessor$paths_$_iter__30824_$_iter__30826(cljs.core.chunk_rest(s__30827__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__30829),null);\n}\n} else {\nvar e = cljs.core.first(s__30827__$2);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s,e], null),lib_draw_graph$preprocessor$paths_$_iter__30824_$_iter__30826(cljs.core.rest(s__30827__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(s__30825__$1,s,xs__6277__auto__,temp__5720__auto__,start_nodes,end_nodes))\n,null,null));\n});})(s__30825__$1,s,xs__6277__auto__,temp__5720__auto__,start_nodes,end_nodes))\n;\nvar fs__4520__auto__ = cljs.core.seq(iterys__4519__auto__(end_nodes));\nif(fs__4520__auto__){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fs__4520__auto__,lib_draw_graph$preprocessor$paths_$_iter__30824(cljs.core.rest(s__30825__$1)));\n} else {\nvar G__31050 = cljs.core.rest(s__30825__$1);\ns__30825__$1 = G__31050;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(start_nodes,end_nodes))\n,null,null));\n});})(start_nodes,end_nodes))\n;\nreturn iter__4523__auto__(start_nodes);\n})();\nvar paths = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (start_nodes,end_nodes,combins){\nreturn (function (p1__30818_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(loom.alg_generic.bf_path,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(lib_draw_graph.graph.successors,g),p1__30818_SHARP_);\n});})(start_nodes,end_nodes,combins))\n,combins);\nvar nds = cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.flatten(paths)));\nvar nds_compl = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(loom.graph.nodes(g),nds);\nif(lib_draw_graph.clustered.clustered_QMARK_(g)){\nreturn lib_draw_graph.clustered.remove_nodes(g,nds_compl);\n} else {\nreturn loom.graph.remove_nodes.cljs$core$IFn$_invoke$arity$variadic(g,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([nds_compl], 0));\n}\n});\nlib_draw_graph.preprocessor.same_ranks = (function lib_draw_graph$preprocessor$same_ranks(info){\n\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__30846){\nvar vec__30847 = p__30846;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30847,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30847,(1),null);\nvar vec__30853 = cljs.core.vals(v);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30853,(0),null);\nvar inner = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30853,(1),null);\nif((cljs.core.count(inner) > (1))){\nreturn cljs.core.PersistentArrayMap.createAsIfByAssoc([k,cljs.core.vals(v)]);\n} else {\nreturn null;\n}\n}),info));\n});\nlib_draw_graph.preprocessor.fix_ranks = (function lib_draw_graph$preprocessor$fix_ranks(g,cluster_on){\nvar same = lib_draw_graph.preprocessor.same_ranks(lib_draw_graph.preprocessor.get_rank_info(g,cluster_on));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (same){\nreturn (function (acc,p__30863){\nvar vec__30864 = p__30863;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30864,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30864,(1),null);\nreturn lib_draw_graph.clustered.add_attr_to_cluster(acc,k,new cljs.core.Keyword(null,\"fix-ranks\",\"fix-ranks\",452150575),v);\n});})(same))\n,g,same);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","lib_draw_graph/preprocessor.cljc","~:line",3,"~:column",3,"~:end-line",3,"~:end-column",30,"~:doc","Processing functions for Loom graphs.","~:author","Jude Payne"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$lib-draw-graph.preprocessor","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$clstr","~$lib-draw-graph.clustered","^T","^T","~$lib-draw-graph.util","^U","~$loom.gen","~$loom.alg-generic","~$cljs.core","^X","^W","^W","~$loom.alg","^Y","~$loom.graph","^Z","~$goog","^[","~$lib-draw-graph.graph","^10","^R","^R","~$util","^U","~$loom.attr","^12","~$str","~$clojure.string","^14","^14","~$graph","^10"],"~:seen",["^J",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^X","^X"],"~:form",["~#list",["~$ns","^L",["^1;",["^17",["^Z","~:as","^Z"],["^W","^1=","^V"],["^Y","^1=","^Y"],["^12","^1=","^12"],["^T","^1=","^S"],["^10","^1=","^15"],["^R","^1=","^Q"],["^14","^1=","^13"],["^U","^1=","^11"]]]]],"~:flags",["^ ","^17",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^[","^X","^Z","^W","^Y","^12","^T","^10","^R","^14","^U"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","lib_draw_graph/preprocessor.cljc"],"~:compiled-at",1560578451128,"~:resource-name","lib_draw_graph/preprocessor.cljc","~:warnings",[],"~:source","(ns ^{:doc \"Processing functions for Loom graphs.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.preprocessor\n  (:require [loom.graph                     :as loom.graph]\n            [loom.alg-generic               :as loom.gen]\n            [loom.alg                       :as loom.alg]\n            [loom.attr                      :as loom.attr]\n            [lib-draw-graph.clustered       :as clstr]\n            [lib-draw-graph.graph           :as graph]\n            [clojure.set                    :as set]\n            [clojure.string                 :as str]\n            [lib-draw-graph.util            :as util]))\n\n\n;; -----------\n;; Functions to manipulate the graph\n\n(defn submap?\n  \"Checks whether m contains all entries in sub.\"\n  [sub m]\n  (= sub (select-keys m (keys sub))))\n\n\n(defn parse-num [s]\n  (try\n    (let [n #?(:clj (clojure.edn/read-string s)\n               :cljs (cljs.reader/read-string s))]\n      (if (number? n) n (throw (util/err \"Both terms in an inequality filter must be numbers.\"))))\n    #? (:clj (catch Exception e (throw (util/err \"Both terms in an inequality filter must be numbers.\")))\n        :cljs (catch js/Error e (throw (util/err \"Both terms in an inequality filter must be numbers.\"))))))\n\n\n(defn find-node\n  \"Checks if part-node is part of one of the nodes in the graph. Both part-node\n  and the nodes in the graph must be in map format. e.g. part-node {:id 12} and\n  a node in the graph {:id 12 :name ....}. Returns the first node matched or nil.\"\n  [g part-node]\n  (reduce\n   (fn [acc cur]\n     (if (submap? part-node cur)\n       (reduced cur)\n       nil))\n   (loom.graph/nodes g)))\n\n\n(defn subgraph\n  \"Returns a sub(di)graph of g going depth first from the first occurrence of\n   the (part) node n.\"\n  [g n\n   & {:keys [part-node?] :or {part-node? false}}]\n  (let [node (if part-node? (find-node g n) n)]\n    (apply loom.graph/digraph\n           (loom.gen/pre-edge-traverse #(loom.graph/successors* g %) node))))\n\n\n(defn leaves\n  \"Returns the leaves in the graph.\"\n  [g]\n  (filter #(graph/leaf? g %) (loom.graph/nodes g)))\n\n\n(defn parents-of\n  \"Returns the nodes that are parents of nodes.\"\n  [g nodes]\n  (letfn [(visible-parents [g n]\n            (let [prnts (loom.graph/predecessors* g n)]\n              (filter #(not (graph/edge-invisible? g % n)) prnts)))]\n    (dedupe (mapcat #(visible-parents g %) nodes))))\n\n\n(defn remove-levels\n  \"Removes the n lowest levels from the graph.\"\n  [g n]\n  (let [clustered? (clstr/clustered? g)]\n    (loop [grph g\n           nds (leaves g)\n           lvls n]\n      (if (zero? lvls)\n        grph\n        (let [next-gen (parents-of grph nds)\n              grph* (if clustered?\n                      (:graph (clstr/remove-nodes grph nds))\n                      (loom.graph/remove-nodes* grph nds))]\n          (recur grph* next-gen (dec lvls)))))))\n\n\n\n;; Thanks: http://hueypetersen.com/posts/2013/06/25/graph-traversal-with-clojure/\n(defn eager-stateful-dfs\n  \"Eager depth first search that collects state as it goes.\n   successors is a function of 1 arg that returns successors of node passed.\n   start is the starting node.\n   init is a map of initial state.\n   f is a function of 3 args: current state (map), current nodes and one of its children.\"\n  [successors start f init]\n  (loop [vertices [] explored #{start} frontier [start] state init]\n    (if (empty? frontier)\n      state\n      (let [v (peek frontier)\n            neighbours (successors v)]\n        (recur\n          (conj vertices v)\n          (into explored neighbours)\n          (into (pop frontier) (remove explored neighbours))\n          (reduce (fn [acc cur] (assoc acc cur (f acc v cur))) state neighbours))))))\n\n\n(defn update-rank\n  \"Returns rank for the next (node) given state map.\"\n  [state node next]\n  (let [mx (fn [x y] (if (nil? x) y (max x y)))]\n    (mx (get state next) (inc (get state node)))))\n\n\n(defn predecessors-not-self\n  \"Returns predecessors not including self\"\n  [g n]\n  (let [predec (loom.graph/predecessors* g n)]\n    (filter #(not (= n %)) predec)))\n\n\n(defn successors-not-self\n  \"Returns successors not including self\"\n  [g n]\n  (let [succs (loom.graph/successors* g n)]\n    (filter #(not (= n %)) succs)))\n\n\n(defn ranks\n  \"Returns ranks for each node in g. 0-indexed.\"\n  [g]\n  (let [root? #(empty? (predecessors-not-self g %))\n        roots (filter root? (loom.graph/nodes g))\n        init (zipmap roots (repeat 0))]\n    ;; we need to use successors-not-self or the dfs will incorrectly increase the rank of\n    ;; nodes that have edges to themselves, causing them to have a rank one higher\n    ;; than other nodes and leading to an incorrect set of cluster edges.\n    (reduce\n     (fn [acc cur]\n       (eager-stateful-dfs (partial successors-not-self g)\n                           cur\n                           update-rank\n                           acc))\n     init\n     roots)))\n\n\n(defn fmap [f m] (into (empty m) (for [[k v] m] [k (f v)])))\n\n\n(defn fmap*\n  \"Applies f to every value in nested map.\"\n  [f m]\n  (fmap #(if (map? %)\n           (fmap* f %)\n           (f %))\n        m))\n\n\n(defn rank-info\n  \"Organizes ranks by k. k is usually a cluster.\"\n  [ranks k]\n  (let [r  (->> ranks\n                (group-by (fn [n] (get (first n) k)))\n                (into {} (map (fn [[k v]] [k (group-by second v)]))))]\n    (fmap* #(map first %) r)))\n\n\n(defn max-ranked-nodes\n  \"Returns seq of nodes at the max rank for the k. k is usually a cluster.\"\n  [info k n]\n  (let [m (into (sorted-map-by >) (get info k))\n        m' (flatten (vals m))]\n    (take n m')))\n\n\n(defn min-ranked-nodes\n  \"Returns seq of nodes at the min rank for the k. k is usually a cluster.\"\n  [info k n]\n  (let [m (into (sorted-map) (get info k))\n        m' (flatten (vals m))]\n    (take n m')))\n\n\n(def cluster-edges\n  {16 [4 4]\n   12 [4 3]\n   9 [3 3]\n   6 [3 2]\n   4 [2 2]\n   2 [2 1]\n   1 [1 1]})\n\n\n(defn edges-between\n  \"Returns a set of edges between all of the min ranked nodes of clstr1\n   and one of the max ranked nodes in clstr2. edges already in the graph\n   are returned marked with :constraint\"\n  [g info ce-uppers ce-lowers clstr1 clstr2]\n  (let [edges (loom.graph/edges g)\n        clstr1s (clstr/cluster-descendants g clstr1)\n        clstr2s (clstr/cluster-descendants g clstr2)\n        clstr1s-mins (mapcat #(max-ranked-nodes info % ce-uppers) clstr1s)\n        clstr2s-maxs (mapcat #(min-ranked-nodes info % ce-lowers) clstr2s)]\n    (for [x clstr1s-mins\n          y clstr2s-maxs]\n      [x y (if (some #{[x y]} edges) :constraint)])))\n\n\n(defn get-rank-info\n  [g cluster-on]\n  (let [rks (ranks g)\n        ri (rank-info rks cluster-on)]\n    ri))\n\n\n(defn add-stack\n  \"Adds a stack of clusters to the graph. cluster-edge-nums is a 2-vector where\n   the first is the number of nodes in the upper cluster and the second the lower.\"\n  [g ri stack cluster-edge-nums]\n  (let [edges (mapcat\n               #(apply edges-between g ri\n                       (first cluster-edge-nums) (second cluster-edge-nums) %)\n               (partition 2 1 stack))\n        ;;separate edges marked with :constraint from those that are not.\n        edges' (group-by #(= :constraint (nth % 2)) edges)\n        edges'-f (get edges' false)\n        edges'-t (get edges' true)]\n    (-> (apply loom.graph/add-edges g edges'-f) ;; don't add :constraint edges\n        (loom.attr/add-attr-to-edges :style \"invis\" edges'-f)\n        ;; for edges marked with :constraint, set the :constraint in the attrs\n        (loom.attr/add-attr-to-edges :constraint true edges'-f))))\n\n\n(defn add-invisible-cluster-edges\n  [g opts edges]\n  (let [ri (get-rank-info g (clstr/cluster-key g))\n        ;; look up vector of cluster edges nums or use [2 2] as a default\n        edge-nums (get cluster-edges (parse-num (-> opts :num-cluster-edges)) [2 2])\n        g' (reduce (fn [acc [c1 c2]]\n                     (add-stack acc ri [c1 c2] edge-nums))\n                   g\n                   edges)]\n    g'))\n\n\n(defn sort-clusters-by-rank\n  \"Takes the ranks from an old graph and a subset of clusters and returns\n   the clusters in rank order.\"\n  [ranks clusters]\n  (let [r' (into [] (vals (reduce (fn [acc [k vs]]\n                                    (assoc acc k (into #{} (map first vs))))\n                                  {}\n                                  (group-by val ranks))))]\n   (loop [old-ranks r'\n           acc []\n           clstrs clusters]\n      (if (empty? old-ranks)\n        acc\n        (let [items-at (first old-ranks)\n              matched (set/intersection clstrs items-at)\n              unmatched (set/difference clstrs items-at)]\n          (if (empty? matched)\n            (recur (rest old-ranks) acc clstrs)\n            (recur (rest old-ranks) (conj acc matched) unmatched)))))))\n\n\n(defn rankseq->edges\n  [rankseq]\n  (mapcat\n   (fn [[srcs dests]] (for [x srcs y dests] [x y]))\n   (partition 2 1 rankseq)))\n\n\n(defn filter-edge-graph\n  \"Filter's the graph's edge-graph to just supplied clusters.\"\n  [g clusters]\n  (let [old-edge-graph (-> g :clusters :edge-graph)\n        old-ranks (ranks old-edge-graph)\n        sorted-clusters (sort-clusters-by-rank old-ranks clusters)\n        new-edges (rankseq->edges sorted-clusters)]\n    (reduce (fn [acc [c1 c2]]\n                           (-> acc\n                               (clstr/add-cluster-edge c1 c2)))\n            (clstr/delete-edge-graph g)\n            new-edges)))\n\n\n(def ^:dynamic *part-sep* #\"[^=:<>(<=)(>=)]+|[=:<>(<=)(>=)]\")   \n(defn split-parts [s] (str/split s *part-sep* -1)) ;; -1 to catch trailing empties\n\n(def ^:dynamic *group* #\"\\[.*\\]\")\n\n\n(defn remove-first-and-last [s]\n  (subs s 1 (dec (count s))))\n\n\n(defn equality-match?\n  \"takes a term key and term value (which may represent a choice in the form\n   [a or b or c] and assesses whether the key and value (or one of the values) is a\n   submap of item.\"\n  [term-k term-v item]\n  (let [choice? (some? (re-matches *group* term-v))]\n    (if (not choice?)\n      (submap? {term-k term-v} item)\n      (let [opts (str/split (remove-first-and-last term-v) #\" or \")]\n        (reduce \n         (fn [acc cur] (or acc (submap? {term-k cur} item)))\n         false\n         opts)))))\n\n\n(defn inequality-match?\n  \"takes a term key, an op and term value and assessing whether the value of the\n   key in the item matches the condition.\"\n  [term-k op term-v item]\n  (let [v (parse-num term-v)\n        v-item (parse-num (term-k item))]\n    (when (not (number? v-item)) (throw (util/err \"internal oops!\")))\n    (case op\n      \">\" (> v-item v)\n      \"<\" (< v-item v)\n      \">=\" (>= v-item v)\n      \"<=\" (<= v-item v)\n      (throw (util/err (str op \" is not a valid comparison operator.\"))))))\n\n\n(defn sub-matches?\n  [term item]\n  (if (not (contains? item (keyword (first term))))\n    true\n    (let [op (second term)]\n      (cond\n        (or (= \"=\" op) (= \":\" op)) (equality-match? (keyword (first term)) (nth term 2) item)\n        (or (= \">\" op)\n            (= \"<\" op)\n            (= \">=\" op)\n            (= \"<=\" op)) (inequality-match? (keyword (first term)) (second term) (nth term 2) item)\n        :else (throw (util/err (str op \" is not a valid comparison operator.\")))))))\n\n\n(defn filter-graph\n  \"Returns a filtered graph where nodes where is not a submap are filtered out.\"\n  [g subs & {:keys [filter-edges?] :or {filter-edges? true}}]\n  (let [subs (str/split subs #\"( or )(?![^\\[]*\\])\") ;; don't match or inside []\n        subs (map #(re-seq *part-sep* %) subs)\n        filtered-nodes (filter #(not (reduce\n                                      (fn [acc term] (or acc (sub-matches? term %)))\n                                      false subs))\n                               (loom.graph/nodes g))\n        g' (if (clstr/clustered? g)\n             (clstr/remove-nodes g filtered-nodes)\n             (apply loom.graph/remove-nodes g filtered-nodes))]\n     (if filter-edges?\n      (let [filtered-edges (filter\n                            (fn [[src dst]]\n                              (not (reduce\n                                    (fn [acc term]\n                                      (or acc\n                                          (if (= (loom.attr/attr g' src dst :style) \"invis\")\n                                            true ;; invisible edges are scaffolding. keep them.\n                                            (sub-matches?\n                                             term\n                                             (loom.attr/attr g' src dst :meta)))))\n                                    false\n                                    subs)))\n                            (loom.graph/edges g'))]\n        (apply loom.graph/remove-edges g' filtered-edges))\n      g')))\n\n\n(defn paths\n  \"Returns a graph with only nodes on paths between start filtering term and the end.\"\n  [g start-subs end-subs]\n  (let [start-nodes (loom.graph/nodes (filter-graph g start-subs :filter-edges? false))\n        end-nodes (loom.graph/nodes (filter-graph g end-subs :filter-edges? false))\n        combins (for [s start-nodes\n                      e end-nodes]\n                  [s e])\n        paths (map\n               #(apply loom.gen/bf-path (partial graph/successors g) %)\n               combins)\n        nds (remove nil? (into #{} (flatten paths)))\n        nds-compl (set/difference (loom.graph/nodes g) nds)]\n    (if (clstr/clustered? g)\n      (clstr/remove-nodes g nds-compl)\n      (loom.graph/remove-nodes g nds-compl))))\n\n\n(defn same-ranks\n  [info]\n  \"Filters down to just the ranks that need to be fixed.\"\n  (into {}\n        (map\n         (fn [[k v]]\n           (let [[_ inner] (vals v)]\n             (when (> (count inner) 1)\n               {k (vals v)})))\n         info)))\n\n\n(defn fix-ranks\n  [g cluster-on]\n  (let [same (same-ranks (get-rank-info g cluster-on))]\n    (reduce\n     (fn [acc [k v]]\n       (clstr/add-attr-to-cluster acc k :fix-ranks v ))\n     g\n     same)))\n\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["lib-draw-graph.preprocessor/submap?","sub","m","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","cljs.core/keys","lib-draw-graph.preprocessor/parse-num","s","e30563","n","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","lib-draw-graph.util/err","js/Error","e","lib-draw-graph.preprocessor/find-node","g","part-node","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","acc","cur","cljs.core/reduced","loom.graph/nodes","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lib-draw-graph.preprocessor/subgraph","p__30585","map__30586","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq30574","G__30575","cljs.core/first","cljs.core/next","G__30576","self__4717__auto__","part-node?","node","loom.graph/digraph","p1__30573#","loom.alg-generic/pre-edge-traverse","loom.graph/successors*","lib-draw-graph.preprocessor/leaves","p1__30598#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.graph/leaf?","lib-draw-graph.preprocessor/parents-of","nodes","prnts","loom.graph/predecessors*","p1__30601#","cljs.core/not","lib-draw-graph.graph/edge-invisible?","cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1","p1__30602#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","visible-parents","lib-draw-graph.preprocessor/remove-levels","clustered?","lib-draw-graph.clustered/clustered?","grph","nds","lvls","next-gen","grph*","lib-draw-graph.clustered/remove-nodes","loom.graph/remove-nodes*","lib-draw-graph.preprocessor/eager-stateful-dfs","successors","start","f","init","vertices","explored","frontier","state","cljs.core/empty?","v","cljs.core/peek","neighbours","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/pop","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","lib-draw-graph.preprocessor/update-rank","next","mx","x","y","x__4219__auto__","y__4220__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/predecessors-not-self","predec","p1__30633#","lib-draw-graph.preprocessor/successors-not-self","succs","p1__30634#","lib-draw-graph.preprocessor/ranks","p1__30640#","root?","roots","cljs.core/zipmap","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/fmap","cljs.core/empty","iter__4523__auto__","s__30650","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__30652","cljs.core/chunk-buffer","i__30651","vec__30657","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30649","cljs.core/chunk-rest","vec__30662","cljs.core/cons","cljs.core/rest","k","lib-draw-graph.preprocessor/fmap*","p1__30669#","cljs.core/map?","lib-draw-graph.preprocessor/rank-info","ranks","r","cljs.core/group-by","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__30678","vec__30679","cljs.core/second","p1__30672#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/max-ranked-nodes","info","cljs.core/sorted-map-by","cljs.core/>","m'","cljs.core/flatten","cljs.core/vals","cljs.core.take.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/min-ranked-nodes","cljs.core/sorted-map","lib-draw-graph.preprocessor/cluster-edges","lib-draw-graph.preprocessor/edges-between","ce-uppers","ce-lowers","clstr1","clstr2","edges","loom.graph/edges","clstr1s","lib-draw-graph.clustered/cluster-descendants","clstr2s","clstr1s-mins","p1__30689#","clstr2s-maxs","p1__30690#","s__30697","xs__6277__auto__","iterys__4519__auto__","s__30699","b__30701","i__30700","iter__30698","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__30696","cljs.core/some","lib-draw-graph.preprocessor/get-rank-info","cluster-on","rks","ri","lib-draw-graph.preprocessor/add-stack","stack","cluster-edge-nums","p1__30707#","cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic","cljs.core.partition.cljs$core$IFn$_invoke$arity$3","edges'","p1__30708#","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","edges'-f","edges'-t","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","loom.graph/add-edges","loom.attr/add-attr-to-edges","lib-draw-graph.preprocessor/add-invisible-cluster-edges","opts","lib-draw-graph.clustered/cluster-key","edge-nums","g'","p__30712","vec__30713","c1","c2","lib-draw-graph.preprocessor/sort-clusters-by-rank","clusters","r'","p__30719","vec__30720","vs","cljs.core/val","old-ranks","clstrs","items-at","matched","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","unmatched","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/rankseq->edges","rankseq","p__30726","vec__30727","srcs","dests","s__30731","s__30733","b__30735","i__30734","iter__30732","iter__30730","lib-draw-graph.preprocessor/filter-edge-graph","old-edge-graph","sorted-clusters","new-edges","p__30760","vec__30763","lib-draw-graph.clustered/add-cluster-edge","lib-draw-graph.clustered/delete-edge-graph","lib-draw-graph.preprocessor/*part-sep*","lib-draw-graph.preprocessor/split-parts","clojure.string.split.cljs$core$IFn$_invoke$arity$3","lib-draw-graph.preprocessor/*group*","lib-draw-graph.preprocessor/remove-first-and-last","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","lib-draw-graph.preprocessor/equality-match?","term-k","term-v","item","choice?","cljs.core/re-matches","clojure.string.split.cljs$core$IFn$_invoke$arity$2","or__4131__auto__","lib-draw-graph.preprocessor/inequality-match?","op","v-item","G__30775","lib-draw-graph.preprocessor/sub-matches?","term","cljs.core/contains?","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","lib-draw-graph.preprocessor/filter-graph","p__30791","map__30792","seq30786","G__30787","G__30788","subs","filter-edges?","p1__30778#","cljs.core/re-seq","filtered-nodes","p1__30779#","loom.graph/remove-nodes","filtered-edges","p__30799","vec__30800","src","dst","loom.attr.attr.cljs$core$IFn$_invoke$arity$4","loom.graph/remove-edges","lib-draw-graph.preprocessor/paths","start-subs","end-subs","start-nodes","lib_draw_graph.preprocessor.filter_graph.cljs$core$IFn$_invoke$arity$variadic","end-nodes","combins","s__30825","s__30827","b__30829","i__30828","iter__30826","iter__30824","paths","p1__30818#","loom.alg-generic/bf-path","lib-draw-graph.graph/successors","cljs.core/nil?","nds-compl","loom.graph.remove_nodes.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.preprocessor/same-ranks","p__30846","vec__30847","vec__30853","_","inner","lib-draw-graph.preprocessor/fix-ranks","same","p__30863","vec__30864","lib-draw-graph.clustered/add-attr-to-cluster","cljs.core/chunk-first"]]],"~:cache-keys",["~#cmap",[["~:macro","~$loom.cljs"],[1545217035000],["^1B","rhizome/dot.cljc"],[1558372261000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^[","^X","^14","^R"]]],["^1O","^X"],[1559826623000],["^1B","cljs/tools/reader/impl/utils.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","^14","~$goog.string"]]],["^1B","goog/math/math.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","~$goog.array","~$goog.asserts"]]],["^1B","goog/string/stringformat.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^1U"]]],["^1B","goog/array/array.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^1W"]]],["^1O","~$cljs.tools.reader.reader-types"],[1560546087000],["^1B","goog/debug/error.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^["]]],["^1B","loom/attr.cljc"],[1545217035000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","^Z"]]],["^1B","cljs/tools/reader/edn.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","~$cljs.tools.reader.impl.errors","^1X","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^1U","~$goog.string.StringBuffer"]]],["^1B","goog/dom/nodetype.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^["]]],["^1B","cljs/tools/reader/impl/inspect.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X"]]],["^1B","loom/graph.cljc"],[1545217035000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","^W"]]],["^1B","tailrecursion/priority_map.cljs"],[1545217035000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","~$cljs.reader"]]],["^1B","cljs/tools/reader.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","^1X","^1Z","^1[","^1Y","^1V","^1U","^21"]]],["^1B","goog/object/object.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^["]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^1B","goog/math/long.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^1W","~$goog.reflect"]]],["^1B","lib_draw_graph/graph.cljc"],[1560404930000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","~$rhizome.dot","^Z","^12","^14","^T","^U","^1U","~$goog.string.format"]]],["^1B","goog/string/internal.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^["]]],["^1B","goog/functions/functions.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^["]]],["^1B","goog/structs/map.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1B","cljs/reader.cljs"],[1559826623000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","~$goog.object","^20","~$cljs.tools.reader.edn","^21"]]],["^1B","goog/asserts/asserts.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1B","lib_draw_graph/preprocessor.cljc"],[1560404930000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","^Z","^W","^Y","^12","^T","^10","^R","^14","^U"]]],["^1B","goog/uri/uri.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^1V","^1W","^1U","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1B","loom/flow.cljc"],[1545217035000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","^W"]]],["^1B","goog/base.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",[]]],["^1B","goog/structs/structs.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^1V","^29"]]],["^1B","cljs/tools/reader/impl/errors.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","^1X","^14","~$cljs.tools.reader.impl.inspect"]]],["^1B","clojure/string.cljs"],[1559826623000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","^1U","^21"]]],["^1B","loom/alg.cljc"],[1545217035000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","^W","~$loom.flow","^Z","~$tailrecursion.priority-map","^R"]]],["^1B","goog/string/string.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","~$goog.string.internal"]]],["^1B","lib_draw_graph/clustered.cljc"],[1560404930000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","^Z","^12","^W","^R"]]],["^1B","goog/reflect/reflect.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^["]]],["^1B","goog/string/stringbuffer.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^["]]],["^1B","cljs/tools/reader/reader_types.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","^1Z","^1U","^21"]]],["^1B","goog/iter/iter.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^1V","^1W","~$goog.functions","~$goog.math"]]],["^1B","loom/alg_generic.cljc"],[1545217035000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X"]]],["^1B","cljs/tools/reader/impl/commons.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X","^1Y","^1X","^1Z"]]],["^1B","cljs/core.cljs"],[1559826623000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["~$goog.math.Long","~$goog.math.Integer","^1U","^29","^1V","~$goog.Uri","^21"]]],["^1B","goog/math/integer.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^["]]],["^1B","clojure/set.cljs"],[1559826623000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X"]]],["^1B","goog/uri/utils.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^1V","^1W","^1U"]]],["^1B","lib_draw_graph/util.cljc"],[1560404930000,"^1Q",["^ ","^1R",null,"^1S",["^J",[]],"^1T",["^[","^X"]]],["^1O","^22"],[1559826623000]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",3,"^8",3,"^9",3,"^:",30,"^;","Processing functions for Loom graphs.","^<","Jude Payne"],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^R","^S","^T","^T","^T","^U","^U","^V","^W","^X","^X","^W","^W","^Y","^Y","^Z","^Z","^[","^[","^10","^10","^R","^R","^11","^U","^12","^12","^13","^14","^14","^14","^15","^10"],"^16",["^J",["^17"]],"~:shadow/js-access-global",["^J",["Error"]],"^18",null,"~:defs",["^ ","~$fmap*",["^ ","~:protocol-inline",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",151,"^8",7,"^9",151,"^:",12,"~:arglists",["^1;",["~$quote",["^1;",[["~$f","~$m"]]]]],"^;","Applies f to every value in nested map."],"^K","~$lib-draw-graph.preprocessor/fmap*","^6","lib_draw_graph/preprocessor.cljc","^:",12,"~:method-params",["^1;",[["~$f","~$m"]]],"~:protocol-impl",null,"~:arglists-meta",["^1;",[null,null]],"^8",1,"~:variadic?",false,"^7",151,"~:ret-tag",["^J",[null,"~$clj","~$any"]],"^9",151,"~:max-fixed-arity",2,"~:fn-var",true,"^2P",["^1;",["^2Q",["^1;",[["~$f","~$m"]]]]],"^;","Applies f to every value in nested map."],"~$same-ranks",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",391,"^8",7,"^9",391,"^:",17,"^2P",["^1;",["^2Q",["^1;",[["~$info"]]]]]],"^K","~$lib-draw-graph.preprocessor/same-ranks","^6","lib_draw_graph/preprocessor.cljc","^:",17,"^2S",["^1;",[["^31"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",391,"^2W",["^J",[null,"^2X","^2Y"]],"^9",391,"^2Z",1,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["^31"]]]]]],"~$submap?",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",18,"^8",7,"^9",18,"^:",14,"^2P",["^1;",["^2Q",["^1;",[["~$sub","~$m"]]]]],"^;","Checks whether m contains all entries in sub."],"^K","~$lib-draw-graph.preprocessor/submap?","^6","lib_draw_graph/preprocessor.cljc","^:",14,"^2S",["^1;",[["^34","~$m"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",18,"^2W","~$boolean","^9",18,"^2Z",2,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["^34","~$m"]]]]],"^;","Checks whether m contains all entries in sub."],"~$successors-not-self",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",122,"^8",7,"^9",122,"^:",26,"^2P",["^1;",["^2Q",["^1;",[["~$g","~$n"]]]]],"^;","Returns successors not including self"],"^K","~$lib-draw-graph.preprocessor/successors-not-self","^6","lib_draw_graph/preprocessor.cljc","^:",26,"^2S",["^1;",[["~$g","~$n"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",122,"^2W","~$cljs.core/LazySeq","^9",122,"^2Z",2,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g","~$n"]]]]],"^;","Returns successors not including self"],"~$edges-between",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",195,"^8",7,"^9",195,"^:",20,"^2P",["^1;",["^2Q",["^1;",[["~$g","^31","~$ce-uppers","~$ce-lowers","~$clstr1","~$clstr2"]]]]],"^;","Returns a set of edges between all of the min ranked nodes of clstr1\n   and one of the max ranked nodes in clstr2. edges already in the graph\n   are returned marked with :constraint"],"^K","~$lib-draw-graph.preprocessor/edges-between","^6","lib_draw_graph/preprocessor.cljc","^:",20,"^2S",["^1;",[["~$g","^31","^3;","^3<","^3=","^3>"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",195,"^2W","^39","^9",195,"^2Z",6,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g","^31","^3;","^3<","^3=","^3>"]]]]],"^;","Returns a set of edges between all of the min ranked nodes of clstr1\n   and one of the max ranked nodes in clstr2. edges already in the graph\n   are returned marked with :constraint"],"~$ranks",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",129,"^8",7,"^9",129,"^:",12,"^2P",["^1;",["^2Q",["^1;",[["~$g"]]]]],"^;","Returns ranks for each node in g. 0-indexed."],"^K","~$lib-draw-graph.preprocessor/ranks","^6","lib_draw_graph/preprocessor.cljc","^:",12,"^2S",["^1;",[["~$g"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",129,"^2W",["^J",[null,"^2Y"]],"^9",129,"^2Z",1,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g"]]]]],"^;","Returns ranks for each node in g. 0-indexed."],"~$add-stack",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",217,"^8",7,"^9",217,"^:",16,"^2P",["^1;",["^2Q",["^1;",[["~$g","~$ri","~$stack","~$cluster-edge-nums"]]]]],"^;","Adds a stack of clusters to the graph. cluster-edge-nums is a 2-vector where\n   the first is the number of nodes in the upper cluster and the second the lower."],"^K","~$lib-draw-graph.preprocessor/add-stack","^6","lib_draw_graph/preprocessor.cljc","^:",16,"^2S",["^1;",[["~$g","^3C","^3D","^3E"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",217,"^2W",["^J",[null,"^2Y"]],"^9",217,"^2Z",4,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g","^3C","^3D","^3E"]]]]],"^;","Adds a stack of clusters to the graph. cluster-edge-nums is a 2-vector where\n   the first is the number of nodes in the upper cluster and the second the lower."],"~$find-node",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",33,"^8",7,"^9",33,"^:",16,"^2P",["^1;",["^2Q",["^1;",[["~$g","~$part-node"]]]]],"^;","Checks if part-node is part of one of the nodes in the graph. Both part-node\n  and the nodes in the graph must be in map format. e.g. part-node {:id 12} and\n  a node in the graph {:id 12 :name ....}. Returns the first node matched or nil."],"^K","~$lib-draw-graph.preprocessor/find-node","^6","lib_draw_graph/preprocessor.cljc","^:",16,"^2S",["^1;",[["~$g","^3H"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",33,"^2W","^2Y","^9",33,"^2Z",2,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g","^3H"]]]]],"^;","Checks if part-node is part of one of the nodes in the graph. Both part-node\n  and the nodes in the graph must be in map format. e.g. part-node {:id 12} and\n  a node in the graph {:id 12 :name ....}. Returns the first node matched or nil."],"~$inequality-match?",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",314,"^8",7,"^9",314,"^:",24,"^2P",["^1;",["^2Q",["^1;",[["~$term-k","~$op","~$term-v","~$item"]]]]],"^;","takes a term key, an op and term value and assessing whether the value of the\n   key in the item matches the condition."],"^K","~$lib-draw-graph.preprocessor/inequality-match?","^6","lib_draw_graph/preprocessor.cljc","^:",24,"^2S",["^1;",[["^3K","^3L","^3M","^3N"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",314,"^9",314,"^2Z",4,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["^3K","^3L","^3M","^3N"]]]]],"^;","takes a term key, an op and term value and assessing whether the value of the\n   key in the item matches the condition."],"~$remove-levels",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",71,"^8",7,"^9",71,"^:",20,"^2P",["^1;",["^2Q",["^1;",[["~$g","~$n"]]]]],"^;","Removes the n lowest levels from the graph."],"^K","~$lib-draw-graph.preprocessor/remove-levels","^6","lib_draw_graph/preprocessor.cljc","^:",20,"^2S",["^1;",[["~$g","~$n"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",71,"^2W","^2Y","^9",71,"^2Z",2,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g","~$n"]]]]],"^;","Removes the n lowest levels from the graph."],"~$rank-info",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",160,"^8",7,"^9",160,"^:",16,"^2P",["^1;",["^2Q",["^1;",[["^3@","~$k"]]]]],"^;","Organizes ranks by k. k is usually a cluster."],"^K","~$lib-draw-graph.preprocessor/rank-info","^6","lib_draw_graph/preprocessor.cljc","^:",16,"^2S",["^1;",[["^3@","~$k"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",160,"^2W",["^J",[null,"^2X","^2Y"]],"^9",160,"^2Z",2,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["^3@","~$k"]]]]],"^;","Organizes ranks by k. k is usually a cluster."],"~$sort-clusters-by-rank",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",247,"^8",7,"^9",247,"^:",28,"^2P",["^1;",["^2Q",["^1;",[["^3@","~$clusters"]]]]],"^;","Takes the ranks from an old graph and a subset of clusters and returns\n   the clusters in rank order."],"^K","~$lib-draw-graph.preprocessor/sort-clusters-by-rank","^6","lib_draw_graph/preprocessor.cljc","^:",28,"^2S",["^1;",[["^3@","^3U"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",247,"^2W",["^J",["^2X","~$cljs.core/IVector"]],"^9",247,"^2Z",2,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["^3@","^3U"]]]]],"^;","Takes the ranks from an old graph and a subset of clusters and returns\n   the clusters in rank order."],"~$rankseq->edges",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",268,"^8",7,"^9",268,"^:",21,"^2P",["^1;",["^2Q",["^1;",[["~$rankseq"]]]]]],"^K","~$lib-draw-graph.preprocessor/rankseq->edges","^6","lib_draw_graph/preprocessor.cljc","^:",21,"^2S",["^1;",[["^3Y"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",268,"^2W","^2Y","^9",268,"^2Z",1,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["^3Y"]]]]]],"~$*part-sep*",["^ ","^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",289,"^8",16,"^9",289,"^:",26,"~:dynamic",true],"^K","~$lib-draw-graph.preprocessor/*part-sep*","^6","lib_draw_graph/preprocessor.cljc","^:",26,"^8",1,"^40",true,"^7",289,"^9",289,"~:tag","^2Y"],"~$get-rank-info",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",210,"^8",7,"^9",210,"^:",20,"^2P",["^1;",["^2Q",["^1;",[["~$g","~$cluster-on"]]]]]],"^K","~$lib-draw-graph.preprocessor/get-rank-info","^6","lib_draw_graph/preprocessor.cljc","^:",20,"^2S",["^1;",[["~$g","^44"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",210,"^2W",["^J",[null,"^2X","^2Y"]],"^9",210,"^2Z",2,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g","^44"]]]]]],"~$cluster-edges",["^ ","^K","~$lib-draw-graph.preprocessor/cluster-edges","^6","lib_draw_graph/preprocessor.cljc","^7",185,"^8",1,"^9",185,"^:",19,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",185,"^8",6,"^9",185,"^:",19],"^42","~$cljs.core/IMap"],"~$remove-first-and-last",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",295,"^8",7,"^9",295,"^:",28,"^2P",["^1;",["^2Q",["^1;",[["~$s"]]]]]],"^K","~$lib-draw-graph.preprocessor/remove-first-and-last","^6","lib_draw_graph/preprocessor.cljc","^:",28,"^2S",["^1;",[["~$s"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",295,"^2W","^2Y","^9",295,"^2Z",1,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$s"]]]]]],"~$add-invisible-cluster-edges",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",235,"^8",7,"^9",235,"^:",34,"^2P",["^1;",["^2Q",["^1;",[["~$g","~$opts","~$edges"]]]]]],"^K","~$lib-draw-graph.preprocessor/add-invisible-cluster-edges","^6","lib_draw_graph/preprocessor.cljc","^:",34,"^2S",["^1;",[["~$g","^4<","^4="]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",235,"^2W",["^J",[null,"^2Y"]],"^9",235,"^2Z",3,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g","^4<","^4="]]]]]],"~$parse-num",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",24,"^8",7,"^9",24,"^:",16,"^2P",["^1;",["^2Q",["^1;",[["~$s"]]]]]],"^K","~$lib-draw-graph.preprocessor/parse-num","^6","lib_draw_graph/preprocessor.cljc","^:",16,"^2S",["^1;",[["~$s"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",24,"^9",24,"^2Z",1,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$s"]]]]]],"~$paths",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",373,"^8",7,"^9",373,"^:",12,"^2P",["^1;",["^2Q",["^1;",[["~$g","~$start-subs","~$end-subs"]]]]],"^;","Returns a graph with only nodes on paths between start filtering term and the end."],"^K","~$lib-draw-graph.preprocessor/paths","^6","lib_draw_graph/preprocessor.cljc","^:",12,"^2S",["^1;",[["~$g","^4B","^4C"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",373,"^2W","^2Y","^9",373,"^2Z",3,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g","^4B","^4C"]]]]],"^;","Returns a graph with only nodes on paths between start filtering term and the end."],"~$parents-of",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",62,"^8",7,"^9",62,"^:",17,"^2P",["^1;",["^2Q",["^1;",[["~$g","~$nodes"]]]]],"^;","Returns the nodes that are parents of nodes."],"^K","~$lib-draw-graph.preprocessor/parents-of","^6","lib_draw_graph/preprocessor.cljc","^:",17,"^2S",["^1;",[["~$g","^4F"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",62,"^9",62,"^2Z",2,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g","^4F"]]]]],"^;","Returns the nodes that are parents of nodes."],"~$filter-graph",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^:",19,"~:top-fn",["^ ","^2V",true,"~:fixed-arity",2,"^2Z",2,"^2S",[["^1;",["~$g","~$subs",["^ ","~:keys",["~$filter-edges?"],"~:or",["^ ","^4M",true]]]]],"^2P",["^1;",[["~$g","^4K","~$&",["^ ","^4L",["^4M"],"^4N",["^ ","^4M",true]]]]],"^2U",["^1;",[null]]],"^8",7,"^7",343,"^9",343,"^2P",["^1;",["^2Q",["^1;",[["~$g","^4K","~$&",["^ ","^4L",["^4M"],"^4N",["^ ","^4M",true]]]]]]],"^;","Returns a filtered graph where nodes where is not a submap are filtered out.","~:jsdoc",["^1;",["@param {...*} var_args"]]],"^K","~$lib-draw-graph.preprocessor/filter-graph","^6","lib_draw_graph/preprocessor.cljc","^:",19,"^4I",["^ ","^2V",true,"^4J",2,"^2Z",2,"^2S",[["^1;",["~$g","^4K",["^ ","^4L",["^4M"],"^4N",["^ ","^4M",true]]]]],"^2P",["^1;",[["~$g","^4K","~$&",["^ ","^4L",["^4M"],"^4N",["^ ","^4M",true]]]]],"^2U",["^1;",[null]]],"^2S",[["^1;",["~$g","^4K",["^ ","^4L",["^4M"],"^4N",["^ ","^4M",true]]]]],"^2T",null,"^4J",2,"^2U",["^1;",[null]],"^8",1,"^2V",true,"~:methods",[["^ ","^4J",2,"^2V",true,"^42","^2Y"]],"^7",343,"^2W","^2Y","^9",343,"^2Z",2,"^2[",true,"^2P",["^1;",[["~$g","^4K","~$&",["^ ","^4L",["^4M"],"^4N",["^ ","^4M",true]]]]],"^;","Returns a filtered graph where nodes where is not a submap are filtered out.","^4O",["^1;",["@param {...*} var_args"]]],"~$fix-ranks",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",403,"^8",7,"^9",403,"^:",16,"^2P",["^1;",["^2Q",["^1;",[["~$g","^44"]]]]]],"^K","~$lib-draw-graph.preprocessor/fix-ranks","^6","lib_draw_graph/preprocessor.cljc","^:",16,"^2S",["^1;",[["~$g","^44"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",403,"^2W",["^J",[null,"^2Y"]],"^9",403,"^2Z",2,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g","^44"]]]]]],"~$max-ranked-nodes",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",169,"^8",7,"^9",169,"^:",23,"^2P",["^1;",["^2Q",["^1;",[["^31","~$k","~$n"]]]]],"^;","Returns seq of nodes at the max rank for the k. k is usually a cluster."],"^K","~$lib-draw-graph.preprocessor/max-ranked-nodes","^6","lib_draw_graph/preprocessor.cljc","^:",23,"^2S",["^1;",[["^31","~$k","~$n"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",169,"^2W","^39","^9",169,"^2Z",3,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["^31","~$k","~$n"]]]]],"^;","Returns seq of nodes at the max rank for the k. k is usually a cluster."],"~$*group*",["^ ","^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",292,"^8",16,"^9",292,"^:",23,"^40",true],"^K","~$lib-draw-graph.preprocessor/*group*","^6","lib_draw_graph/preprocessor.cljc","^:",23,"^8",1,"^40",true,"^7",292,"^9",292,"^42","^2Y"],"~$predecessors-not-self",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",115,"^8",7,"^9",115,"^:",28,"^2P",["^1;",["^2Q",["^1;",[["~$g","~$n"]]]]],"^;","Returns predecessors not including self"],"^K","~$lib-draw-graph.preprocessor/predecessors-not-self","^6","lib_draw_graph/preprocessor.cljc","^:",28,"^2S",["^1;",[["~$g","~$n"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",115,"^2W","^39","^9",115,"^2Z",2,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g","~$n"]]]]],"^;","Returns predecessors not including self"],"~$sub-matches?",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",329,"^8",7,"^9",329,"^:",19,"^2P",["^1;",["^2Q",["^1;",[["~$term","^3N"]]]]]],"^K","~$lib-draw-graph.preprocessor/sub-matches?","^6","lib_draw_graph/preprocessor.cljc","^:",19,"^2S",["^1;",[["^4[","^3N"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",329,"^2W",["^J",[null,"^36","^2Y"]],"^9",329,"^2Z",2,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["^4[","^3N"]]]]]],"~$leaves",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",56,"^8",7,"^9",56,"^:",13,"^2P",["^1;",["^2Q",["^1;",[["~$g"]]]]],"^;","Returns the leaves in the graph."],"^K","~$lib-draw-graph.preprocessor/leaves","^6","lib_draw_graph/preprocessor.cljc","^:",13,"^2S",["^1;",[["~$g"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",56,"^2W","^39","^9",56,"^2Z",1,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g"]]]]],"^;","Returns the leaves in the graph."],"~$min-ranked-nodes",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",177,"^8",7,"^9",177,"^:",23,"^2P",["^1;",["^2Q",["^1;",[["^31","~$k","~$n"]]]]],"^;","Returns seq of nodes at the min rank for the k. k is usually a cluster."],"^K","~$lib-draw-graph.preprocessor/min-ranked-nodes","^6","lib_draw_graph/preprocessor.cljc","^:",23,"^2S",["^1;",[["^31","~$k","~$n"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",177,"^2W","^39","^9",177,"^2Z",3,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["^31","~$k","~$n"]]]]],"^;","Returns seq of nodes at the min rank for the k. k is usually a cluster."],"~$eager-stateful-dfs",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",89,"^8",7,"^9",89,"^:",25,"^2P",["^1;",["^2Q",["^1;",[["~$successors","~$start","~$f","~$init"]]]]],"^;","Eager depth first search that collects state as it goes.\n   successors is a function of 1 arg that returns successors of node passed.\n   start is the starting node.\n   init is a map of initial state.\n   f is a function of 3 args: current state (map), current nodes and one of its children."],"^K","~$lib-draw-graph.preprocessor/eager-stateful-dfs","^6","lib_draw_graph/preprocessor.cljc","^:",25,"^2S",["^1;",[["^56","^57","~$f","^58"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",89,"^2W","^2Y","^9",89,"^2Z",4,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["^56","^57","~$f","^58"]]]]],"^;","Eager depth first search that collects state as it goes.\n   successors is a function of 1 arg that returns successors of node passed.\n   start is the starting node.\n   init is a map of initial state.\n   f is a function of 3 args: current state (map), current nodes and one of its children."],"~$fmap",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",148,"^8",7,"^9",148,"^:",11,"^2P",["^1;",["^2Q",["^1;",[["~$f","~$m"]]]]]],"^K","~$lib-draw-graph.preprocessor/fmap","^6","lib_draw_graph/preprocessor.cljc","^:",11,"^2S",["^1;",[["~$f","~$m"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",148,"^2W",["^J",[null,"^2X","^2Y"]],"^9",148,"^2Z",2,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$f","~$m"]]]]]],"~$subgraph",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^:",15,"^4I",["^ ","^2V",true,"^4J",2,"^2Z",2,"^2S",[["^1;",["~$g","~$n",["^ ","^4L",["~$part-node?"],"^4N",["^ ","^5=",false]]]]],"^2P",["^1;",[["~$g","~$n","~$&",["^ ","^4L",["^5="],"^4N",["^ ","^5=",false]]]]],"^2U",["^1;",[null]]],"^8",7,"^7",46,"^9",46,"^2P",["^1;",["^2Q",["^1;",[["~$g","~$n","~$&",["^ ","^4L",["^5="],"^4N",["^ ","^5=",false]]]]]]],"^;","Returns a sub(di)graph of g going depth first from the first occurrence of\n   the (part) node n.","^4O",["^1;",["@param {...*} var_args"]]],"^K","~$lib-draw-graph.preprocessor/subgraph","^6","lib_draw_graph/preprocessor.cljc","^:",15,"^4I",["^ ","^2V",true,"^4J",2,"^2Z",2,"^2S",[["^1;",["~$g","~$n",["^ ","^4L",["^5="],"^4N",["^ ","^5=",false]]]]],"^2P",["^1;",[["~$g","~$n","~$&",["^ ","^4L",["^5="],"^4N",["^ ","^5=",false]]]]],"^2U",["^1;",[null]]],"^2S",[["^1;",["~$g","~$n",["^ ","^4L",["^5="],"^4N",["^ ","^5=",false]]]]],"^2T",null,"^4J",2,"^2U",["^1;",[null]],"^8",1,"^2V",true,"^4Q",[["^ ","^4J",2,"^2V",true,"^42","^2Y"]],"^7",46,"^2W","^2Y","^9",46,"^2Z",2,"^2[",true,"^2P",["^1;",[["~$g","~$n","~$&",["^ ","^4L",["^5="],"^4N",["^ ","^5=",false]]]]],"^;","Returns a sub(di)graph of g going depth first from the first occurrence of\n   the (part) node n.","^4O",["^1;",["@param {...*} var_args"]]],"~$filter-edge-graph",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",275,"^8",7,"^9",275,"^:",24,"^2P",["^1;",["^2Q",["^1;",[["~$g","^3U"]]]]],"^;","Filter's the graph's edge-graph to just supplied clusters."],"^K","~$lib-draw-graph.preprocessor/filter-edge-graph","^6","lib_draw_graph/preprocessor.cljc","^:",24,"^2S",["^1;",[["~$g","^3U"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",275,"^2W",["^J",[null,"^2Y"]],"^9",275,"^2Z",2,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$g","^3U"]]]]],"^;","Filter's the graph's edge-graph to just supplied clusters."],"~$equality-match?",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",299,"^8",7,"^9",299,"^:",22,"^2P",["^1;",["^2Q",["^1;",[["^3K","^3M","^3N"]]]]],"^;","takes a term key and term value (which may represent a choice in the form\n   [a or b or c] and assesses whether the key and value (or one of the values) is a\n   submap of item."],"^K","~$lib-draw-graph.preprocessor/equality-match?","^6","lib_draw_graph/preprocessor.cljc","^:",22,"^2S",["^1;",[["^3K","^3M","^3N"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",299,"^2W",["^J",[null,"^36","^2Y"]],"^9",299,"^2Z",3,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["^3K","^3M","^3N"]]]]],"^;","takes a term key and term value (which may represent a choice in the form\n   [a or b or c] and assesses whether the key and value (or one of the values) is a\n   submap of item."],"~$update-rank",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",108,"^8",7,"^9",108,"^:",18,"^2P",["^1;",["^2Q",["^1;",[["~$state","~$node","~$next"]]]]],"^;","Returns rank for the next (node) given state map."],"^K","~$lib-draw-graph.preprocessor/update-rank","^6","lib_draw_graph/preprocessor.cljc","^:",18,"^2S",["^1;",[["^5D","^5E","^5F"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",108,"^2W",["^J",[null,"^2Y"]],"^9",108,"^2Z",3,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["^5D","^5E","^5F"]]]]],"^;","Returns rank for the next (node) given state map."],"~$split-parts",["^ ","^2O",null,"^5",["^ ","^6","lib_draw_graph/preprocessor.cljc","^7",290,"^8",7,"^9",290,"^:",18,"^2P",["^1;",["^2Q",["^1;",[["~$s"]]]]]],"^K","~$lib-draw-graph.preprocessor/split-parts","^6","lib_draw_graph/preprocessor.cljc","^:",18,"^2S",["^1;",[["~$s"]]],"^2T",null,"^2U",["^1;",[null,null]],"^8",1,"^2V",false,"^7",290,"^2W",["^J",[null,"^2Y"]],"^9",290,"^2Z",1,"^2[",true,"^2P",["^1;",["^2Q",["^1;",[["~$s"]]]]]]],"^19",["^ ","^X","^X"],"~:cljs.analyzer/constants",["^ ","^16",["^J",["~:constraint","~:num-cluster-edges","^5","~:else","~:fix-ranks","~:part-node?","~:style","~:graph","~:filter-edges?","~:clusters","~:edge-graph"]],"~:order",["^5M","^5O","^5Q","^5K","^5P","^5L","^5T","^5S","^5R","^5","^5N"]],"^1>",["^ ","^17",["^J",[]]],"^1?",["^ "],"^1@",["^[","^X","^Z","^W","^Y","^12","^T","^10","^R","^14","^U"]],"^N","^L","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1N",[["^5X","~:static-fns"],true,["^5X","~:elide-asserts"],true,["^5X","~:optimize-constants"],null,["^5X","^1E"],null,["^5X","~:external-config"],null,["^5X","~:tooling-config"],null,["^5X","~:emit-constants"],null,["^5X","~:load-tests"],false,["^5X","~:infer-externs"],true,["^5X","^1G"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^5X","~:fn-invoke-direct"],null,["^5X","~:source-map"],"/dev/null"]]]