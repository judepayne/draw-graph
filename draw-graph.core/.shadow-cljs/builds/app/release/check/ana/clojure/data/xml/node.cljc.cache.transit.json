["^ ","~:output",["^ ","~:js","goog.provide('clojure.data.xml.node');\n\n/**\n* @constructor\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.IEmptyableCollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nclojure.data.xml.node.Element = (function (tag,attrs,content,meta){\nthis.tag = tag;\nthis.attrs = attrs;\nthis.content = content;\nthis.meta = meta;\nthis.cljs$lang$protocol_mask$partition0$ = 2162558734;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\nclojure.data.xml.node.Element.prototype.toString = (function (){\nvar self__ = this;\nvar _ = this;\nvar qname = clojure.data.xml.name.as_qname(self__.tag);\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"<\",qname], null),cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(((function (qname,_){\nreturn (function (p__30472){\nvar vec__30473 = p__30472;\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30473,(0),null);\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30473,(1),null);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",clojure.data.xml.name.as_qname(n),\"=\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a], 0))], null);\n});})(qname,_))\n,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([self__.attrs], 0)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([((cljs.core.seq(self__.content))?cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\">\"], null),self__.content,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"</\",qname,\">\"], null)], 0)):new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"/>\"], null))], 0)));\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this$,k){\nvar self__ = this;\nvar this$__$1 = this;\nreturn this$__$1.cljs$core$ILookup$_lookup$arity$3(null,k,null);\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this$,k,nf){\nvar self__ = this;\nvar this$__$1 = this;\nvar G__30479 = k;\nvar G__30479__$1 = (((G__30479 instanceof cljs.core.Keyword))?G__30479.fqn:null);\nswitch (G__30479__$1) {\ncase \"tag\":\nreturn self__.tag;\n\nbreak;\ncase \"attrs\":\nreturn self__.attrs;\n\nbreak;\ncase \"content\":\nreturn self__.content;\n\nbreak;\ndefault:\nreturn nf;\n\n}\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this$,writer,opts){\nvar self__ = this;\nvar this$__$1 = this;\ncljs.core._write(writer,\"#xml/element{:tag \");\n\ncljs.core.pr_writer(self__.tag,writer,opts);\n\nif(cljs.core.empty_QMARK_(self__.attrs)){\n} else {\ncljs.core._write(writer,\", :attrs \");\n\ncljs.core.pr_writer(self__.attrs,writer,opts);\n}\n\nif(cljs.core.empty_QMARK_(self__.content)){\n} else {\ncljs.core._write(writer,\", :content \");\n\ncljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,\"[\",\" \",\"]\",opts,self__.content);\n}\n\nreturn cljs.core._write(writer,\"}\");\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (new cljs.core.RecordIter((0),this$__$1,(3),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"content\",\"content\",15833224)], null),cljs.core.nil_iter()));\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn self__.meta;\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn (new clojure.data.xml.node.Element(self__.tag,self__.attrs,self__.content,self__.meta));\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$ICounted$_count$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (3);\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$IHash$_hash$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn cljs.core.hash_unordered_coll(this$__$1);\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this$,other){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (((this$__$1 === other)) || (cljs.core.equiv_map(this$__$1,other)));\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn (new clojure.data.xml.node.Element(self__.tag,cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentVector.EMPTY,cljs.core.PersistentArrayMap.EMPTY));\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this$,k){\nvar self__ = this;\nvar this$__$1 = this;\nreturn cljs.core.with_meta((function (){var G__30489 = k;\nvar G__30489__$1 = (((G__30489 instanceof cljs.core.Keyword))?G__30489.fqn:null);\nswitch (G__30489__$1) {\ncase \"tag\":\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),self__.attrs,new cljs.core.Keyword(null,\"content\",\"content\",15833224),self__.content], null);\n\nbreak;\ncase \"attrs\":\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),self__.tag,new cljs.core.Keyword(null,\"content\",\"content\",15833224),self__.content], null);\n\nbreak;\ncase \"content\":\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),self__.tag,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),self__.attrs], null);\n\nbreak;\ndefault:\nreturn this$__$1;\n\n}\n})(),self__.meta);\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this$,k,v){\nvar self__ = this;\nvar this$__$1 = this;\nvar G__30494 = k;\nvar G__30494__$1 = (((G__30494 instanceof cljs.core.Keyword))?G__30494.fqn:null);\nswitch (G__30494__$1) {\ncase \"tag\":\nreturn (new clojure.data.xml.node.Element(v,self__.attrs,self__.content,self__.meta));\n\nbreak;\ncase \"attrs\":\nreturn (new clojure.data.xml.node.Element(self__.tag,v,self__.content,self__.meta));\n\nbreak;\ncase \"content\":\nreturn (new clojure.data.xml.node.Element(self__.tag,self__.attrs,v,self__.meta));\n\nbreak;\ndefault:\nreturn cljs.core.with_meta(cljs.core.PersistentArrayMap.createAsIfByAssoc([new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),self__.tag,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),self__.attrs,new cljs.core.Keyword(null,\"content\",\"content\",15833224),self__.content,k,v]),self__.meta);\n\n}\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn cljs.core.seq(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),self__.tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),self__.attrs], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"content\",\"content\",15833224),self__.content], null)], null));\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this$,next_meta){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (new clojure.data.xml.node.Element(self__.tag,self__.attrs,self__.content,next_meta));\n});\n\nclojure.data.xml.node.Element.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this$,entry){\nvar self__ = this;\nvar this$__$1 = this;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.with_meta(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),self__.tag,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),self__.attrs,new cljs.core.Keyword(null,\"content\",\"content\",15833224),self__.content], null),self__.meta),entry);\n});\n\nclojure.data.xml.node.Element.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"tag\",\"tag\",350170304,null),new cljs.core.Symbol(null,\"attrs\",\"attrs\",-450137186,null),new cljs.core.Symbol(null,\"content\",\"content\",1656364751,null),new cljs.core.Symbol(null,\"meta\",\"meta\",-1154898805,null)], null);\n});\n\nclojure.data.xml.node.Element.cljs$lang$type = true;\n\nclojure.data.xml.node.Element.cljs$lang$ctorStr = \"clojure.data.xml.node/Element\";\n\nclojure.data.xml.node.Element.cljs$lang$ctorPrWriter = (function (this__4374__auto__,writer__4375__auto__,opt__4376__auto__){\nreturn cljs.core._write(writer__4375__auto__,\"clojure.data.xml.node/Element\");\n});\n\n/**\n * Positional factory function for clojure.data.xml.node/Element.\n */\nclojure.data.xml.node.__GT_Element = (function clojure$data$xml$node$__GT_Element(tag,attrs,content,meta){\nreturn (new clojure.data.xml.node.Element(tag,attrs,content,meta));\n});\n\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nclojure.data.xml.node.CData = (function (content,__meta,__extmap,__hash){\nthis.content = content;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\nclojure.data.xml.node.CData.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4385__auto__,k__4386__auto__){\nvar self__ = this;\nvar this__4385__auto____$1 = this;\nreturn this__4385__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4386__auto__,null);\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4387__auto__,k30510,else__4388__auto__){\nvar self__ = this;\nvar this__4387__auto____$1 = this;\nvar G__30524 = k30510;\nvar G__30524__$1 = (((G__30524 instanceof cljs.core.Keyword))?G__30524.fqn:null);\nswitch (G__30524__$1) {\ncase \"content\":\nreturn self__.content;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k30510,else__4388__auto__);\n\n}\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4404__auto__,f__4405__auto__,init__4406__auto__){\nvar self__ = this;\nvar this__4404__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (this__4404__auto____$1){\nreturn (function (ret__4407__auto__,p__30538){\nvar vec__30539 = p__30538;\nvar k__4408__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30539,(0),null);\nvar v__4409__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30539,(1),null);\nreturn (f__4405__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4405__auto__.cljs$core$IFn$_invoke$arity$3(ret__4407__auto__,k__4408__auto__,v__4409__auto__) : f__4405__auto__.call(null,ret__4407__auto__,k__4408__auto__,v__4409__auto__));\n});})(this__4404__auto____$1))\n,init__4406__auto__,this__4404__auto____$1);\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4399__auto__,writer__4400__auto__,opts__4401__auto__){\nvar self__ = this;\nvar this__4399__auto____$1 = this;\nvar pr_pair__4402__auto__ = ((function (this__4399__auto____$1){\nreturn (function (keyval__4403__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4401__auto__,keyval__4403__auto__);\n});})(this__4399__auto____$1))\n;\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,pr_pair__4402__auto__,\"#clojure.data.xml.node.CData{\",\", \",\"}\",opts__4401__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"content\",\"content\",15833224),self__.content],null))], null),self__.__extmap));\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__30509){\nvar self__ = this;\nvar G__30509__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__30509__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"content\",\"content\",15833224)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4383__auto__){\nvar self__ = this;\nvar this__4383__auto____$1 = this;\nreturn self__.__meta;\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4380__auto__){\nvar self__ = this;\nvar this__4380__auto____$1 = this;\nreturn (new clojure.data.xml.node.CData(self__.content,self__.__meta,self__.__extmap,self__.__hash));\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4389__auto__){\nvar self__ = this;\nvar this__4389__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4381__auto__){\nvar self__ = this;\nvar this__4381__auto____$1 = this;\nvar h__4243__auto__ = self__.__hash;\nif((!((h__4243__auto__ == null)))){\nreturn h__4243__auto__;\n} else {\nvar h__4243__auto____$1 = (function (){var fexpr__30548 = ((function (h__4243__auto__,this__4381__auto____$1){\nreturn (function (coll__4382__auto__){\nreturn (-1970047562 ^ cljs.core.hash_unordered_coll(coll__4382__auto__));\n});})(h__4243__auto__,this__4381__auto____$1))\n;\nreturn fexpr__30548(this__4381__auto____$1);\n})();\nself__.__hash = h__4243__auto____$1;\n\nreturn h__4243__auto____$1;\n}\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this30511,other30512){\nvar self__ = this;\nvar this30511__$1 = this;\nreturn (((!((other30512 == null)))) && ((this30511__$1.constructor === other30512.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this30511__$1.content,other30512.content)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this30511__$1.__extmap,other30512.__extmap)));\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4394__auto__,k__4395__auto__){\nvar self__ = this;\nvar this__4394__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"content\",\"content\",15833224),null], null), null),k__4395__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4394__auto____$1),self__.__meta),k__4395__auto__);\n} else {\nreturn (new clojure.data.xml.node.CData(self__.content,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4395__auto__)),null));\n}\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4392__auto__,k__4393__auto__,G__30509){\nvar self__ = this;\nvar this__4392__auto____$1 = this;\nvar pred__30564 = cljs.core.keyword_identical_QMARK_;\nvar expr__30565 = k__4393__auto__;\nif(cljs.core.truth_((function (){var G__30567 = new cljs.core.Keyword(null,\"content\",\"content\",15833224);\nvar G__30568 = expr__30565;\nreturn (pred__30564.cljs$core$IFn$_invoke$arity$2 ? pred__30564.cljs$core$IFn$_invoke$arity$2(G__30567,G__30568) : pred__30564.call(null,G__30567,G__30568));\n})())){\nreturn (new clojure.data.xml.node.CData(G__30509,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new clojure.data.xml.node.CData(self__.content,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4393__auto__,G__30509),null));\n}\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4397__auto__){\nvar self__ = this;\nvar this__4397__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"content\",\"content\",15833224),self__.content,null))], null),self__.__extmap));\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4384__auto__,G__30509){\nvar self__ = this;\nvar this__4384__auto____$1 = this;\nreturn (new clojure.data.xml.node.CData(self__.content,G__30509,self__.__extmap,self__.__hash));\n});\n\nclojure.data.xml.node.CData.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4390__auto__,entry__4391__auto__){\nvar self__ = this;\nvar this__4390__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4391__auto__)){\nreturn this__4390__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4390__auto____$1,entry__4391__auto__);\n}\n});\n\nclojure.data.xml.node.CData.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"content\",\"content\",1656364751,null)], null);\n});\n\nclojure.data.xml.node.CData.cljs$lang$type = true;\n\nclojure.data.xml.node.CData.cljs$lang$ctorPrSeq = (function (this__4428__auto__){\nreturn (new cljs.core.List(null,\"clojure.data.xml.node/CData\",null,(1),null));\n});\n\nclojure.data.xml.node.CData.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__){\nreturn cljs.core._write(writer__4429__auto__,\"clojure.data.xml.node/CData\");\n});\n\n/**\n * Positional factory function for clojure.data.xml.node/CData.\n */\nclojure.data.xml.node.__GT_CData = (function clojure$data$xml$node$__GT_CData(content){\nreturn (new clojure.data.xml.node.CData(content,null,null,null));\n});\n\n/**\n * Factory function for clojure.data.xml.node/CData, taking a map of keywords to field values.\n */\nclojure.data.xml.node.map__GT_CData = (function clojure$data$xml$node$map__GT_CData(G__30517){\nvar extmap__4424__auto__ = (function (){var G__30591 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__30517,new cljs.core.Keyword(null,\"content\",\"content\",15833224));\nif(cljs.core.record_QMARK_(G__30517)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__30591);\n} else {\nreturn G__30591;\n}\n})();\nreturn (new clojure.data.xml.node.CData(new cljs.core.Keyword(null,\"content\",\"content\",15833224).cljs$core$IFn$_invoke$arity$1(G__30517),null,cljs.core.not_empty(extmap__4424__auto__),null));\n});\n\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nclojure.data.xml.node.Comment = (function (content,__meta,__extmap,__hash){\nthis.content = content;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\nclojure.data.xml.node.Comment.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4385__auto__,k__4386__auto__){\nvar self__ = this;\nvar this__4385__auto____$1 = this;\nreturn this__4385__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4386__auto__,null);\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4387__auto__,k30593,else__4388__auto__){\nvar self__ = this;\nvar this__4387__auto____$1 = this;\nvar G__30603 = k30593;\nvar G__30603__$1 = (((G__30603 instanceof cljs.core.Keyword))?G__30603.fqn:null);\nswitch (G__30603__$1) {\ncase \"content\":\nreturn self__.content;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k30593,else__4388__auto__);\n\n}\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4404__auto__,f__4405__auto__,init__4406__auto__){\nvar self__ = this;\nvar this__4404__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (this__4404__auto____$1){\nreturn (function (ret__4407__auto__,p__30605){\nvar vec__30606 = p__30605;\nvar k__4408__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30606,(0),null);\nvar v__4409__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30606,(1),null);\nreturn (f__4405__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4405__auto__.cljs$core$IFn$_invoke$arity$3(ret__4407__auto__,k__4408__auto__,v__4409__auto__) : f__4405__auto__.call(null,ret__4407__auto__,k__4408__auto__,v__4409__auto__));\n});})(this__4404__auto____$1))\n,init__4406__auto__,this__4404__auto____$1);\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4399__auto__,writer__4400__auto__,opts__4401__auto__){\nvar self__ = this;\nvar this__4399__auto____$1 = this;\nvar pr_pair__4402__auto__ = ((function (this__4399__auto____$1){\nreturn (function (keyval__4403__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4401__auto__,keyval__4403__auto__);\n});})(this__4399__auto____$1))\n;\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,pr_pair__4402__auto__,\"#clojure.data.xml.node.Comment{\",\", \",\"}\",opts__4401__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"content\",\"content\",15833224),self__.content],null))], null),self__.__extmap));\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__30592){\nvar self__ = this;\nvar G__30592__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__30592__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"content\",\"content\",15833224)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4383__auto__){\nvar self__ = this;\nvar this__4383__auto____$1 = this;\nreturn self__.__meta;\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4380__auto__){\nvar self__ = this;\nvar this__4380__auto____$1 = this;\nreturn (new clojure.data.xml.node.Comment(self__.content,self__.__meta,self__.__extmap,self__.__hash));\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4389__auto__){\nvar self__ = this;\nvar this__4389__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4381__auto__){\nvar self__ = this;\nvar this__4381__auto____$1 = this;\nvar h__4243__auto__ = self__.__hash;\nif((!((h__4243__auto__ == null)))){\nreturn h__4243__auto__;\n} else {\nvar h__4243__auto____$1 = (function (){var fexpr__30630 = ((function (h__4243__auto__,this__4381__auto____$1){\nreturn (function (coll__4382__auto__){\nreturn (709226074 ^ cljs.core.hash_unordered_coll(coll__4382__auto__));\n});})(h__4243__auto__,this__4381__auto____$1))\n;\nreturn fexpr__30630(this__4381__auto____$1);\n})();\nself__.__hash = h__4243__auto____$1;\n\nreturn h__4243__auto____$1;\n}\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this30594,other30595){\nvar self__ = this;\nvar this30594__$1 = this;\nreturn (((!((other30595 == null)))) && ((this30594__$1.constructor === other30595.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this30594__$1.content,other30595.content)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this30594__$1.__extmap,other30595.__extmap)));\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4394__auto__,k__4395__auto__){\nvar self__ = this;\nvar this__4394__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"content\",\"content\",15833224),null], null), null),k__4395__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4394__auto____$1),self__.__meta),k__4395__auto__);\n} else {\nreturn (new clojure.data.xml.node.Comment(self__.content,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4395__auto__)),null));\n}\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4392__auto__,k__4393__auto__,G__30592){\nvar self__ = this;\nvar this__4392__auto____$1 = this;\nvar pred__30635 = cljs.core.keyword_identical_QMARK_;\nvar expr__30636 = k__4393__auto__;\nif(cljs.core.truth_((function (){var G__30638 = new cljs.core.Keyword(null,\"content\",\"content\",15833224);\nvar G__30639 = expr__30636;\nreturn (pred__30635.cljs$core$IFn$_invoke$arity$2 ? pred__30635.cljs$core$IFn$_invoke$arity$2(G__30638,G__30639) : pred__30635.call(null,G__30638,G__30639));\n})())){\nreturn (new clojure.data.xml.node.Comment(G__30592,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new clojure.data.xml.node.Comment(self__.content,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4393__auto__,G__30592),null));\n}\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4397__auto__){\nvar self__ = this;\nvar this__4397__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"content\",\"content\",15833224),self__.content,null))], null),self__.__extmap));\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4384__auto__,G__30592){\nvar self__ = this;\nvar this__4384__auto____$1 = this;\nreturn (new clojure.data.xml.node.Comment(self__.content,G__30592,self__.__extmap,self__.__hash));\n});\n\nclojure.data.xml.node.Comment.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4390__auto__,entry__4391__auto__){\nvar self__ = this;\nvar this__4390__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4391__auto__)){\nreturn this__4390__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4390__auto____$1,entry__4391__auto__);\n}\n});\n\nclojure.data.xml.node.Comment.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"content\",\"content\",1656364751,null)], null);\n});\n\nclojure.data.xml.node.Comment.cljs$lang$type = true;\n\nclojure.data.xml.node.Comment.cljs$lang$ctorPrSeq = (function (this__4428__auto__){\nreturn (new cljs.core.List(null,\"clojure.data.xml.node/Comment\",null,(1),null));\n});\n\nclojure.data.xml.node.Comment.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__){\nreturn cljs.core._write(writer__4429__auto__,\"clojure.data.xml.node/Comment\");\n});\n\n/**\n * Positional factory function for clojure.data.xml.node/Comment.\n */\nclojure.data.xml.node.__GT_Comment = (function clojure$data$xml$node$__GT_Comment(content){\nreturn (new clojure.data.xml.node.Comment(content,null,null,null));\n});\n\n/**\n * Factory function for clojure.data.xml.node/Comment, taking a map of keywords to field values.\n */\nclojure.data.xml.node.map__GT_Comment = (function clojure$data$xml$node$map__GT_Comment(G__30596){\nvar extmap__4424__auto__ = (function (){var G__30656 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__30596,new cljs.core.Keyword(null,\"content\",\"content\",15833224));\nif(cljs.core.record_QMARK_(G__30596)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__30656);\n} else {\nreturn G__30656;\n}\n})();\nreturn (new clojure.data.xml.node.Comment(new cljs.core.Keyword(null,\"content\",\"content\",15833224).cljs$core$IFn$_invoke$arity$1(G__30596),null,cljs.core.not_empty(extmap__4424__auto__),null));\n});\n\n/**\n * Create an xml element from a content collection and optional metadata\n * @param {...*} var_args\n */\nclojure.data.xml.node.element_STAR_ = (function clojure$data$xml$node$element_STAR_(var_args){\nvar G__30661 = arguments.length;\nswitch (G__30661) {\ncase 4:\nreturn clojure.data.xml.node.element_STAR_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ncase 3:\nreturn clojure.data.xml.node.element_STAR_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.data.xml.node.element_STAR_.cljs$core$IFn$_invoke$arity$4 = (function (tag,attrs,content,meta){\nreturn (new clojure.data.xml.node.Element(tag,(function (){var or__4131__auto__ = attrs;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})(),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,content),meta));\n});\n\nclojure.data.xml.node.element_STAR_.cljs$core$IFn$_invoke$arity$3 = (function (tag,attrs,content){\nreturn (new clojure.data.xml.node.Element(tag,(function (){var or__4131__auto__ = attrs;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})(),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,content),null));\n});\n\nclojure.data.xml.node.element_STAR_.cljs$lang$maxFixedArity = 4;\n\n/**\n * Create an xml Element from content varargs\n * @param {...*} var_args\n */\nclojure.data.xml.node.element = (function clojure$data$xml$node$element(var_args){\nvar G__30686 = arguments.length;\nswitch (G__30686) {\ncase 1:\nreturn clojure.data.xml.node.element.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.data.xml.node.element.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4751__auto__ = [];\nvar len__4730__auto___30814 = arguments.length;\nvar i__4731__auto___30815 = (0);\nwhile(true){\nif((i__4731__auto___30815 < len__4730__auto___30814)){\nargs_arr__4751__auto__.push((arguments[i__4731__auto___30815]));\n\nvar G__30816 = (i__4731__auto___30815 + (1));\ni__4731__auto___30815 = G__30816;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4752__auto__ = (new cljs.core.IndexedSeq(args_arr__4751__auto__.slice((2)),(0),null));\nreturn clojure.data.xml.node.element.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4752__auto__);\n\n}\n});\n\nclojure.data.xml.node.element.cljs$core$IFn$_invoke$arity$1 = (function (tag){\nreturn clojure.data.xml.node.element_STAR_.cljs$core$IFn$_invoke$arity$3(tag,null,null);\n});\n\nclojure.data.xml.node.element.cljs$core$IFn$_invoke$arity$2 = (function (tag,attrs){\nreturn clojure.data.xml.node.element_STAR_.cljs$core$IFn$_invoke$arity$3(tag,attrs,null);\n});\n\nclojure.data.xml.node.element.cljs$core$IFn$_invoke$arity$variadic = (function (tag,attrs,content){\nreturn clojure.data.xml.node.element_STAR_.cljs$core$IFn$_invoke$arity$3(tag,attrs,content);\n});\n\n/** @this {Function} */\nclojure.data.xml.node.element.cljs$lang$applyTo = (function (seq30683){\nvar G__30684 = cljs.core.first(seq30683);\nvar seq30683__$1 = cljs.core.next(seq30683);\nvar G__30685 = cljs.core.first(seq30683__$1);\nvar seq30683__$2 = cljs.core.next(seq30683__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__30684,G__30685,seq30683__$2);\n});\n\nclojure.data.xml.node.element.cljs$lang$maxFixedArity = (2);\n\n/**\n * Create a CData node\n */\nclojure.data.xml.node.cdata = (function clojure$data$xml$node$cdata(content){\nreturn (new clojure.data.xml.node.CData(content,null,null,null));\n});\n/**\n * Create a Comment node\n */\nclojure.data.xml.node.xml_comment = (function clojure$data$xml$node$xml_comment(content){\nreturn (new clojure.data.xml.node.Comment(content,null,null,null));\n});\nclojure.data.xml.node.map__GT_Element = (function clojure$data$xml$node$map__GT_Element(p__30703){\nvar map__30704 = p__30703;\nvar map__30704__$1 = (((((!((map__30704 == null))))?(((((map__30704.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__30704.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__30704):map__30704);\nvar el = map__30704__$1;\nvar tag = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30704__$1,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223));\nvar attrs = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30704__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar content = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30704__$1,new cljs.core.Keyword(null,\"content\",\"content\",15833224));\nreturn clojure.data.xml.node.element_STAR_.cljs$core$IFn$_invoke$arity$4(tag,attrs,content,cljs.core.meta(el));\n});\nclojure.data.xml.node.tagged_element = (function clojure$data$xml$node$tagged_element(el){\nif(cljs.core.map_QMARK_(el)){\nreturn clojure.data.xml.node.map__GT_Element(el);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Unsupported element representation\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"element\",\"element\",1974019749),el], null));\n\n}\n});\nclojure.data.xml.node.element_QMARK_ = (function clojure$data$xml$node$element_QMARK_(el){\nreturn ((cljs.core.map_QMARK_(el)) && ((!((new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(el) == null)))));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:author","Herwig Hochleitner","~:doc","Data types for xml nodes: Element, CData and Comment","~:file","clojure/data/xml/node.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",26],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.data.xml.node","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.data.xml.name","^Q","~$cljs.core","^R","~$goog","^S"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$as-qname","^Q"],"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^L","Data types for xml nodes: Element, CData and Comment",["^ ","^6","Herwig Hochleitner"],["^Z",["^U",["^Q","~:refer",["^W"]]]]]],"~:flags",["^ ","^U",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^Q"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","clojure/data/xml/node.cljc"],"~:compiled-at",1560578451041,"~:resource-name","clojure/data/xml/node.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.data.xml.node\n  \"Data types for xml nodes: Element, CData and Comment\"\n  {:author \"Herwig Hochleitner\"}\n  (:require [clojure.data.xml.name :refer [as-qname]])\n  #?(:clj (:import (clojure.lang IHashEq IObj ILookup IKeywordLookup Counted\n                                 Associative Seqable IPersistentMap\n                                 APersistentMap RT MapEquivalence MapEntry)\n                   (java.io Serializable Writer)\n                   (java.util Map Iterator))))\n\n;; Parsed data format\n;; Represents a node of an XML tree\n\n;; We implement a custom deftype for elements\n;; it is similar to (defrecord Element [tag attrs content])\n;; but we override its hash and equality to be compatible with\n;; clojure's hash-maps\n;; see http://dev.clojure.org/jira/browse/CLJ-2084\n;; also, elements don't have an extmap and degrade to hash-maps also\n;; when assoc'ing unknown keys\n\n;; FIXME hash caching cannot be used: http://dev.clojure.org/jira/browse/CLJ-2092\n\n#?\n(:clj\n (deftype ElementIterator [el ^:volatile-mutable fields]\n   Iterator\n   (hasNext [_] (boolean (seq fields)))\n   (next [_]\n     (let [f (first fields)]\n       (set! fields (next fields))\n       (MapEntry. f (get el f))))))\n\n(deftype Element [tag attrs content meta]\n\n  ;; serializing/cloning, hashing, equality, iteration\n\n  #?@\n  (:clj\n   [Serializable\n    MapEquivalence\n    IHashEq\n    (hasheq [this] (APersistentMap/mapHasheq this))\n    Iterable\n    (iterator [this] (ElementIterator. this '(:tag :attrs :content)))]\n   :cljs\n   [ICloneable\n    (-clone [_] (Element. tag attrs content meta))\n    IHash\n    (-hash [this] (hash-unordered-coll this))\n    IEquiv\n    (-equiv [this other] (or (identical? this other)\n                             ^boolean (js/cljs.core.equiv_map this other)))\n    IIterable\n    (-iterator [this] (RecordIter. 0 this 3 [:tag :attrs :content] (nil-iter)))])\n  Object\n  (toString [_]\n    (let [qname (as-qname tag)]\n      (apply str (concat [\"<\" qname]\n                         (mapcat (fn [[n a]]\n                                   [\" \" (as-qname n) \"=\" (pr-str a)])\n                                 attrs)\n                         (if (seq content)\n                           (concat [\">\"] content [\"</\" qname \">\"])\n                           [\"/>\"])))))\n  #?@(:clj\n      [(hashCode [this] (APersistentMap/mapHash this))\n       (equals [this other] (APersistentMap/mapEquals this other))\n       IPersistentMap\n       (equiv [this other] (APersistentMap/mapEquals this other))])\n\n  ;; Main collection interfaces, that are included in IPersistentMap,\n  ;; but are separate protocols in cljs\n\n  #?(:cljs ILookup)\n  (#?(:clj valAt :cljs -lookup) [this k]\n    (#?(:clj .valAt :cljs -lookup)\n     this k nil))\n  (#?(:clj valAt :cljs -lookup) [this k nf]\n    (case k\n      :tag tag\n      :attrs attrs\n      :content content\n      nf))\n  #?(:cljs ICounted)\n  (#?(:clj count :cljs -count) [this] 3)\n  #?(:cljs ICollection)\n  (#?(:clj cons :cljs -conj) [this entry]\n    (conj (with-meta {:tag tag :attrs attrs :content content} meta)\n          entry))\n  #?(:cljs IAssociative)\n  (#?(:clj assoc :cljs -assoc) [this k v]\n    (case k\n      :tag (Element. v attrs content meta)\n      :attrs (Element. tag v content meta)\n      :content (Element. tag attrs v meta)\n      (with-meta {:tag tag :attrs attrs :content content k v} meta)))\n  #?(:cljs IMap)\n  (#?(:clj without :cljs -dissoc) [this k]\n    (with-meta\n      (case k\n        :tag {:attrs attrs :content content}\n        :attrs {:tag tag :content content}\n        :content {:tag tag :attrs attrs}\n        this)\n      meta))\n  #?@(:cljs\n      [ISeqable\n       (-seq [this]\n             (seq [[:tag tag] [:attrs attrs] [:content content]]))]\n      :clj\n      [(seq [this] (iterator-seq (.iterator this)))])\n\n  #?(:clj (empty [_] (Element. tag {} [] {})))\n  #?@(:cljs\n      [IEmptyableCollection\n       (-empty [_] (Element. tag {} [] {}))])\n\n  ;; j.u.Map and included interfaces\n  #?@(:clj\n      [Map\n       (entrySet [this] (set this))\n       (values [this] (vals this))\n       (keySet [this] (set (keys this)))\n       (get [this k] (.valAt this k))\n       (containsKey [this k] (case k (:tag :attrs :content) true false))\n       (containsValue [this v] (boolean (some #{v} (vals this))))\n       (isEmpty [this] false)\n       (size [this] 3)])\n\n  ;; Metadata interface\n\n  #?(:clj IObj :cljs IMeta)\n  (#?(:clj meta :cljs -meta) [this] meta)\n  #?(:cljs IWithMeta)\n  (#?(:clj withMeta :cljs -with-meta) [this next-meta]\n    (Element. tag attrs content next-meta))\n\n  ;; cljs printing is protocol-based\n\n  #?@\n  (:cljs\n   [IPrintWithWriter\n    (-pr-writer [this writer opts]\n                (-write writer \"#xml/element{:tag \")\n                (pr-writer tag writer opts)\n                (when-not (empty? attrs)\n                  (-write writer \", :attrs \")\n                  (pr-writer attrs writer opts))\n                (when-not (empty? content)\n                  (-write writer \", :content \")\n                  (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts content))\n                (-write writer \"}\"))]))\n\n;; clj printing is a multimethod\n\n#?\n(:clj\n (defmethod print-method Element [{:keys [tag attrs content]} ^Writer writer]\n   (.write writer \"#xml/element{:tag \")\n   (print-method tag writer)\n   (when-not (empty? attrs)\n     (.write writer \", :attrs \")\n     (print-method attrs writer))\n   (when-not (empty? content)\n     (.write writer \", :content [\")\n     (print-method (first content) writer)\n     (doseq [c (next content)]\n       (.write writer \" \")\n       (print-method c writer))\n     (.write writer \"]\"))\n   (.write writer \"}\")))\n\n(defrecord CData [content])\n(defrecord Comment [content])\n\n(defn element*\n  \"Create an xml element from a content collection and optional metadata\"\n  ([tag attrs content meta]\n   (Element. tag (or attrs {}) (remove nil? content) meta))\n  ([tag attrs content]\n   (Element. tag (or attrs {}) (remove nil? content) nil)))\n\n#?(:clj\n   ;; Compiler macro for inlining the two constructors\n   (alter-meta! #'element* assoc :inline\n                (fn\n                  ([tag attrs content meta]\n                   `(Element. ~tag (or ~attrs {}) (remove nil? ~content) ~meta))\n                  ([tag attrs content]\n                   `(Element. ~tag (or ~attrs {}) (remove nil? ~content) nil)))))\n\n(defn element\n  \"Create an xml Element from content varargs\"\n  ([tag] (element* tag nil nil))\n  ([tag attrs] (element* tag attrs nil))\n  ([tag attrs & content] (element* tag attrs content)))\n\n(defn cdata\n  \"Create a CData node\"\n  [content]\n  (CData. content))\n\n(defn xml-comment\n  \"Create a Comment node\"\n  [content]\n  (Comment. content))\n\n(defn map->Element [{:keys [tag attrs content] :as el}]\n  (element* tag attrs content (meta el)))\n\n(defn tagged-element [el]\n  (cond (map? el) (map->Element el)\n        ;; TODO support hiccup syntax\n        :else (throw (ex-info \"Unsupported element representation\"\n                              {:element el}))))\n\n(defn element? [el]\n  (and (map? el) (some? (:tag el))))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","clojure.data.xml.node/Element","clojure.data.xml.node/->Element","tag","attrs","content","meta","_","this","cljs.core/hash-unordered-coll","other","js/cljs.core.equiv_map","cljs.core/RecordIter","cljs.core/nil-iter","qname","clojure.data.xml.name/as-qname","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","p__30472","vec__30473","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","n","a","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/seq","k","nf","G__30479","cljs.core/Keyword","entry","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/with-meta","v","G__30494","G__30489","next-meta","writer","opts","cljs.core/pr-writer","cljs.core/empty?","cljs.core/pr-sequential-writer","this__4385__auto__","k__4386__auto__","this__4387__auto__","k30510","else__4388__auto__","G__30524","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__30538","vec__30539","k__4408__auto__","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__30509","cljs.core/-iterator","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__30548","coll__4382__auto__","this30511","other30512","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__30564","cljs.core/keyword-identical?","expr__30565","G__30567","G__30568","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","clojure.data.xml.node/CData","this__4428__auto__","cljs.core/List","writer__4429__auto__","G__30517","extmap__4424__auto__","G__30591","cljs.core/record?","clojure.data.xml.node/->CData","clojure.data.xml.node/map->CData","k30593","G__30603","p__30605","vec__30606","G__30592","fexpr__30630","this30594","other30595","pred__30635","expr__30636","G__30638","G__30639","clojure.data.xml.node/Comment","G__30596","G__30656","clojure.data.xml.node/->Comment","clojure.data.xml.node/map->Comment","var_args","G__30661","clojure.data.xml.node/element*","js/Error","or__4131__auto__","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","G__30686","clojure.data.xml.node/element","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq30683","G__30684","cljs.core/first","cljs.core/next","G__30685","self__4717__auto__","clojure.data.xml.node.element_STAR_.cljs$core$IFn$_invoke$arity$3","clojure.data.xml.node/cdata","clojure.data.xml.node/xml-comment","p__30703","map__30704","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.node/map->Element","el","clojure.data.xml.node.element_STAR_.cljs$core$IFn$_invoke$arity$4","cljs.core/meta","clojure.data.xml.node/tagged-element","cljs.core/map?","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.node/element?"]]],"~:cache-keys",["~#cmap",[["^15","clojure/data/xml/node.cljc"],[1551120970000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^S","^R","^Q"]]],["~:macro","^R"],[1559826623000],["^15","goog/math/math.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","~$goog.array","~$goog.asserts"]]],["^15","goog/array/array.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1H"]]],["^15","goog/debug/error.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/dom/nodetype.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/object/object.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^15","goog/math/long.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1H","~$goog.reflect"]]],["^15","goog/string/internal.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/functions/functions.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/structs/map.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^15","clojure/data/xml/js/name.cljs"],[1551120970000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^R","~$clojure.data.xml.protocols","~$clojure.string"]]],["^15","goog/asserts/asserts.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^15","goog/uri/uri.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1G","^1H","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^15","goog/base.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",[]]],["^15","goog/structs/structs.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1G","~$goog.object"]]],["^15","clojure/data/xml/protocols.cljc"],[1551120970000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^R"]]],["^15","clojure/string.cljs"],[1559826623000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^R","^1Q","~$goog.string.StringBuffer"]]],["^15","goog/string/string.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","~$goog.string.internal"]]],["^15","goog/reflect/reflect.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/string/stringbuffer.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","clojure/data/xml/name.cljc"],[1551120970000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^R","^1N","~$clojure.data.xml.js.name","^1M","^1X"]]],["^15","goog/iter/iter.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1G","^1H","~$goog.functions","~$goog.math"]]],["^15","cljs/core.cljs"],[1559826623000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["~$goog.math.Long","~$goog.math.Integer","^1Q","^1W","^1G","~$goog.Uri","^1X"]]],["^15","goog/math/integer.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S"]]],["^15","goog/uri/utils.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^J",[]],"^1E",["^S","^1G","^1H","^1Q"]]],["^1F","~$clojure.data.xml.impl"],[1551120970000]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Herwig Hochleitner","^7","Data types for xml nodes: Element, CData and Comment","^8","clojure/data/xml/node.cljc","^9",9,"^:",5,"^;",9,"^<",26],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^R","^S","^S"],"^T",["^J",["^U"]],"~:shadow/js-access-global",["^J",["Error"]],"^V",["^ ","^W","^Q"],"~:defs",["^ ","~$cdata",["^ ","~:protocol-inline",null,"^5",["^ ","^8","clojure/data/xml/node.cljc","^9",207,"^:",7,"^;",207,"^<",12,"~:arglists",["^Z",["~$quote",["^Z",[["~$content"]]]]],"^7","Create a CData node"],"^K","~$clojure.data.xml.node/cdata","^8","clojure/data/xml/node.cljc","^<",12,"~:method-params",["^Z",[["^2<"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^:",1,"~:variadic?",false,"^9",207,"~:ret-tag","~$clojure.data.xml.node/CData","^;",207,"~:max-fixed-arity",1,"~:fn-var",true,"^2:",["^Z",["^2;",["^Z",[["^2<"]]]]],"^7","Create a CData node"],"~$->CData",["^ ","^29",null,"^5",["^ ","^8","clojure/data/xml/node.cljc","^<",17,"^:",12,"~:internal-ctor",true,"~:factory","~:positional","^9",182,"^;",182,"^2:",["^Z",["^2;",["^Z",[["^2<"]]]]],"^7","Positional factory function for clojure.data.xml.node/CData."],"^K","~$clojure.data.xml.node/->CData","^8","clojure/data/xml/node.cljc","^<",17,"^2>",["^Z",[["^2<"]]],"^2?",null,"^2@",["^Z",[null,null]],"^:",1,"^2G",true,"^2A",false,"^2H","^2I","^9",182,"^2B","^2C","^;",182,"^2D",1,"^2E",true,"^2:",["^Z",["^2;",["^Z",[["^2<"]]]]],"^7","Positional factory function for clojure.data.xml.node/CData."],"~$element",["^ ","^29",null,"^5",["^ ","^8","clojure/data/xml/node.cljc","^<",14,"~:top-fn",["^ ","^2A",true,"~:fixed-arity",2,"^2D",2,"^2>",["^Z",[["~$tag"],["^2N","~$attrs"]]],"^2:",["^Z",[["^2N"],["^2N","^2O"],["^2N","^2O","~$&","^2<"]]],"^2@",["^Z",[null,null,null]]],"^:",7,"^9",201,"^;",201,"^2:",["^Z",["^2;",["^Z",[["^2N"],["^2N","^2O"],["^2N","^2O","~$&","^2<"]]]]],"^7","Create an xml Element from content varargs","~:jsdoc",["^Z",["@param {...*} var_args"]]],"^K","~$clojure.data.xml.node/element","^8","clojure/data/xml/node.cljc","^<",14,"^2L",["^ ","^2A",true,"^2M",2,"^2D",2,"^2>",["^Z",[["^2N"],["^2N","^2O"]]],"^2:",["^Z",[["^2N"],["^2N","^2O"],["^2N","^2O","~$&","^2<"]]],"^2@",["^Z",[null,null,null]]],"^2>",["^Z",[["^2N"],["^2N","^2O"]]],"^2?",null,"^2M",2,"^2@",["^Z",[null,null,null]],"^:",1,"^2A",true,"~:methods",[["^ ","^2M",1,"^2A",false,"~:tag","~$clojure.data.xml.node/Element"],["^ ","^2M",2,"^2A",false,"^2S","^2T"],["^ ","^2M",2,"^2A",true,"^2S","^2T"]],"^9",201,"^;",201,"^2D",2,"^2E",true,"^2:",["^Z",[["^2N"],["^2N","^2O"],["^2N","^2O","~$&","^2<"]]],"^7","Create an xml Element from content varargs","^2P",["^Z",["@param {...*} var_args"]]],"~$element?",["^ ","^29",null,"^5",["^ ","^8","clojure/data/xml/node.cljc","^9",226,"^:",7,"^;",226,"^<",15,"^2:",["^Z",["^2;",["^Z",[["~$el"]]]]]],"^K","~$clojure.data.xml.node/element?","^8","clojure/data/xml/node.cljc","^<",15,"^2>",["^Z",[["^2V"]]],"^2?",null,"^2@",["^Z",[null,null]],"^:",1,"^2A",false,"^9",226,"^2B","~$boolean","^;",226,"^2D",1,"^2E",true,"^2:",["^Z",["^2;",["^Z",[["^2V"]]]]]],"~$Comment",["^ ","~:num-fields",1,"~:protocols",["^J",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^K","~$clojure.data.xml.node/Comment","^8","clojure/data/xml/node.cljc","^<",19,"~:type",true,"^:",12,"^2G",true,"^9",183,"~:record",true,"^;",183,"^2S","~$function","~:skip-protocol-flag",["^J",["^30","^31","^32","^33","^34","^35","^36","^37","^38","^39","^3:","^3;","^3<","^3=","^3>"]]],"~$->Element",["^ ","^29",null,"^5",["^ ","^2[",["^J",["^32","^33","^34","~$cljs.core/Object","~$cljs.core/IEmptyableCollection","^35","^36","^37","^38","^39","^3:","^3;","^3<","^3=","^3>"]],"^8","clojure/data/xml/node.cljc","^<",17,"^:",10,"^2H","^2I","^9",42,"^;",42,"^2:",["^Z",["^2;",["^Z",[["^2N","^2O","^2<","~$meta"]]]]],"^3C",["^J",["^32","^33","^34","^3F","^35","^36","^37","^38","^39","^3:","^3;","^3<","^3=","^3>"]],"^7","Positional factory function for clojure.data.xml.node/Element."],"^2[",["^J",["^32","^33","^34","^3E","^3F","^35","^36","^37","^38","^39","^3:","^3;","^3<","^3=","^3>"]],"^K","~$clojure.data.xml.node/->Element","^8","clojure/data/xml/node.cljc","^<",17,"^2>",["^Z",[["^2N","^2O","^2<","^3G"]]],"^2?",null,"^2@",["^Z",[null,null]],"^:",1,"^2A",false,"^2H","^2I","^9",42,"^2B","^2T","^;",42,"^2D",4,"^2E",true,"^2:",["^Z",["^2;",["^Z",[["^2N","^2O","^2<","^3G"]]]]],"^3C",["^J",["^32","^33","^34","^3F","^35","^36","^37","^38","^39","^3:","^3;","^3<","^3=","^3>"]],"^7","Positional factory function for clojure.data.xml.node/Element."],"~$Element",["^ ","^2Z",4,"^2[",["^J",["^32","^33","^34","^3E","^3F","^35","^36","^37","^38","^39","^3:","^3;","^3<","^3=","^3>"]],"^K","^2T","^8","clojure/data/xml/node.cljc","^<",17,"^3@",true,"^:",10,"^9",42,"^3A",false,"^;",42,"^2S","^3B","^3C",["^J",["^32","^33","^34","^3F","^35","^36","^37","^38","^39","^3:","^3;","^3<","^3=","^3>"]]],"~$map->Element",["^ ","^29",null,"^5",["^ ","^8","clojure/data/xml/node.cljc","^9",217,"^:",7,"^;",217,"^<",19,"^2:",["^Z",["^2;",["^Z",[[["^ ","~:keys",["^2N","^2O","^2<"],"~:as","^2V"]]]]]]],"^K","~$clojure.data.xml.node/map->Element","^8","clojure/data/xml/node.cljc","^<",19,"^2>",["^Z",[["~$p__30703"]]],"^2?",null,"^2@",["^Z",[null,null]],"^:",1,"^2A",false,"^9",217,"^2B","^2T","^;",217,"^2D",1,"^2E",true,"^2:",["^Z",["^2;",["^Z",[[["^ ","^3K",["^2N","^2O","^2<"],"^3L","^2V"]]]]]]],"~$->Comment",["^ ","^29",null,"^5",["^ ","^8","clojure/data/xml/node.cljc","^<",19,"^:",12,"^2G",true,"^2H","^2I","^9",183,"^;",183,"^2:",["^Z",["^2;",["^Z",[["^2<"]]]]],"^7","Positional factory function for clojure.data.xml.node/Comment."],"^K","~$clojure.data.xml.node/->Comment","^8","clojure/data/xml/node.cljc","^<",19,"^2>",["^Z",[["^2<"]]],"^2?",null,"^2@",["^Z",[null,null]],"^:",1,"^2G",true,"^2A",false,"^2H","^2I","^9",183,"^2B","^3?","^;",183,"^2D",1,"^2E",true,"^2:",["^Z",["^2;",["^Z",[["^2<"]]]]],"^7","Positional factory function for clojure.data.xml.node/Comment."],"~$CData",["^ ","^2Z",1,"^2[",["^J",["^30","^31","^32","^33","^34","^35","^36","^37","^38","^39","^3:","^3;","^3<","^3=","^3>"]],"^K","^2C","^8","clojure/data/xml/node.cljc","^<",17,"^3@",true,"^:",12,"^2G",true,"^9",182,"^3A",true,"^;",182,"^2S","^3B","^3C",["^J",["^30","^31","^32","^33","^34","^35","^36","^37","^38","^39","^3:","^3;","^3<","^3=","^3>"]]],"~$tagged-element",["^ ","^29",null,"^5",["^ ","^8","clojure/data/xml/node.cljc","^9",220,"^:",7,"^;",220,"^<",21,"^2:",["^Z",["^2;",["^Z",[["^2V"]]]]]],"^K","~$clojure.data.xml.node/tagged-element","^8","clojure/data/xml/node.cljc","^<",21,"^2>",["^Z",[["^2V"]]],"^2?",null,"^2@",["^Z",[null,null]],"^:",1,"^2A",false,"^9",220,"^2B","^2T","^;",220,"^2D",1,"^2E",true,"^2:",["^Z",["^2;",["^Z",[["^2V"]]]]]],"~$map->CData",["^ ","^29",null,"^5",["^ ","^8","clojure/data/xml/node.cljc","^<",17,"^:",12,"^2G",true,"^2H","~:map","^9",182,"^;",182,"^2:",["^Z",["^2;",["^Z",[["~$G__30517"]]]]],"^7","Factory function for clojure.data.xml.node/CData, taking a map of keywords to field values."],"^K","~$clojure.data.xml.node/map->CData","^8","clojure/data/xml/node.cljc","^<",17,"^2>",["^Z",[["^3V"]]],"^2?",null,"^2@",["^Z",[null,null]],"^:",1,"^2G",true,"^2A",false,"^2H","^3U","^9",182,"^2B","^2C","^;",182,"^2D",1,"^2E",true,"^2:",["^Z",["^2;",["^Z",[["^3V"]]]]],"^7","Factory function for clojure.data.xml.node/CData, taking a map of keywords to field values."],"~$element*",["^ ","^29",null,"^5",["^ ","^8","clojure/data/xml/node.cljc","^<",15,"^2L",["^ ","^2A",false,"^2M",4,"^2D",4,"^2>",["^Z",[["^2N","^2O","^2<","^3G"],["^2N","^2O","^2<"]]],"^2:",["^Z",[["^2N","^2O","^2<","^3G"],["^2N","^2O","^2<"]]],"^2@",["^Z",[null,null]]],"^:",7,"^9",185,"^;",185,"^2:",["^Z",["^2;",["^Z",[["^2N","^2O","^2<","^3G"],["^2N","^2O","^2<"]]]]],"^7","Create an xml element from a content collection and optional metadata","^2P",["^Z",["@param {...*} var_args"]]],"^K","~$clojure.data.xml.node/element*","^8","clojure/data/xml/node.cljc","^<",15,"^2L",["^ ","^2A",false,"^2M",4,"^2D",4,"^2>",["^Z",[["^2N","^2O","^2<","^3G"],["^2N","^2O","^2<"]]],"^2:",["^Z",[["^2N","^2O","^2<","^3G"],["^2N","^2O","^2<"]]],"^2@",["^Z",[null,null]]],"^2>",["^Z",[["^2N","^2O","^2<","^3G"],["^2N","^2O","^2<"]]],"^2?",null,"^2M",4,"^2@",["^Z",[null,null]],"^:",1,"^2A",false,"^2R",[["^ ","^2M",4,"^2A",false,"^2S","^2T"],["^ ","^2M",3,"^2A",false,"^2S","^2T"]],"^9",185,"^;",185,"^2D",4,"^2E",true,"^2:",["^Z",[["^2N","^2O","^2<","^3G"],["^2N","^2O","^2<"]]],"^7","Create an xml element from a content collection and optional metadata","^2P",["^Z",["@param {...*} var_args"]]],"~$map->Comment",["^ ","^29",null,"^5",["^ ","^8","clojure/data/xml/node.cljc","^<",19,"^:",12,"^2G",true,"^2H","^3U","^9",183,"^;",183,"^2:",["^Z",["^2;",["^Z",[["~$G__30596"]]]]],"^7","Factory function for clojure.data.xml.node/Comment, taking a map of keywords to field values."],"^K","~$clojure.data.xml.node/map->Comment","^8","clojure/data/xml/node.cljc","^<",19,"^2>",["^Z",[["^3["]]],"^2?",null,"^2@",["^Z",[null,null]],"^:",1,"^2G",true,"^2A",false,"^2H","^3U","^9",183,"^2B","^3?","^;",183,"^2D",1,"^2E",true,"^2:",["^Z",["^2;",["^Z",[["^3["]]]]],"^7","Factory function for clojure.data.xml.node/Comment, taking a map of keywords to field values."],"~$xml-comment",["^ ","^29",null,"^5",["^ ","^8","clojure/data/xml/node.cljc","^9",212,"^:",7,"^;",212,"^<",18,"^2:",["^Z",["^2;",["^Z",[["^2<"]]]]],"^7","Create a Comment node"],"^K","~$clojure.data.xml.node/xml-comment","^8","clojure/data/xml/node.cljc","^<",18,"^2>",["^Z",[["^2<"]]],"^2?",null,"^2@",["^Z",[null,null]],"^:",1,"^2A",false,"^9",212,"^2B","^3?","^;",212,"^2D",1,"^2E",true,"^2:",["^Z",["^2;",["^Z",[["^2<"]]]]],"^7","Create a Comment node"]],"^X",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^J",["^2N","~:element","~:else","~:content","^3G","^2<","~:attrs","^2S","^2O"]],"~:order",["^2S","^47","^46","^2N","^2O","^2<","^3G","^45","^44"]],"^11",["^ ","^U",["^J",[]]],"^12",["^ "],"^13",["^S","^R","^Q"]],"^N","^L","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1A",[["^4;","~:static-fns"],true,["^4;","~:elide-asserts"],true,["^4;","~:optimize-constants"],null,["^4;","^18"],null,["^4;","~:external-config"],null,["^4;","~:tooling-config"],null,["^4;","~:emit-constants"],null,["^4;","~:load-tests"],false,["^4;","~:infer-externs"],true,["^4;","^1:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^4;","~:fn-invoke-direct"],null,["^4;","~:source-map"],"/dev/null"]]]