["^ ","~:output",["^ ","~:js","goog.provide('clojure.data.xml.name');\nclojure.data.xml.name.parse_qname = clojure.data.xml.js.name.parse_qname;\n\ncljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.name.parse_qname;},new cljs.core.Symbol(\"clojure.data.xml.name\",\"parse-qname\",\"clojure.data.xml.name/parse-qname\",-631519353,null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"clojure/data/xml/name.cljc\",new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Symbol(null,\"clojure.data.xml.name\",\"clojure.data.xml.name\",1709632289,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),null,new cljs.core.Keyword(null,\"line\",\"line\",212345235),23,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Symbol(null,\"parse-qname\",\"parse-qname\",-503996965,null),new cljs.core.Keyword(null,\"test\",\"test\",577538877),(cljs.core.truth_(clojure.data.xml.name.parse_qname)?clojure.data.xml.name.parse_qname.cljs$lang$test:null),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.js.name.parse_qname;},new cljs.core.Symbol(\"clojure.data.xml.js.name\",\"parse-qname\",\"clojure.data.xml.js.name/parse-qname\",786468634,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"clojure.data.xml.js.name\",\"clojure.data.xml.js.name\",-527694126,null),new cljs.core.Symbol(null,\"parse-qname\",\"parse-qname\",-503996965,null),\"clojure/data/xml/js/name.cljs\",17,1,5,5,cljs.core.List.EMPTY,null,(cljs.core.truth_(clojure.data.xml.js.name.parse_qname)?clojure.data.xml.js.name.parse_qname.cljs$lang$test:null)]))),new cljs.core.Keyword(null,\"wrapped-by\",\"wrapped-by\",1051044074),new cljs.core.Var(function(){return clojure.data.xml.name.parse_qname;},new cljs.core.Symbol(\"clojure.data.xml.name\",\"parse-qname\",\"clojure.data.xml.name/parse-qname\",-631519353,null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"clojure/data/xml/name.cljc\",new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Symbol(null,\"clojure.data.xml.name\",\"clojure.data.xml.name\",1709632289,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),null,new cljs.core.Keyword(null,\"line\",\"line\",212345235),23,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Symbol(null,\"parse-qname\",\"parse-qname\",-503996965,null),new cljs.core.Keyword(null,\"test\",\"test\",577538877),(cljs.core.truth_(clojure.data.xml.name.parse_qname)?clojure.data.xml.name.parse_qname.cljs$lang$test:null),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.List.EMPTY], null)))));\n\nclojure.data.xml.name.encode_uri = clojure.data.xml.js.name.encode_uri;\n\ncljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.name.encode_uri;},new cljs.core.Symbol(\"clojure.data.xml.name\",\"encode-uri\",\"clojure.data.xml.name/encode-uri\",-307671031,null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"clojure/data/xml/name.cljc\",new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Symbol(null,\"clojure.data.xml.name\",\"clojure.data.xml.name\",1709632289,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),null,new cljs.core.Keyword(null,\"line\",\"line\",212345235),23,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Symbol(null,\"encode-uri\",\"encode-uri\",-1221099955,null),new cljs.core.Keyword(null,\"test\",\"test\",577538877),(cljs.core.truth_(clojure.data.xml.name.encode_uri)?clojure.data.xml.name.encode_uri.cljs$lang$test:null),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.js.name.encode_uri;},new cljs.core.Symbol(\"clojure.data.xml.js.name\",\"encode-uri\",\"clojure.data.xml.js.name/encode-uri\",1914989452,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"clojure.data.xml.js.name\",\"clojure.data.xml.js.name\",-527694126,null),new cljs.core.Symbol(null,\"encode-uri\",\"encode-uri\",-1221099955,null),\"clojure/data/xml/js/name.cljs\",17,1,11,11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"uri\",\"uri\",865819680,null)], null)),null,(cljs.core.truth_(clojure.data.xml.js.name.encode_uri)?clojure.data.xml.js.name.encode_uri.cljs$lang$test:null)]))),new cljs.core.Keyword(null,\"wrapped-by\",\"wrapped-by\",1051044074),new cljs.core.Var(function(){return clojure.data.xml.name.encode_uri;},new cljs.core.Symbol(\"clojure.data.xml.name\",\"encode-uri\",\"clojure.data.xml.name/encode-uri\",-307671031,null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"clojure/data/xml/name.cljc\",new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Symbol(null,\"clojure.data.xml.name\",\"clojure.data.xml.name\",1709632289,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),null,new cljs.core.Keyword(null,\"line\",\"line\",212345235),23,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Symbol(null,\"encode-uri\",\"encode-uri\",-1221099955,null),new cljs.core.Keyword(null,\"test\",\"test\",577538877),(cljs.core.truth_(clojure.data.xml.name.encode_uri)?clojure.data.xml.name.encode_uri.cljs$lang$test:null),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.List.EMPTY], null)))));\n\nclojure.data.xml.name.decode_uri = clojure.data.xml.js.name.decode_uri;\n\ncljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.name.decode_uri;},new cljs.core.Symbol(\"clojure.data.xml.name\",\"decode-uri\",\"clojure.data.xml.name/decode-uri\",-1422284784,null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"clojure/data/xml/name.cljc\",new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Symbol(null,\"clojure.data.xml.name\",\"clojure.data.xml.name\",1709632289,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),null,new cljs.core.Keyword(null,\"line\",\"line\",212345235),23,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Symbol(null,\"decode-uri\",\"decode-uri\",1921734364,null),new cljs.core.Keyword(null,\"test\",\"test\",577538877),(cljs.core.truth_(clojure.data.xml.name.decode_uri)?clojure.data.xml.name.decode_uri.cljs$lang$test:null),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.js.name.decode_uri;},new cljs.core.Symbol(\"clojure.data.xml.js.name\",\"decode-uri\",\"clojure.data.xml.js.name/decode-uri\",1069441439,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"clojure.data.xml.js.name\",\"clojure.data.xml.js.name\",-527694126,null),new cljs.core.Symbol(null,\"decode-uri\",\"decode-uri\",1921734364,null),\"clojure/data/xml/js/name.cljs\",17,1,8,8,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"ns\",\"ns\",2082130287,null)], null)),null,(cljs.core.truth_(clojure.data.xml.js.name.decode_uri)?clojure.data.xml.js.name.decode_uri.cljs$lang$test:null)]))),new cljs.core.Keyword(null,\"wrapped-by\",\"wrapped-by\",1051044074),new cljs.core.Var(function(){return clojure.data.xml.name.decode_uri;},new cljs.core.Symbol(\"clojure.data.xml.name\",\"decode-uri\",\"clojure.data.xml.name/decode-uri\",-1422284784,null),new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"clojure/data/xml/name.cljc\",new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Symbol(null,\"clojure.data.xml.name\",\"clojure.data.xml.name\",1709632289,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),null,new cljs.core.Keyword(null,\"line\",\"line\",212345235),23,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Symbol(null,\"decode-uri\",\"decode-uri\",1921734364,null),new cljs.core.Keyword(null,\"test\",\"test\",577538877),(cljs.core.truth_(clojure.data.xml.name.decode_uri)?clojure.data.xml.name.decode_uri.cljs$lang$test:null),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.List.EMPTY], null)))));\nclojure.data.xml.name.uri_symbol = (function clojure$data$xml$name$uri_symbol(uri){\nreturn cljs.core.symbol.cljs$core$IFn$_invoke$arity$1((function (){var G__30356 = [\"xmlns.\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(uri)].join('');\nreturn (clojure.data.xml.name.encode_uri.cljs$core$IFn$_invoke$arity$1 ? clojure.data.xml.name.encode_uri.cljs$core$IFn$_invoke$arity$1(G__30356) : clojure.data.xml.name.encode_uri.call(null,G__30356));\n})());\n});\nclojure.data.xml.name.symbol_uri = (function clojure$data$xml$name$symbol_uri(ss){\nvar du = (function (){var G__30359 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(ss);\nreturn (clojure.data.xml.name.decode_uri.cljs$core$IFn$_invoke$arity$1 ? clojure.data.xml.name.decode_uri.cljs$core$IFn$_invoke$arity$1(G__30359) : clojure.data.xml.name.decode_uri.call(null,G__30359));\n})();\nif(cljs.core.truth_(du.startsWith(\"xmlns.\"))){\nreturn cljs.core.subs.cljs$core$IFn$_invoke$arity$2(du,(6));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Uri symbol not valid\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305),ss], null));\n}\n});\n/**\n * Get the namespace uri for this qname\n */\nclojure.data.xml.name.qname_uri = (function clojure$data$xml$name$qname_uri(v){\nreturn clojure.data.xml.protocols.qname_uri(v);\n});\n/**\n * Get the name for this qname\n */\nclojure.data.xml.name.qname_local = (function clojure$data$xml$name$qname_local(v){\nreturn clojure.data.xml.protocols.qname_local(v);\n});\n/**\n * @param {...*} var_args\n */\nclojure.data.xml.name.qname = (function clojure$data$xml$name$qname(var_args){\nvar G__30361 = arguments.length;\nswitch (G__30361) {\ncase 1:\nreturn clojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$1 = (function (local){\nreturn clojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$2(\"\",local);\n});\n\nclojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$2 = (function (uri,local){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(((clojure.string.blank_QMARK_(uri))?null:(function (){var G__30364 = [\"xmlns.\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(uri)].join('');\nreturn (clojure.data.xml.name.encode_uri.cljs$core$IFn$_invoke$arity$1 ? clojure.data.xml.name.encode_uri.cljs$core$IFn$_invoke$arity$1(G__30364) : clojure.data.xml.name.encode_uri.call(null,G__30364));\n})()),local);\n});\n\nclojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$3 = (function (uri,local,prefix){\nreturn clojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$2(uri,local);\n});\n\nclojure.data.xml.name.qname.cljs$lang$maxFixedArity = 3;\n\nclojure.data.xml.name.namespaced_QMARK_ = (function clojure$data$xml$name$namespaced_QMARK_(qn){\nreturn (!(clojure.string.blank_QMARK_(clojure.data.xml.name.qname_uri(qn))));\n});\nclojure.data.xml.name.clj_ns_name = (function clojure$data$xml$name$clj_ns_name(ns){\nif((ns instanceof cljs.core.Namespace)){\nreturn cljs.core.ns_name(ns);\n} else {\nif((ns instanceof cljs.core.Keyword)){\nreturn cljs.core.name(ns);\n} else {\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);\n\n}\n}\n});\nclojure.data.xml.name.xmlns_uri = \"http://www.w3.org/2000/xmlns/\";\nclojure.data.xml.name.xml_uri = \"http://www.w3.org/XML/1998/namespace\";\ncljs.core.Keyword.prototype.clojure$data$xml$protocols$AsQName$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs.core.Keyword.prototype.clojure$data$xml$protocols$AsQName$qname_local$arity$1 = (function (kw){\nvar kw__$1 = this;\nreturn cljs.core.name(kw__$1);\n});\n\ncljs.core.Keyword.prototype.clojure$data$xml$protocols$AsQName$qname_uri$arity$1 = (function (kw){\nvar kw__$1 = this;\nvar temp__5718__auto__ = cljs.core.namespace(kw__$1);\nif(cljs.core.truth_(temp__5718__auto__)){\nvar ns = temp__5718__auto__;\nif(cljs.core.truth_(ns.startsWith(\"xmlns.\"))){\nvar G__30377 = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(ns,(6));\nreturn (clojure.data.xml.name.decode_uri.cljs$core$IFn$_invoke$arity$1 ? clojure.data.xml.name.decode_uri.cljs$core$IFn$_invoke$arity$1(G__30377) : clojure.data.xml.name.decode_uri.call(null,G__30377));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"xmlns\",ns)){\nreturn clojure.data.xml.name.xmlns_uri;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Keyword ns is not an xmlns. Needs to be in the form :xmlns.<encoded-uri>/<local>\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"kw\",\"kw\",1158308175),kw__$1], null));\n}\n}\n} else {\nreturn \"\";\n}\n});\nclojure.data.xml.name.as_qname = (function clojure$data$xml$name$as_qname(n){\nreturn clojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$2(clojure.data.xml.name.qname_uri(n),clojure.data.xml.name.qname_local(n));\n});\n/**\n * Dummy file name for :require'ing xmlns uri\n */\nclojure.data.xml.name.uri_file = (function clojure$data$xml$name$uri_file(uri){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.replace(cljs.core.name(clojure.data.xml.name.uri_symbol(uri)),\".\",\"/\")),\".cljc\"].join('');\n});\n/**\n * Shell command to create a dummy file for xmlns. Execute from a source root.\n */\nclojure.data.xml.name.print_uri_file_command_BANG_ = (function clojure$data$xml$name$print_uri_file_command_BANG_(uri){\nreturn cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"echo \\\"(ns\",[cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.data.xml.name.uri_symbol(uri)),\")\\\" >\"].join(''),clojure.data.xml.name.uri_file(uri)], 0));\n});\n/**\n * Is this qname an xmlns declaration?\n */\nclojure.data.xml.name.xmlns_attr_QMARK_ = (function clojure$data$xml$name$xmlns_attr_QMARK_(qn){\nvar uri = clojure.data.xml.name.qname_uri(qn);\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(clojure.data.xml.name.xmlns_uri,uri)) || (((clojure.string.blank_QMARK_(uri)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"xmlns\",clojure.data.xml.name.qname_local(qn))))));\n});\nclojure.data.xml.name.xmlns_attr_prefix = (function clojure$data$xml$name$xmlns_attr_prefix(qn){\nvar uri = clojure.data.xml.name.qname_uri(qn);\nif(clojure.string.blank_QMARK_(uri)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"xmlns\",clojure.data.xml.name.qname_local(qn))){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Not an xmlns-attr name\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"qname\",\"qname\",-1983612179),qn], null));\n}\n\nreturn \"\";\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(clojure.data.xml.name.xmlns_uri,uri)){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Not an xmlns-attr name\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"qname\",\"qname\",-1983612179),qn], null));\n}\n\nreturn clojure.data.xml.name.qname_local(qn);\n}\n});\nclojure.data.xml.name.legal_xmlns_binding_BANG_ = (function clojure$data$xml$name$legal_xmlns_binding_BANG_(prefix,uri){\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"xml\",prefix),cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(clojure.data.xml.name.xml_uri,uri))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"The xmlns binding for prefix `xml` is fixed to `\",clojure.data.xml.name.xml_uri,\"`\"].join(''),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"attempted-mapping\",\"attempted-mapping\",1862354839),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),prefix,new cljs.core.Keyword(null,\"uri\",\"uri\",-774711847),uri], null)], null));\n} else {\n}\n\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"xmlns\",prefix),cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(clojure.data.xml.name.xmlns_uri,uri))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"The xmlns binding for prefix `xmlns` is fixed to `\",clojure.data.xml.name.xmlns_uri,\"`\"].join(''),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"attempted-mapping\",\"attempted-mapping\",1862354839),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),prefix,new cljs.core.Keyword(null,\"uri\",\"uri\",-774711847),uri], null)], null));\n} else {\nreturn null;\n}\n});\n/**\n * Call cont with two args: attributes and xmlns attributes\n */\nclojure.data.xml.name.separate_xmlns = (function clojure$data$xml$name$separate_xmlns(attrs,cont){\nvar attrs_STAR_ = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);\nvar xmlns_STAR_ = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);\nvar G__30403 = cljs.core.keys(attrs);\nvar vec__30404 = G__30403;\nvar qn = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30404,(0),null);\nvar attrs_SINGLEQUOTE_ = vec__30404;\nvar attrs_STAR___$1 = attrs_STAR_;\nvar xmlns_STAR___$1 = xmlns_STAR_;\nvar G__30403__$1 = G__30403;\nwhile(true){\nvar attrs_STAR___$2 = attrs_STAR___$1;\nvar xmlns_STAR___$2 = xmlns_STAR___$1;\nvar vec__30415 = G__30403__$1;\nvar qn__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30415,(0),null);\nvar attrs_SINGLEQUOTE___$1 = vec__30415;\nif(cljs.core.seq(attrs_SINGLEQUOTE___$1)){\nvar val = cljs.core.get.cljs$core$IFn$_invoke$arity$2(attrs,qn__$1);\nif(clojure.data.xml.name.xmlns_attr_QMARK_(qn__$1)){\nvar prefix = clojure.data.xml.name.xmlns_attr_prefix(qn__$1);\nclojure.data.xml.name.legal_xmlns_binding_BANG_(prefix,val);\n\nvar G__30502 = attrs_STAR___$2;\nvar G__30503 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(xmlns_STAR___$2,prefix,val);\nvar G__30504 = cljs.core.next(attrs_SINGLEQUOTE___$1);\nattrs_STAR___$1 = G__30502;\nxmlns_STAR___$1 = G__30503;\nG__30403__$1 = G__30504;\ncontinue;\n} else {\nvar G__30505 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(attrs_STAR___$2,qn__$1,val);\nvar G__30506 = xmlns_STAR___$2;\nvar G__30507 = cljs.core.next(attrs_SINGLEQUOTE___$1);\nattrs_STAR___$1 = G__30505;\nxmlns_STAR___$1 = G__30506;\nG__30403__$1 = G__30507;\ncontinue;\n}\n} else {\nvar G__30422 = cljs.core.persistent_BANG_(attrs_STAR___$2);\nvar G__30423 = cljs.core.persistent_BANG_(xmlns_STAR___$2);\nreturn (cont.cljs$core$IFn$_invoke$arity$2 ? cont.cljs$core$IFn$_invoke$arity$2(G__30422,G__30423) : cont.call(null,G__30422,G__30423));\n}\nbreak;\n}\n});\nclojure.data.xml.name.prefix_alphabet = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.map.cljs$core$IFn$_invoke$arity$2(String.fromCharCode,cljs.core.range.cljs$core$IFn$_invoke$arity$2(\"a\".charCodeAt((0)),(\"z\".charCodeAt((0)) + (1)))));\n/**\n * Generates an xml prefix.\n * Zero-arity can only be called, when *gen-prefix-counter* is bound and will increment it.\n * @param {...*} var_args\n */\nclojure.data.xml.name.gen_prefix = (function clojure$data$xml$name$gen_prefix(var_args){\nvar G__30430 = arguments.length;\nswitch (G__30430) {\ncase 0:\nreturn clojure.data.xml.name.gen_prefix.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.data.xml.name.gen_prefix.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.data.xml.name.gen_prefix.cljs$core$IFn$_invoke$arity$0 = (function (){\nvar c = clojure.data.xml.name._STAR_gen_prefix_counter_STAR_;\nif((void 0 === c)){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Not bound: *gen-prefix-counter*\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"v\",\"v\",21465059),new cljs.core.Var(function(){return clojure.data.xml.name._STAR_gen_prefix_counter_STAR_;},new cljs.core.Symbol(\"clojure.data.xml.name\",\"*gen-prefix-counter*\",\"clojure.data.xml.name/*gen-prefix-counter*\",499226926,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"dynamic\",\"dynamic\",704819571),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"clojure.data.xml.name\",\"clojure.data.xml.name\",1709632289,null),new cljs.core.Symbol(null,\"*gen-prefix-counter*\",\"*gen-prefix-counter*\",1689494762,null),\"clojure/data/xml/name.cljc\",23,1,true,188,190,cljs.core.List.EMPTY,\"Thread local counter for a single document\",(cljs.core.truth_(clojure.data.xml.name._STAR_gen_prefix_counter_STAR_)?clojure.data.xml.name._STAR_gen_prefix_counter_STAR_.cljs$lang$test:null)]))], null));\n} else {\n}\n\nclojure.data.xml.name._STAR_gen_prefix_counter_STAR_ = (c + (1));\n\nreturn clojure.data.xml.name.gen_prefix.cljs$core$IFn$_invoke$arity$1(c);\n});\n\nclojure.data.xml.name.gen_prefix.cljs$core$IFn$_invoke$arity$1 = (function (n){\nvar cnt = clojure.data.xml.name.prefix_alphabet.length;\nvar sb = (new goog.string.StringBuffer());\nvar n_STAR_ = n;\nwhile(true){\nvar ch = cljs.core.mod(n_STAR_,cnt);\nvar n_STAR__STAR_ = cljs.core.quot(n_STAR_,cnt);\nsb.append((clojure.data.xml.name.prefix_alphabet[ch]));\n\nif((n_STAR__STAR_ > (0))){\nvar G__30526 = n_STAR__STAR_;\nn_STAR_ = G__30526;\ncontinue;\n} else {\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);\n}\nbreak;\n}\n});\n\nclojure.data.xml.name.gen_prefix.cljs$lang$maxFixedArity = 1;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/data/xml/name.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",26],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",["^ ","~$export-api","~$clojure.data.xml.impl"],"~:excludes",["~#set",[]],"~:name","~$clojure.data.xml.name","~:op","~:ns","~:imports",["^ ","~$StringBuffer","~$goog.string.StringBuffer"],"~:requires",["^ ","~$cljs.core","^S","~$goog","^T","^Q","^Q","~$protocols","~$clojure.data.xml.protocols","^P","^Q","~$clojure.data.xml.js.name","^W","~$jsn","^W","~$str","~$clojure.string","^Z","^Z","^V","^V"],"~:seen",["^J",["~:require","~:require-macros"]],"~:uses",["^ ","~$AsQName","^V"],"^11",["^ ","^H","^H","^S","^S"],"~:form",["~#list",["~$ns","^L",["^15",["^11",["^H","~:refer",["^G"]]]],["^15",["^10",["^Z","~:as","^Y"],["^W","^18","^X"],["^V","^18","^U","^17",["^13"]]]],["^15",["~:import",["^15",["~$goog.string","^P"]]]]]],"~:flags",["^ ","^11",["^J",[]],"^10",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^Z","^W","^V","^Q"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","clojure/data/xml/name.cljc"],"~:compiled-at",1560578450929,"~:resource-name","clojure/data/xml/name.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.data.xml.name\n  #?@(:clj [(:require [clojure.string :as str]\n                      [clojure.data.xml.jvm.name :as jvm]\n                      (clojure.data.xml\n                       [impl :refer [export-api]]\n                       [protocols :as protocols :refer [AsQName]]))\n            (:import (clojure.lang Namespace Keyword))]\n      :cljs [(:require-macros\n              [clojure.data.xml.impl :refer [export-api]])\n             (:require [clojure.string :as str]\n                       [clojure.data.xml.js.name :as jsn]\n                       [clojure.data.xml.protocols :as protocols :refer [AsQName]])\n             (:import (goog.string StringBuffer))]))\n\n(export-api\n #?@(:clj  [jvm/parse-qname jvm/encode-uri jvm/decode-uri]\n     :cljs [jsn/parse-qname jsn/encode-uri jsn/decode-uri]))\n\n;; protocol functions can be redefined by extend-*, so we wrap\n;; protocols/qname-uri protocols/qname-local within regular fns\n\n(defn uri-symbol [uri]\n  (symbol (encode-uri (str \"xmlns.\" uri))))\n\n(defn symbol-uri [ss]\n  (let [du (decode-uri (str ss))]\n    (if (.startsWith du \"xmlns.\")\n      (subs du 6)\n      (throw (ex-info \"Uri symbol not valid\" {:sym ss})))))\n\n(defn qname-uri\n  \"Get the namespace uri for this qname\"\n  [v]\n  (protocols/qname-uri v))\n\n(defn qname-local\n  \"Get the name for this qname\"\n  [v]\n  (protocols/qname-local v))\n\n(defn qname\n  ([local] (qname \"\" local))\n  ([uri local] (keyword (when-not (str/blank? uri)\n                          (encode-uri (str \"xmlns.\" uri)))\n                        local))\n  ([uri local prefix] (qname uri local)))\n\n;; The empty string shall be equal to nil for xml names\n(defn namespaced? [qn]\n  (not (str/blank? (qname-uri qn))))\n\n(defn- clj-ns-name [ns]\n  (cond (instance? Namespace ns) (ns-name ns)\n        (keyword? ns) (name ns)\n        :else (str ns)))\n\n;; xmlns attributes get special treatment. they go into metadata, don't contribute to equality\n(def xmlns-uri \"http://www.w3.org/2000/xmlns/\")\n;; TODO find out if xml prefixed names need any special treatment too\n(def xml-uri \"http://www.w3.org/XML/1998/namespace\")\n\n(extend-protocol AsQName\n  Keyword\n  (qname-local [kw] (name kw))\n  (qname-uri [kw]\n    (if-let [ns (namespace kw)]\n      (if (.startsWith ns \"xmlns.\")\n        (decode-uri (subs ns 6))\n        (if (= \"xmlns\" ns)\n          xmlns-uri\n          (throw (ex-info \"Keyword ns is not an xmlns. Needs to be in the form :xmlns.<encoded-uri>/<local>\"\n                          {:kw kw}))))\n      \"\")))\n\n(defn as-qname [n]\n  (qname (qname-uri n) (qname-local n)))\n\n(defn uri-file\n  \"Dummy file name for :require'ing xmlns uri\"\n  [uri]\n  (str (str/replace (name (uri-symbol uri))\n                    \".\" \"/\")\n       \".cljc\"))\n\n(defn print-uri-file-command!\n  \"Shell command to create a dummy file for xmlns. Execute from a source root.\"\n  [uri]\n  (println  \"echo \\\"(ns\" (str (uri-symbol uri) \")\\\" >\") (uri-file uri)))\n\n#?(:clj\n   (defn alias-uri\n     \"Define a Clojure namespace aliases for xmlns uris.\n\n  This sets up the current namespace for reading qnames denoted with\n  Clojure's ::alias/keywords reader feature.\n  \n\n  ## Example\n  (alias-uri :D \\\"DAV:\\\")\n                           ; similar in effect to\n  ;; (require '[xmlns.DAV%3A :as D])\n                           ; but required namespace is auto-created\n                           ; henceforth, shorthand keywords can be used\n  {:tag ::D/propfind}\n                           ; ::D/propfind will be expanded to :xmlns.DAV%3A/propfind\n                           ; in the current namespace by the reader\n\n  ## Clojurescript support\n  Currently, namespaces can't be auto-created in Clojurescript.\n  Dummy files for aliased uris have to exist. Have a look at `uri-file` and `print-uri-file-command!` to create those.\"\n     {:arglists '([& {:as alias-nss}])}\n     [& ans]\n     (loop [[a n & rst :as ans] ans]\n       (when (seq ans)\n         (assert (<= (count ans)) (pr-str ans))\n         (let [xn (uri-symbol n)\n               al (symbol (clj-ns-name a))]\n           (create-ns xn)\n           (alias al xn)\n           (recur rst))))))\n\n(defn xmlns-attr?\n  \"Is this qname an xmlns declaration?\"\n  [qn]\n  (let [uri (qname-uri qn)]\n    (or (= xmlns-uri uri)\n        (and (str/blank? uri)\n             (= \"xmlns\" (qname-local qn))))))\n\n(defn xmlns-attr-prefix [qn]\n  (let [uri (qname-uri qn)]\n    (if (str/blank? uri)\n      (do (when-not (= \"xmlns\" (qname-local qn))\n            (throw (ex-info \"Not an xmlns-attr name\" {:qname qn})))\n          \"\")\n      (do (when-not (= xmlns-uri uri)\n            (throw (ex-info \"Not an xmlns-attr name\" {:qname qn})))\n          (qname-local qn)))))\n\n(defn legal-xmlns-binding! [prefix uri]\n  (when (not= (= \"xml\" prefix)\n              (= xml-uri uri))\n    (throw (ex-info (str \"The xmlns binding for prefix `xml` is fixed to `\" xml-uri \"`\")\n                    {:attempted-mapping {:prefix prefix :uri uri}})))\n  (when (not= (= \"xmlns\" prefix)\n              (= xmlns-uri uri))\n    (throw (ex-info (str \"The xmlns binding for prefix `xmlns` is fixed to `\" xmlns-uri \"`\")\n                    {:attempted-mapping {:prefix prefix :uri uri}}))))\n\n(defn separate-xmlns\n  \"Call cont with two args: attributes and xmlns attributes\"\n  [attrs cont]\n  (loop [attrs* (transient {})\n         xmlns* (transient {})\n         [qn :as attrs'] (keys attrs)]\n    (if (seq attrs')\n      (let [val (get attrs qn)]\n        (if (xmlns-attr? qn)\n          (let [prefix (xmlns-attr-prefix qn)]\n            (legal-xmlns-binding! prefix val)\n            (recur attrs*\n                   (assoc! xmlns* prefix val)\n                   (next attrs')))\n          (recur (assoc! attrs* qn val)\n                 xmlns*\n                 (next attrs'))))\n      (cont (persistent! attrs*) (persistent! xmlns*)))))\n\n;(set! *warn-on-reflection* true)\n\n#?(:clj (def ^:private ^\"[C\" prefix-alphabet\n          (char-array\n           (map char\n                (range (int \\a) (inc (int \\z))))))\n   :cljs (def ^:private prefix-alphabet\n           (apply str (map js/String.fromCharCode\n                           (range (.charCodeAt \"a\" 0)\n                                  (inc (.charCodeAt \"z\" 0)))))))\n\n(def ^{:dynamic true\n       :doc \"Thread local counter for a single document\"}\n  *gen-prefix-counter*)\n\n(defn gen-prefix\n  \"Generates an xml prefix.\n   Zero-arity can only be called, when *gen-prefix-counter* is bound and will increment it.\"\n  ([] (let [c *gen-prefix-counter*]\n        #?(:cljs (when (undefined? c)\n                   (throw (ex-info \"Not bound: *gen-prefix-counter*\" {:v #'*gen-prefix-counter*}))))\n        (set! *gen-prefix-counter* (inc c))\n        (gen-prefix c)))\n  ([n]\n   (let [cnt (alength prefix-alphabet)\n         sb #?(:clj (StringBuilder.) :cljs (StringBuffer.))]\n     (loop [n* n]\n       (let [ch (mod n* cnt)\n             n** (quot n* cnt)]\n         (.append sb (aget prefix-alphabet ch))\n         (if (pos? n**)\n           (recur n**)\n           (str sb)))))))\n\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["clojure.data.xml.name/parse-qname","cljs.core/alter-meta!","cljs.core/constantly","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/meta","clojure.data.xml.js.name/parse-qname","clojure.data.xml.name/encode-uri","clojure.data.xml.js.name/encode-uri","clojure.data.xml.name/decode-uri","clojure.data.xml.js.name/decode-uri","clojure.data.xml.name/uri-symbol","uri","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","G__30356","clojure.data.xml.name/symbol-uri","ss","du","G__30359","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.name/qname-uri","v","clojure.data.xml.protocols/qname-uri","clojure.data.xml.name/qname-local","clojure.data.xml.protocols/qname-local","var_args","G__30361","clojure.data.xml.name/qname","js/Error","local","clojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","clojure.string/blank?","G__30364","prefix","clojure.data.xml.name/namespaced?","qn","clojure.data.xml.name/clj-ns-name","ns","cljs.core/Namespace","cljs.core/ns-name","cljs.core/Keyword","cljs.core/name","clojure.data.xml.name/xmlns-uri","clojure.data.xml.name/xml-uri","cljs.core/PROTOCOL_SENTINEL","kw","temp__5718__auto__","cljs.core/namespace","G__30377","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.name/as-qname","n","clojure.data.xml.name/uri-file","clojure.string/replace","clojure.data.xml.name/print-uri-file-command!","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","clojure.data.xml.name/xmlns-attr?","clojure.data.xml.name/xmlns-attr-prefix","clojure.data.xml.name/legal-xmlns-binding!","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.name/separate-xmlns","attrs","cont","G__30403","vec__30404","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__30415","attrs*","cljs.core/transient","xmlns*","attrs'","cljs.core/keys","cljs.core/seq","val","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/next","G__30422","G__30423","cljs.core/persistent!","clojure.data.xml.name/prefix-alphabet","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.map.cljs$core$IFn$_invoke$arity$2","js/String.fromCharCode","cljs.core.range.cljs$core$IFn$_invoke$arity$2","G__30430","clojure.data.xml.name/gen-prefix","c","clojure.data.xml.name/*gen-prefix-counter*","clojure.data.xml.name.gen_prefix.cljs$core$IFn$_invoke$arity$1","cnt","sb","js/goog.string.StringBuffer","n*","ch","cljs.core/mod","n**","cljs.core/quot"]]],"~:cache-keys",["~#cmap",[["~:macro","^S"],[1559826623000],["^1?","goog/math/math.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^T","~$goog.array","~$goog.asserts"]]],["^1?","goog/array/array.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T","^1R"]]],["^1?","goog/debug/error.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T"]]],["^1?","goog/dom/nodetype.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T"]]],["^1?","goog/object/object.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^1?","goog/math/long.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T","^1R","~$goog.reflect"]]],["^1?","goog/string/internal.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T"]]],["^1?","goog/functions/functions.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T"]]],["^1?","goog/structs/map.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1?","clojure/data/xml/js/name.cljs"],[1551120970000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T","^S","^V","^Z"]]],["^1?","goog/asserts/asserts.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1?","goog/uri/uri.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T","^1Q","^1R","^1:","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1?","goog/base.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",[]]],["^1?","goog/structs/structs.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T","^1Q","~$goog.object"]]],["^1?","clojure/data/xml/protocols.cljc"],[1551120970000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T","^S"]]],["^1?","clojure/string.cljs"],[1559826623000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T","^S","^1:","^Q"]]],["^1?","goog/string/string.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T","~$goog.string.internal"]]],["^1?","goog/reflect/reflect.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T"]]],["^1?","goog/string/stringbuffer.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T"]]],["^1?","clojure/data/xml/name.cljc"],[1551120970000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T","^S","^Z","^W","^V","^Q"]]],["^1?","goog/iter/iter.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T","^1Q","^1R","~$goog.functions","~$goog.math"]]],["^1?","cljs/core.cljs"],[1559826623000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["~$goog.math.Long","~$goog.math.Integer","^1:","^22","^1Q","~$goog.Uri","^Q"]]],["^1?","goog/math/integer.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T"]]],["^1?","goog/uri/utils.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^J",[]],"^1P",["^T","^1Q","^1R","^1:"]]],["^1L","^H"],[1551120970000]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",9,"^8",5,"^9",9,"^:",26],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",["^ ","^G","^H"],"^I",["^J",[]],"~:shadow/js-access-properties",["^J",["fromCharCode"]],"^K","^L","^O",["^ ","^P","^Q"],"^R",["^ ","^S","^S","^T","^T","^Q","^Q","^U","^V","^P","^Q","^W","^W","^X","^W","^Y","^Z","^Z","^Z","^V","^V"],"^[",["^J",["^10","^11"]],"~:shadow/js-access-global",["^J",["String","Error"]],"^12",["^ ","^13","^V"],"~:defs",["^ ","~$separate-xmlns",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",158,"^8",7,"^9",158,"^:",21,"~:arglists",["^15",["~$quote",["^15",[["~$attrs","~$cont"]]]]],"~:doc","Call cont with two args: attributes and xmlns attributes"],"^K","~$clojure.data.xml.name/separate-xmlns","^6","clojure/data/xml/name.cljc","^:",21,"~:method-params",["^15",[["^2A","^2B"]]],"~:protocol-impl",null,"~:arglists-meta",["^15",[null,null]],"^8",1,"~:variadic?",false,"^7",158,"~:ret-tag","~$any","^9",158,"~:max-fixed-arity",2,"~:fn-var",true,"^2?",["^15",["^2@",["^15",[["^2A","^2B"]]]]],"^2C","Call cont with two args: attributes and xmlns attributes"],"~$uri-file",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",86,"^8",7,"^9",86,"^:",15,"^2?",["^15",["^2@",["^15",[["~$uri"]]]]],"^2C","Dummy file name for :require'ing xmlns uri"],"^K","~$clojure.data.xml.name/uri-file","^6","clojure/data/xml/name.cljc","^:",15,"^2E",["^15",[["^2N"]]],"^2F",null,"^2G",["^15",[null,null]],"^8",1,"^2H",false,"^7",86,"^2I","~$string","^9",86,"^2K",1,"^2L",true,"^2?",["^15",["^2@",["^15",[["^2N"]]]]],"^2C","Dummy file name for :require'ing xmlns uri"],"~$xmlns-attr?",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",130,"^8",7,"^9",130,"^:",18,"^2?",["^15",["^2@",["^15",[["~$qn"]]]]],"^2C","Is this qname an xmlns declaration?"],"^K","~$clojure.data.xml.name/xmlns-attr?","^6","clojure/data/xml/name.cljc","^:",18,"^2E",["^15",[["^2R"]]],"^2F",null,"^2G",["^15",[null,null]],"^8",1,"^2H",false,"^7",130,"^2I","~$boolean","^9",130,"^2K",1,"^2L",true,"^2?",["^15",["^2@",["^15",[["^2R"]]]]],"^2C","Is this qname an xmlns declaration?"],"~$prefix-alphabet",["^ ","^5",["^ ","^6","clojure/data/xml/name.cljc","^7",183,"^8",25,"^9",183,"^:",40,"~:private",true],"^2V",true,"^K","~$clojure.data.xml.name/prefix-alphabet","^6","clojure/data/xml/name.cljc","^:",40,"^8",10,"^7",183,"^9",183,"~:tag","^2J"],"~$as-qname",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",83,"^8",7,"^9",83,"^:",15,"^2?",["^15",["^2@",["^15",[["~$n"]]]]]],"^K","~$clojure.data.xml.name/as-qname","^6","clojure/data/xml/name.cljc","^:",15,"^2E",["^15",[["~$n"]]],"^2F",null,"^2G",["^15",[null,null]],"^8",1,"^2H",false,"^7",83,"^2I","~$cljs.core/Keyword","^9",83,"^2K",1,"^2L",true,"^2?",["^15",["^2@",["^15",[["~$n"]]]]]],"~$*gen-prefix-counter*",["^ ","^5",["^ ","^6","clojure/data/xml/name.cljc","^7",190,"^8",3,"^9",190,"^:",23,"~:dynamic",true,"^2C","Thread local counter for a single document"],"^K","~$clojure.data.xml.name/*gen-prefix-counter*","^6","clojure/data/xml/name.cljc","^:",23,"^8",1,"^31",true,"^7",188,"^9",190,"^2C","Thread local counter for a single document"],"~$legal-xmlns-binding!",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",148,"^8",7,"^9",148,"^:",27,"^2?",["^15",["^2@",["^15",[["~$prefix","^2N"]]]]]],"^K","~$clojure.data.xml.name/legal-xmlns-binding!","^6","clojure/data/xml/name.cljc","^:",27,"^2E",["^15",[["^34","^2N"]]],"^2F",null,"^2G",["^15",[null,null]],"^8",1,"^2H",false,"^7",148,"^2I","~$clj-nil","^9",148,"^2K",2,"^2L",true,"^2?",["^15",["^2@",["^15",[["^34","^2N"]]]]]],"~$encode-uri",["^ ","^K","~$clojure.data.xml.name/encode-uri","^5",["^ ","^6",null],"^6","clojure/data/xml/name.cljc","^7",23,"^8",1],"~$uri-symbol",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",30,"^8",7,"^9",30,"^:",17,"^2?",["^15",["^2@",["^15",[["^2N"]]]]]],"^K","~$clojure.data.xml.name/uri-symbol","^6","clojure/data/xml/name.cljc","^:",17,"^2E",["^15",[["^2N"]]],"^2F",null,"^2G",["^15",[null,null]],"^8",1,"^2H",false,"^7",30,"^2I",["^J",["^2J","~$cljs.core/Symbol"]],"^9",30,"^2K",1,"^2L",true,"^2?",["^15",["^2@",["^15",[["^2N"]]]]]],"~$print-uri-file-command!",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",93,"^8",7,"^9",93,"^:",30,"^2?",["^15",["^2@",["^15",[["^2N"]]]]],"^2C","Shell command to create a dummy file for xmlns. Execute from a source root."],"^K","~$clojure.data.xml.name/print-uri-file-command!","^6","clojure/data/xml/name.cljc","^:",30,"^2E",["^15",[["^2N"]]],"^2F",null,"^2G",["^15",[null,null]],"^8",1,"^2H",false,"^7",93,"^2I","^36","^9",93,"^2K",1,"^2L",true,"^2?",["^15",["^2@",["^15",[["^2N"]]]]],"^2C","Shell command to create a dummy file for xmlns. Execute from a source root."],"~$qname",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",49,"^8",7,"^9",49,"^:",12,"^2?",["^15",["^2@",["^15",[["~$local"],["^2N","^3?"],["^2N","^3?","^34"]]]]],"~:jsdoc",["^15",["@param {...*} var_args"]],"~:top-fn",["^ ","^2H",false,"~:fixed-arity",3,"^2K",3,"^2E",["^15",[["^3?"],["^2N","^3?"],["^2N","^3?","^34"]]],"^2?",["^15",[["^3?"],["^2N","^3?"],["^2N","^3?","^34"]]],"^2G",["^15",[null,null,null]]]],"^K","~$clojure.data.xml.name/qname","^6","clojure/data/xml/name.cljc","^:",12,"^3A",["^ ","^2H",false,"^3B",3,"^2K",3,"^2E",["^15",[["^3?"],["^2N","^3?"],["^2N","^3?","^34"]]],"^2?",["^15",[["^3?"],["^2N","^3?"],["^2N","^3?","^34"]]],"^2G",["^15",[null,null,null]]],"^2E",["^15",[["^3?"],["^2N","^3?"],["^2N","^3?","^34"]]],"^2F",null,"^3B",3,"^2G",["^15",[null,null,null]],"^8",1,"^2H",false,"~:methods",[["^ ","^3B",1,"^2H",false,"^2X","^2J"],["^ ","^3B",2,"^2H",false,"^2X","^2["],["^ ","^3B",3,"^2H",false,"^2X","^2["]],"^7",49,"^9",49,"^2K",3,"^2L",true,"^2?",["^15",[["^3?"],["^2N","^3?"],["^2N","^3?","^34"]]],"^3@",["^15",["@param {...*} var_args"]]],"~$xmlns-attr-prefix",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",138,"^8",7,"^9",138,"^:",24,"^2?",["^15",["^2@",["^15",[["^2R"]]]]]],"^K","~$clojure.data.xml.name/xmlns-attr-prefix","^6","clojure/data/xml/name.cljc","^:",24,"^2E",["^15",[["^2R"]]],"^2F",null,"^2G",["^15",[null,null]],"^8",1,"^2H",false,"^7",138,"^2I",["^J",["^2J","^2P"]],"^9",138,"^2K",1,"^2L",true,"^2?",["^15",["^2@",["^15",[["^2R"]]]]]],"~$xml-uri",["^ ","^K","~$clojure.data.xml.name/xml-uri","^6","clojure/data/xml/name.cljc","^7",68,"^8",1,"^9",68,"^:",13,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",68,"^8",6,"^9",68,"^:",13],"^2X","^2P"],"~$xmlns-uri",["^ ","^K","~$clojure.data.xml.name/xmlns-uri","^6","clojure/data/xml/name.cljc","^7",66,"^8",1,"^9",66,"^:",15,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",66,"^8",6,"^9",66,"^:",15],"^2X","^2P"],"~$clj-ns-name",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",60,"^8",8,"^9",60,"^:",19,"^2V",true,"^2?",["^15",["^2@",["^15",[["^16"]]]]]],"^2V",true,"^K","~$clojure.data.xml.name/clj-ns-name","^6","clojure/data/xml/name.cljc","^:",19,"^2E",["^15",[["^16"]]],"^2F",null,"^2G",["^15",[null,null]],"^8",1,"^2H",false,"^7",60,"^2I",["^J",["^2J","^2P"]],"^9",60,"^2K",1,"^2L",true,"^2?",["^15",["^2@",["^15",[["^16"]]]]]],"~$gen-prefix",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^:",17,"^3A",["^ ","^2H",false,"^3B",1,"^2K",1,"^2E",["^15",[[],["~$n"]]],"^2?",["^15",[[],["~$n"]]],"^2G",["^15",[null,null]]],"^8",7,"^7",192,"^9",192,"^2?",["^15",["^2@",["^15",[[],["~$n"]]]]],"^2C","Generates an xml prefix.\n   Zero-arity can only be called, when *gen-prefix-counter* is bound and will increment it.","^3@",["^15",["@param {...*} var_args"]]],"^K","~$clojure.data.xml.name/gen-prefix","^6","clojure/data/xml/name.cljc","^:",17,"^3A",["^ ","^2H",false,"^3B",1,"^2K",1,"^2E",["^15",[[],["~$n"]]],"^2?",["^15",[[],["~$n"]]],"^2G",["^15",[null,null]]],"^2E",["^15",[[],["~$n"]]],"^2F",null,"^3B",1,"^2G",["^15",[null,null]],"^8",1,"^2H",false,"^3D",[["^ ","^3B",0,"^2H",false,"^2X","^2J"],["^ ","^3B",1,"^2H",false,"^2X","^2P"]],"^7",192,"^9",192,"^2K",1,"^2L",true,"^2?",["^15",[[],["~$n"]]],"^2C","Generates an xml prefix.\n   Zero-arity can only be called, when *gen-prefix-counter* is bound and will increment it.","^3@",["^15",["@param {...*} var_args"]]],"~$namespaced?",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",57,"^8",7,"^9",57,"^:",18,"^2?",["^15",["^2@",["^15",[["^2R"]]]]]],"^K","~$clojure.data.xml.name/namespaced?","^6","clojure/data/xml/name.cljc","^:",18,"^2E",["^15",[["^2R"]]],"^2F",null,"^2G",["^15",[null,null]],"^8",1,"^2H",false,"^7",57,"^2I","^2T","^9",57,"^2K",1,"^2L",true,"^2?",["^15",["^2@",["^15",[["^2R"]]]]]],"~$parse-qname",["^ ","^K","~$clojure.data.xml.name/parse-qname","^5",["^ ","^6",null],"^6","clojure/data/xml/name.cljc","^7",23,"^8",1,"^2X","~$function"],"~$qname-uri",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",39,"^8",7,"^9",39,"^:",16,"^2?",["^15",["^2@",["^15",[["~$v"]]]]],"^2C","Get the namespace uri for this qname"],"^K","~$clojure.data.xml.name/qname-uri","^6","clojure/data/xml/name.cljc","^:",16,"^2E",["^15",[["~$v"]]],"^2F",null,"^2G",["^15",[null,null]],"^8",1,"^2H",false,"^7",39,"^2I","^2J","^9",39,"^2K",1,"^2L",true,"^2?",["^15",["^2@",["^15",[["~$v"]]]]],"^2C","Get the namespace uri for this qname"],"~$qname-local",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",44,"^8",7,"^9",44,"^:",18,"^2?",["^15",["^2@",["^15",[["~$v"]]]]],"^2C","Get the name for this qname"],"^K","~$clojure.data.xml.name/qname-local","^6","clojure/data/xml/name.cljc","^:",18,"^2E",["^15",[["~$v"]]],"^2F",null,"^2G",["^15",[null,null]],"^8",1,"^2H",false,"^7",44,"^2I","^2J","^9",44,"^2K",1,"^2L",true,"^2?",["^15",["^2@",["^15",[["~$v"]]]]],"^2C","Get the name for this qname"],"~$decode-uri",["^ ","^K","~$clojure.data.xml.name/decode-uri","^5",["^ ","^6",null],"^6","clojure/data/xml/name.cljc","^7",23,"^8",1],"~$symbol-uri",["^ ","^2>",null,"^5",["^ ","^6","clojure/data/xml/name.cljc","^7",33,"^8",7,"^9",33,"^:",17,"^2?",["^15",["^2@",["^15",[["~$ss"]]]]]],"^K","~$clojure.data.xml.name/symbol-uri","^6","clojure/data/xml/name.cljc","^:",17,"^2E",["^15",[["^3["]]],"^2F",null,"^2G",["^15",[null,null]],"^8",1,"^2H",false,"^7",33,"^2I","^2J","^9",33,"^2K",1,"^2L",true,"^2?",["^15",["^2@",["^15",[["^3["]]]]]]],"^11",["^ ","^H","^H","^S","^S"],"~:cljs.analyzer/constants",["^ ","^[",["^J",["^2N","^L","~:v","~:else","^3R","^N","^38","^K","^30","~:wrapped-by","^6","^:","~$clojure.data.xml.js.name/encode-uri","^37","~:qname","^32","~:kw","^16","~:sym","~:prefix","^8","^3Y","^W","^31","^7","^9","~:attempted-mapping","~:uri","~$clojure.data.xml.js.name/parse-qname","^2?","^3Q","^2C","^3X","~:test","~$clojure.data.xml.js.name/decode-uri"]],"~:order",["^3R","^6","^N","^2C","^7","^8","^K","^4<","^2?","^L","^3Q","^4;","^:","^9","^W","^43","^38","^37","^44","^2N","^3Y","^3X","^4=","^16","^47","^42","^46","^45","^49","^48","^4:","~:v","^32","^31","^30"]],"^1;",["^ ","^11",["^J",[]],"^10",["^J",[]]],"^1<",["^ "],"^1=",["^T","^S","^Z","^W","^V","^Q"]],"^N","^L","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1K",[["^4A","~:static-fns"],true,["^4A","~:elide-asserts"],true,["^4A","~:optimize-constants"],null,["^4A","^1B"],null,["^4A","~:external-config"],null,["^4A","~:tooling-config"],null,["^4A","~:emit-constants"],null,["^4A","~:load-tests"],false,["^4A","~:infer-externs"],true,["^4A","^1D"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^4A","~:fn-invoke-direct"],null,["^4A","~:source-map"],"/dev/null"]]]