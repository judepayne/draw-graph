["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fbjs/lib/invariant.js"],"~:js","shadow$provide.module$node_modules$fbjs$lib$invariant=function(global,require,module,exports){require(\"module$node_modules$process$browser\");\"use strict\";var validateFormat=function(format){};validateFormat=function(format){if(void 0===format)throw Error(\"invariant requires an error message argument\");};module.exports=function(condition,format,a,b,c,d,e,f){validateFormat(format);if(!condition){if(void 0===format)condition=Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");\nelse{var args=[a,b,c,d,e,f],argIndex=0;condition=Error(format.replace(/%s/g,function(){return args[argIndex++]}));condition.name=\"Invariant Violation\"}condition.framesToPop=1;throw condition;}}}","~:source","shadow$provide[\"module$node_modules$fbjs$lib$invariant\"] = function(global,require,module,exports) {\nvar process = require('process');\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$process$browser","~$shadow.js"]],"~:properties",["^5",["framesToPop","name"]],"~:compiled-at",1560634480716,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fbjs$lib$invariant.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACrFF,OAAA,CAAQ,qCAAR,CASd,aAaA,KAAIG,eAAiBA,QAAuB,CAACC,MAAD,CAAS,EAGnDD,eAAA,CAAiBA,QAAuB,CAACC,MAAD,CAAS,CAC/C,GAAeC,IAAAA,EAAf,GAAID,MAAJ,CACE,KAAUE,MAAJ,CAAU,8CAAV,CAAN,CAF6C,CA4BnDL,OAAAC,QAAA,CArBAK,QAAkB,CAACC,SAAD,CAAYJ,MAAZ,CAAoBK,CAApB,CAAuBC,CAAvB,CAA0BC,CAA1B,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAmCC,CAAnC,CAAsC,CACtDX,cAAA,CAAeC,MAAf,CAEA,IAAI,CAACI,SAAL,CAAgB,CAEd,GAAeH,IAAAA,EAAf,GAAID,MAAJ,CACEW,SAAA,CAAYT,KAAJ,CAAU,+HAAV,CADV;IAEO,CACL,IAAIU,KAAO,CAACP,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAaC,CAAb,CAAgBC,CAAhB,CAAX,CACIG,SAAW,CACfF,UAAA,CAAYT,KAAJ,CAAUF,MAAAc,QAAA,CAAe,KAAf,CAAsB,QAAS,EAAG,CAClD,MAAOF,KAAA,CAAKC,QAAA,EAAL,CAD2C,CAAlC,CAAV,CAGRF,UAAAI,KAAA,CAAa,qBANR,CASPJ,SAAAK,YAAA,CAAoB,CACpB,MAAML,UAAN,CAdc,CAHsC,CAjC2C;\",\n\"sources\":[\"node_modules/fbjs/lib/invariant.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fbjs$lib$invariant\\\"] = function(global,require,module,exports) {\\nvar process = require('process');\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n */\\n\\n'use strict';\\n\\n/**\\n * Use invariant() to assert state which your program assumes to be true.\\n *\\n * Provide sprintf-style format (only %s is supported) and arguments\\n * to provide information about what broke and what you were\\n * expecting.\\n *\\n * The invariant message will be stripped in production, but the invariant\\n * will remain to ensure logic does not differ in production.\\n */\\n\\nvar validateFormat = function validateFormat(format) {};\\n\\nif (process.env.NODE_ENV !== 'production') {\\n  validateFormat = function validateFormat(format) {\\n    if (format === undefined) {\\n      throw new Error('invariant requires an error message argument');\\n    }\\n  };\\n}\\n\\nfunction invariant(condition, format, a, b, c, d, e, f) {\\n  validateFormat(format);\\n\\n  if (!condition) {\\n    var error;\\n    if (format === undefined) {\\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\\n    } else {\\n      var args = [a, b, c, d, e, f];\\n      var argIndex = 0;\\n      error = new Error(format.replace(/%s/g, function () {\\n        return args[argIndex++];\\n      }));\\n      error.name = 'Invariant Violation';\\n    }\\n\\n    error.framesToPop = 1; // we don't care about invariant's own frame\\n    throw error;\\n  }\\n}\\n\\nmodule.exports = invariant;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"validateFormat\",\"format\",\"undefined\",\"Error\",\"invariant\",\"condition\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"error\",\"args\",\"argIndex\",\"replace\",\"name\",\"framesToPop\"]\n}\n"]