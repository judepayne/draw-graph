["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/svg-pan-zoom/src/svg-pan-zoom.js"],"~:js","shadow$provide.module$node_modules$svg_pan_zoom$src$svg_pan_zoom=function(global,require,module,exports){var Wheel=require(\"module$node_modules$svg_pan_zoom$src$uniwheel\"),ControlIcons=require(\"module$node_modules$svg_pan_zoom$src$control_icons\"),Utils=require(\"module$node_modules$svg_pan_zoom$src$utilities\"),SvgUtils=require(\"module$node_modules$svg_pan_zoom$src$svg_utilities\"),ShadowViewport=require(\"module$node_modules$svg_pan_zoom$src$shadow_viewport\"),SvgPanZoom=function(svg,options){this.init(svg,\noptions)},optionsDefaults={viewportSelector:\".svg-pan-zoom_viewport\",panEnabled:!0,controlIconsEnabled:!1,zoomEnabled:!0,dblClickZoomEnabled:!0,mouseWheelZoomEnabled:!0,preventMouseEventsDefault:!0,zoomScaleSensitivity:.1,minZoom:.5,maxZoom:10,fit:!0,contain:!1,center:!0,refreshRate:\"auto\",beforeZoom:null,onZoom:null,beforePan:null,onPan:null,customEventsHandler:null,eventsListenerElement:null,onUpdatedCTM:null},passiveListenerOption={passive:!0};SvgPanZoom.prototype.init=function(svg,options){var that=\nthis;this.svg=svg;this.defs=svg.querySelector(\"defs\");SvgUtils.setupSvgAttributes(this.svg);this.options=Utils.extend(Utils.extend({},optionsDefaults),options);this.state=\"none\";svg=SvgUtils.getBoundingClientRectNormalized(svg);this.width=svg.width;this.height=svg.height;this.viewport=ShadowViewport(SvgUtils.getOrCreateViewport(this.svg,this.options.viewportSelector),{svg:this.svg,width:this.width,height:this.height,fit:this.options.fit,contain:this.options.contain,center:this.options.center,refreshRate:this.options.refreshRate,\nbeforeZoom:function(oldScale,newScale){if(that.viewport&&that.options.beforeZoom)return that.options.beforeZoom(oldScale,newScale)},onZoom:function(scale){if(that.viewport&&that.options.onZoom)return that.options.onZoom(scale)},beforePan:function(oldPoint,newPoint){if(that.viewport&&that.options.beforePan)return that.options.beforePan(oldPoint,newPoint)},onPan:function(point){if(that.viewport&&that.options.onPan)return that.options.onPan(point)},onUpdatedCTM:function(ctm){if(that.viewport&&that.options.onUpdatedCTM)return that.options.onUpdatedCTM(ctm)}});\nsvg=this.getPublicInstance();svg.setBeforeZoom(this.options.beforeZoom);svg.setOnZoom(this.options.onZoom);svg.setBeforePan(this.options.beforePan);svg.setOnPan(this.options.onPan);svg.setOnUpdatedCTM(this.options.onUpdatedCTM);this.options.controlIconsEnabled&&ControlIcons.enable(this);this.lastMouseWheelEventTime=Date.now();this.setupHandlers()};SvgPanZoom.prototype.setupHandlers=function(){var that=this,prevEvt=null;this.eventListeners={mousedown:function(evt){var result=that.handleMouseDown(evt,\nprevEvt);prevEvt=evt;return result},touchstart:function(evt){var result=that.handleMouseDown(evt,prevEvt);prevEvt=evt;return result},mouseup:function(evt){return that.handleMouseUp(evt)},touchend:function(evt){return that.handleMouseUp(evt)},mousemove:function(evt){return that.handleMouseMove(evt)},touchmove:function(evt){return that.handleMouseMove(evt)},mouseleave:function(evt){return that.handleMouseUp(evt)},touchleave:function(evt){return that.handleMouseUp(evt)},touchcancel:function(evt){return that.handleMouseUp(evt)}};\nif(null!=this.options.customEventsHandler){this.options.customEventsHandler.init({svgElement:this.svg,eventsListenerElement:this.options.eventsListenerElement,instance:this.getPublicInstance()});var haltEventListeners=this.options.customEventsHandler.haltEventListeners;if(haltEventListeners&&haltEventListeners.length)for(var i=haltEventListeners.length-1;0<=i;i--)this.eventListeners.hasOwnProperty(haltEventListeners[i])&&delete this.eventListeners[haltEventListeners[i]]}for(var event in this.eventListeners)(this.options.eventsListenerElement||\nthis.svg).addEventListener(event,this.eventListeners[event],this.options.preventMouseEventsDefault?!1:passiveListenerOption);this.options.mouseWheelZoomEnabled&&(this.options.mouseWheelZoomEnabled=!1,this.enableMouseWheelZoom())};SvgPanZoom.prototype.enableMouseWheelZoom=function(){if(!this.options.mouseWheelZoomEnabled){var that=this;this.wheelListener=function(evt){return that.handleMouseWheel(evt)};Wheel.on(this.options.eventsListenerElement||this.svg,this.wheelListener,!this.options.preventMouseEventsDefault);\nthis.options.mouseWheelZoomEnabled=!0}};SvgPanZoom.prototype.disableMouseWheelZoom=function(){this.options.mouseWheelZoomEnabled&&(Wheel.off(this.options.eventsListenerElement||this.svg,this.wheelListener,!this.options.preventMouseEventsDefault),this.options.mouseWheelZoomEnabled=!1)};SvgPanZoom.prototype.handleMouseWheel=function(evt){if(this.options.zoomEnabled&&\"none\"===this.state){this.options.preventMouseEventsDefault&&(evt.preventDefault?evt.preventDefault():evt.returnValue=!1);var delta=evt.deltaY||\n1,timeDelta=Date.now()-this.lastMouseWheelEventTime;timeDelta=3+Math.max(0,30-timeDelta);this.lastMouseWheelEventTime=Date.now();\"deltaMode\"in evt&&0===evt.deltaMode&&evt.wheelDelta&&(delta=0===evt.deltaY?0:Math.abs(evt.wheelDelta)/evt.deltaY);delta=-.3<delta&&.3>delta?delta:(0<delta?1:-1)*Math.log(Math.abs(delta)+10)/timeDelta;timeDelta=this.svg.getScreenCTM().inverse();evt=SvgUtils.getEventPoint(evt,this.svg).matrixTransform(timeDelta);this.zoomAtPoint(Math.pow(1+this.options.zoomScaleSensitivity,\n-1*delta),evt)}};SvgPanZoom.prototype.zoomAtPoint=function(zoomScale,point,zoomAbsolute){var originalState=this.viewport.getOriginalState();zoomAbsolute?(zoomScale=Math.max(this.options.minZoom*originalState.zoom,Math.min(this.options.maxZoom*originalState.zoom,zoomScale)),zoomScale/=this.getZoom()):this.getZoom()*zoomScale<this.options.minZoom*originalState.zoom?zoomScale=this.options.minZoom*originalState.zoom/this.getZoom():this.getZoom()*zoomScale>this.options.maxZoom*originalState.zoom&&(zoomScale=\nthis.options.maxZoom*originalState.zoom/this.getZoom());zoomAbsolute=this.viewport.getCTM();point=point.matrixTransform(zoomAbsolute.inverse());zoomScale=this.svg.createSVGMatrix().translate(point.x,point.y).scale(zoomScale).translate(-point.x,-point.y);zoomScale=zoomAbsolute.multiply(zoomScale);zoomScale.a!==zoomAbsolute.a&&this.viewport.setCTM(zoomScale)};SvgPanZoom.prototype.zoom=function(scale,absolute){this.zoomAtPoint(scale,SvgUtils.getSvgCenterPoint(this.svg,this.width,this.height),absolute)};\nSvgPanZoom.prototype.publicZoom=function(scale,absolute){absolute&&(scale=this.computeFromRelativeZoom(scale));this.zoom(scale,absolute)};SvgPanZoom.prototype.publicZoomAtPoint=function(scale,point,absolute){absolute&&(scale=this.computeFromRelativeZoom(scale));if(\"SVGPoint\"!==Utils.getType(point))if(\"x\"in point&&\"y\"in point)point=SvgUtils.createSVGPoint(this.svg,point.x,point.y);else throw Error(\"Given point is invalid\");this.zoomAtPoint(scale,point,absolute)};SvgPanZoom.prototype.getZoom=function(){return this.viewport.getZoom()};\nSvgPanZoom.prototype.getRelativeZoom=function(){return this.viewport.getRelativeZoom()};SvgPanZoom.prototype.computeFromRelativeZoom=function(zoom){return zoom*this.viewport.getOriginalState().zoom};SvgPanZoom.prototype.resetZoom=function(){var originalState=this.viewport.getOriginalState();this.zoom(originalState.zoom,!0)};SvgPanZoom.prototype.resetPan=function(){this.pan(this.viewport.getOriginalState())};SvgPanZoom.prototype.reset=function(){this.resetZoom();this.resetPan()};SvgPanZoom.prototype.handleDblClick=\nfunction(evt){this.options.preventMouseEventsDefault&&(evt.preventDefault?evt.preventDefault():evt.returnValue=!1);if(this.options.controlIconsEnabled&&-1<(evt.target.getAttribute(\"class\")||\"\").indexOf(\"svg-pan-zoom-control\"))return!1;var zoomFactor=evt.shiftKey?1/(2*(1+this.options.zoomScaleSensitivity)):2*(1+this.options.zoomScaleSensitivity);evt=SvgUtils.getEventPoint(evt,this.svg).matrixTransform(this.svg.getScreenCTM().inverse());this.zoomAtPoint(zoomFactor,evt)};SvgPanZoom.prototype.handleMouseDown=\nfunction(evt,prevEvt){this.options.preventMouseEventsDefault&&(evt.preventDefault?evt.preventDefault():evt.returnValue=!1);Utils.mouseAndTouchNormalize(evt,this.svg);this.options.dblClickZoomEnabled&&Utils.isDblClick(evt,prevEvt)?this.handleDblClick(evt):(this.state=\"pan\",this.firstEventCTM=this.viewport.getCTM(),this.stateOrigin=SvgUtils.getEventPoint(evt,this.svg).matrixTransform(this.firstEventCTM.inverse()))};SvgPanZoom.prototype.handleMouseMove=function(evt){this.options.preventMouseEventsDefault&&\n(evt.preventDefault?evt.preventDefault():evt.returnValue=!1);\"pan\"===this.state&&this.options.panEnabled&&(evt=SvgUtils.getEventPoint(evt,this.svg).matrixTransform(this.firstEventCTM.inverse()),evt=this.firstEventCTM.translate(evt.x-this.stateOrigin.x,evt.y-this.stateOrigin.y),this.viewport.setCTM(evt))};SvgPanZoom.prototype.handleMouseUp=function(evt){this.options.preventMouseEventsDefault&&(evt.preventDefault?evt.preventDefault():evt.returnValue=!1);\"pan\"===this.state&&(this.state=\"none\")};SvgPanZoom.prototype.fit=\nfunction(){var viewBox=this.viewport.getViewBox();this.zoom(Math.min(this.width/viewBox.width,this.height/viewBox.height),!0)};SvgPanZoom.prototype.contain=function(){var viewBox=this.viewport.getViewBox();this.zoom(Math.max(this.width/viewBox.width,this.height/viewBox.height),!0)};SvgPanZoom.prototype.center=function(){var viewBox=this.viewport.getViewBox(),offsetX=.5*(this.width-(viewBox.width+2*viewBox.x)*this.getZoom());viewBox=.5*(this.height-(viewBox.height+2*viewBox.y)*this.getZoom());this.getPublicInstance().pan({x:offsetX,\ny:viewBox})};SvgPanZoom.prototype.updateBBox=function(){this.viewport.simpleViewBoxCache()};SvgPanZoom.prototype.pan=function(point){var viewportCTM=this.viewport.getCTM();viewportCTM.e=point.x;viewportCTM.f=point.y;this.viewport.setCTM(viewportCTM)};SvgPanZoom.prototype.panBy=function(point){var viewportCTM=this.viewport.getCTM();viewportCTM.e+=point.x;viewportCTM.f+=point.y;this.viewport.setCTM(viewportCTM)};SvgPanZoom.prototype.getPan=function(){var state=this.viewport.getState();return{x:state.x,\ny:state.y}};SvgPanZoom.prototype.resize=function(){var boundingClientRectNormalized=SvgUtils.getBoundingClientRectNormalized(this.svg);this.width=boundingClientRectNormalized.width;this.height=boundingClientRectNormalized.height;boundingClientRectNormalized=this.viewport;boundingClientRectNormalized.options.width=this.width;boundingClientRectNormalized.options.height=this.height;boundingClientRectNormalized.processCTM();this.options.controlIconsEnabled&&(this.getPublicInstance().disableControlIcons(),\nthis.getPublicInstance().enableControlIcons())};SvgPanZoom.prototype.destroy=function(){var that=this;this.onUpdatedCTM=this.onPan=this.beforePan=this.onZoom=this.beforeZoom=null;null!=this.options.customEventsHandler&&this.options.customEventsHandler.destroy({svgElement:this.svg,eventsListenerElement:this.options.eventsListenerElement,instance:this.getPublicInstance()});for(var event in this.eventListeners)(this.options.eventsListenerElement||this.svg).removeEventListener(event,this.eventListeners[event],\nthis.options.preventMouseEventsDefault?!1:passiveListenerOption);this.disableMouseWheelZoom();this.getPublicInstance().disableControlIcons();this.reset();instancesStore=instancesStore.filter(function(instance){return instance.svg!==that.svg});delete this.options;delete this.viewport;delete this.publicInstance;delete this.pi;this.getPublicInstance=function(){return null}};SvgPanZoom.prototype.getPublicInstance=function(){var that=this;this.publicInstance||(this.publicInstance=this.pi={enablePan:function(){that.options.panEnabled=\n!0;return that.pi},disablePan:function(){that.options.panEnabled=!1;return that.pi},isPanEnabled:function(){return!!that.options.panEnabled},pan:function(point){that.pan(point);return that.pi},panBy:function(point){that.panBy(point);return that.pi},getPan:function(){return that.getPan()},setBeforePan:function(fn){that.options.beforePan=null===fn?null:Utils.proxy(fn,that.publicInstance);return that.pi},setOnPan:function(fn){that.options.onPan=null===fn?null:Utils.proxy(fn,that.publicInstance);return that.pi},\nenableZoom:function(){that.options.zoomEnabled=!0;return that.pi},disableZoom:function(){that.options.zoomEnabled=!1;return that.pi},isZoomEnabled:function(){return!!that.options.zoomEnabled},enableControlIcons:function(){that.options.controlIconsEnabled||(that.options.controlIconsEnabled=!0,ControlIcons.enable(that));return that.pi},disableControlIcons:function(){that.options.controlIconsEnabled&&(that.options.controlIconsEnabled=!1,ControlIcons.disable(that));return that.pi},isControlIconsEnabled:function(){return!!that.options.controlIconsEnabled},\nenableDblClickZoom:function(){that.options.dblClickZoomEnabled=!0;return that.pi},disableDblClickZoom:function(){that.options.dblClickZoomEnabled=!1;return that.pi},isDblClickZoomEnabled:function(){return!!that.options.dblClickZoomEnabled},enableMouseWheelZoom:function(){that.enableMouseWheelZoom();return that.pi},disableMouseWheelZoom:function(){that.disableMouseWheelZoom();return that.pi},isMouseWheelZoomEnabled:function(){return!!that.options.mouseWheelZoomEnabled},setZoomScaleSensitivity:function(scale){that.options.zoomScaleSensitivity=\nscale;return that.pi},setMinZoom:function(zoom){that.options.minZoom=zoom;return that.pi},setMaxZoom:function(zoom){that.options.maxZoom=zoom;return that.pi},setBeforeZoom:function(fn){that.options.beforeZoom=null===fn?null:Utils.proxy(fn,that.publicInstance);return that.pi},setOnZoom:function(fn){that.options.onZoom=null===fn?null:Utils.proxy(fn,that.publicInstance);return that.pi},zoom:function(scale){that.publicZoom(scale,!0);return that.pi},zoomBy:function(scale){that.publicZoom(scale,!1);return that.pi},\nzoomAtPoint:function(scale,point){that.publicZoomAtPoint(scale,point,!0);return that.pi},zoomAtPointBy:function(scale,point){that.publicZoomAtPoint(scale,point,!1);return that.pi},zoomIn:function(){this.zoomBy(1+that.options.zoomScaleSensitivity);return that.pi},zoomOut:function(){this.zoomBy(1/(1+that.options.zoomScaleSensitivity));return that.pi},getZoom:function(){return that.getRelativeZoom()},setOnUpdatedCTM:function(fn){that.options.onUpdatedCTM=null===fn?null:Utils.proxy(fn,that.publicInstance);\nreturn that.pi},resetZoom:function(){that.resetZoom();return that.pi},resetPan:function(){that.resetPan();return that.pi},reset:function(){that.reset();return that.pi},fit:function(){that.fit();return that.pi},contain:function(){that.contain();return that.pi},center:function(){that.center();return that.pi},updateBBox:function(){that.updateBBox();return that.pi},resize:function(){that.resize();return that.pi},getSizes:function(){return{width:that.width,height:that.height,realZoom:that.getZoom(),viewBox:that.viewport.getViewBox()}},\ndestroy:function(){that.destroy();return that.pi}});return this.publicInstance};var instancesStore=[];module.exports=function(elementOrSelector,options){elementOrSelector=Utils.getSvg(elementOrSelector);if(null===elementOrSelector)return null;for(var i=instancesStore.length-1;0<=i;i--)if(instancesStore[i].svg===elementOrSelector)return instancesStore[i].instance.getPublicInstance();instancesStore.push({svg:elementOrSelector,instance:new SvgPanZoom(elementOrSelector,options)});return instancesStore[instancesStore.length-\n1].instance.getPublicInstance()}}","~:source","shadow$provide[\"module$node_modules$svg_pan_zoom$src$svg_pan_zoom\"] = function(global,require,module,exports) {\nvar Wheel = require('./uniwheel')\n, ControlIcons = require('./control-icons')\n, Utils = require('./utilities')\n, SvgUtils = require('./svg-utilities')\n, ShadowViewport = require('./shadow-viewport')\n\nvar SvgPanZoom = function(svg, options) {\n  this.init(svg, options)\n}\n\nvar optionsDefaults = {\n  viewportSelector: '.svg-pan-zoom_viewport' // Viewport selector. Can be querySelector string or SVGElement\n, panEnabled: true // enable or disable panning (default enabled)\n, controlIconsEnabled: false // insert icons to give user an option in addition to mouse events to control pan/zoom (default disabled)\n, zoomEnabled: true // enable or disable zooming (default enabled)\n, dblClickZoomEnabled: true // enable or disable zooming by double clicking (default enabled)\n, mouseWheelZoomEnabled: true // enable or disable zooming by mouse wheel (default enabled)\n, preventMouseEventsDefault: true // enable or disable preventDefault for mouse events\n, zoomScaleSensitivity: 0.1 // Zoom sensitivity\n, minZoom: 0.5 // Minimum Zoom level\n, maxZoom: 10 // Maximum Zoom level\n, fit: true // enable or disable viewport fit in SVG (default true)\n, contain: false // enable or disable viewport contain the svg (default false)\n, center: true // enable or disable viewport centering in SVG (default true)\n, refreshRate: 'auto' // Maximum number of frames per second (altering SVG's viewport)\n, beforeZoom: null\n, onZoom: null\n, beforePan: null\n, onPan: null\n, customEventsHandler: null\n, eventsListenerElement: null\n, onUpdatedCTM: null\n}\n\nvar passiveListenerOption = {passive: true};\n\nSvgPanZoom.prototype.init = function(svg, options) {\n  var that = this\n\n  this.svg = svg\n  this.defs = svg.querySelector('defs')\n\n  // Add default attributes to SVG\n  SvgUtils.setupSvgAttributes(this.svg)\n\n  // Set options\n  this.options = Utils.extend(Utils.extend({}, optionsDefaults), options)\n\n  // Set default state\n  this.state = 'none'\n\n  // Get dimensions\n  var boundingClientRectNormalized = SvgUtils.getBoundingClientRectNormalized(svg)\n  this.width = boundingClientRectNormalized.width\n  this.height = boundingClientRectNormalized.height\n\n  // Init shadow viewport\n  this.viewport = ShadowViewport(SvgUtils.getOrCreateViewport(this.svg, this.options.viewportSelector), {\n    svg: this.svg\n  , width: this.width\n  , height: this.height\n  , fit: this.options.fit\n  , contain: this.options.contain\n  , center: this.options.center\n  , refreshRate: this.options.refreshRate\n  // Put callbacks into functions as they can change through time\n  , beforeZoom: function(oldScale, newScale) {\n      if (that.viewport && that.options.beforeZoom) {return that.options.beforeZoom(oldScale, newScale)}\n    }\n  , onZoom: function(scale) {\n      if (that.viewport && that.options.onZoom) {return that.options.onZoom(scale)}\n    }\n  , beforePan: function(oldPoint, newPoint) {\n      if (that.viewport && that.options.beforePan) {return that.options.beforePan(oldPoint, newPoint)}\n    }\n  , onPan: function(point) {\n      if (that.viewport && that.options.onPan) {return that.options.onPan(point)}\n    }\n  , onUpdatedCTM: function(ctm) {\n      if (that.viewport && that.options.onUpdatedCTM) {return that.options.onUpdatedCTM(ctm)}\n    }\n  })\n\n  // Wrap callbacks into public API context\n  var publicInstance = this.getPublicInstance()\n  publicInstance.setBeforeZoom(this.options.beforeZoom)\n  publicInstance.setOnZoom(this.options.onZoom)\n  publicInstance.setBeforePan(this.options.beforePan)\n  publicInstance.setOnPan(this.options.onPan)\n  publicInstance.setOnUpdatedCTM(this.options.onUpdatedCTM)\n\n  if (this.options.controlIconsEnabled) {\n    ControlIcons.enable(this)\n  }\n\n  // Init events handlers\n  this.lastMouseWheelEventTime = Date.now()\n  this.setupHandlers()\n}\n\n/**\n * Register event handlers\n */\nSvgPanZoom.prototype.setupHandlers = function() {\n  var that = this\n    , prevEvt = null // use for touchstart event to detect double tap\n    ;\n\n  this.eventListeners = {\n    // Mouse down group\n    mousedown: function(evt) {\n      var result = that.handleMouseDown(evt, prevEvt);\n      prevEvt = evt\n      return result;\n    }\n  , touchstart: function(evt) {\n      var result = that.handleMouseDown(evt, prevEvt);\n      prevEvt = evt\n      return result;\n    }\n\n    // Mouse up group\n  , mouseup: function(evt) {\n      return that.handleMouseUp(evt);\n    }\n  , touchend: function(evt) {\n      return that.handleMouseUp(evt);\n    }\n\n    // Mouse move group\n  , mousemove: function(evt) {\n      return that.handleMouseMove(evt);\n    }\n  , touchmove: function(evt) {\n      return that.handleMouseMove(evt);\n    }\n\n    // Mouse leave group\n  , mouseleave: function(evt) {\n      return that.handleMouseUp(evt);\n    }\n  , touchleave: function(evt) {\n      return that.handleMouseUp(evt);\n    }\n  , touchcancel: function(evt) {\n      return that.handleMouseUp(evt);\n    }\n  }\n\n  // Init custom events handler if available\n  if (this.options.customEventsHandler != null) { // jshint ignore:line\n    this.options.customEventsHandler.init({\n      svgElement: this.svg\n    , eventsListenerElement: this.options.eventsListenerElement\n    , instance: this.getPublicInstance()\n    })\n\n    // Custom event handler may halt builtin listeners\n    var haltEventListeners = this.options.customEventsHandler.haltEventListeners\n    if (haltEventListeners && haltEventListeners.length) {\n      for (var i = haltEventListeners.length - 1; i >= 0; i--) {\n        if (this.eventListeners.hasOwnProperty(haltEventListeners[i])) {\n          delete this.eventListeners[haltEventListeners[i]]\n        }\n      }\n    }\n  }\n\n  // Bind eventListeners\n  for (var event in this.eventListeners) {\n    // Attach event to eventsListenerElement or SVG if not available\n    (this.options.eventsListenerElement || this.svg)\n      .addEventListener(event, this.eventListeners[event], !this.options.preventMouseEventsDefault ? passiveListenerOption : false)\n  }\n\n  // Zoom using mouse wheel\n  if (this.options.mouseWheelZoomEnabled) {\n    this.options.mouseWheelZoomEnabled = false // set to false as enable will set it back to true\n    this.enableMouseWheelZoom()\n  }\n}\n\n/**\n * Enable ability to zoom using mouse wheel\n */\nSvgPanZoom.prototype.enableMouseWheelZoom = function() {\n  if (!this.options.mouseWheelZoomEnabled) {\n    var that = this\n\n    // Mouse wheel listener\n    this.wheelListener = function(evt) {\n      return that.handleMouseWheel(evt);\n    }\n\n    // Bind wheelListener\n    var isPassiveListener = !this.options.preventMouseEventsDefault\n    Wheel.on(this.options.eventsListenerElement || this.svg, this.wheelListener, isPassiveListener)\n\n    this.options.mouseWheelZoomEnabled = true\n  }\n}\n\n/**\n * Disable ability to zoom using mouse wheel\n */\nSvgPanZoom.prototype.disableMouseWheelZoom = function() {\n  if (this.options.mouseWheelZoomEnabled) {\n    var isPassiveListener = !this.options.preventMouseEventsDefault\n    Wheel.off(this.options.eventsListenerElement || this.svg, this.wheelListener, isPassiveListener)\n    this.options.mouseWheelZoomEnabled = false\n  }\n}\n\n/**\n * Handle mouse wheel event\n *\n * @param  {Event} evt\n */\nSvgPanZoom.prototype.handleMouseWheel = function(evt) {\n  if (!this.options.zoomEnabled || this.state !== 'none') {\n    return;\n  }\n\n  if (this.options.preventMouseEventsDefault){\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    } else {\n      evt.returnValue = false;\n    }\n  }\n\n  // Default delta in case that deltaY is not available\n  var delta = evt.deltaY || 1\n    , timeDelta = Date.now() - this.lastMouseWheelEventTime\n    , divider = 3 + Math.max(0, 30 - timeDelta)\n\n  // Update cache\n  this.lastMouseWheelEventTime = Date.now()\n\n  // Make empirical adjustments for browsers that give deltaY in pixels (deltaMode=0)\n  if ('deltaMode' in evt && evt.deltaMode === 0 && evt.wheelDelta) {\n    delta = evt.deltaY === 0 ? 0 :  Math.abs(evt.wheelDelta) / evt.deltaY\n  }\n\n  delta = -0.3 < delta && delta < 0.3 ? delta : (delta > 0 ? 1 : -1) * Math.log(Math.abs(delta) + 10) / divider\n\n  var inversedScreenCTM = this.svg.getScreenCTM().inverse()\n    , relativeMousePoint = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(inversedScreenCTM)\n    , zoom = Math.pow(1 + this.options.zoomScaleSensitivity, (-1) * delta); // multiplying by neg. 1 so as to make zoom in/out behavior match Google maps behavior\n\n  this.zoomAtPoint(zoom, relativeMousePoint)\n}\n\n/**\n * Zoom in at a SVG point\n *\n * @param  {SVGPoint} point\n * @param  {Float} zoomScale    Number representing how much to zoom\n * @param  {Boolean} zoomAbsolute Default false. If true, zoomScale is treated as an absolute value.\n *                                Otherwise, zoomScale is treated as a multiplied (e.g. 1.10 would zoom in 10%)\n */\nSvgPanZoom.prototype.zoomAtPoint = function(zoomScale, point, zoomAbsolute) {\n  var originalState = this.viewport.getOriginalState()\n\n  if (!zoomAbsolute) {\n    // Fit zoomScale in set bounds\n    if (this.getZoom() * zoomScale < this.options.minZoom * originalState.zoom) {\n      zoomScale = (this.options.minZoom * originalState.zoom) / this.getZoom()\n    } else if (this.getZoom() * zoomScale > this.options.maxZoom * originalState.zoom) {\n      zoomScale = (this.options.maxZoom * originalState.zoom) / this.getZoom()\n    }\n  } else {\n    // Fit zoomScale in set bounds\n    zoomScale = Math.max(this.options.minZoom * originalState.zoom, Math.min(this.options.maxZoom * originalState.zoom, zoomScale))\n    // Find relative scale to achieve desired scale\n    zoomScale = zoomScale/this.getZoom()\n  }\n\n  var oldCTM = this.viewport.getCTM()\n    , relativePoint = point.matrixTransform(oldCTM.inverse())\n    , modifier = this.svg.createSVGMatrix().translate(relativePoint.x, relativePoint.y).scale(zoomScale).translate(-relativePoint.x, -relativePoint.y)\n    , newCTM = oldCTM.multiply(modifier)\n\n  if (newCTM.a !== oldCTM.a) {\n    this.viewport.setCTM(newCTM)\n  }\n}\n\n/**\n * Zoom at center point\n *\n * @param  {Float} scale\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\n */\nSvgPanZoom.prototype.zoom = function(scale, absolute) {\n  this.zoomAtPoint(scale, SvgUtils.getSvgCenterPoint(this.svg, this.width, this.height), absolute)\n}\n\n/**\n * Zoom used by public instance\n *\n * @param  {Float} scale\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\n */\nSvgPanZoom.prototype.publicZoom = function(scale, absolute) {\n  if (absolute) {\n    scale = this.computeFromRelativeZoom(scale)\n  }\n\n  this.zoom(scale, absolute)\n}\n\n/**\n * Zoom at point used by public instance\n *\n * @param  {Float} scale\n * @param  {SVGPoint|Object} point    An object that has x and y attributes\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\n */\nSvgPanZoom.prototype.publicZoomAtPoint = function(scale, point, absolute) {\n  if (absolute) {\n    // Transform zoom into a relative value\n    scale = this.computeFromRelativeZoom(scale)\n  }\n\n  // If not a SVGPoint but has x and y then create a SVGPoint\n  if (Utils.getType(point) !== 'SVGPoint') {\n    if('x' in point && 'y' in point) {\n      point = SvgUtils.createSVGPoint(this.svg, point.x, point.y)\n    } else {\n      throw new Error('Given point is invalid')\n    }\n  }\n\n  this.zoomAtPoint(scale, point, absolute)\n}\n\n/**\n * Get zoom scale\n *\n * @return {Float} zoom scale\n */\nSvgPanZoom.prototype.getZoom = function() {\n  return this.viewport.getZoom()\n}\n\n/**\n * Get zoom scale for public usage\n *\n * @return {Float} zoom scale\n */\nSvgPanZoom.prototype.getRelativeZoom = function() {\n  return this.viewport.getRelativeZoom()\n}\n\n/**\n * Compute actual zoom from public zoom\n *\n * @param  {Float} zoom\n * @return {Float} zoom scale\n */\nSvgPanZoom.prototype.computeFromRelativeZoom = function(zoom) {\n  return zoom * this.viewport.getOriginalState().zoom\n}\n\n/**\n * Set zoom to initial state\n */\nSvgPanZoom.prototype.resetZoom = function() {\n  var originalState = this.viewport.getOriginalState()\n\n  this.zoom(originalState.zoom, true);\n}\n\n/**\n * Set pan to initial state\n */\nSvgPanZoom.prototype.resetPan = function() {\n  this.pan(this.viewport.getOriginalState());\n}\n\n/**\n * Set pan and zoom to initial state\n */\nSvgPanZoom.prototype.reset = function() {\n  this.resetZoom()\n  this.resetPan()\n}\n\n/**\n * Handle double click event\n * See handleMouseDown() for alternate detection method\n *\n * @param {Event} evt\n */\nSvgPanZoom.prototype.handleDblClick = function(evt) {\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault()\n    } else {\n      evt.returnValue = false\n    }\n  }\n\n  // Check if target was a control button\n  if (this.options.controlIconsEnabled) {\n    var targetClass = evt.target.getAttribute('class') || ''\n    if (targetClass.indexOf('svg-pan-zoom-control') > -1) {\n      return false\n    }\n  }\n\n  var zoomFactor\n\n  if (evt.shiftKey) {\n    zoomFactor = 1/((1 + this.options.zoomScaleSensitivity) * 2) // zoom out when shift key pressed\n  } else {\n    zoomFactor = (1 + this.options.zoomScaleSensitivity) * 2\n  }\n\n  var point = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(this.svg.getScreenCTM().inverse())\n  this.zoomAtPoint(zoomFactor, point)\n}\n\n/**\n * Handle click event\n *\n * @param {Event} evt\n */\nSvgPanZoom.prototype.handleMouseDown = function(evt, prevEvt) {\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault()\n    } else {\n      evt.returnValue = false\n    }\n  }\n\n  Utils.mouseAndTouchNormalize(evt, this.svg)\n\n  // Double click detection; more consistent than ondblclick\n  if (this.options.dblClickZoomEnabled && Utils.isDblClick(evt, prevEvt)){\n    this.handleDblClick(evt)\n  } else {\n    // Pan mode\n    this.state = 'pan'\n    this.firstEventCTM = this.viewport.getCTM()\n    this.stateOrigin = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(this.firstEventCTM.inverse())\n  }\n}\n\n/**\n * Handle mouse move event\n *\n * @param  {Event} evt\n */\nSvgPanZoom.prototype.handleMouseMove = function(evt) {\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault()\n    } else {\n      evt.returnValue = false\n    }\n  }\n\n  if (this.state === 'pan' && this.options.panEnabled) {\n    // Pan mode\n    var point = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(this.firstEventCTM.inverse())\n      , viewportCTM = this.firstEventCTM.translate(point.x - this.stateOrigin.x, point.y - this.stateOrigin.y)\n\n    this.viewport.setCTM(viewportCTM)\n  }\n}\n\n/**\n * Handle mouse button release event\n *\n * @param {Event} evt\n */\nSvgPanZoom.prototype.handleMouseUp = function(evt) {\n  if (this.options.preventMouseEventsDefault) {\n    if (evt.preventDefault) {\n      evt.preventDefault()\n    } else {\n      evt.returnValue = false\n    }\n  }\n\n  if (this.state === 'pan') {\n    // Quit pan mode\n    this.state = 'none'\n  }\n}\n\n/**\n * Adjust viewport size (only) so it will fit in SVG\n * Does not center image\n */\nSvgPanZoom.prototype.fit = function() {\n  var viewBox = this.viewport.getViewBox()\n    , newScale = Math.min(this.width/viewBox.width, this.height/viewBox.height)\n\n  this.zoom(newScale, true)\n}\n\n/**\n * Adjust viewport size (only) so it will contain the SVG\n * Does not center image\n */\nSvgPanZoom.prototype.contain = function() {\n  var viewBox = this.viewport.getViewBox()\n    , newScale = Math.max(this.width/viewBox.width, this.height/viewBox.height)\n\n  this.zoom(newScale, true)\n}\n\n/**\n * Adjust viewport pan (only) so it will be centered in SVG\n * Does not zoom/fit/contain image\n */\nSvgPanZoom.prototype.center = function() {\n  var viewBox = this.viewport.getViewBox()\n    , offsetX = (this.width - (viewBox.width + viewBox.x * 2) * this.getZoom()) * 0.5\n    , offsetY = (this.height - (viewBox.height + viewBox.y * 2) * this.getZoom()) * 0.5\n\n  this.getPublicInstance().pan({x: offsetX, y: offsetY})\n}\n\n/**\n * Update content cached BorderBox\n * Use when viewport contents change\n */\nSvgPanZoom.prototype.updateBBox = function() {\n  this.viewport.simpleViewBoxCache()\n}\n\n/**\n * Pan to a rendered position\n *\n * @param  {Object} point {x: 0, y: 0}\n */\nSvgPanZoom.prototype.pan = function(point) {\n  var viewportCTM = this.viewport.getCTM()\n  viewportCTM.e = point.x\n  viewportCTM.f = point.y\n  this.viewport.setCTM(viewportCTM)\n}\n\n/**\n * Relatively pan the graph by a specified rendered position vector\n *\n * @param  {Object} point {x: 0, y: 0}\n */\nSvgPanZoom.prototype.panBy = function(point) {\n  var viewportCTM = this.viewport.getCTM()\n  viewportCTM.e += point.x\n  viewportCTM.f += point.y\n  this.viewport.setCTM(viewportCTM)\n}\n\n/**\n * Get pan vector\n *\n * @return {Object} {x: 0, y: 0}\n */\nSvgPanZoom.prototype.getPan = function() {\n  var state = this.viewport.getState()\n\n  return {x: state.x, y: state.y}\n}\n\n/**\n * Recalculates cached svg dimensions and controls position\n */\nSvgPanZoom.prototype.resize = function() {\n  // Get dimensions\n  var boundingClientRectNormalized = SvgUtils.getBoundingClientRectNormalized(this.svg)\n  this.width = boundingClientRectNormalized.width\n  this.height = boundingClientRectNormalized.height\n\n  // Recalculate original state\n  var viewport = this.viewport\n  viewport.options.width = this.width\n  viewport.options.height = this.height\n  viewport.processCTM()\n\n  // Reposition control icons by re-enabling them\n  if (this.options.controlIconsEnabled) {\n    this.getPublicInstance().disableControlIcons()\n    this.getPublicInstance().enableControlIcons()\n  }\n}\n\n/**\n * Unbind mouse events, free callbacks and destroy public instance\n */\nSvgPanZoom.prototype.destroy = function() {\n  var that = this\n\n  // Free callbacks\n  this.beforeZoom = null\n  this.onZoom = null\n  this.beforePan = null\n  this.onPan = null\n  this.onUpdatedCTM = null\n\n  // Destroy custom event handlers\n  if (this.options.customEventsHandler != null) { // jshint ignore:line\n    this.options.customEventsHandler.destroy({\n      svgElement: this.svg\n    , eventsListenerElement: this.options.eventsListenerElement\n    , instance: this.getPublicInstance()\n    })\n  }\n\n  // Unbind eventListeners\n  for (var event in this.eventListeners) {\n    (this.options.eventsListenerElement || this.svg)\n      .removeEventListener(event, this.eventListeners[event], !this.options.preventMouseEventsDefault ? passiveListenerOption : false)\n  }\n\n  // Unbind wheelListener\n  this.disableMouseWheelZoom()\n\n  // Remove control icons\n  this.getPublicInstance().disableControlIcons()\n\n  // Reset zoom and pan\n  this.reset()\n\n  // Remove instance from instancesStore\n  instancesStore = instancesStore.filter(function(instance){\n    return instance.svg !== that.svg\n  })\n\n  // Delete options and its contents\n  delete this.options\n\n  // Delete viewport to make public shadow viewport functions uncallable\n  delete this.viewport\n\n  // Destroy public instance and rewrite getPublicInstance\n  delete this.publicInstance\n  delete this.pi\n  this.getPublicInstance = function(){\n    return null\n  }\n}\n\n/**\n * Returns a public instance object\n *\n * @return {Object} Public instance object\n */\nSvgPanZoom.prototype.getPublicInstance = function() {\n  var that = this\n\n  // Create cache\n  if (!this.publicInstance) {\n    this.publicInstance = this.pi = {\n      // Pan\n      enablePan: function() {that.options.panEnabled = true; return that.pi}\n    , disablePan: function() {that.options.panEnabled = false; return that.pi}\n    , isPanEnabled: function() {return !!that.options.panEnabled}\n    , pan: function(point) {that.pan(point); return that.pi}\n    , panBy: function(point) {that.panBy(point); return that.pi}\n    , getPan: function() {return that.getPan()}\n      // Pan event\n    , setBeforePan: function(fn) {that.options.beforePan = fn === null ? null : Utils.proxy(fn, that.publicInstance); return that.pi}\n    , setOnPan: function(fn) {that.options.onPan = fn === null ? null : Utils.proxy(fn, that.publicInstance); return that.pi}\n      // Zoom and Control Icons\n    , enableZoom: function() {that.options.zoomEnabled = true; return that.pi}\n    , disableZoom: function() {that.options.zoomEnabled = false; return that.pi}\n    , isZoomEnabled: function() {return !!that.options.zoomEnabled}\n    , enableControlIcons: function() {\n        if (!that.options.controlIconsEnabled) {\n          that.options.controlIconsEnabled = true\n          ControlIcons.enable(that)\n        }\n        return that.pi\n      }\n    , disableControlIcons: function() {\n        if (that.options.controlIconsEnabled) {\n          that.options.controlIconsEnabled = false;\n          ControlIcons.disable(that)\n        }\n        return that.pi\n      }\n    , isControlIconsEnabled: function() {return !!that.options.controlIconsEnabled}\n      // Double click zoom\n    , enableDblClickZoom: function() {that.options.dblClickZoomEnabled = true; return that.pi}\n    , disableDblClickZoom: function() {that.options.dblClickZoomEnabled = false; return that.pi}\n    , isDblClickZoomEnabled: function() {return !!that.options.dblClickZoomEnabled}\n      // Mouse wheel zoom\n    , enableMouseWheelZoom: function() {that.enableMouseWheelZoom(); return that.pi}\n    , disableMouseWheelZoom: function() {that.disableMouseWheelZoom(); return that.pi}\n    , isMouseWheelZoomEnabled: function() {return !!that.options.mouseWheelZoomEnabled}\n      // Zoom scale and bounds\n    , setZoomScaleSensitivity: function(scale) {that.options.zoomScaleSensitivity = scale; return that.pi}\n    , setMinZoom: function(zoom) {that.options.minZoom = zoom; return that.pi}\n    , setMaxZoom: function(zoom) {that.options.maxZoom = zoom; return that.pi}\n      // Zoom event\n    , setBeforeZoom: function(fn) {that.options.beforeZoom = fn === null ? null : Utils.proxy(fn, that.publicInstance); return that.pi}\n    , setOnZoom: function(fn) {that.options.onZoom = fn === null ? null : Utils.proxy(fn, that.publicInstance); return that.pi}\n      // Zooming\n    , zoom: function(scale) {that.publicZoom(scale, true); return that.pi}\n    , zoomBy: function(scale) {that.publicZoom(scale, false); return that.pi}\n    , zoomAtPoint: function(scale, point) {that.publicZoomAtPoint(scale, point, true); return that.pi}\n    , zoomAtPointBy: function(scale, point) {that.publicZoomAtPoint(scale, point, false); return that.pi}\n    , zoomIn: function() {this.zoomBy(1 + that.options.zoomScaleSensitivity); return that.pi}\n    , zoomOut: function() {this.zoomBy(1 / (1 + that.options.zoomScaleSensitivity)); return that.pi}\n    , getZoom: function() {return that.getRelativeZoom()}\n      // CTM update\n    , setOnUpdatedCTM: function(fn) {that.options.onUpdatedCTM = fn === null ? null : Utils.proxy(fn, that.publicInstance); return that.pi}\n      // Reset\n    , resetZoom: function() {that.resetZoom(); return that.pi}\n    , resetPan: function() {that.resetPan(); return that.pi}\n    , reset: function() {that.reset(); return that.pi}\n      // Fit, Contain and Center\n    , fit: function() {that.fit(); return that.pi}\n    , contain: function() {that.contain(); return that.pi}\n    , center: function() {that.center(); return that.pi}\n      // Size and Resize\n    , updateBBox: function() {that.updateBBox(); return that.pi}\n    , resize: function() {that.resize(); return that.pi}\n    , getSizes: function() {\n        return {\n          width: that.width\n        , height: that.height\n        , realZoom: that.getZoom()\n        , viewBox: that.viewport.getViewBox()\n        }\n      }\n      // Destroy\n    , destroy: function() {that.destroy(); return that.pi}\n    }\n  }\n\n  return this.publicInstance\n}\n\n/**\n * Stores pairs of instances of SvgPanZoom and SVG\n * Each pair is represented by an object {svg: SVGSVGElement, instance: SvgPanZoom}\n *\n * @type {Array}\n */\nvar instancesStore = []\n\nvar svgPanZoom = function(elementOrSelector, options){\n  var svg = Utils.getSvg(elementOrSelector)\n\n  if (svg === null) {\n    return null\n  } else {\n    // Look for existent instance\n    for(var i = instancesStore.length - 1; i >= 0; i--) {\n      if (instancesStore[i].svg === svg) {\n        return instancesStore[i].instance.getPublicInstance()\n      }\n    }\n\n    // If instance not found - create one\n    instancesStore.push({\n      svg: svg\n    , instance: new SvgPanZoom(svg, options)\n    })\n\n    // Return just pushed instance\n    return instancesStore[instancesStore.length - 1].instance.getPublicInstance()\n  }\n}\n\nmodule.exports = svgPanZoom;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$svg_pan_zoom$src$uniwheel","~$module$node_modules$svg_pan_zoom$src$shadow_viewport","~$shadow.js","~$module$node_modules$svg_pan_zoom$src$svg_utilities","~$module$node_modules$svg_pan_zoom$src$control_icons","~$module$node_modules$svg_pan_zoom$src$utilities"]],"~:properties",["^5",["mousedown","resetZoom","touchleave","customEventsHandler","isDblClickZoomEnabled","beforePan","controlIconsEnabled","maxZoom","isControlIconsEnabled","zoomAtPoint","fit","width","stateOrigin","passive","eventsListenerElement","firstEventCTM","enableControlIcons","f","setBeforeZoom","e","handleMouseWheel","publicInstance","viewport","eventListeners","height","zoomOut","handleMouseUp","handleMouseMove","wheelListener","zoom","returnValue","refreshRate","isMouseWheelZoomEnabled","setOnZoom","panEnabled","x","enablePan","setZoomScaleSensitivity","svg","computeFromRelativeZoom","resetPan","getSizes","zoomScaleSensitivity","viewBox","reset","touchcancel","setMaxZoom","updateBBox","disableZoom","pan","setBeforePan","isZoomEnabled","handleDblClick","mousemove","lastMouseWheelEventTime","pi","publicZoom","disablePan","center","mouseup","destroy","enableDblClickZoom","zoomBy","minZoom","touchmove","touchend","setOnPan","disableMouseWheelZoom","getZoom","instance","dblClickZoomEnabled","getRelativeZoom","zoomAtPointBy","y","getPan","setMinZoom","onUpdatedCTM","setupHandlers","state","init","touchstart","getPublicInstance","disableDblClickZoom","beforeZoom","realZoom","zoomEnabled","panBy","publicZoomAtPoint","resize","defs","isPanEnabled","onZoom","onPan","mouseWheelZoomEnabled","options","zoomIn","setOnUpdatedCTM","mouseleave","preventMouseEventsDefault","enableZoom","svgElement","viewportSelector","enableMouseWheelZoom","disableControlIcons","handleMouseDown","contain"]],"~:compiled-at",1560748883510,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$svg_pan_zoom$src$svg_pan_zoom.js\",\n\"lineCount\":30,\n\"mappings\":\"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IAC1GC,MAAQH,OAAA,CAAQ,+CAAR,CADkG,CAE5GI,aAAeJ,OAAA,CAAQ,oDAAR,CAF6F,CAG5GK,MAAQL,OAAA,CAAQ,gDAAR,CAHoG,CAI5GM,SAAWN,OAAA,CAAQ,oDAAR,CAJiG,CAK5GO,eAAiBP,OAAA,CAAQ,sDAAR,CAL2F,CAO1GQ,WAAaA,QAAQ,CAACC,GAAD,CAAMC,OAAN,CAAe,CACtC,IAAAC,KAAA,CAAUF,GAAV;AAAeC,OAAf,CADsC,CAPsE,CAW1GE,gBAAkB,CACpBC,iBAAkB,wBADE,CAEpBC,WAAY,CAAA,CAFQ,CAGpBC,oBAAqB,CAAA,CAHD,CAIpBC,YAAa,CAAA,CAJO,CAKpBC,oBAAqB,CAAA,CALD,CAMpBC,sBAAuB,CAAA,CANH,CAOpBC,0BAA2B,CAAA,CAPP,CAQpBC,qBAAsB,EARF,CASpBC,QAAS,EATW,CAUpBC,QAAS,EAVW,CAWpBC,IAAK,CAAA,CAXe,CAYpBC,QAAS,CAAA,CAZW,CAapBC,OAAQ,CAAA,CAbY,CAcpBC,YAAa,MAdO,CAepBC,WAAY,IAfQ,CAgBpBC,OAAQ,IAhBY,CAiBpBC,UAAW,IAjBS,CAkBpBC,MAAO,IAlBa,CAmBpBC,oBAAqB,IAnBD,CAoBpBC,sBAAuB,IApBH,CAqBpBC,aAAc,IArBM,CAXwF,CAmC1GC,sBAAwB,CAACC,QAAS,CAAA,CAAV,CAE5B3B,WAAA4B,UAAAzB,KAAA,CAA4B0B,QAAQ,CAAC5B,GAAD,CAAMC,OAAN,CAAe,CACjD,IAAI4B;AAAO,IAEX,KAAA7B,IAAA,CAAWA,GACX,KAAA8B,KAAA,CAAY9B,GAAA+B,cAAA,CAAkB,MAAlB,CAGZlC,SAAAmC,mBAAA,CAA4B,IAAAhC,IAA5B,CAGA,KAAAC,QAAA,CAAeL,KAAAqC,OAAA,CAAarC,KAAAqC,OAAA,CAAa,EAAb,CAAiB9B,eAAjB,CAAb,CAAgDF,OAAhD,CAGf,KAAAiC,MAAA,CAAa,MAGTC,IAAAA,CAA+BtC,QAAAuC,gCAAA,CAAyCpC,GAAzC,CACnC,KAAAqC,MAAA,CAAaF,GAAAE,MACb,KAAAC,OAAA,CAAcH,GAAAG,OAGd,KAAAC,SAAA,CAAgBzC,cAAA,CAAeD,QAAA2C,oBAAA,CAA6B,IAAAxC,IAA7B,CAAuC,IAAAC,QAAAG,iBAAvC,CAAf,CAAsF,CACpGJ,IAAK,IAAAA,IAD+F,CAEpGqC,MAAO,IAAAA,MAF6F,CAGpGC,OAAQ,IAAAA,OAH4F,CAIpGxB,IAAK,IAAAb,QAAAa,IAJ+F,CAKpGC,QAAS,IAAAd,QAAAc,QAL2F,CAMpGC,OAAQ,IAAAf,QAAAe,OAN4F,CAOpGC,YAAa,IAAAhB,QAAAgB,YAPuF;AASpGC,WAAYA,QAAQ,CAACuB,QAAD,CAAWC,QAAX,CAAqB,CACvC,GAAIb,IAAAU,SAAJ,EAAqBV,IAAA5B,QAAAiB,WAArB,CAA+C,MAAOW,KAAA5B,QAAAiB,WAAA,CAAwBuB,QAAxB,CAAkCC,QAAlC,CADf,CAT2D,CAYpGvB,OAAQA,QAAQ,CAACwB,KAAD,CAAQ,CACtB,GAAId,IAAAU,SAAJ,EAAqBV,IAAA5B,QAAAkB,OAArB,CAA2C,MAAOU,KAAA5B,QAAAkB,OAAA,CAAoBwB,KAApB,CAD5B,CAZ4E,CAepGvB,UAAWA,QAAQ,CAACwB,QAAD,CAAWC,QAAX,CAAqB,CACtC,GAAIhB,IAAAU,SAAJ,EAAqBV,IAAA5B,QAAAmB,UAArB,CAA8C,MAAOS,KAAA5B,QAAAmB,UAAA,CAAuBwB,QAAvB,CAAiCC,QAAjC,CADf,CAf4D,CAkBpGxB,MAAOA,QAAQ,CAACyB,KAAD,CAAQ,CACrB,GAAIjB,IAAAU,SAAJ,EAAqBV,IAAA5B,QAAAoB,MAArB,CAA0C,MAAOQ,KAAA5B,QAAAoB,MAAA,CAAmByB,KAAnB,CAD5B,CAlB6E,CAqBpGtB,aAAcA,QAAQ,CAACuB,GAAD,CAAM,CAC1B,GAAIlB,IAAAU,SAAJ,EAAqBV,IAAA5B,QAAAuB,aAArB,CAAiD,MAAOK,KAAA5B,QAAAuB,aAAA,CAA0BuB,GAA1B,CAD9B,CArBwE,CAAtF,CA2BZC;GAAAA,CAAiB,IAAAC,kBAAA,EACrBD,IAAAE,cAAA,CAA6B,IAAAjD,QAAAiB,WAA7B,CACA8B,IAAAG,UAAA,CAAyB,IAAAlD,QAAAkB,OAAzB,CACA6B,IAAAI,aAAA,CAA4B,IAAAnD,QAAAmB,UAA5B,CACA4B,IAAAK,SAAA,CAAwB,IAAApD,QAAAoB,MAAxB,CACA2B,IAAAM,gBAAA,CAA+B,IAAArD,QAAAuB,aAA/B,CAEI,KAAAvB,QAAAK,oBAAJ,EACEX,YAAA4D,OAAA,CAAoB,IAApB,CAIF,KAAAC,wBAAA,CAA+BC,IAAAC,IAAA,EAC/B,KAAAC,cAAA,EA7DiD,CAmEnD5D,WAAA4B,UAAAgC,cAAA,CAAqCC,QAAQ,EAAG,CAAA,IAC1C/B,KAAO,IADmC,CAE1CgC,QAAU,IAGd,KAAAC,eAAA,CAAsB,CAEpBC,UAAWA,QAAQ,CAACC,GAAD,CAAM,CACvB,IAAIC,OAASpC,IAAAqC,gBAAA,CAAqBF,GAArB;AAA0BH,OAA1B,CACbA,QAAA,CAAUG,GACV,OAAOC,OAHgB,CAFL,CAOpBE,WAAYA,QAAQ,CAACH,GAAD,CAAM,CACxB,IAAIC,OAASpC,IAAAqC,gBAAA,CAAqBF,GAArB,CAA0BH,OAA1B,CACbA,QAAA,CAAUG,GACV,OAAOC,OAHiB,CAPN,CAcpBG,QAASA,QAAQ,CAACJ,GAAD,CAAM,CACrB,MAAOnC,KAAAwC,cAAA,CAAmBL,GAAnB,CADc,CAdH,CAiBpBM,SAAUA,QAAQ,CAACN,GAAD,CAAM,CACtB,MAAOnC,KAAAwC,cAAA,CAAmBL,GAAnB,CADe,CAjBJ,CAsBpBO,UAAWA,QAAQ,CAACP,GAAD,CAAM,CACvB,MAAOnC,KAAA2C,gBAAA,CAAqBR,GAArB,CADgB,CAtBL,CAyBpBS,UAAWA,QAAQ,CAACT,GAAD,CAAM,CACvB,MAAOnC,KAAA2C,gBAAA,CAAqBR,GAArB,CADgB,CAzBL,CA8BpBU,WAAYA,QAAQ,CAACV,GAAD,CAAM,CACxB,MAAOnC,KAAAwC,cAAA,CAAmBL,GAAnB,CADiB,CA9BN,CAiCpBW,WAAYA,QAAQ,CAACX,GAAD,CAAM,CACxB,MAAOnC,KAAAwC,cAAA,CAAmBL,GAAnB,CADiB,CAjCN,CAoCpBY,YAAaA,QAAQ,CAACZ,GAAD,CAAM,CACzB,MAAOnC,KAAAwC,cAAA,CAAmBL,GAAnB,CADkB,CApCP,CA0CtB;GAAwC,IAAxC,EAAI,IAAA/D,QAAAqB,oBAAJ,CAA8C,CAC5C,IAAArB,QAAAqB,oBAAApB,KAAA,CAAsC,CACpC2E,WAAY,IAAA7E,IADwB,CAEpCuB,sBAAuB,IAAAtB,QAAAsB,sBAFa,CAGpCuD,SAAU,IAAA7B,kBAAA,EAH0B,CAAtC,CAOA,KAAI8B,mBAAqB,IAAA9E,QAAAqB,oBAAAyD,mBACzB,IAAIA,kBAAJ,EAA0BA,kBAAAC,OAA1B,CACE,IAAK,IAAIC,EAAIF,kBAAAC,OAAJC,CAAgC,CAAzC,CAAiD,CAAjD,EAA4CA,CAA5C,CAAoDA,CAAA,EAApD,CACM,IAAAnB,eAAAoB,eAAA,CAAmCH,kBAAA,CAAmBE,CAAnB,CAAnC,CAAJ,EACE,OAAO,IAAAnB,eAAA,CAAoBiB,kBAAA,CAAmBE,CAAnB,CAApB,CAZ+B,CAmB9C,IAAKE,IAAIA,KAAT,GAAkB,KAAArB,eAAlB,CAEEsB,CAAC,IAAAnF,QAAAsB,sBAAD6D;AAAuC,IAAApF,IAAvCoF,kBAAA,CACoBD,KADpB,CAC2B,IAAArB,eAAA,CAAoBqB,KAApB,CAD3B,CACwD,IAAAlF,QAAAS,0BAAD,CAAkE,CAAA,CAAlE,CAA0Ce,qBADjG,CAKE,KAAAxB,QAAAQ,sBAAJ,GACE,IAAAR,QAAAQ,sBACA,CADqC,CAAA,CACrC,CAAA,IAAA4E,qBAAA,EAFF,CAzE8C,CAkFhDtF,WAAA4B,UAAA0D,qBAAA,CAA4CC,QAAQ,EAAG,CACrD,GAAI,CAAC,IAAArF,QAAAQ,sBAAL,CAAyC,CACvC,IAAIoB,KAAO,IAGX,KAAA0D,cAAA,CAAqBC,QAAQ,CAACxB,GAAD,CAAM,CACjC,MAAOnC,KAAA4D,iBAAA,CAAsBzB,GAAtB,CAD0B,CAMnCtE,MAAAgG,GAAA,CAAS,IAAAzF,QAAAsB,sBAAT,EAA+C,IAAAvB,IAA/C,CAAyD,IAAAuF,cAAzD,CADwBI,CAAC,IAAA1F,QAAAS,0BACzB,CAEA;IAAAT,QAAAQ,sBAAA,CAAqC,CAAA,CAZE,CADY,CAoBvDV,WAAA4B,UAAAiE,sBAAA,CAA6CC,QAAQ,EAAG,CAClD,IAAA5F,QAAAQ,sBAAJ,GAEEf,KAAAoG,IAAA,CAAU,IAAA7F,QAAAsB,sBAAV,EAAgD,IAAAvB,IAAhD,CAA0D,IAAAuF,cAA1D,CADwBI,CAAC,IAAA1F,QAAAS,0BACzB,CACA,CAAA,IAAAT,QAAAQ,sBAAA,CAAqC,CAAA,CAHvC,CADsD,CAaxDV,WAAA4B,UAAA8D,iBAAA,CAAwCM,QAAQ,CAAC/B,GAAD,CAAM,CACpD,GAAK,IAAA/D,QAAAM,YAAL,EAAgD,MAAhD,GAAiC,IAAA2B,MAAjC,CAAA,CAII,IAAAjC,QAAAS,0BAAJ,GACMsD,GAAAgC,eAAJ,CACEhC,GAAAgC,eAAA,EADF,CAGEhC,GAAAiC,YAHF,CAGoB,CAAA,CAJtB,CALoD,KAchDC,MAAQlC,GAAAmC,OAARD;AAAsB,CAd0B,CAehDE,UAAY3C,IAAAC,IAAA,EAAZ0C,CAAyB,IAAA5C,wBACzB6C,UAAAA,CAAU,CAAVA,CAAcC,IAAAC,IAAA,CAAS,CAAT,CAAY,EAAZ,CAAiBH,SAAjB,CAGlB,KAAA5C,wBAAA,CAA+BC,IAAAC,IAAA,EAG3B,YAAJ,EAAmBM,IAAnB,EAA4C,CAA5C,GAA0BA,GAAAwC,UAA1B,EAAiDxC,GAAAyC,WAAjD,GACEP,KADF,CACyB,CAAf,GAAAlC,GAAAmC,OAAA,CAAmB,CAAnB,CAAwBG,IAAAI,IAAA,CAAS1C,GAAAyC,WAAT,CAAxB,CAAmDzC,GAAAmC,OAD7D,CAIAD,MAAA,CAAS,GAAD,CAAOA,KAAP,EAAwB,EAAxB,CAAgBA,KAAhB,CAA8BA,KAA9B,EAA+C,CAAR,CAAAA,KAAA,CAAY,CAAZ,CAAiB,EAAxD,EAA6DI,IAAAK,IAAA,CAASL,IAAAI,IAAA,CAASR,KAAT,CAAT,CAA2B,EAA3B,CAA7D,CAA8FG,SAElGO,UAAAA,CAAoB,IAAA5G,IAAA6G,aAAA,EAAAC,QAAA,EACpBC,IAAAA,CAAqBlH,QAAAmH,cAAA,CAAuBhD,GAAvB,CAA4B,IAAAhE,IAA5B,CAAAiH,gBAAA,CAAsDL,SAAtD,CAGzB,KAAAM,YAAA,CAFWZ,IAAAa,IAAAC,CAAS,CAATA,CAAa,IAAAnH,QAAAU,qBAAbyG;AAAkD,EAAlDA,CAAuDlB,KAAvDkB,CAEX,CAAuBL,GAAvB,CA/BA,CADoD,CA2CtDhH,WAAA4B,UAAAuF,YAAA,CAAmCG,QAAQ,CAACC,SAAD,CAAYxE,KAAZ,CAAmByE,YAAnB,CAAiC,CAC1E,IAAIC,cAAgB,IAAAjF,SAAAkF,iBAAA,EAEfF,aAAL,EASED,SAEY,CAFAhB,IAAAC,IAAA,CAAS,IAAAtG,QAAAW,QAAT,CAAgC4G,aAAAJ,KAAhC,CAAoDd,IAAAoB,IAAA,CAAS,IAAAzH,QAAAY,QAAT,CAAgC2G,aAAAJ,KAAhC,CAAoDE,SAApD,CAApD,CAEA,CAAAA,SAAA,EAAU,IAAAK,QAAA,EAXxB,EAEM,IAAAA,QAAA,EAAJ,CAAqBL,SAArB,CAAiC,IAAArH,QAAAW,QAAjC,CAAwD4G,aAAAJ,KAAxD,CACEE,SADF,CACe,IAAArH,QAAAW,QADf,CACsC4G,aAAAJ,KADtC,CAC4D,IAAAO,QAAA,EAD5D,CAEW,IAAAA,QAAA,EAFX,CAE4BL,SAF5B,CAEwC,IAAArH,QAAAY,QAFxC,CAE+D2G,aAAAJ,KAF/D,GAGEE,SAHF;AAGe,IAAArH,QAAAY,QAHf,CAGsC2G,aAAAJ,KAHtC,CAG4D,IAAAO,QAAA,EAH5D,CAYEC,aAAAA,CAAS,IAAArF,SAAAsF,OAAA,EACTC,MAAAA,CAAgBhF,KAAAmE,gBAAA,CAAsBW,YAAAd,QAAA,EAAtB,CAChBiB,UAAAA,CAAW,IAAA/H,IAAAgI,gBAAA,EAAAC,UAAA,CAAqCH,KAAAI,EAArC,CAAsDJ,KAAAK,EAAtD,CAAAxF,MAAA,CAA6E2E,SAA7E,CAAAW,UAAA,CAAkG,CAACH,KAAAI,EAAnG,CAAoH,CAACJ,KAAAK,EAArH,CACXC,UAAAA,CAASR,YAAAS,SAAA,CAAgBN,SAAhB,CAETK,UAAAE,EAAJ,GAAiBV,YAAAU,EAAjB,EACE,IAAA/F,SAAAgG,OAAA,CAAqBH,SAArB,CAvBwE,CAiC5ErI,WAAA4B,UAAAyF,KAAA,CAA4BoB,QAAQ,CAAC7F,KAAD,CAAQ8F,QAAR,CAAkB,CACpD,IAAAvB,YAAA,CAAiBvE,KAAjB,CAAwB9C,QAAA6I,kBAAA,CAA2B,IAAA1I,IAA3B,CAAqC,IAAAqC,MAArC,CAAiD,IAAAC,OAAjD,CAAxB,CAAuFmG,QAAvF,CADoD,CAUtD1I;UAAA4B,UAAAgH,WAAA,CAAkCC,QAAQ,CAACjG,KAAD,CAAQ8F,QAAR,CAAkB,CACtDA,QAAJ,GACE9F,KADF,CACU,IAAAkG,wBAAA,CAA6BlG,KAA7B,CADV,CAIA,KAAAyE,KAAA,CAAUzE,KAAV,CAAiB8F,QAAjB,CAL0D,CAe5D1I,WAAA4B,UAAAmH,kBAAA,CAAyCC,QAAQ,CAACpG,KAAD,CAAQG,KAAR,CAAe2F,QAAf,CAAyB,CACpEA,QAAJ,GAEE9F,KAFF,CAEU,IAAAkG,wBAAA,CAA6BlG,KAA7B,CAFV,CAMA,IAA6B,UAA7B,GAAI/C,KAAAoJ,QAAA,CAAclG,KAAd,CAAJ,CACE,GAAG,GAAH,EAAUA,MAAV,EAAmB,GAAnB,EAA0BA,MAA1B,CACEA,KAAA,CAAQjD,QAAAoJ,eAAA,CAAwB,IAAAjJ,IAAxB,CAAkC8C,KAAAoF,EAAlC,CAA2CpF,KAAAqF,EAA3C,CADV,KAGE,MAAUe,MAAJ,CAAU,wBAAV,CAAN,CAIJ,IAAAhC,YAAA,CAAiBvE,KAAjB,CAAwBG,KAAxB,CAA+B2F,QAA/B,CAfwE,CAuB1E1I,WAAA4B,UAAAgG,QAAA,CAA+BwB,QAAQ,EAAG,CACxC,MAAO,KAAA5G,SAAAoF,QAAA,EADiC,CAS1C5H;UAAA4B,UAAAyH,gBAAA,CAAuCC,QAAQ,EAAG,CAChD,MAAO,KAAA9G,SAAA6G,gBAAA,EADyC,CAUlDrJ,WAAA4B,UAAAkH,wBAAA,CAA+CS,QAAQ,CAAClC,IAAD,CAAO,CAC5D,MAAOA,KAAP,CAAc,IAAA7E,SAAAkF,iBAAA,EAAAL,KAD8C,CAO9DrH,WAAA4B,UAAA4H,UAAA,CAAiCC,QAAQ,EAAG,CAC1C,IAAIhC,cAAgB,IAAAjF,SAAAkF,iBAAA,EAEpB,KAAAL,KAAA,CAAUI,aAAAJ,KAAV,CAA8B,CAAA,CAA9B,CAH0C,CAS5CrH,WAAA4B,UAAA8H,SAAA,CAAgCC,QAAQ,EAAG,CACzC,IAAAC,IAAA,CAAS,IAAApH,SAAAkF,iBAAA,EAAT,CADyC,CAO3C1H,WAAA4B,UAAAiI,MAAA,CAA6BC,QAAQ,EAAG,CACtC,IAAAN,UAAA,EACA,KAAAE,SAAA,EAFsC,CAWxC1J,WAAA4B,UAAAmI,eAAA;AAAsCC,QAAQ,CAAC/F,GAAD,CAAM,CAC9C,IAAA/D,QAAAS,0BAAJ,GACMsD,GAAAgC,eAAJ,CACEhC,GAAAgC,eAAA,EADF,CAGEhC,GAAAiC,YAHF,CAGoB,CAAA,CAJtB,CASA,IAAI,IAAAhG,QAAAK,oBAAJ,EAEqD,EAFrD,CAEM0J,CADchG,GAAAiG,OAAAC,aAAA,CAAwB,OAAxB,CACdF,EADkD,EAClDA,SAAA,CAAoB,sBAApB,CAFN,CAGI,MAAO,CAAA,CAOT,KAAAG,WADEnG,GAAAoG,SAAJ,CACe,CADf,EAC4D,CAD5D,EACmB,CADnB,CACuB,IAAAnK,QAAAU,qBADvB,GAGyD,CAHzD,EAGgB,CAHhB,CAGoB,IAAAV,QAAAU,qBAHpB,CAMImC,IAAAA,CAAQjD,QAAAmH,cAAA,CAAuBhD,GAAvB,CAA4B,IAAAhE,IAA5B,CAAAiH,gBAAA,CAAsD,IAAAjH,IAAA6G,aAAA,EAAAC,QAAA,EAAtD,CACZ,KAAAI,YAAA,CAAiBiD,UAAjB,CAA6BrH,GAA7B,CA1BkD,CAkCpD/C,WAAA4B,UAAAuC,gBAAA;AAAuCmG,QAAQ,CAACrG,GAAD,CAAMH,OAAN,CAAe,CACxD,IAAA5D,QAAAS,0BAAJ,GACMsD,GAAAgC,eAAJ,CACEhC,GAAAgC,eAAA,EADF,CAGEhC,GAAAiC,YAHF,CAGoB,CAAA,CAJtB,CAQArG,MAAA0K,uBAAA,CAA6BtG,GAA7B,CAAkC,IAAAhE,IAAlC,CAGI,KAAAC,QAAAO,oBAAJ,EAAwCZ,KAAA2K,WAAA,CAAiBvG,GAAjB,CAAsBH,OAAtB,CAAxC,CACE,IAAAiG,eAAA,CAAoB9F,GAApB,CADF,EAIE,IAAA9B,MAEA,CAFa,KAEb,CADA,IAAAsI,cACA,CADqB,IAAAjI,SAAAsF,OAAA,EACrB,CAAA,IAAA4C,YAAA,CAAmB5K,QAAAmH,cAAA,CAAuBhD,GAAvB,CAA4B,IAAAhE,IAA5B,CAAAiH,gBAAA,CAAsD,IAAAuD,cAAA1D,QAAA,EAAtD,CANrB,CAZ4D,CA2B9D/G,WAAA4B,UAAA6C,gBAAA,CAAuCkG,QAAQ,CAAC1G,GAAD,CAAM,CAC/C,IAAA/D,QAAAS,0BAAJ;CACMsD,GAAAgC,eAAJ,CACEhC,GAAAgC,eAAA,EADF,CAGEhC,GAAAiC,YAHF,CAGoB,CAAA,CAJtB,CAQmB,MAAnB,GAAI,IAAA/D,MAAJ,EAA4B,IAAAjC,QAAAI,WAA5B,GAEMyC,GAGJ,CAHYjD,QAAAmH,cAAA,CAAuBhD,GAAvB,CAA4B,IAAAhE,IAA5B,CAAAiH,gBAAA,CAAsD,IAAAuD,cAAA1D,QAAA,EAAtD,CAGZ,CAFI6D,GAEJ,CAFkB,IAAAH,cAAAvC,UAAA,CAA6BnF,GAAAoF,EAA7B,CAAuC,IAAAuC,YAAAvC,EAAvC,CAA2DpF,GAAAqF,EAA3D,CAAqE,IAAAsC,YAAAtC,EAArE,CAElB,CAAA,IAAA5F,SAAAgG,OAAA,CAAqBoC,GAArB,CALF,CATmD,CAuBrD5K,WAAA4B,UAAA0C,cAAA,CAAqCuG,QAAQ,CAAC5G,GAAD,CAAM,CAC7C,IAAA/D,QAAAS,0BAAJ,GACMsD,GAAAgC,eAAJ,CACEhC,GAAAgC,eAAA,EADF,CAGEhC,GAAAiC,YAHF,CAGoB,CAAA,CAJtB,CAQmB,MAAnB,GAAI,IAAA/D,MAAJ,GAEE,IAAAA,MAFF,CAEe,MAFf,CATiD,CAmBnDnC,WAAA4B,UAAAb,IAAA;AAA2B+J,QAAQ,EAAG,CAAA,IAChCC,QAAU,IAAAvI,SAAAwI,WAAA,EAGd,KAAA3D,KAAA,CAFed,IAAAoB,IAAAhF,CAAS,IAAAL,MAATK,CAAoBoI,OAAAzI,MAApBK,CAAmC,IAAAJ,OAAnCI,CAA+CoI,OAAAxI,OAA/CI,CAEf,CAAoB,CAAA,CAApB,CAJoC,CAWtC3C,WAAA4B,UAAAZ,QAAA,CAA+BiK,QAAQ,EAAG,CAAA,IACpCF,QAAU,IAAAvI,SAAAwI,WAAA,EAGd,KAAA3D,KAAA,CAFed,IAAAC,IAAA7D,CAAS,IAAAL,MAATK,CAAoBoI,OAAAzI,MAApBK,CAAmC,IAAAJ,OAAnCI,CAA+CoI,OAAAxI,OAA/CI,CAEf,CAAoB,CAAA,CAApB,CAJwC,CAW1C3C,WAAA4B,UAAAX,OAAA,CAA8BiK,QAAQ,EAAG,CAAA,IACnCH,QAAU,IAAAvI,SAAAwI,WAAA,EADyB,CAEnCG,QAA4E,EAA5EA,EAAW,IAAA7I,MAAX6I,EAAyBJ,OAAAzI,MAAzB6I,CAAqD,CAArDA,CAAyCJ,OAAA5C,EAAzCgD,EAA0D,IAAAvD,QAAA,EAA1DuD,CACAC,QAAAA,CAA8E,EAA9EA,EAAW,IAAA7I,OAAX6I,EAA0BL,OAAAxI,OAA1B6I,CAAuD,CAAvDA,CAA2CL,OAAA3C,EAA3CgD,EAA4D,IAAAxD,QAAA,EAA5DwD,CAEJ,KAAAlI,kBAAA,EAAA0G,IAAA,CAA6B,CAACzB,EAAGgD,OAAJ;AAAa/C,EAAGgD,OAAhB,CAA7B,CALuC,CAYzCpL,WAAA4B,UAAAyJ,WAAA,CAAkCC,QAAQ,EAAG,CAC3C,IAAA9I,SAAA+I,mBAAA,EAD2C,CAS7CvL,WAAA4B,UAAAgI,IAAA,CAA2B4B,QAAQ,CAACzI,KAAD,CAAQ,CACzC,IAAI6H,YAAc,IAAApI,SAAAsF,OAAA,EAClB8C,YAAAa,EAAA,CAAgB1I,KAAAoF,EAChByC,YAAAc,EAAA,CAAgB3I,KAAAqF,EAChB,KAAA5F,SAAAgG,OAAA,CAAqBoC,WAArB,CAJyC,CAY3C5K,WAAA4B,UAAA+J,MAAA,CAA6BC,QAAQ,CAAC7I,KAAD,CAAQ,CAC3C,IAAI6H,YAAc,IAAApI,SAAAsF,OAAA,EAClB8C,YAAAa,EAAA,EAAiB1I,KAAAoF,EACjByC,YAAAc,EAAA,EAAiB3I,KAAAqF,EACjB,KAAA5F,SAAAgG,OAAA,CAAqBoC,WAArB,CAJ2C,CAY7C5K,WAAA4B,UAAAiK,OAAA,CAA8BC,QAAQ,EAAG,CACvC,IAAI3J,MAAQ,IAAAK,SAAAuJ,SAAA,EAEZ,OAAO,CAAC5D,EAAGhG,KAAAgG,EAAJ;AAAaC,EAAGjG,KAAAiG,EAAhB,CAHgC,CASzCpI,WAAA4B,UAAAoK,OAAA,CAA8BC,QAAQ,EAAG,CAEvC,IAAI7J,6BAA+BtC,QAAAuC,gCAAA,CAAyC,IAAApC,IAAzC,CACnC,KAAAqC,MAAA,CAAaF,4BAAAE,MACb,KAAAC,OAAA,CAAcH,4BAAAG,OAGVC,6BAAAA,CAAW,IAAAA,SACfA,6BAAAtC,QAAAoC,MAAA,CAAyB,IAAAA,MACzBE,6BAAAtC,QAAAqC,OAAA,CAA0B,IAAAA,OAC1BC,6BAAA0J,WAAA,EAGI,KAAAhM,QAAAK,oBAAJ,GACE,IAAA2C,kBAAA,EAAAiJ,oBAAA,EACA;AAAA,IAAAjJ,kBAAA,EAAAkJ,mBAAA,EAFF,CAbuC,CAsBzCpM,WAAA4B,UAAAyK,QAAA,CAA+BC,QAAQ,EAAG,CACxC,IAAIxK,KAAO,IAOX,KAAAL,aAAA,CADA,IAAAH,MACA,CAFA,IAAAD,UAEA,CAHA,IAAAD,OAGA,CAJA,IAAAD,WAIA,CAJkB,IAOsB,KAAxC,EAAI,IAAAjB,QAAAqB,oBAAJ,EACE,IAAArB,QAAAqB,oBAAA8K,QAAA,CAAyC,CACvCvH,WAAY,IAAA7E,IAD2B,CAEvCuB,sBAAuB,IAAAtB,QAAAsB,sBAFgB,CAGvCuD,SAAU,IAAA7B,kBAAA,EAH6B,CAAzC,CAQF,KAAKkC,IAAIA,KAAT,GAAkB,KAAArB,eAAlB,CACEwI,CAAC,IAAArM,QAAAsB,sBAAD+K,EAAuC,IAAAtM,IAAvCsM,qBAAA,CACuBnH,KADvB,CAC8B,IAAArB,eAAA,CAAoBqB,KAApB,CAD9B;AAC2D,IAAAlF,QAAAS,0BAAD,CAAkE,CAAA,CAAlE,CAA0Ce,qBADpG,CAKF,KAAAmE,sBAAA,EAGA,KAAA3C,kBAAA,EAAAiJ,oBAAA,EAGA,KAAAtC,MAAA,EAGA2C,eAAA,CAAiBA,cAAAC,OAAA,CAAsB,QAAQ,CAAC1H,QAAD,CAAU,CACvD,MAAOA,SAAA9E,IAAP,GAAwB6B,IAAA7B,IAD+B,CAAxC,CAKjB,QAAO,IAAAC,QAGP,QAAO,IAAAsC,SAGP,QAAO,IAAAS,eACP,QAAO,IAAAyJ,GACP,KAAAxJ,kBAAA,CAAyByJ,QAAQ,EAAE,CACjC,MAAO,KAD0B,CAhDK,CA0D1C3M,WAAA4B,UAAAsB,kBAAA,CAAyC0J,QAAQ,EAAG,CAClD,IAAI9K,KAAO,IAGN,KAAAmB,eAAL,GACE,IAAAA,eADF,CACwB,IAAAyJ,GADxB,CACkC,CAE9BG,UAAWA,QAAQ,EAAG,CAAC/K,IAAA5B,QAAAI,WAAA;AAA0B,CAAA,CAAM,OAAOwB,KAAA4K,GAAxC,CAFQ,CAG9BI,WAAYA,QAAQ,EAAG,CAAChL,IAAA5B,QAAAI,WAAA,CAA0B,CAAA,CAAO,OAAOwB,KAAA4K,GAAzC,CAHO,CAI9BK,aAAcA,QAAQ,EAAG,CAAC,MAAO,CAAC,CAACjL,IAAA5B,QAAAI,WAAV,CAJK,CAK9BsJ,IAAKA,QAAQ,CAAC7G,KAAD,CAAQ,CAACjB,IAAA8H,IAAA,CAAS7G,KAAT,CAAiB,OAAOjB,KAAA4K,GAAzB,CALS,CAM9Bf,MAAOA,QAAQ,CAAC5I,KAAD,CAAQ,CAACjB,IAAA6J,MAAA,CAAW5I,KAAX,CAAmB,OAAOjB,KAAA4K,GAA3B,CANO,CAO9Bb,OAAQA,QAAQ,EAAG,CAAC,MAAO/J,KAAA+J,OAAA,EAAR,CAPW,CAS9BxI,aAAcA,QAAQ,CAAC2J,EAAD,CAAK,CAAClL,IAAA5B,QAAAmB,UAAA,CAAgC,IAAP,GAAA2L,EAAA,CAAc,IAAd,CAAqBnN,KAAAoN,MAAA,CAAYD,EAAZ,CAAgBlL,IAAAmB,eAAhB,CAAsC,OAAOnB,KAAA4K,GAA5F,CATG,CAU9BpJ,SAAUA,QAAQ,CAAC0J,EAAD,CAAK,CAAClL,IAAA5B,QAAAoB,MAAA,CAA4B,IAAP,GAAA0L,EAAA,CAAc,IAAd,CAAqBnN,KAAAoN,MAAA,CAAYD,EAAZ,CAAgBlL,IAAAmB,eAAhB,CAAsC,OAAOnB,KAAA4K,GAAxF,CAVO;AAY9BQ,WAAYA,QAAQ,EAAG,CAACpL,IAAA5B,QAAAM,YAAA,CAA2B,CAAA,CAAM,OAAOsB,KAAA4K,GAAzC,CAZO,CAa9BS,YAAaA,QAAQ,EAAG,CAACrL,IAAA5B,QAAAM,YAAA,CAA2B,CAAA,CAAO,OAAOsB,KAAA4K,GAA1C,CAbM,CAc9BU,cAAeA,QAAQ,EAAG,CAAC,MAAO,CAAC,CAACtL,IAAA5B,QAAAM,YAAV,CAdI,CAe9B4L,mBAAoBA,QAAQ,EAAG,CACxBtK,IAAA5B,QAAAK,oBAAL,GACEuB,IAAA5B,QAAAK,oBACA,CADmC,CAAA,CACnC,CAAAX,YAAA4D,OAAA,CAAoB1B,IAApB,CAFF,CAIA,OAAOA,KAAA4K,GALsB,CAfD,CAsB9BP,oBAAqBA,QAAQ,EAAG,CAC1BrK,IAAA5B,QAAAK,oBAAJ,GACEuB,IAAA5B,QAAAK,oBACA,CADmC,CAAA,CACnC,CAAAX,YAAAyN,QAAA,CAAqBvL,IAArB,CAFF,CAIA,OAAOA,KAAA4K,GALuB,CAtBF,CA6B9BY,sBAAuBA,QAAQ,EAAG,CAAC,MAAO,CAAC,CAACxL,IAAA5B,QAAAK,oBAAV,CA7BJ;AA+B9BgN,mBAAoBA,QAAQ,EAAG,CAACzL,IAAA5B,QAAAO,oBAAA,CAAmC,CAAA,CAAM,OAAOqB,KAAA4K,GAAjD,CA/BD,CAgC9Bc,oBAAqBA,QAAQ,EAAG,CAAC1L,IAAA5B,QAAAO,oBAAA,CAAmC,CAAA,CAAO,OAAOqB,KAAA4K,GAAlD,CAhCF,CAiC9Be,sBAAuBA,QAAQ,EAAG,CAAC,MAAO,CAAC,CAAC3L,IAAA5B,QAAAO,oBAAV,CAjCJ,CAmC9B6E,qBAAsBA,QAAQ,EAAG,CAACxD,IAAAwD,qBAAA,EAA6B,OAAOxD,KAAA4K,GAArC,CAnCH,CAoC9B7G,sBAAuBA,QAAQ,EAAG,CAAC/D,IAAA+D,sBAAA,EAA8B,OAAO/D,KAAA4K,GAAtC,CApCJ,CAqC9BgB,wBAAyBA,QAAQ,EAAG,CAAC,MAAO,CAAC,CAAC5L,IAAA5B,QAAAQ,sBAAV,CArCN,CAuC9BiN,wBAAyBA,QAAQ,CAAC/K,KAAD,CAAQ,CAACd,IAAA5B,QAAAU,qBAAA;AAAoCgC,KAAO,OAAOd,KAAA4K,GAAnD,CAvCX,CAwC9BkB,WAAYA,QAAQ,CAACvG,IAAD,CAAO,CAACvF,IAAA5B,QAAAW,QAAA,CAAuBwG,IAAM,OAAOvF,KAAA4K,GAArC,CAxCG,CAyC9BmB,WAAYA,QAAQ,CAACxG,IAAD,CAAO,CAACvF,IAAA5B,QAAAY,QAAA,CAAuBuG,IAAM,OAAOvF,KAAA4K,GAArC,CAzCG,CA2C9BvJ,cAAeA,QAAQ,CAAC6J,EAAD,CAAK,CAAClL,IAAA5B,QAAAiB,WAAA,CAAiC,IAAP,GAAA6L,EAAA,CAAc,IAAd,CAAqBnN,KAAAoN,MAAA,CAAYD,EAAZ,CAAgBlL,IAAAmB,eAAhB,CAAsC,OAAOnB,KAAA4K,GAA7F,CA3CE,CA4C9BtJ,UAAWA,QAAQ,CAAC4J,EAAD,CAAK,CAAClL,IAAA5B,QAAAkB,OAAA,CAA6B,IAAP,GAAA4L,EAAA,CAAc,IAAd,CAAqBnN,KAAAoN,MAAA,CAAYD,EAAZ,CAAgBlL,IAAAmB,eAAhB,CAAsC,OAAOnB,KAAA4K,GAAzF,CA5CM,CA8C9BrF,KAAMA,QAAQ,CAACzE,KAAD,CAAQ,CAACd,IAAA8G,WAAA,CAAgBhG,KAAhB,CAAuB,CAAA,CAAvB,CAA8B,OAAOd,KAAA4K,GAAtC,CA9CQ,CA+C9BoB,OAAQA,QAAQ,CAAClL,KAAD,CAAQ,CAACd,IAAA8G,WAAA,CAAgBhG,KAAhB,CAAuB,CAAA,CAAvB,CAA+B,OAAOd,KAAA4K,GAAvC,CA/CM;AAgD9BvF,YAAaA,QAAQ,CAACvE,KAAD,CAAQG,KAAR,CAAe,CAACjB,IAAAiH,kBAAA,CAAuBnG,KAAvB,CAA8BG,KAA9B,CAAqC,CAAA,CAArC,CAA4C,OAAOjB,KAAA4K,GAApD,CAhDN,CAiD9BqB,cAAeA,QAAQ,CAACnL,KAAD,CAAQG,KAAR,CAAe,CAACjB,IAAAiH,kBAAA,CAAuBnG,KAAvB,CAA8BG,KAA9B,CAAqC,CAAA,CAArC,CAA6C,OAAOjB,KAAA4K,GAArD,CAjDR,CAkD9BsB,OAAQA,QAAQ,EAAG,CAAC,IAAAF,OAAA,CAAY,CAAZ,CAAgBhM,IAAA5B,QAAAU,qBAAhB,CAAoD,OAAOkB,KAAA4K,GAA5D,CAlDW,CAmD9BuB,QAASA,QAAQ,EAAG,CAAC,IAAAH,OAAA,CAAY,CAAZ,EAAiB,CAAjB,CAAqBhM,IAAA5B,QAAAU,qBAArB,EAA0D,OAAOkB,KAAA4K,GAAlE,CAnDU,CAoD9B9E,QAASA,QAAQ,EAAG,CAAC,MAAO9F,KAAAuH,gBAAA,EAAR,CApDU,CAsD9B9F,gBAAiBA,QAAQ,CAACyJ,EAAD,CAAK,CAAClL,IAAA5B,QAAAuB,aAAA,CAAmC,IAAP,GAAAuL,EAAA,CAAc,IAAd,CAAqBnN,KAAAoN,MAAA,CAAYD,EAAZ,CAAgBlL,IAAAmB,eAAhB,CAAsC;MAAOnB,KAAA4K,GAA/F,CAtDA,CAwD9BlD,UAAWA,QAAQ,EAAG,CAAC1H,IAAA0H,UAAA,EAAkB,OAAO1H,KAAA4K,GAA1B,CAxDQ,CAyD9BhD,SAAUA,QAAQ,EAAG,CAAC5H,IAAA4H,SAAA,EAAiB,OAAO5H,KAAA4K,GAAzB,CAzDS,CA0D9B7C,MAAOA,QAAQ,EAAG,CAAC/H,IAAA+H,MAAA,EAAc,OAAO/H,KAAA4K,GAAtB,CA1DY,CA4D9B3L,IAAKA,QAAQ,EAAG,CAACe,IAAAf,IAAA,EAAY,OAAOe,KAAA4K,GAApB,CA5Dc,CA6D9B1L,QAASA,QAAQ,EAAG,CAACc,IAAAd,QAAA,EAAgB,OAAOc,KAAA4K,GAAxB,CA7DU,CA8D9BzL,OAAQA,QAAQ,EAAG,CAACa,IAAAb,OAAA,EAAe,OAAOa,KAAA4K,GAAvB,CA9DW,CAgE9BrB,WAAYA,QAAQ,EAAG,CAACvJ,IAAAuJ,WAAA,EAAmB,OAAOvJ,KAAA4K,GAA3B,CAhEO,CAiE9BV,OAAQA,QAAQ,EAAG,CAAClK,IAAAkK,OAAA,EAAe,OAAOlK,KAAA4K,GAAvB,CAjEW,CAkE9BwB,SAAUA,QAAQ,EAAG,CACnB,MAAO,CACL5L,MAAOR,IAAAQ,MADF,CAELC,OAAQT,IAAAS,OAFH,CAGL4L,SAAUrM,IAAA8F,QAAA,EAHL,CAILmD,QAASjJ,IAAAU,SAAAwI,WAAA,EAJJ,CADY,CAlES;AA2E9BqB,QAASA,QAAQ,EAAG,CAACvK,IAAAuK,QAAA,EAAgB,OAAOvK,KAAA4K,GAAxB,CA3EU,CADlC,CAgFA,OAAO,KAAAzJ,eApF2C,CA6FpD,KAAIuJ,eAAiB,EA0BrB/M,OAAAC,QAAA,CAxBiB0O,QAAQ,CAACC,iBAAD,CAAoBnO,OAApB,CAA4B,CAC/CD,iBAAAA,CAAMJ,KAAAyO,OAAA,CAAaD,iBAAb,CAEV,IAAY,IAAZ,GAAIpO,iBAAJ,CACE,MAAO,KAGP,KAAI,IAAIiF,EAAIsH,cAAAvH,OAAJC,CAA4B,CAApC,CAA4C,CAA5C,EAAuCA,CAAvC,CAA+CA,CAAA,EAA/C,CACE,GAAIsH,cAAA,CAAetH,CAAf,CAAAjF,IAAJ,GAA8BA,iBAA9B,CACE,MAAOuM,eAAA,CAAetH,CAAf,CAAAH,SAAA7B,kBAAA,EAKXsJ,eAAA+B,KAAA,CAAoB,CAClBtO,IAAKA,iBADa,CAElB8E,SAAU,IAAI/E,UAAJ,CAAeC,iBAAf,CAAoBC,OAApB,CAFQ,CAApB,CAMA,OAAOsM,eAAA,CAAeA,cAAAvH,OAAf;AAAuC,CAAvC,CAAAF,SAAA7B,kBAAA,EApB0C,CA9uByD;\",\n\"sources\":[\"node_modules/svg-pan-zoom/src/svg-pan-zoom.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$svg_pan_zoom$src$svg_pan_zoom\\\"] = function(global,require,module,exports) {\\nvar Wheel = require('./uniwheel')\\n, ControlIcons = require('./control-icons')\\n, Utils = require('./utilities')\\n, SvgUtils = require('./svg-utilities')\\n, ShadowViewport = require('./shadow-viewport')\\n\\nvar SvgPanZoom = function(svg, options) {\\n  this.init(svg, options)\\n}\\n\\nvar optionsDefaults = {\\n  viewportSelector: '.svg-pan-zoom_viewport' // Viewport selector. Can be querySelector string or SVGElement\\n, panEnabled: true // enable or disable panning (default enabled)\\n, controlIconsEnabled: false // insert icons to give user an option in addition to mouse events to control pan/zoom (default disabled)\\n, zoomEnabled: true // enable or disable zooming (default enabled)\\n, dblClickZoomEnabled: true // enable or disable zooming by double clicking (default enabled)\\n, mouseWheelZoomEnabled: true // enable or disable zooming by mouse wheel (default enabled)\\n, preventMouseEventsDefault: true // enable or disable preventDefault for mouse events\\n, zoomScaleSensitivity: 0.1 // Zoom sensitivity\\n, minZoom: 0.5 // Minimum Zoom level\\n, maxZoom: 10 // Maximum Zoom level\\n, fit: true // enable or disable viewport fit in SVG (default true)\\n, contain: false // enable or disable viewport contain the svg (default false)\\n, center: true // enable or disable viewport centering in SVG (default true)\\n, refreshRate: 'auto' // Maximum number of frames per second (altering SVG's viewport)\\n, beforeZoom: null\\n, onZoom: null\\n, beforePan: null\\n, onPan: null\\n, customEventsHandler: null\\n, eventsListenerElement: null\\n, onUpdatedCTM: null\\n}\\n\\nvar passiveListenerOption = {passive: true};\\n\\nSvgPanZoom.prototype.init = function(svg, options) {\\n  var that = this\\n\\n  this.svg = svg\\n  this.defs = svg.querySelector('defs')\\n\\n  // Add default attributes to SVG\\n  SvgUtils.setupSvgAttributes(this.svg)\\n\\n  // Set options\\n  this.options = Utils.extend(Utils.extend({}, optionsDefaults), options)\\n\\n  // Set default state\\n  this.state = 'none'\\n\\n  // Get dimensions\\n  var boundingClientRectNormalized = SvgUtils.getBoundingClientRectNormalized(svg)\\n  this.width = boundingClientRectNormalized.width\\n  this.height = boundingClientRectNormalized.height\\n\\n  // Init shadow viewport\\n  this.viewport = ShadowViewport(SvgUtils.getOrCreateViewport(this.svg, this.options.viewportSelector), {\\n    svg: this.svg\\n  , width: this.width\\n  , height: this.height\\n  , fit: this.options.fit\\n  , contain: this.options.contain\\n  , center: this.options.center\\n  , refreshRate: this.options.refreshRate\\n  // Put callbacks into functions as they can change through time\\n  , beforeZoom: function(oldScale, newScale) {\\n      if (that.viewport && that.options.beforeZoom) {return that.options.beforeZoom(oldScale, newScale)}\\n    }\\n  , onZoom: function(scale) {\\n      if (that.viewport && that.options.onZoom) {return that.options.onZoom(scale)}\\n    }\\n  , beforePan: function(oldPoint, newPoint) {\\n      if (that.viewport && that.options.beforePan) {return that.options.beforePan(oldPoint, newPoint)}\\n    }\\n  , onPan: function(point) {\\n      if (that.viewport && that.options.onPan) {return that.options.onPan(point)}\\n    }\\n  , onUpdatedCTM: function(ctm) {\\n      if (that.viewport && that.options.onUpdatedCTM) {return that.options.onUpdatedCTM(ctm)}\\n    }\\n  })\\n\\n  // Wrap callbacks into public API context\\n  var publicInstance = this.getPublicInstance()\\n  publicInstance.setBeforeZoom(this.options.beforeZoom)\\n  publicInstance.setOnZoom(this.options.onZoom)\\n  publicInstance.setBeforePan(this.options.beforePan)\\n  publicInstance.setOnPan(this.options.onPan)\\n  publicInstance.setOnUpdatedCTM(this.options.onUpdatedCTM)\\n\\n  if (this.options.controlIconsEnabled) {\\n    ControlIcons.enable(this)\\n  }\\n\\n  // Init events handlers\\n  this.lastMouseWheelEventTime = Date.now()\\n  this.setupHandlers()\\n}\\n\\n/**\\n * Register event handlers\\n */\\nSvgPanZoom.prototype.setupHandlers = function() {\\n  var that = this\\n    , prevEvt = null // use for touchstart event to detect double tap\\n    ;\\n\\n  this.eventListeners = {\\n    // Mouse down group\\n    mousedown: function(evt) {\\n      var result = that.handleMouseDown(evt, prevEvt);\\n      prevEvt = evt\\n      return result;\\n    }\\n  , touchstart: function(evt) {\\n      var result = that.handleMouseDown(evt, prevEvt);\\n      prevEvt = evt\\n      return result;\\n    }\\n\\n    // Mouse up group\\n  , mouseup: function(evt) {\\n      return that.handleMouseUp(evt);\\n    }\\n  , touchend: function(evt) {\\n      return that.handleMouseUp(evt);\\n    }\\n\\n    // Mouse move group\\n  , mousemove: function(evt) {\\n      return that.handleMouseMove(evt);\\n    }\\n  , touchmove: function(evt) {\\n      return that.handleMouseMove(evt);\\n    }\\n\\n    // Mouse leave group\\n  , mouseleave: function(evt) {\\n      return that.handleMouseUp(evt);\\n    }\\n  , touchleave: function(evt) {\\n      return that.handleMouseUp(evt);\\n    }\\n  , touchcancel: function(evt) {\\n      return that.handleMouseUp(evt);\\n    }\\n  }\\n\\n  // Init custom events handler if available\\n  if (this.options.customEventsHandler != null) { // jshint ignore:line\\n    this.options.customEventsHandler.init({\\n      svgElement: this.svg\\n    , eventsListenerElement: this.options.eventsListenerElement\\n    , instance: this.getPublicInstance()\\n    })\\n\\n    // Custom event handler may halt builtin listeners\\n    var haltEventListeners = this.options.customEventsHandler.haltEventListeners\\n    if (haltEventListeners && haltEventListeners.length) {\\n      for (var i = haltEventListeners.length - 1; i >= 0; i--) {\\n        if (this.eventListeners.hasOwnProperty(haltEventListeners[i])) {\\n          delete this.eventListeners[haltEventListeners[i]]\\n        }\\n      }\\n    }\\n  }\\n\\n  // Bind eventListeners\\n  for (var event in this.eventListeners) {\\n    // Attach event to eventsListenerElement or SVG if not available\\n    (this.options.eventsListenerElement || this.svg)\\n      .addEventListener(event, this.eventListeners[event], !this.options.preventMouseEventsDefault ? passiveListenerOption : false)\\n  }\\n\\n  // Zoom using mouse wheel\\n  if (this.options.mouseWheelZoomEnabled) {\\n    this.options.mouseWheelZoomEnabled = false // set to false as enable will set it back to true\\n    this.enableMouseWheelZoom()\\n  }\\n}\\n\\n/**\\n * Enable ability to zoom using mouse wheel\\n */\\nSvgPanZoom.prototype.enableMouseWheelZoom = function() {\\n  if (!this.options.mouseWheelZoomEnabled) {\\n    var that = this\\n\\n    // Mouse wheel listener\\n    this.wheelListener = function(evt) {\\n      return that.handleMouseWheel(evt);\\n    }\\n\\n    // Bind wheelListener\\n    var isPassiveListener = !this.options.preventMouseEventsDefault\\n    Wheel.on(this.options.eventsListenerElement || this.svg, this.wheelListener, isPassiveListener)\\n\\n    this.options.mouseWheelZoomEnabled = true\\n  }\\n}\\n\\n/**\\n * Disable ability to zoom using mouse wheel\\n */\\nSvgPanZoom.prototype.disableMouseWheelZoom = function() {\\n  if (this.options.mouseWheelZoomEnabled) {\\n    var isPassiveListener = !this.options.preventMouseEventsDefault\\n    Wheel.off(this.options.eventsListenerElement || this.svg, this.wheelListener, isPassiveListener)\\n    this.options.mouseWheelZoomEnabled = false\\n  }\\n}\\n\\n/**\\n * Handle mouse wheel event\\n *\\n * @param  {Event} evt\\n */\\nSvgPanZoom.prototype.handleMouseWheel = function(evt) {\\n  if (!this.options.zoomEnabled || this.state !== 'none') {\\n    return;\\n  }\\n\\n  if (this.options.preventMouseEventsDefault){\\n    if (evt.preventDefault) {\\n      evt.preventDefault();\\n    } else {\\n      evt.returnValue = false;\\n    }\\n  }\\n\\n  // Default delta in case that deltaY is not available\\n  var delta = evt.deltaY || 1\\n    , timeDelta = Date.now() - this.lastMouseWheelEventTime\\n    , divider = 3 + Math.max(0, 30 - timeDelta)\\n\\n  // Update cache\\n  this.lastMouseWheelEventTime = Date.now()\\n\\n  // Make empirical adjustments for browsers that give deltaY in pixels (deltaMode=0)\\n  if ('deltaMode' in evt && evt.deltaMode === 0 && evt.wheelDelta) {\\n    delta = evt.deltaY === 0 ? 0 :  Math.abs(evt.wheelDelta) / evt.deltaY\\n  }\\n\\n  delta = -0.3 < delta && delta < 0.3 ? delta : (delta > 0 ? 1 : -1) * Math.log(Math.abs(delta) + 10) / divider\\n\\n  var inversedScreenCTM = this.svg.getScreenCTM().inverse()\\n    , relativeMousePoint = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(inversedScreenCTM)\\n    , zoom = Math.pow(1 + this.options.zoomScaleSensitivity, (-1) * delta); // multiplying by neg. 1 so as to make zoom in/out behavior match Google maps behavior\\n\\n  this.zoomAtPoint(zoom, relativeMousePoint)\\n}\\n\\n/**\\n * Zoom in at a SVG point\\n *\\n * @param  {SVGPoint} point\\n * @param  {Float} zoomScale    Number representing how much to zoom\\n * @param  {Boolean} zoomAbsolute Default false. If true, zoomScale is treated as an absolute value.\\n *                                Otherwise, zoomScale is treated as a multiplied (e.g. 1.10 would zoom in 10%)\\n */\\nSvgPanZoom.prototype.zoomAtPoint = function(zoomScale, point, zoomAbsolute) {\\n  var originalState = this.viewport.getOriginalState()\\n\\n  if (!zoomAbsolute) {\\n    // Fit zoomScale in set bounds\\n    if (this.getZoom() * zoomScale < this.options.minZoom * originalState.zoom) {\\n      zoomScale = (this.options.minZoom * originalState.zoom) / this.getZoom()\\n    } else if (this.getZoom() * zoomScale > this.options.maxZoom * originalState.zoom) {\\n      zoomScale = (this.options.maxZoom * originalState.zoom) / this.getZoom()\\n    }\\n  } else {\\n    // Fit zoomScale in set bounds\\n    zoomScale = Math.max(this.options.minZoom * originalState.zoom, Math.min(this.options.maxZoom * originalState.zoom, zoomScale))\\n    // Find relative scale to achieve desired scale\\n    zoomScale = zoomScale/this.getZoom()\\n  }\\n\\n  var oldCTM = this.viewport.getCTM()\\n    , relativePoint = point.matrixTransform(oldCTM.inverse())\\n    , modifier = this.svg.createSVGMatrix().translate(relativePoint.x, relativePoint.y).scale(zoomScale).translate(-relativePoint.x, -relativePoint.y)\\n    , newCTM = oldCTM.multiply(modifier)\\n\\n  if (newCTM.a !== oldCTM.a) {\\n    this.viewport.setCTM(newCTM)\\n  }\\n}\\n\\n/**\\n * Zoom at center point\\n *\\n * @param  {Float} scale\\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\\n */\\nSvgPanZoom.prototype.zoom = function(scale, absolute) {\\n  this.zoomAtPoint(scale, SvgUtils.getSvgCenterPoint(this.svg, this.width, this.height), absolute)\\n}\\n\\n/**\\n * Zoom used by public instance\\n *\\n * @param  {Float} scale\\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\\n */\\nSvgPanZoom.prototype.publicZoom = function(scale, absolute) {\\n  if (absolute) {\\n    scale = this.computeFromRelativeZoom(scale)\\n  }\\n\\n  this.zoom(scale, absolute)\\n}\\n\\n/**\\n * Zoom at point used by public instance\\n *\\n * @param  {Float} scale\\n * @param  {SVGPoint|Object} point    An object that has x and y attributes\\n * @param  {Boolean} absolute Marks zoom scale as relative or absolute\\n */\\nSvgPanZoom.prototype.publicZoomAtPoint = function(scale, point, absolute) {\\n  if (absolute) {\\n    // Transform zoom into a relative value\\n    scale = this.computeFromRelativeZoom(scale)\\n  }\\n\\n  // If not a SVGPoint but has x and y then create a SVGPoint\\n  if (Utils.getType(point) !== 'SVGPoint') {\\n    if('x' in point && 'y' in point) {\\n      point = SvgUtils.createSVGPoint(this.svg, point.x, point.y)\\n    } else {\\n      throw new Error('Given point is invalid')\\n    }\\n  }\\n\\n  this.zoomAtPoint(scale, point, absolute)\\n}\\n\\n/**\\n * Get zoom scale\\n *\\n * @return {Float} zoom scale\\n */\\nSvgPanZoom.prototype.getZoom = function() {\\n  return this.viewport.getZoom()\\n}\\n\\n/**\\n * Get zoom scale for public usage\\n *\\n * @return {Float} zoom scale\\n */\\nSvgPanZoom.prototype.getRelativeZoom = function() {\\n  return this.viewport.getRelativeZoom()\\n}\\n\\n/**\\n * Compute actual zoom from public zoom\\n *\\n * @param  {Float} zoom\\n * @return {Float} zoom scale\\n */\\nSvgPanZoom.prototype.computeFromRelativeZoom = function(zoom) {\\n  return zoom * this.viewport.getOriginalState().zoom\\n}\\n\\n/**\\n * Set zoom to initial state\\n */\\nSvgPanZoom.prototype.resetZoom = function() {\\n  var originalState = this.viewport.getOriginalState()\\n\\n  this.zoom(originalState.zoom, true);\\n}\\n\\n/**\\n * Set pan to initial state\\n */\\nSvgPanZoom.prototype.resetPan = function() {\\n  this.pan(this.viewport.getOriginalState());\\n}\\n\\n/**\\n * Set pan and zoom to initial state\\n */\\nSvgPanZoom.prototype.reset = function() {\\n  this.resetZoom()\\n  this.resetPan()\\n}\\n\\n/**\\n * Handle double click event\\n * See handleMouseDown() for alternate detection method\\n *\\n * @param {Event} evt\\n */\\nSvgPanZoom.prototype.handleDblClick = function(evt) {\\n  if (this.options.preventMouseEventsDefault) {\\n    if (evt.preventDefault) {\\n      evt.preventDefault()\\n    } else {\\n      evt.returnValue = false\\n    }\\n  }\\n\\n  // Check if target was a control button\\n  if (this.options.controlIconsEnabled) {\\n    var targetClass = evt.target.getAttribute('class') || ''\\n    if (targetClass.indexOf('svg-pan-zoom-control') > -1) {\\n      return false\\n    }\\n  }\\n\\n  var zoomFactor\\n\\n  if (evt.shiftKey) {\\n    zoomFactor = 1/((1 + this.options.zoomScaleSensitivity) * 2) // zoom out when shift key pressed\\n  } else {\\n    zoomFactor = (1 + this.options.zoomScaleSensitivity) * 2\\n  }\\n\\n  var point = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(this.svg.getScreenCTM().inverse())\\n  this.zoomAtPoint(zoomFactor, point)\\n}\\n\\n/**\\n * Handle click event\\n *\\n * @param {Event} evt\\n */\\nSvgPanZoom.prototype.handleMouseDown = function(evt, prevEvt) {\\n  if (this.options.preventMouseEventsDefault) {\\n    if (evt.preventDefault) {\\n      evt.preventDefault()\\n    } else {\\n      evt.returnValue = false\\n    }\\n  }\\n\\n  Utils.mouseAndTouchNormalize(evt, this.svg)\\n\\n  // Double click detection; more consistent than ondblclick\\n  if (this.options.dblClickZoomEnabled && Utils.isDblClick(evt, prevEvt)){\\n    this.handleDblClick(evt)\\n  } else {\\n    // Pan mode\\n    this.state = 'pan'\\n    this.firstEventCTM = this.viewport.getCTM()\\n    this.stateOrigin = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(this.firstEventCTM.inverse())\\n  }\\n}\\n\\n/**\\n * Handle mouse move event\\n *\\n * @param  {Event} evt\\n */\\nSvgPanZoom.prototype.handleMouseMove = function(evt) {\\n  if (this.options.preventMouseEventsDefault) {\\n    if (evt.preventDefault) {\\n      evt.preventDefault()\\n    } else {\\n      evt.returnValue = false\\n    }\\n  }\\n\\n  if (this.state === 'pan' && this.options.panEnabled) {\\n    // Pan mode\\n    var point = SvgUtils.getEventPoint(evt, this.svg).matrixTransform(this.firstEventCTM.inverse())\\n      , viewportCTM = this.firstEventCTM.translate(point.x - this.stateOrigin.x, point.y - this.stateOrigin.y)\\n\\n    this.viewport.setCTM(viewportCTM)\\n  }\\n}\\n\\n/**\\n * Handle mouse button release event\\n *\\n * @param {Event} evt\\n */\\nSvgPanZoom.prototype.handleMouseUp = function(evt) {\\n  if (this.options.preventMouseEventsDefault) {\\n    if (evt.preventDefault) {\\n      evt.preventDefault()\\n    } else {\\n      evt.returnValue = false\\n    }\\n  }\\n\\n  if (this.state === 'pan') {\\n    // Quit pan mode\\n    this.state = 'none'\\n  }\\n}\\n\\n/**\\n * Adjust viewport size (only) so it will fit in SVG\\n * Does not center image\\n */\\nSvgPanZoom.prototype.fit = function() {\\n  var viewBox = this.viewport.getViewBox()\\n    , newScale = Math.min(this.width/viewBox.width, this.height/viewBox.height)\\n\\n  this.zoom(newScale, true)\\n}\\n\\n/**\\n * Adjust viewport size (only) so it will contain the SVG\\n * Does not center image\\n */\\nSvgPanZoom.prototype.contain = function() {\\n  var viewBox = this.viewport.getViewBox()\\n    , newScale = Math.max(this.width/viewBox.width, this.height/viewBox.height)\\n\\n  this.zoom(newScale, true)\\n}\\n\\n/**\\n * Adjust viewport pan (only) so it will be centered in SVG\\n * Does not zoom/fit/contain image\\n */\\nSvgPanZoom.prototype.center = function() {\\n  var viewBox = this.viewport.getViewBox()\\n    , offsetX = (this.width - (viewBox.width + viewBox.x * 2) * this.getZoom()) * 0.5\\n    , offsetY = (this.height - (viewBox.height + viewBox.y * 2) * this.getZoom()) * 0.5\\n\\n  this.getPublicInstance().pan({x: offsetX, y: offsetY})\\n}\\n\\n/**\\n * Update content cached BorderBox\\n * Use when viewport contents change\\n */\\nSvgPanZoom.prototype.updateBBox = function() {\\n  this.viewport.simpleViewBoxCache()\\n}\\n\\n/**\\n * Pan to a rendered position\\n *\\n * @param  {Object} point {x: 0, y: 0}\\n */\\nSvgPanZoom.prototype.pan = function(point) {\\n  var viewportCTM = this.viewport.getCTM()\\n  viewportCTM.e = point.x\\n  viewportCTM.f = point.y\\n  this.viewport.setCTM(viewportCTM)\\n}\\n\\n/**\\n * Relatively pan the graph by a specified rendered position vector\\n *\\n * @param  {Object} point {x: 0, y: 0}\\n */\\nSvgPanZoom.prototype.panBy = function(point) {\\n  var viewportCTM = this.viewport.getCTM()\\n  viewportCTM.e += point.x\\n  viewportCTM.f += point.y\\n  this.viewport.setCTM(viewportCTM)\\n}\\n\\n/**\\n * Get pan vector\\n *\\n * @return {Object} {x: 0, y: 0}\\n */\\nSvgPanZoom.prototype.getPan = function() {\\n  var state = this.viewport.getState()\\n\\n  return {x: state.x, y: state.y}\\n}\\n\\n/**\\n * Recalculates cached svg dimensions and controls position\\n */\\nSvgPanZoom.prototype.resize = function() {\\n  // Get dimensions\\n  var boundingClientRectNormalized = SvgUtils.getBoundingClientRectNormalized(this.svg)\\n  this.width = boundingClientRectNormalized.width\\n  this.height = boundingClientRectNormalized.height\\n\\n  // Recalculate original state\\n  var viewport = this.viewport\\n  viewport.options.width = this.width\\n  viewport.options.height = this.height\\n  viewport.processCTM()\\n\\n  // Reposition control icons by re-enabling them\\n  if (this.options.controlIconsEnabled) {\\n    this.getPublicInstance().disableControlIcons()\\n    this.getPublicInstance().enableControlIcons()\\n  }\\n}\\n\\n/**\\n * Unbind mouse events, free callbacks and destroy public instance\\n */\\nSvgPanZoom.prototype.destroy = function() {\\n  var that = this\\n\\n  // Free callbacks\\n  this.beforeZoom = null\\n  this.onZoom = null\\n  this.beforePan = null\\n  this.onPan = null\\n  this.onUpdatedCTM = null\\n\\n  // Destroy custom event handlers\\n  if (this.options.customEventsHandler != null) { // jshint ignore:line\\n    this.options.customEventsHandler.destroy({\\n      svgElement: this.svg\\n    , eventsListenerElement: this.options.eventsListenerElement\\n    , instance: this.getPublicInstance()\\n    })\\n  }\\n\\n  // Unbind eventListeners\\n  for (var event in this.eventListeners) {\\n    (this.options.eventsListenerElement || this.svg)\\n      .removeEventListener(event, this.eventListeners[event], !this.options.preventMouseEventsDefault ? passiveListenerOption : false)\\n  }\\n\\n  // Unbind wheelListener\\n  this.disableMouseWheelZoom()\\n\\n  // Remove control icons\\n  this.getPublicInstance().disableControlIcons()\\n\\n  // Reset zoom and pan\\n  this.reset()\\n\\n  // Remove instance from instancesStore\\n  instancesStore = instancesStore.filter(function(instance){\\n    return instance.svg !== that.svg\\n  })\\n\\n  // Delete options and its contents\\n  delete this.options\\n\\n  // Delete viewport to make public shadow viewport functions uncallable\\n  delete this.viewport\\n\\n  // Destroy public instance and rewrite getPublicInstance\\n  delete this.publicInstance\\n  delete this.pi\\n  this.getPublicInstance = function(){\\n    return null\\n  }\\n}\\n\\n/**\\n * Returns a public instance object\\n *\\n * @return {Object} Public instance object\\n */\\nSvgPanZoom.prototype.getPublicInstance = function() {\\n  var that = this\\n\\n  // Create cache\\n  if (!this.publicInstance) {\\n    this.publicInstance = this.pi = {\\n      // Pan\\n      enablePan: function() {that.options.panEnabled = true; return that.pi}\\n    , disablePan: function() {that.options.panEnabled = false; return that.pi}\\n    , isPanEnabled: function() {return !!that.options.panEnabled}\\n    , pan: function(point) {that.pan(point); return that.pi}\\n    , panBy: function(point) {that.panBy(point); return that.pi}\\n    , getPan: function() {return that.getPan()}\\n      // Pan event\\n    , setBeforePan: function(fn) {that.options.beforePan = fn === null ? null : Utils.proxy(fn, that.publicInstance); return that.pi}\\n    , setOnPan: function(fn) {that.options.onPan = fn === null ? null : Utils.proxy(fn, that.publicInstance); return that.pi}\\n      // Zoom and Control Icons\\n    , enableZoom: function() {that.options.zoomEnabled = true; return that.pi}\\n    , disableZoom: function() {that.options.zoomEnabled = false; return that.pi}\\n    , isZoomEnabled: function() {return !!that.options.zoomEnabled}\\n    , enableControlIcons: function() {\\n        if (!that.options.controlIconsEnabled) {\\n          that.options.controlIconsEnabled = true\\n          ControlIcons.enable(that)\\n        }\\n        return that.pi\\n      }\\n    , disableControlIcons: function() {\\n        if (that.options.controlIconsEnabled) {\\n          that.options.controlIconsEnabled = false;\\n          ControlIcons.disable(that)\\n        }\\n        return that.pi\\n      }\\n    , isControlIconsEnabled: function() {return !!that.options.controlIconsEnabled}\\n      // Double click zoom\\n    , enableDblClickZoom: function() {that.options.dblClickZoomEnabled = true; return that.pi}\\n    , disableDblClickZoom: function() {that.options.dblClickZoomEnabled = false; return that.pi}\\n    , isDblClickZoomEnabled: function() {return !!that.options.dblClickZoomEnabled}\\n      // Mouse wheel zoom\\n    , enableMouseWheelZoom: function() {that.enableMouseWheelZoom(); return that.pi}\\n    , disableMouseWheelZoom: function() {that.disableMouseWheelZoom(); return that.pi}\\n    , isMouseWheelZoomEnabled: function() {return !!that.options.mouseWheelZoomEnabled}\\n      // Zoom scale and bounds\\n    , setZoomScaleSensitivity: function(scale) {that.options.zoomScaleSensitivity = scale; return that.pi}\\n    , setMinZoom: function(zoom) {that.options.minZoom = zoom; return that.pi}\\n    , setMaxZoom: function(zoom) {that.options.maxZoom = zoom; return that.pi}\\n      // Zoom event\\n    , setBeforeZoom: function(fn) {that.options.beforeZoom = fn === null ? null : Utils.proxy(fn, that.publicInstance); return that.pi}\\n    , setOnZoom: function(fn) {that.options.onZoom = fn === null ? null : Utils.proxy(fn, that.publicInstance); return that.pi}\\n      // Zooming\\n    , zoom: function(scale) {that.publicZoom(scale, true); return that.pi}\\n    , zoomBy: function(scale) {that.publicZoom(scale, false); return that.pi}\\n    , zoomAtPoint: function(scale, point) {that.publicZoomAtPoint(scale, point, true); return that.pi}\\n    , zoomAtPointBy: function(scale, point) {that.publicZoomAtPoint(scale, point, false); return that.pi}\\n    , zoomIn: function() {this.zoomBy(1 + that.options.zoomScaleSensitivity); return that.pi}\\n    , zoomOut: function() {this.zoomBy(1 / (1 + that.options.zoomScaleSensitivity)); return that.pi}\\n    , getZoom: function() {return that.getRelativeZoom()}\\n      // CTM update\\n    , setOnUpdatedCTM: function(fn) {that.options.onUpdatedCTM = fn === null ? null : Utils.proxy(fn, that.publicInstance); return that.pi}\\n      // Reset\\n    , resetZoom: function() {that.resetZoom(); return that.pi}\\n    , resetPan: function() {that.resetPan(); return that.pi}\\n    , reset: function() {that.reset(); return that.pi}\\n      // Fit, Contain and Center\\n    , fit: function() {that.fit(); return that.pi}\\n    , contain: function() {that.contain(); return that.pi}\\n    , center: function() {that.center(); return that.pi}\\n      // Size and Resize\\n    , updateBBox: function() {that.updateBBox(); return that.pi}\\n    , resize: function() {that.resize(); return that.pi}\\n    , getSizes: function() {\\n        return {\\n          width: that.width\\n        , height: that.height\\n        , realZoom: that.getZoom()\\n        , viewBox: that.viewport.getViewBox()\\n        }\\n      }\\n      // Destroy\\n    , destroy: function() {that.destroy(); return that.pi}\\n    }\\n  }\\n\\n  return this.publicInstance\\n}\\n\\n/**\\n * Stores pairs of instances of SvgPanZoom and SVG\\n * Each pair is represented by an object {svg: SVGSVGElement, instance: SvgPanZoom}\\n *\\n * @type {Array}\\n */\\nvar instancesStore = []\\n\\nvar svgPanZoom = function(elementOrSelector, options){\\n  var svg = Utils.getSvg(elementOrSelector)\\n\\n  if (svg === null) {\\n    return null\\n  } else {\\n    // Look for existent instance\\n    for(var i = instancesStore.length - 1; i >= 0; i--) {\\n      if (instancesStore[i].svg === svg) {\\n        return instancesStore[i].instance.getPublicInstance()\\n      }\\n    }\\n\\n    // If instance not found - create one\\n    instancesStore.push({\\n      svg: svg\\n    , instance: new SvgPanZoom(svg, options)\\n    })\\n\\n    // Return just pushed instance\\n    return instancesStore[instancesStore.length - 1].instance.getPublicInstance()\\n  }\\n}\\n\\nmodule.exports = svgPanZoom;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Wheel\",\"ControlIcons\",\"Utils\",\"SvgUtils\",\"ShadowViewport\",\"SvgPanZoom\",\"svg\",\"options\",\"init\",\"optionsDefaults\",\"viewportSelector\",\"panEnabled\",\"controlIconsEnabled\",\"zoomEnabled\",\"dblClickZoomEnabled\",\"mouseWheelZoomEnabled\",\"preventMouseEventsDefault\",\"zoomScaleSensitivity\",\"minZoom\",\"maxZoom\",\"fit\",\"contain\",\"center\",\"refreshRate\",\"beforeZoom\",\"onZoom\",\"beforePan\",\"onPan\",\"customEventsHandler\",\"eventsListenerElement\",\"onUpdatedCTM\",\"passiveListenerOption\",\"passive\",\"prototype\",\"SvgPanZoom.prototype.init\",\"that\",\"defs\",\"querySelector\",\"setupSvgAttributes\",\"extend\",\"state\",\"boundingClientRectNormalized\",\"getBoundingClientRectNormalized\",\"width\",\"height\",\"viewport\",\"getOrCreateViewport\",\"oldScale\",\"newScale\",\"scale\",\"oldPoint\",\"newPoint\",\"point\",\"ctm\",\"publicInstance\",\"getPublicInstance\",\"setBeforeZoom\",\"setOnZoom\",\"setBeforePan\",\"setOnPan\",\"setOnUpdatedCTM\",\"enable\",\"lastMouseWheelEventTime\",\"Date\",\"now\",\"setupHandlers\",\"SvgPanZoom.prototype.setupHandlers\",\"prevEvt\",\"eventListeners\",\"mousedown\",\"evt\",\"result\",\"handleMouseDown\",\"touchstart\",\"mouseup\",\"handleMouseUp\",\"touchend\",\"mousemove\",\"handleMouseMove\",\"touchmove\",\"mouseleave\",\"touchleave\",\"touchcancel\",\"svgElement\",\"instance\",\"haltEventListeners\",\"length\",\"i\",\"hasOwnProperty\",\"event\",\"addEventListener\",\"enableMouseWheelZoom\",\"SvgPanZoom.prototype.enableMouseWheelZoom\",\"wheelListener\",\"this.wheelListener\",\"handleMouseWheel\",\"on\",\"isPassiveListener\",\"disableMouseWheelZoom\",\"SvgPanZoom.prototype.disableMouseWheelZoom\",\"off\",\"SvgPanZoom.prototype.handleMouseWheel\",\"preventDefault\",\"returnValue\",\"delta\",\"deltaY\",\"timeDelta\",\"divider\",\"Math\",\"max\",\"deltaMode\",\"wheelDelta\",\"abs\",\"log\",\"inversedScreenCTM\",\"getScreenCTM\",\"inverse\",\"relativeMousePoint\",\"getEventPoint\",\"matrixTransform\",\"zoomAtPoint\",\"pow\",\"zoom\",\"SvgPanZoom.prototype.zoomAtPoint\",\"zoomScale\",\"zoomAbsolute\",\"originalState\",\"getOriginalState\",\"min\",\"getZoom\",\"oldCTM\",\"getCTM\",\"relativePoint\",\"modifier\",\"createSVGMatrix\",\"translate\",\"x\",\"y\",\"newCTM\",\"multiply\",\"a\",\"setCTM\",\"SvgPanZoom.prototype.zoom\",\"absolute\",\"getSvgCenterPoint\",\"publicZoom\",\"SvgPanZoom.prototype.publicZoom\",\"computeFromRelativeZoom\",\"publicZoomAtPoint\",\"SvgPanZoom.prototype.publicZoomAtPoint\",\"getType\",\"createSVGPoint\",\"Error\",\"SvgPanZoom.prototype.getZoom\",\"getRelativeZoom\",\"SvgPanZoom.prototype.getRelativeZoom\",\"SvgPanZoom.prototype.computeFromRelativeZoom\",\"resetZoom\",\"SvgPanZoom.prototype.resetZoom\",\"resetPan\",\"SvgPanZoom.prototype.resetPan\",\"pan\",\"reset\",\"SvgPanZoom.prototype.reset\",\"handleDblClick\",\"SvgPanZoom.prototype.handleDblClick\",\"indexOf\",\"target\",\"getAttribute\",\"zoomFactor\",\"shiftKey\",\"SvgPanZoom.prototype.handleMouseDown\",\"mouseAndTouchNormalize\",\"isDblClick\",\"firstEventCTM\",\"stateOrigin\",\"SvgPanZoom.prototype.handleMouseMove\",\"viewportCTM\",\"SvgPanZoom.prototype.handleMouseUp\",\"SvgPanZoom.prototype.fit\",\"viewBox\",\"getViewBox\",\"SvgPanZoom.prototype.contain\",\"SvgPanZoom.prototype.center\",\"offsetX\",\"offsetY\",\"updateBBox\",\"SvgPanZoom.prototype.updateBBox\",\"simpleViewBoxCache\",\"SvgPanZoom.prototype.pan\",\"e\",\"f\",\"panBy\",\"SvgPanZoom.prototype.panBy\",\"getPan\",\"SvgPanZoom.prototype.getPan\",\"getState\",\"resize\",\"SvgPanZoom.prototype.resize\",\"processCTM\",\"disableControlIcons\",\"enableControlIcons\",\"destroy\",\"SvgPanZoom.prototype.destroy\",\"removeEventListener\",\"instancesStore\",\"filter\",\"pi\",\"this.getPublicInstance\",\"SvgPanZoom.prototype.getPublicInstance\",\"enablePan\",\"disablePan\",\"isPanEnabled\",\"fn\",\"proxy\",\"enableZoom\",\"disableZoom\",\"isZoomEnabled\",\"disable\",\"isControlIconsEnabled\",\"enableDblClickZoom\",\"disableDblClickZoom\",\"isDblClickZoomEnabled\",\"isMouseWheelZoomEnabled\",\"setZoomScaleSensitivity\",\"setMinZoom\",\"setMaxZoom\",\"zoomBy\",\"zoomAtPointBy\",\"zoomIn\",\"zoomOut\",\"getSizes\",\"realZoom\",\"svgPanZoom\",\"elementOrSelector\",\"getSvg\",\"push\"]\n}\n"]