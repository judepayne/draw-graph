["^ ","~:output",["^ ","~:js","goog.provide('markdown.tables');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\nmarkdown.tables.parse_table_row = (function markdown$tables$parse_table_row(text){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__36264_SHARP_){\nreturn cljs.core.identity(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),p1__36264_SHARP_], null));\n}),cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.string.trim,(function (){var G__36266 = clojure.string.trim((function (){var fexpr__36267 = (function (p1__36262_SHARP_){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__36262_SHARP_),\"|\")){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.rest(p1__36262_SHARP_));\n} else {\nreturn p1__36262_SHARP_;\n}\n});\nreturn fexpr__36267(text);\n})());\nvar fexpr__36265 = ((function (G__36266){\nreturn (function (p1__36263_SHARP_){\nreturn clojure.string.split.cljs$core$IFn$_invoke$arity$2(p1__36263_SHARP_,/\\|/);\n});})(G__36266))\n;\nreturn fexpr__36265(G__36266);\n})()));\n});\nmarkdown.tables.table_row__GT_str = (function markdown$tables$table_row__GT_str(row_data,is_header_QMARK_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (row,col){\nvar alignment_str = (cljs.core.truth_(new cljs.core.Keyword(null,\"alignment\",\"alignment\",1040093386).cljs$core$IFn$_invoke$arity$1(col))?[\" align='\",cljs.core.name(new cljs.core.Keyword(null,\"alignment\",\"alignment\",1040093386).cljs$core$IFn$_invoke$arity$1(col)),\"'\"].join(''):null);\nif(cljs.core.truth_(is_header_QMARK_)){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(row),\"<th\",alignment_str,\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(col)),\"</th>\"].join('');\n} else {\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(row),\"<td\",alignment_str,\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(col)),\"</td>\"].join('');\n}\n}),\"\",row_data);\n});\nmarkdown.tables.table__GT_str = (function markdown$tables$table__GT_str(table){\nvar table_data = cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(cljs.core.vector,new cljs.core.Keyword(null,\"data\",\"data\",-232669377).cljs$core$IFn$_invoke$arity$1(table));\nvar alignment_seq = new cljs.core.Keyword(null,\"alignment-seq\",\"alignment-seq\",1587946543).cljs$core$IFn$_invoke$arity$1(table);\nreturn [\"<table>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (table_data,alignment_seq){\nreturn (function (table_acc,row){\nvar row_idx = cljs.core.first(row);\nvar row_data = cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(cljs.core.merge,cljs.core.second(row),alignment_seq);\nvar is_header_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(row_idx,(0));\nvar is_first_row_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(row_idx,(1));\nvar is_last_row_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(row_idx,(cljs.core.count(table_data) - (1)));\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(table_acc),((is_header_QMARK_)?\"<thead>\":((is_first_row_QMARK_)?\"<tbody>\":null)),\"<tr>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(markdown.tables.table_row__GT_str(row_data,is_header_QMARK_)),\"</tr>\",((is_header_QMARK_)?\"</thead>\":((is_last_row_QMARK_)?\"</tbody>\":null))].join('');\n});})(table_data,alignment_seq))\n,\"\",table_data)),\"</table>\"].join('');\n});\nmarkdown.tables.divider_seq__GT_alignment = (function markdown$tables$divider_seq__GT_alignment(divider_seq){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (divider){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.re_find(/^:-+/,new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(divider)),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(divider))){\nreturn cljs.core.identity(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"alignment\",\"alignment\",1040093386),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.re_find(/^-+:/,new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(divider)),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(divider))){\nreturn cljs.core.identity(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"alignment\",\"alignment\",1040093386),new cljs.core.Keyword(null,\"right\",\"right\",-452581833)], null));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.re_find(/^:-+:/,new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(divider)),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697).cljs$core$IFn$_invoke$arity$1(divider))){\nreturn cljs.core.identity(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"alignment\",\"alignment\",1040093386),new cljs.core.Keyword(null,\"center\",\"center\",-748944368)], null));\n} else {\nreturn null;\n\n}\n}\n}\n}),divider_seq);\n});\nmarkdown.tables.table = (function markdown$tables$table(text,state){\nvar table_row_re = cljs.core.re_find(/\\|(?: [\\S ]+ \\|)+/,text);\nvar table_divider_re = cljs.core.re_find(/\\|(?: :?-+:? \\|)+/,text);\nvar is_table_row_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(table_row_re,text);\nvar is_table_header_QMARK_ = ((is_table_row_QMARK_) && (cljs.core.not(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),new cljs.core.Keyword(null,\"in-table-body?\",\"in-table-body?\",-136773915)], null)))));\nvar is_table_divider_QMARK_ = (function (){var and__4120__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(table_divider_re,text);\nif(and__4120__auto__){\nvar and__4120__auto____$1 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),new cljs.core.Keyword(null,\"in-table-body?\",\"in-table-body?\",-136773915)], null));\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),new cljs.core.Keyword(null,\"is-prev-header?\",\"is-prev-header?\",-1637281701)], null));\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})();\nif(is_table_header_QMARK_){\nvar header_seq = markdown.tables.parse_table_row(text);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc_in(cljs.core.assoc_in(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),new cljs.core.Keyword(null,\"is-prev-header?\",\"is-prev-header?\",-1637281701)], null),true),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),new cljs.core.Keyword(null,\"in-table-body?\",\"in-table-body?\",-136773915)], null),true),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),new cljs.core.Keyword(null,\"data\",\"data\",-232669377)], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),cljs.core.vec(header_seq))], null);\n} else {\nif(cljs.core.truth_(is_table_divider_QMARK_)){\nvar divider_seq = markdown.tables.parse_table_row(text);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",cljs.core.assoc_in(cljs.core.assoc_in(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),new cljs.core.Keyword(null,\"is-prev-header?\",\"is-prev-header?\",-1637281701)], null),false),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),new cljs.core.Keyword(null,\"alignment-seq\",\"alignment-seq\",1587946543)], null),markdown.tables.divider_seq__GT_alignment(divider_seq))], null);\n} else {\nif(is_table_row_QMARK_){\nvar row_seq = markdown.tables.parse_table_row(text);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc_in(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),new cljs.core.Keyword(null,\"is-prev-header?\",\"is-prev-header?\",-1637281701)], null),false),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),new cljs.core.Keyword(null,\"data\",\"data\",-232669377)], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),cljs.core.vec(row_seq))], null);\n} else {\nvar out = ((cljs.core.empty_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),new cljs.core.Keyword(null,\"data\",\"data\",-232669377)], null))))?text:[markdown.tables.table__GT_str(new cljs.core.Keyword(null,\"table\",\"table\",-564943036).cljs$core$IFn$_invoke$arity$1(state)),cljs.core.str.cljs$core$IFn$_invoke$arity$1(text)].join(''));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [out,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.Keyword(null,\"table\",\"table\",-564943036))], null);\n\n}\n}\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/tables.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.tables","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^O","~$string","^O","~$cljs.core","^Q","~$goog","^R"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^Q","^Q"],"~:form",["~#list",["~$ns","^J",["^X",["^T",["^O","~:as","^P"]]]]],"~:flags",["^ ","^T",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^R","^Q","^O"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","markdown/tables.cljc"],"~:compiled-at",1560836392645,"~:resource-name","markdown/tables.cljc","~:warnings",[],"~:source","(ns markdown.tables\n  (:require [clojure.string :as string]))\n\n(defn parse-table-row [text]\n  (->> text\n       (#(if (= (first %) \\|)\n          (apply str (rest %))\n          %))\n       (string/trim)\n       (#(string/split % #\"\\|\"))\n       (map string/trim)\n       (map #(identity {:text %}))))\n\n(defn table-row->str [row-data is-header?]\n  (reduce\n    (fn [row col]\n      (let [alignment-str (when (:alignment col)\n                            (str \" align='\" (name (:alignment col)) \"'\"))]\n        (if is-header?\n          (str row\n               \"<th\" alignment-str \">\" (:text col) \"</th>\")\n          (str row\n               \"<td\" alignment-str \">\" (:text col) \"</td>\"))))\n    \"\"\n    row-data))\n\n(defn table->str [table]\n  (let [table-data (map-indexed vector (:data table))\n        alignment-seq (:alignment-seq table)]\n    (str \"<table>\"\n         (reduce\n           (fn [table-acc row]\n             (let [row-idx (first row)\n                   row-data (mapv merge (second row) alignment-seq)\n                   is-header? (= row-idx 0)\n                   is-first-row? (= row-idx 1)\n                   is-last-row? (= row-idx (dec (count table-data)))]\n               (str\n                 table-acc\n                 (cond\n                   is-header?\n                   \"<thead>\"\n                   is-first-row?\n                   \"<tbody>\")\n                 \"<tr>\"\n                 (table-row->str row-data is-header?)\n                 \"</tr>\"\n                 (cond\n                   is-header?\n                   \"</thead>\"\n                   is-last-row?\n                   \"</tbody>\"))))\n           \"\"\n           table-data)\n         \"</table>\")))\n\n(defn divider-seq->alignment [divider-seq]\n  (mapv (fn [divider]\n          (cond\n            (= (re-find #\"^:-+\" (:text divider))\n               (:text divider))\n            (identity {:alignment :left})\n\n            (= (re-find #\"^-+:\" (:text divider))\n               (:text divider))\n            (identity {:alignment :right})\n\n            (= (re-find #\"^:-+:\" (:text divider))\n               (:text divider))\n            (identity {:alignment :center})\n\n            :else\n            nil))\n        divider-seq))\n\n(defn table [text state]\n  (let [table-row-re (re-find #\"\\|(?: [\\S ]+ \\|)+\" text)\n        table-divider-re (re-find #\"\\|(?: :?-+:? \\|)+\" text)\n        is-table-row? (= table-row-re text)\n        is-table-header?\n        (and is-table-row?\n             (not (get-in state [:table :in-table-body?])))\n        is-table-divider?\n        (and (= table-divider-re text)\n             (get-in state [:table :in-table-body?])\n             (get-in state [:table :is-prev-header?]))]\n    (cond\n      is-table-header?\n      (let [header-seq (parse-table-row text)]\n        [\"\" (-> state\n                (assoc-in [:table :is-prev-header?] true)\n                (assoc-in [:table :in-table-body?] true)\n                (update-in [:table :data] (fnil conj []) (vec header-seq)))])\n\n      is-table-divider?\n      (let [divider-seq (parse-table-row text)]\n        [\"\" (-> state\n                (assoc-in [:table :is-prev-header?] false)\n                (assoc-in [:table :alignment-seq]\n                          (divider-seq->alignment divider-seq)))])\n\n      is-table-row?\n      (let [row-seq (parse-table-row text)]\n        [\"\" (-> state\n                (assoc-in [:table :is-prev-header?] false)\n                (update-in [:table :data] (fnil conj []) (vec row-seq)))])\n\n      :else\n      (let [out (if (empty? (get-in state [:table :data]))\n                  text\n                  (str (table->str (:table state)) text))]\n        [out (dissoc state :table)]))))","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["markdown.tables/parse-table-row","text","fexpr__36267","p1__36262#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core/rest","clojure.string/trim","G__36266","fexpr__36265","p1__36263#","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__36264#","cljs.core/identity","markdown.tables/table-row->str","row-data","is-header?","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","row","col","alignment-str","cljs.core/name","markdown.tables/table->str","table","table-data","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","alignment-seq","table-acc","row-idx","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","cljs.core/second","is-first-row?","is-last-row?","cljs.core/count","markdown.tables/divider-seq->alignment","divider-seq","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","divider","cljs.core/re-find","markdown.tables/table","state","table-row-re","table-divider-re","is-table-row?","is-table-header?","cljs.core/not","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","is-table-divider?","and__4120__auto__","header-seq","cljs.core/assoc-in","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","cljs.core/vec","row-seq","out","cljs.core/empty?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2"]]],"~:cache-keys",["~#cmap",[["~:macro","^Q"],[1559826623000],["^13","goog/math/math.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^R","~$goog.array","~$goog.asserts"]]],["^13","goog/array/array.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^1F"]]],["^13","goog/debug/error.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","goog/dom/nodetype.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","goog/object/object.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^13","goog/math/long.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^1F","~$goog.reflect"]]],["^13","goog/string/internal.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","goog/functions/functions.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","goog/structs/map.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^13","goog/asserts/asserts.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^13","goog/uri/uri.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^1E","^1F","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^13","markdown/tables.cljc"],[1547313541000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^Q","^O"]]],["^13","goog/base.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",[]]],["^13","goog/structs/structs.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^1E","~$goog.object"]]],["^13","clojure/string.cljs"],[1559826623000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^Q","^1M","~$goog.string.StringBuffer"]]],["^13","goog/string/string.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","~$goog.string.internal"]]],["^13","goog/reflect/reflect.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","goog/string/stringbuffer.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","goog/iter/iter.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^1E","^1F","~$goog.functions","~$goog.math"]]],["^13","cljs/core.cljs"],[1559826623000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["~$goog.math.Long","~$goog.math.Integer","^1M","^1S","^1E","~$goog.Uri","^1T"]]],["^13","goog/math/integer.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R"]]],["^13","goog/uri/utils.js"],[1560546089000,"^1A",["^ ","^1B",null,"^1C",["^H",[]],"^1D",["^R","^1E","^1F","^1M"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/tables.cljc","^7",1,"^8",5,"^9",1,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^R"],"^S",["^H",["^T"]],"^U",null,"~:defs",["^ ","~$parse-table-row",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/tables.cljc","^7",4,"^8",7,"^9",4,"^:",22,"~:arglists",["^X",["~$quote",["^X",[["~$text"]]]]]],"^I","~$markdown.tables/parse-table-row","^6","markdown/tables.cljc","^:",22,"~:method-params",["^X",[["^25"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^8",1,"~:variadic?",false,"^7",4,"~:ret-tag","~$cljs.core/LazySeq","^9",4,"~:max-fixed-arity",1,"~:fn-var",true,"^23",["^X",["^24",["^X",[["^25"]]]]]],"~$table-row->str",["^ ","^22",null,"^5",["^ ","^6","markdown/tables.cljc","^7",14,"^8",7,"^9",14,"^:",21,"^23",["^X",["^24",["^X",[["~$row-data","~$is-header?"]]]]]],"^I","~$markdown.tables/table-row->str","^6","markdown/tables.cljc","^:",21,"^27",["^X",[["^2@","^2A"]]],"^28",null,"^29",["^X",[null,null]],"^8",1,"^2:",false,"^7",14,"^2;",["^H",[null,"~$any"]],"^9",14,"^2=",2,"^2>",true,"^23",["^X",["^24",["^X",[["^2@","^2A"]]]]]],"~$table->str",["^ ","^22",null,"^5",["^ ","^6","markdown/tables.cljc","^7",27,"^8",7,"^9",27,"^:",17,"^23",["^X",["^24",["^X",[["~$table"]]]]]],"^I","~$markdown.tables/table->str","^6","markdown/tables.cljc","^:",17,"^27",["^X",[["^2E"]]],"^28",null,"^29",["^X",[null,null]],"^8",1,"^2:",false,"^7",27,"^2;","^P","^9",27,"^2=",1,"^2>",true,"^23",["^X",["^24",["^X",[["^2E"]]]]]],"~$divider-seq->alignment",["^ ","^22",null,"^5",["^ ","^6","markdown/tables.cljc","^7",57,"^8",7,"^9",57,"^:",29,"^23",["^X",["^24",["^X",[["~$divider-seq"]]]]]],"^I","~$markdown.tables/divider-seq->alignment","^6","markdown/tables.cljc","^:",29,"^27",["^X",[["^2H"]]],"^28",null,"^29",["^X",[null,null]],"^8",1,"^2:",false,"^7",57,"^2;","~$clj","^9",57,"^2=",1,"^2>",true,"^23",["^X",["^24",["^X",[["^2H"]]]]]],"^2E",["^ ","^22",null,"^5",["^ ","^6","markdown/tables.cljc","^7",76,"^8",7,"^9",76,"^:",12,"^23",["^X",["^24",["^X",[["^25","~$state"]]]]]],"^I","~$markdown.tables/table","^6","markdown/tables.cljc","^:",12,"^27",["^X",[["^25","^2K"]]],"^28",null,"^29",["^X",[null,null]],"^8",1,"^2:",false,"^7",76,"^2;","~$cljs.core/IVector","^9",76,"^2=",2,"^2>",true,"^23",["^X",["^24",["^X",[["^25","^2K"]]]]]]],"^V",["^ ","^Q","^Q"],"~:cljs.analyzer/constants",["^ ","^S",["^H",["~:table","~:in-table-body?","~:else","~:alignment","~:alignment-seq","~:center","~:right","~:is-prev-header?","~:left","~:text","~:data"]],"~:order",["^2X","^2R","^2Y","^2S","^2W","^2U","^2T","^2Q","^2O","^2P","^2V"]],"^[",["^ ","^T",["^H",[]]],"^10",["^ "],"^11",["^R","^Q","^O"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1?",[["^31","~:static-fns"],true,["^31","~:elide-asserts"],false,["^31","~:optimize-constants"],null,["^31","^16"],null,["^31","~:external-config"],null,["^31","~:tooling-config"],null,["^31","~:emit-constants"],null,["^31","~:load-tests"],null,["^31","~:infer-externs"],"~:auto",["^31","^18"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^31","~:fn-invoke-direct"],null,["^31","~:source-map"],"/dev/null"]]]