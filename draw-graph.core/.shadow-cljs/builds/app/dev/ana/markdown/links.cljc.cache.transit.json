["^ ","~:output",["^ ","~:js","goog.provide('markdown.links');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('markdown.common');\nmarkdown.links.href = (function markdown$links$href(text,link,state){\nvar vec__36119 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),link);\nvar link__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36119,(0),null);\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36119,(1),null);\nreturn markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.seq(\"<a href='\"),link__$1,cljs.core.seq(\"'\"),(cljs.core.truth_(cljs.core.not_empty(title))?cljs.core.seq(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.str,\" title=\",clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.rest(title)),\">\")):cljs.core.seq(\">\")),text,cljs.core.seq(\"</a>\"),state], 0));\n});\nmarkdown.links.img = (function markdown$links$img(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___36342 = arguments.length;\nvar i__4731__auto___36343 = (0);\nwhile(true){\nif((i__4731__auto___36343 < len__4730__auto___36342)){\nargs__4736__auto__.push((arguments[i__4731__auto___36343]));\n\nvar G__36344 = (i__4731__auto___36343 + (1));\ni__4731__auto___36343 = G__36344;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((3) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((3)),(0),null)):null);\nreturn markdown.links.img.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4737__auto__);\n});\n\nmarkdown.links.img.cljs$core$IFn$_invoke$arity$variadic = (function (alt,url,state,p__36132){\nvar vec__36133 = p__36132;\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36133,(0),null);\nreturn markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.seq(\"<img src=\\\"\"),url,cljs.core.seq(\"\\\" alt=\\\"\"),alt,(cljs.core.truth_(cljs.core.not_empty(title))?cljs.core.seq(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.str,\"\\\" title=\",clojure.string.join.cljs$core$IFn$_invoke$arity$1(title),\" />\")):cljs.core.seq(\"\\\" />\")),state], 0));\n});\n\nmarkdown.links.img.cljs$lang$maxFixedArity = (3);\n\n/** @this {Function} */\nmarkdown.links.img.cljs$lang$applyTo = (function (seq36122){\nvar G__36123 = cljs.core.first(seq36122);\nvar seq36122__$1 = cljs.core.next(seq36122);\nvar G__36124 = cljs.core.first(seq36122__$1);\nvar seq36122__$2 = cljs.core.next(seq36122__$1);\nvar G__36125 = cljs.core.first(seq36122__$2);\nvar seq36122__$3 = cljs.core.next(seq36122__$2);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__36123,G__36124,G__36125,seq36122__$3);\n});\n\nmarkdown.links.handle_img_link = (function markdown$links$handle_img_link(xs,state){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"[\",\"!\",\"[\"], null),cljs.core.take.cljs$core$IFn$_invoke$arity$2((3),xs))){\nvar xs__$1 = cljs.core.drop.cljs$core$IFn$_invoke$arity$2((3),xs);\nvar vec__36152 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"]\"),xs__$1);\nvar alt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36152,(0),null);\nvar xy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36152,(1),null);\nvar vec__36155 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\")\"),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((2),xy));\nvar url_title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36155,(0),null);\nvar zy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36155,(1),null);\nvar vec__36158 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),url_title);\nvar url = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36158,(0),null);\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36158,(1),null);\nvar vec__36161 = markdown.links.img.cljs$core$IFn$_invoke$arity$variadic(alt,url,state,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.not_empty(title)], 0));\nvar new_text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36161,(0),null);\nvar new_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36161,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(\"[\",new_text,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.rest(zy)], 0)),new_state], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xs,state], null);\n}\n});\nmarkdown.links.process_link_title = (function markdown$links$process_link_title(title,state){\nreturn cljs.core.first(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__36180_SHARP_,p2__36179_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(p2__36179_SHARP_,p1__36180_SHARP_);\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [title,state], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.common.italics,markdown.common.em,markdown.common.strong,markdown.common.bold,markdown.common.strikethrough], null)));\n});\nmarkdown.links.make_link = (function markdown$links$make_link(img_QMARK_){\nreturn (function markdown$links$make_link_$_link(text,p__36188){\nvar map__36189 = p__36188;\nvar map__36189__$1 = (((((!((map__36189 == null))))?(((((map__36189.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__36189.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__36189):map__36189);\nvar state = map__36189__$1;\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36189__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36189__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nif(cljs.core.truth_((function (){var or__4131__auto__ = code;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn codeblock;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar out = cljs.core.PersistentVector.EMPTY;\nvar tokens = cljs.core.seq(text);\nvar loop_state = state;\nwhile(true){\nif(cljs.core.empty_QMARK_(tokens)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.cljs$core$IFn$_invoke$arity$1(out),loop_state], null);\n} else {\nvar vec__36233 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"[\"),tokens);\nvar head = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36233,(0),null);\nvar xs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36233,(1),null);\nvar vec__36236 = markdown.links.handle_img_link(xs,loop_state);\nvar xs__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36236,(0),null);\nvar loop_state__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36236,(1),null);\nvar vec__36239 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"]\"),xs__$1);\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36239,(0),null);\nvar ys = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36239,(1),null);\nvar vec__36242 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\"(\"),ys);\nvar dud = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36242,(0),null);\nvar zs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36242,(1),null);\nvar vec__36245 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\")\"),zs);\nvar link__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36245,(0),null);\nvar tail = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36245,(1),null);\nif((((cljs.core.count(link__$1) < (2))) || ((cljs.core.count(tail) < (1))) || ((cljs.core.count(dud) > (1))))){\nvar G__36363 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,head,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([markdown.links.process_link_title(title,state),dud,link__$1], 0));\nvar G__36364 = tail;\nvar G__36365 = loop_state__$1;\nout = G__36363;\ntokens = G__36364;\nloop_state = G__36365;\ncontinue;\n} else {\nif(((cljs.core.not(img_QMARK_)) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.last(head),\"!\")))){\nvar vec__36250 = markdown.links.href(cljs.core.rest(markdown.links.process_link_title(title,state)),cljs.core.rest(link__$1),loop_state__$1);\nvar link_text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36250,(0),null);\nvar new_loop_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36250,(1),null);\nvar G__36367 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,head,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([link_text], 0));\nvar G__36368 = cljs.core.rest(tail);\nvar G__36369 = new_loop_state;\nout = G__36367;\ntokens = G__36368;\nloop_state = G__36369;\ncontinue;\n} else {\nif(cljs.core.truth_((function (){var and__4120__auto__ = img_QMARK_;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.last(head),\"!\");\n} else {\nreturn and__4120__auto__;\n}\n})())){\nvar alt = cljs.core.rest(title);\nvar vec__36256 = cljs.core.split_with(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.not_EQ_,\" \"),cljs.core.rest(link__$1));\nvar url = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36256,(0),null);\nvar title__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36256,(1),null);\nvar title__$2 = markdown.links.process_link_title(clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.rest(title__$1)),loop_state__$1);\nvar vec__36259 = markdown.links.img.cljs$core$IFn$_invoke$arity$variadic(alt,url,loop_state__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([title__$2], 0));\nvar img_text = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36259,(0),null);\nvar new_loop_state = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36259,(1),null);\nvar G__36370 = cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(out,cljs.core.butlast(head),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([img_text], 0));\nvar G__36371 = cljs.core.rest(tail);\nvar G__36372 = new_loop_state;\nout = G__36370;\ntokens = G__36371;\nloop_state = G__36372;\ncontinue;\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(out,tokens)),loop_state__$1], null);\n\n}\n}\n}\n}\nbreak;\n}\n}\n});\n});\nmarkdown.links.link = markdown.links.make_link(false);\nmarkdown.links.image = markdown.links.make_link(true);\nmarkdown.links.reference = (function markdown$links$reference(text){\nreturn cljs.core.re_find(/^\\[[a-zA-Z0-9 \\-_\\.]+\\]:/,text);\n});\nmarkdown.links.parse_reference = (function markdown$links$parse_reference(reference,start){\nreturn clojure.string.split.cljs$core$IFn$_invoke$arity$3(clojure.string.trim(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(reference,start)),/\\s+/,(2));\n});\nmarkdown.links.parse_reference_link = (function markdown$links$parse_reference_link(line,references){\nvar trimmed = clojure.string.trim(line);\nvar temp__5720__auto__ = markdown.links.reference(trimmed);\nif(cljs.core.truth_(temp__5720__auto__)){\nvar link = temp__5720__auto__;\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(references,cljs.core.assoc,cljs.core.subs.cljs$core$IFn$_invoke$arity$3(link,(0),(cljs.core.count(link) - (1))),markdown.links.parse_reference(trimmed,(cljs.core.count(link) + (1))));\n} else {\nreturn null;\n}\n});\nmarkdown.links.replace_reference_link = (function markdown$links$replace_reference_link(references,reference){\nvar vec__36273 = clojure.string.split.cljs$core$IFn$_invoke$arity$3(reference,/\\]\\s*/,(2));\nvar title = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36273,(0),null);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36273,(1),null);\nvar vec__36276 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(references,id);\nvar link = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36276,(0),null);\nvar alt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36276,(1),null);\nreturn [\"<a href='\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(link),\"'\",(cljs.core.truth_(alt)?[\" title='\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$3(alt,(1),(cljs.core.count(alt) - (1)))),\"'\"].join(''):null),\">\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(title,(1))),\"</a>\"].join('');\n});\nmarkdown.links.encode_links = (function markdown$links$encode_links(links,i){\nreturn cljs.core.second(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__36279,link){\nvar vec__36280 = p__36279;\nvar i__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36280,(0),null);\nvar encoded = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36280,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(i__$1 + (1)),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(encoded,markdown.common.gen_token(i__$1),link)], null);\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [i,cljs.core.PersistentArrayMap.EMPTY], null),links));\n});\nmarkdown.links.parse_links = (function markdown$links$parse_links(references,links){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__36283){\nvar vec__36284 = p__36283;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36284,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36284,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,markdown.links.replace_reference_link(references,v)], null);\n}),links));\n});\nmarkdown.links.freeze_links = (function markdown$links$freeze_links(references,text,state){\nvar links = cljs.core.re_seq(/\\[[^\\]]+\\]\\s*\\[[a-zA-Z0-9 \\-_\\.]+\\]/,text);\nvar encoded_links = markdown.links.encode_links(links,(function (){var G__36288 = new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560).cljs$core$IFn$_invoke$arity$1(state);\nvar fexpr__36287 = cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.count,cljs.core.PersistentVector.EMPTY);\nreturn (fexpr__36287.cljs$core$IFn$_invoke$arity$1 ? fexpr__36287.cljs$core$IFn$_invoke$arity$1(G__36288) : fexpr__36287.call(null,G__36288));\n})());\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (links,encoded_links){\nreturn (function (s,p__36298){\nvar vec__36299 = p__36298;\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36299,(0),null);\nvar link = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36299,(1),null);\nreturn clojure.string.replace(s,link,id);\n});})(links,encoded_links))\n,text,encoded_links),cljs.core.update.cljs$core$IFn$_invoke$arity$4(state,new cljs.core.Keyword(null,\"frozen-strings\",\"frozen-strings\",-1410661560),cljs.core.merge,markdown.links.parse_links(references,encoded_links))], null);\n});\nmarkdown.links.reference_link = (function markdown$links$reference_link(text,p__36302){\nvar map__36303 = p__36302;\nvar map__36303__$1 = (((((!((map__36303 == null))))?(((((map__36303.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__36303.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__36303):map__36303);\nvar state = map__36303__$1;\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36303__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36303__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nvar references = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36303__$1,new cljs.core.Keyword(null,\"references\",\"references\",882562509));\nif(cljs.core.truth_((function (){var or__4131__auto__ = (references == null);\nif(or__4131__auto__){\nreturn or__4131__auto__;\n} else {\nvar or__4131__auto____$1 = code;\nif(cljs.core.truth_(or__4131__auto____$1)){\nreturn or__4131__auto____$1;\n} else {\nreturn codeblock;\n}\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(cljs.core.truth_(markdown.links.reference(clojure.string.trim(text)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",state], null);\n} else {\nreturn markdown.links.freeze_links(references,text,state);\n\n}\n}\n});\nmarkdown.links.implicit_reference_link = (function markdown$links$implicit_reference_link(text,state){\nvar replacement_text = clojure.string.replace(text,/\\[([^\\]]+)\\]\\[\\]/,\"[$1][$1]\");\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [replacement_text,state], null);\n});\nmarkdown.links.footnote = (function markdown$links$footnote(text){\nreturn cljs.core.re_find(/^\\[\\^[a-zA-Z0-9_-]+\\]:/,text);\n});\nmarkdown.links.parse_footnote_link = (function markdown$links$parse_footnote_link(line,footnotes){\nvar trimmed = clojure.string.trim(line);\nvar temp__5720__auto__ = markdown.links.footnote(trimmed);\nif(cljs.core.truth_(temp__5720__auto__)){\nvar link = temp__5720__auto__;\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(footnotes,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"unprocessed\",\"unprocessed\",766771972),cljs.core.subs.cljs$core$IFn$_invoke$arity$3(link,(0),(cljs.core.count(link) - (1)))], null),markdown.links.parse_reference(trimmed,(cljs.core.count(link) + (1))));\n} else {\nreturn null;\n}\n});\nmarkdown.links.replace_footnote_link = (function markdown$links$replace_footnote_link(footnotes,footnote){\nvar next_fn_id = new cljs.core.Keyword(null,\"next-fn-id\",\"next-fn-id\",738579636).cljs$core$IFn$_invoke$arity$1(footnotes);\nvar link = [\"#fn-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_fn_id)].join('');\nreturn [\"<a href='\",link,\"' id='fnref\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_fn_id),\"'><sup>\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(next_fn_id),\"</sup></a>\"].join('');\n});\nmarkdown.links.replace_all_footnote_links = (function markdown$links$replace_all_footnote_links(text,p__36310){\nwhile(true){\nvar map__36311 = p__36310;\nvar map__36311__$1 = (((((!((map__36311 == null))))?(((((map__36311.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__36311.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__36311):map__36311);\nvar state = map__36311__$1;\nvar footnotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36311__$1,new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205));\nvar matcher = /\\[\\^[a-zA-Z0-9_-]+\\]/;\nvar match = cljs.core.re_find(matcher,text);\nif((match == null)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar next_text = clojure.string.replace_first(text,matcher,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(markdown.links.replace_footnote_link,footnotes));\nvar next_state = cljs.core.assoc_in(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"next-fn-id\",\"next-fn-id\",738579636)], null),cljs.core.inc),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"processed\",\"processed\",800622264),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"next-fn-id\",\"next-fn-id\",738579636)], null))], null),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205),new cljs.core.Keyword(null,\"unprocessed\",\"unprocessed\",766771972),match], null)));\nvar G__36390 = next_text;\nvar G__36391 = next_state;\ntext = G__36390;\np__36310 = G__36391;\ncontinue;\n}\nbreak;\n}\n});\nmarkdown.links.footnote_link = (function markdown$links$footnote_link(text,p__36321){\nvar map__36322 = p__36321;\nvar map__36322__$1 = (((((!((map__36322 == null))))?(((((map__36322.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__36322.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__36322):map__36322);\nvar state = map__36322__$1;\nvar code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36322__$1,new cljs.core.Keyword(null,\"code\",\"code\",1586293142));\nvar codeblock = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36322__$1,new cljs.core.Keyword(null,\"codeblock\",\"codeblock\",-851153855));\nvar footnotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36322__$1,new cljs.core.Keyword(null,\"footnotes\",\"footnotes\",-1842778205));\nif(cljs.core.truth_((function (){var or__4131__auto__ = (new cljs.core.Keyword(null,\"unprocessed\",\"unprocessed\",766771972).cljs$core$IFn$_invoke$arity$1(footnotes) == null);\nif(or__4131__auto__){\nreturn or__4131__auto__;\n} else {\nvar or__4131__auto____$1 = code;\nif(cljs.core.truth_(or__4131__auto____$1)){\nreturn or__4131__auto____$1;\n} else {\nreturn codeblock;\n}\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nif(cljs.core.truth_(markdown.links.footnote(clojure.string.trim(text)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",state], null);\n} else {\nvar vec__36325 = markdown.links.replace_all_footnote_links(text,state);\nvar text__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36325,(0),null);\nvar state__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36325,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text__$1,state__$1], null);\n\n}\n}\n});\nmarkdown.links.make_image_reference = (function markdown$links$make_image_reference(src,alt,title){\nvar title_text = (cljs.core.truth_(title)?[\"\\\" title=\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.join.cljs$core$IFn$_invoke$arity$1(title)),\"\"].join(''):\"\\\"\");\nreturn [\"<img src=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(src),\"\\\" alt=\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(alt),title_text,\" />\"].join('');\n});\nmarkdown.links.image_reference_link = (function markdown$links$image_reference_link(text,p__36331){\nvar map__36332 = p__36331;\nvar map__36332__$1 = (((((!((map__36332 == null))))?(((((map__36332.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__36332.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__36332):map__36332);\nvar state = map__36332__$1;\nvar references = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36332__$1,new cljs.core.Keyword(null,\"references\",\"references\",882562509));\nif(((cljs.core.not(new cljs.core.Keyword(null,\"reference-links?\",\"reference-links?\",-2003778981).cljs$core$IFn$_invoke$arity$1(state))) || (cljs.core.empty_QMARK_(references)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text,state], null);\n} else {\nvar matcher = /!\\[([^\\]]+)\\]\\s*(\\[[a-zA-Z0-9 ]+\\])/;\nvar matches = cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.re_seq(matcher,text));\nvar ms = matches;\nvar new_text = text;\nwhile(true){\nif(cljs.core.seq(ms)){\nvar vec__36338 = cljs.core.first(ms);\nvar m = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36338,(0),null);\nvar alt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36338,(1),null);\nvar ref = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36338,(2),null);\nvar refval = cljs.core.get.cljs$core$IFn$_invoke$arity$2(references,ref);\nvar im = markdown.links.make_image_reference(cljs.core.first(refval),alt,cljs.core.second(refval));\nvar G__36398 = cljs.core.rest(ms);\nvar G__36399 = clojure.string.replace(new_text,m,im);\nms = G__36398;\nnew_text = G__36399;\ncontinue;\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_text,state], null);\n}\nbreak;\n}\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","markdown/links.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$markdown.links","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^O","~$string","^O","~$markdown.common","^Q","~$cljs.core","^R","~$goog","^S"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$freeze-string","^Q","~$gen-token","^Q","~$strong","^Q","~$bold","^Q","~$em","^Q","~$italics","^Q","~$strikethrough","^Q"],"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^J",["^14",["^U",["^O","~:as","^P"],["^Q","~:refer",["^W","^X","^Y","^Z","^[","^10","^11"]]]]]],"~:flags",["^ ","^U",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^O","^Q"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","markdown/links.cljc"],"~:compiled-at",1560836392741,"~:resource-name","markdown/links.cljc","~:warnings",[],"~:source","(ns markdown.links\n  (:require [clojure.string :as string]\n            [markdown.common\n             :refer\n             [freeze-string\n              gen-token\n              strong\n              bold\n              em\n              italics\n              strikethrough]]))\n\n(defn href [text link state]\n  (let [[link title] (split-with (partial not= \\space) link)]\n    (freeze-string\n     (seq \"<a href='\") link (seq \"'\")\n     (if (not-empty title)\n       (seq (apply str \" title=\" (string/join (rest title)) \">\"))\n       (seq \">\"))\n     text (seq \"</a>\") state)))\n\n(defn img [alt url state & [title]]\n  (freeze-string\n    (seq \"<img src=\\\"\") url (seq \"\\\" alt=\\\"\") alt\n    (if (not-empty title)\n      (seq (apply str \"\\\" title=\" (string/join title) \" />\"))\n      (seq \"\\\" />\"))\n    state))\n\n(defn handle-img-link [xs state]\n  (if (= [\\[ \\! \\[] (take 3 xs))\n    (let [xs (drop 3 xs)\n          [alt xy] (split-with (partial not= \\]) xs)\n          [url-title zy] (->> xy (drop 2) (split-with (partial not= \\))))\n          [url title] (split-with (partial not= \\space) url-title)\n          [new-text new-state] (img alt url state (not-empty title))]\n      [(concat \"[\" new-text (rest zy)) new-state])\n    [xs state]))\n\n(defn process-link-title [title state]\n  (first\n    (reduce\n      #(apply %2 %1)\n      [title state]\n      [italics em strong bold strikethrough])))\n\n(defn make-link\n  [img?]\n  (fn link [text {:keys [code codeblock] :as state}]\n    (if (or code codeblock)\n      [text state]\n      (loop [out []\n             tokens (seq text)\n             loop-state state]\n        (if (empty? tokens)\n          [(string/join out) loop-state]\n          (let [[head xs] (split-with (partial not= \\[) tokens)\n                ;; Overwriting the loop-state here\n                [xs loop-state] (handle-img-link xs loop-state)\n                [title ys] (split-with (partial not= \\]) xs)\n                [dud zs] (split-with (partial not= \\() ys)\n                [link tail] (split-with (partial not= \\)) zs)]\n\n            (if (or (< (count link) 2)\n                    (< (count tail) 1)\n                    (> (count dud) 1))\n              (recur (concat out head (process-link-title title state) dud link) tail loop-state)\n              ;; Process a normal A anchor\n              (cond\n                (and (not img?) (not= (last head) \\!))\n                (let [[link-text new-loop-state] (href (rest (process-link-title title state)) (rest link) loop-state)]\n                  (recur (concat out head link-text) (rest tail) new-loop-state))\n                (and img? (= (last head) \\!))\n                (let [alt (rest title)\n                      [url title] (split-with (partial not= \\space) (rest link))\n                      title (process-link-title (string/join (rest title)) loop-state)\n                      ;; Now process / generate the img data\n                      [img-text new-loop-state] (img alt url loop-state title)]\n                  (recur (concat out (butlast head) img-text) (rest tail) new-loop-state))\n                :else [(string/join (concat out tokens)) loop-state]))))))))\n\n(def link (make-link false))\n(def image (make-link true))\n\n(defn reference [text]\n  (re-find #\"^\\[[a-zA-Z0-9 \\-_\\.]+\\]:\" text))\n\n(defn parse-reference [reference start]\n  (-> reference\n      (subs start)\n      (string/trim)\n      (string/split #\"\\s+\" 2)))\n\n(defn parse-reference-link [line references]\n  (let [trimmed (string/trim line)]\n    (when-let [link (reference trimmed)]\n      (swap! references assoc (subs link 0 (dec (count link)))\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-reference-link [references reference]\n  (let [[title id] (string/split reference #\"\\]\\s*\" 2)\n        [link alt] (get references id)]\n    (str \"<a href='\" link \"'\" (when alt (str \" title='\" (subs alt 1 (dec (count alt))) \"'\")) \">\" (subs title 1) \"</a>\")))\n\n(defn encode-links [links i]\n  (second\n    (reduce\n      (fn [[i encoded] link]\n        [(inc i) (assoc encoded (gen-token i) link)])\n      [i {}]\n      links)))\n\n(defn parse-links [references links]\n  (into {} (map\n             (fn [[k v]]\n               [k (replace-reference-link references v)])\n             links)))\n\n(defn freeze-links [references text state]\n  (let [links\n        (re-seq\n          #\"\\[[^\\]]+\\]\\s*\\[[a-zA-Z0-9 \\-_\\.]+\\]\"\n          text)\n        encoded-links\n        (encode-links links ((fnil count []) (:frozen-strings state)))]\n    [(reduce\n       (fn [s [id link]]\n         (string/replace s link id))\n       text encoded-links)\n     (update state :frozen-strings merge (parse-links references encoded-links))]))\n\n(defn reference-link [text {:keys [code codeblock references] :as state}]\n  (cond\n    (or (nil? references) code codeblock)\n    [text state]\n\n    (reference (string/trim text))\n    [\"\" state]\n\n    :else\n    (freeze-links references text state)))\n\n(defn implicit-reference-link [text state]\n  (let [replacement-text (string/replace text #\"\\[([^\\]]+)\\]\\[\\]\" \"[$1][$1]\")]\n    [replacement-text state]))\n\n(defn footnote [text]\n  (re-find #\"^\\[\\^[a-zA-Z0-9_-]+\\]:\" text))\n\n(defn parse-footnote-link [line footnotes]\n  (let [trimmed (string/trim line)]\n    (when-let [link (footnote trimmed)]\n      (swap! footnotes assoc-in [:unprocessed (subs link 0 (dec (count link)))]\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-footnote-link [footnotes footnote]\n  (let [next-fn-id (:next-fn-id footnotes)\n        link (str \"#fn-\" next-fn-id)]\n    (str \"<a href='\" link \"' id='fnref\" next-fn-id \"'><sup>\" next-fn-id \"</sup></a>\")))\n\n(defn replace-all-footnote-links [text {:keys [footnotes] :as state}]\n  (let [matcher #\"\\[\\^[a-zA-Z0-9_-]+\\]\"\n        match (re-find matcher text)]\n    (if (nil? match)\n      [text state]\n      (let [next-text (string/replace-first text matcher (partial replace-footnote-link footnotes))\n            next-state (-> state\n                           (update-in [:footnotes :next-fn-id] inc)\n                           (assoc-in [:footnotes :processed (get-in state [:footnotes :next-fn-id])]\n                                     (get-in state [:footnotes :unprocessed match])))]\n        (recur next-text next-state)))))\n\n(defn footnote-link [text {:keys [code codeblock footnotes] :as state}]\n  (cond\n    (or (nil? (:unprocessed footnotes)) code codeblock)\n    [text state]\n\n    (footnote (string/trim text))\n    [\"\" state]\n\n    :else\n    (let [[text state] (replace-all-footnote-links text state)]\n      [text state])))\n\n(defn make-image-reference [src alt title]\n  (let [title-text (str (if title (str \"\\\" title=\" (string/join title) \"\") \"\\\"\"))]\n    (str \"<img src=\\\"\" src \"\\\" alt=\\\"\" alt title-text \" />\")))\n\n(defn image-reference-link [text {:keys [references] :as state}]\n  (if (or (not (:reference-links? state)) (empty? references))\n    [text state]\n    (let [matcher #\"!\\[([^\\]]+)\\]\\s*(\\[[a-zA-Z0-9 ]+\\])\"\n          matches (distinct (re-seq matcher text))]\n      (loop [ms matches\n             new-text text]\n        (if (seq ms)\n          (let [[m alt ref] (first ms)\n                refval (get references ref)\n                im (make-image-reference (first refval) alt (second refval))]\n            (recur (rest ms) (string/replace new-text m im)))\n          [new-text state])))))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;;AAYA,AAAA,AAAMA,AAAMC,AAAKC,AAAKC;AAAtB,AACE,AAAAC,AAAmB,AAACG,AAAW,AAAA,AAACC,AAAQC,AAAaP;AAArD,AAAAG,AAAAD,AAAA,AAAA,AAAOF;AAAP,AAAAG,AAAAD,AAAA,AAAA,AAAYE;AAAZ,AACE,AAACI,AACA,AAAA,AAACC,AAAiBT,AAAK,AAAA,AAACS,AACxB,AAAI,AAACC,AAAUN,AACb,AAACK,AAAI,AAAA,AAAA,AAACE,AAAMC,AAAc,AAACC,AAAY,AAACC,AAAKV,AAC7C,AAAA,AAACK,AACHV,AAAK,AAAA,AAACU,AAAYR;;AAEvB,AAAA,AAAA,AAAAc,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAAKU,AAAIC,AAAI/B;AAAnB,AAAA,AAAAsB,AAAAD;AAAA,AAAAnB,AAAAoB,AAAA,AAAA,AAA4BnB;AAA5B,AACE,AAACI,AACC,AAAA,AAACC,AAAmBuB,AAAI,AAAA,AAACvB,AAAiBsB,AAC1C,AAAI,AAACrB,AAAUN,AACb,AAACK,AAAI,AAAA,AAAA,AAACE,AAAMC,AAAgB,AAACC,AAAYT,AACzC,AAAA,AAACK,AACHR;;;AANJ,AAAA,AAAA,AAAMoB;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAK,AAAA,AAAAH,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAM,AAAA;AAAA,AAAA,AAAAA,AAAAL,AAAAG,AAAAC,AAAAL;;;AAAA,AAQA,AAAA,AAAMS,AAAiBC,AAAGjC;AAA1B,AACE,AAAI,AAAA,AAAA,AAAA,AAAA,AAACkC,AAAa,AAAA,AAACC,AAAOF;AACxB,AAAMA,AAAG,AAAA,AAACO,AAAOP;AAAjBG,AACe,AAAChC,AAAW,AAAA,AAACC,AAAQC,AAAS2B;AAD7C,AAAA/B,AAAAkC,AAAA,AAAA,AACON;AADP,AAAA5B,AAAAkC,AAAA,AAAA,AACWK;AADXJ,AAE0BI,AAAG,AAAA,AAACD,AAAQ,AAACpC,AAAW,AAAA,AAACC,AAAQC;AAF3D,AAAAJ,AAAAmC,AAAA,AAAA,AAEOK;AAFP,AAAAxC,AAAAmC,AAAA,AAAA,AAEiBM;AAFjBL,AAGkB,AAAClC,AAAW,AAAA,AAACC,AAAQC,AAAaoC;AAHpD,AAAAxC,AAAAoC,AAAA,AAAA,AAGOP;AAHP,AAAA7B,AAAAoC,AAAA,AAAA,AAGWnC;AAHXoC,AAI2B,AAACO,AAAIhB,AAAIC,AAAI/B,AAAM,AAACS,AAAUN;AAJzD,AAAAD,AAAAqC,AAAA,AAAA,AAIOK;AAJP,AAAA1C,AAAAqC,AAAA,AAAA,AAIgBM;AAJhB,AAAA,AAKG,AAAA,AAACE,AAAWH,AAAS,AAAC/B,AAAK8B,AAAKE;;AANrC,AAOGZ,AAAGjC;;;AAER,AAAA,AAAMgD,AAAoB7C,AAAMH;AAAhC,AACE,AAACyB,AACC,AAAA,AAAAwB,AAAAC,AAACC;AAAD,AACG,AAAAD,AAAAD,AAACG;AADJ,AAAA,AAEGjD,AAAMH,AACNqD,AAAQC,AAAGC,AAAOC,AAAKC;;AAE9B,AAAA,AAAMC,AACHC;AADH,AAEE,AAAAC,AAAU9D;AAAV,AAAA,AAAA+D,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAT,AAAAW,AAAAF,AAAAA;AAAAA,AAA2C7D;AAA3C,AAAAgE,AAAAH,AAAA,AAAuBI;AAAvB,AAAAD,AAAAH,AAAA,AAA4BK;AAA5B,AACE,AAAI,AAAAC,AAAIF;AAAJ,AAAA,AAAAE;AAAAA;;AAASD;;;AAAb,AACGpE,AAAKE;;AACN,AAAA,AAAOoE;AACAC,AAAO,AAAC7D,AAAIV;AACZwE,AAAWtE;;AAFlB,AAGE,AAAI,AAACuE,AAAOF;AAAZ,AACG,AAACzD,AAAYwD,AAAKE;;AACnB,AAAAE,AAAgB,AAACpE,AAAW,AAAA,AAACC,AAAQC,AAAS+D;AAA9C,AAAAnE,AAAAsE,AAAA,AAAA,AAAOK;AAAP,AAAA3E,AAAAsE,AAAA,AAAA,AAAYvC;AAAZwC,AAEsB,AAACzC,AAAgBC,AAAGqC;AAF1C,AAAApE,AAAAuE,AAAA,AAAA,AAEOxC;AAFP,AAAA/B,AAAAuE,AAAA,AAAA,AAEUH;AAFVI,AAGiB,AAACtE,AAAW,AAAA,AAACC,AAAQC,AAAS2B;AAH/C,AAAA/B,AAAAwE,AAAA,AAAA,AAGOvE;AAHP,AAAAD,AAAAwE,AAAA,AAAA,AAGaI;AAHbH,AAIe,AAACvE,AAAW,AAAA,AAACC,AAAQC,AAASwE;AAJ7C,AAAA5E,AAAAyE,AAAA,AAAA,AAIOI;AAJP,AAAA7E,AAAAyE,AAAA,AAAA,AAIWK;AAJXJ,AAKkB,AAACxE,AAAW,AAAA,AAACC,AAAQC,AAAS0E;AALhD,AAAA9E,AAAA0E,AAAA,AAAA,AAKO7E;AALP,AAAAG,AAAA0E,AAAA,AAAA,AAKYK;AALZ,AAOE,AAAI,AAAI,AAAA,AAAG,AAACC,AAAMnF,AACV,AAAA,AAAG,AAACmF,AAAMD,AACV,AAAA,AAAG,AAACC,AAAMH;AAChB,AAAO,AAAChC,AAAOqB,AAAIS,AAAK,AAAC7B,AAAmB7C,AAAMH,AAAO+E,AAAIhF;AAAMkF;AAAKX;;;;;;AAExE,AACE,AAAK,AAACa,AAAIxB,AAAM,AAAA,AAACyB,AAAK,AAACC,AAAKR;AAC5B,AAAAS,AAAiC,AAACzF,AAAK,AAACgB,AAAK,AAACmC,AAAmB7C,AAAMH,AAAQ,AAACa,AAAKd,AAAMuE;AAA3F,AAAApE,AAAAoF,AAAA,AAAA,AAAOC;AAAP,AAAArF,AAAAoF,AAAA,AAAA,AAAiBE;AAAjB,AACE,AAAO,AAACzC,AAAOqB,AAAIS,AAAKU;AAAW,AAAC1E,AAAKoE;AAAMO;;;;;;AAHnD,AAIE,AAAAC,AAAK9B;AAAL,AAAA,AAAA8B;AAAU,AAAA,AAACvD,AAAE,AAACmD,AAAKR;;AAAnBY;;;AACA,AAAM3D,AAAI,AAACjB,AAAKV;AAAhBuF,AACkB,AAACtF,AAAW,AAAA,AAACC,AAAQC,AAAa,AAACO,AAAKd;AAD1D,AAAAG,AAAAwF,AAAA,AAAA,AACO3D;AADP,AAAA7B,AAAAwF,AAAA,AAAA,AACWvF;AACLA,AAAM,AAAC6C,AAAmB,AAACpC,AAAY,AAACC,AAAKV,AAAQmE;AAF3DqB,AAIgC,AAAC7C,AAAIhB,AAAIC,AAAIuC,AAAWnE;AAJxD,AAAAD,AAAAyF,AAAA,AAAA,AAIOC;AAJP,AAAA1F,AAAAyF,AAAA,AAAA,AAIgBH;AAJhB,AAKE,AAAO,AAACzC,AAAOqB,AAAI,AAACyB,AAAQhB,AAAMe;AAAU,AAAC/E,AAAKoE;AAAMO;;;;;;AAV5D,AAAA,AAWS,AAAC5E,AAAY,AAACkF,AAAO1B,AAAIC,AAASC;;;;;;;;;;;AAEzD,AAAKyB,AAAK,AAAA,AAACrC;AACX,AAAKsC,AAAM,AAAA,AAACtC;AAEZ,AAAA,AAAMuC,AAAWnG;AAAjB,AACE,AAAA,AAACoG,AAAoCpG;;AAEvC,AAAA,AAAMqG,AAAiBC,AAAUC;AAAjC,AACMD,AACA,AAACE,AAAKD,AACN,AAACE,AACD,AAAA,AAAA,AAACC;;AAEP,AAAA,AAAMC,AAAsBC,AAAKC;AAAjC,AACE,AAAMC,AAAQ,AAACL,AAAYG;AAA3B,AACE,AAAAG,AAAgB,AAACZ,AAAUW;AAA3B,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAAW9G;AAAX,AACE,AAAC+G,AAAMH,AAAWI,AAAM,AAAA,AAACC,AAAKjH,AAAO,AAAA,AAAK,AAACmF,AAAMnF,AAC1C,AAACoG,AAAgBS,AAAQ,AAAA,AAAK,AAAC1B,AAAMnF;;AAF9C;;;AAIJ,AAAA,AAAMkH,AAAwBN,AAAWP;AAAzC,AACE,AAAAc,AAAiB,AAAA,AAAA,AAACV,AAAaJ;AAA/B,AAAAlG,AAAAgH,AAAA,AAAA,AAAO/G;AAAP,AAAAD,AAAAgH,AAAA,AAAA,AAAaE;AAAbD,AACiB,AAACnD,AAAI2C,AAAWS;AADjC,AAAAlH,AAAAiH,AAAA,AAAA,AACOpH;AADP,AAAAG,AAAAiH,AAAA,AAAA,AACYrF;AADZ,AAEE,AAAA,AAAA,AAAA,AAAA,AAAiB/B,AAAS,AAAA,AAAA,AAAM+B,AAAI,AAAA,AAAA,AAAgB,AAAA,AAACkF,AAAKlF,AAAM,AAAA,AAAK,AAACoD,AAAMpD,AAAiB,AAAA,AAACwE,AAAKnG;;AAEvG,AAAA,AAAMkH,AAAcC,AAAMC;AAA1B,AACE,AAACC,AACC,AAACrE,AACC,AAAAsE,AAAiB1H;AAAjB,AAAA,AAAA2H,AAAAD;AAAA,AAAAvH,AAAAwH,AAAA,AAAA,AAAMH;AAAN,AAAArH,AAAAwH,AAAA,AAAA,AAAQC;AAAR,AAAA,AACG,AAAA,AAAKJ,AAAG,AAACK,AAAMD,AAAQ,AAACE,AAAUN,AAAGxH;AAF1C,AAAA,AAGGwH,AACDD;;AAEN,AAAA,AAAMQ,AAAanB,AAAWW;AAA9B,AACE,AAAA,AAACS,AAAQ,AAACC,AACC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA/H,AAAAgI,AAAA,AAAA,AAAMC;AAAN,AAAAjI,AAAAgI,AAAA,AAAA,AAAQE;AAAR,AAAA,AACGD,AAAE,AAAClB,AAAuBN,AAAWyB;AACxCd;;AAEb,AAAA,AAAMe,AAAc1B,AAAW7G,AAAKE;AAApC,AACE,AAAMsH,AACA,AAAA,AAACgB,AAECxI;AACFyI,AACA,AAAClB,AAAaC,AAAM,AAAAkB,AAAiB,AAAA,AAAiBxI;AAAlCyI,AAAC,AAAA,AAACC,AAAKxD;AAAP,AAAA,AAAAuD,AAAAA,AAAAD,AAAAC,AAAAD;;AAL1B,AAAA,AAMG,AAACrF,AACC;AAAAwF,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAzI,AAAA0I,AAAA,AAAA,AAAQxB;AAAR,AAAAlH,AAAA0I,AAAA,AAAA,AAAW7I;AAAX,AACE,AAAC+I,AAAeD,AAAE9I,AAAKqH;;AACzBtH,AAAKyI,AACP,AAAA,AAACQ,AAAO/I,AAAsBgJ,AAAM,AAAClB,AAAYnB,AAAW4B;;AAEjE,AAAA,AAAAU,AAAME,AAAgBrJ;AAAtB,AAAA,AAAAoJ,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApF,AAAA,AAAAoF,AAAA,AAAA,AAAA,AAAA,AAAA9F,AAAAW,AAAAmF,AAAAA;AAAAA,AAAkElJ;AAAlE,AAAAgE,AAAAkF,AAAA,AAAmCjF;AAAnC,AAAAD,AAAAkF,AAAA,AAAwChF;AAAxC,AAAAF,AAAAkF,AAAA,AAAkDvC;AAAlD,AACE,AACE,AAAAxC,AAAI,AAAA,AAAMwC;AAAV,AAAA,AAAAxC;AAAAA;;AAAA,AAAAA,AAAsBF;AAAtB,AAAA,AAAAE;AAAAA;;AAA2BD;;;;AAD7B,AAEGpE,AAAKE;;AAFR,AAIE,AAACiG,AAAU,AAACM,AAAYzG;AAJ1B,AAAA,AAKME;;AALN,AAQE,AAACqI,AAAa1B,AAAW7G,AAAKE;;;;;AAElC,AAAA,AAAMoJ,AAAyBtJ,AAAKE;AAApC,AACE,AAAMqJ,AAAiB,AAAA,AAAA,AAACP,AAAehJ;AAAvC,AAAA,AACGuJ,AAAiBrJ;;AAEtB,AAAA,AAAMsJ,AAAUxJ;AAAhB,AACE,AAAA,AAACoG,AAAkCpG;;AAErC,AAAA,AAAMyJ,AAAqB7C,AAAK8C;AAAhC,AACE,AAAM5C,AAAQ,AAACL,AAAYG;AAA3B,AACE,AAAAG,AAAgB,AAACyC,AAAS1C;AAA1B,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAAW9G;AAAX,AACE,AAAA,AAAA,AAAC+G,AAAM0C,AAAUC,AAAuB,AAAA,AAACzC,AAAKjH,AAAO,AAAA,AAAK,AAACmF,AAAMnF,AAC1D,AAACoG,AAAgBS,AAAQ,AAAA,AAAK,AAAC1B,AAAMnF;;AAF9C;;;AAIJ,AAAA,AAAM2J,AAAuBF,AAAUG;AAAvC,AACE,AAAMC,AAAW,AAAA,AAAaJ;AACxBzJ,AAAK,AAAA,AAAY6J;AADvB,AAEE,AAAA,AAAA,AAAA,AAAA,AAAiB7J,AAAmB6J,AAAqBA;;AAE7D,AAAA,AAAAC,AAAME,AAA4BjK;;AAAlC,AAAA,AAAAgK,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhG,AAAA,AAAAgG,AAAA,AAAA,AAAA,AAAA,AAAA1G,AAAAW,AAAA+F,AAAAA;AAAAA,AAA8D9J;AAA9D,AAAAgE,AAAA8F,AAAA,AAA+CN;AAA/C,AACE,AAAA,AAAMQ;AACAC,AAAM,AAAC/D,AAAQ8D,AAAQlK;AAD7B,AAEE,AAAI,AAAA,AAAMmK;AAAV,AACGnK,AAAKE;;AACN,AAAMkK,AAAU,AAACC,AAAqBrK,AAAKkK,AAAQ,AAAC3J,AAAQqJ,AAAsBF;AAC5EY,AAAepK,AACA,AAAA,AAAA,AAAA,AAACqK,AAAmCC,AACpC,AAAA,AAAA,AAAA,AAACb,AAAgC,AAAA,AAAA,AAAA,AAACc,AAAOvK,AAC/B,AAAA,AAAA,AAAA,AAACuK,AAAOvK,AAA+BiK;AAJtE,AAKE,AAAOC;AAAUE;;;;;;;;AAEzB,AAAA,AAAAI,AAAME,AAAe5K;AAArB,AAAA,AAAA2K,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3G,AAAA,AAAA2G,AAAA,AAAA,AAAA,AAAA,AAAArH,AAAAW,AAAA0G,AAAAA;AAAAA,AAAgEzK;AAAhE,AAAAgE,AAAAyG,AAAA,AAAkCxG;AAAlC,AAAAD,AAAAyG,AAAA,AAAuCvG;AAAvC,AAAAF,AAAAyG,AAAA,AAAiDjB;AAAjD,AACE,AACE,AAAArF,AAAI,AAAA,AAAM,AAAA,AAAcqF;AAAxB,AAAA,AAAArF;AAAAA;;AAAA,AAAAA,AAAoCF;AAApC,AAAA,AAAAE;AAAAA;;AAAyCD;;;;AAD3C,AAEGpE,AAAKE;;AAFR,AAIE,AAACsJ,AAAS,AAAC/C,AAAYzG;AAJzB,AAAA,AAKME;;AALN,AAQE,AAAA2K,AAAmB,AAACZ,AAA2BjK,AAAKE;AAApD,AAAAE,AAAAyK,AAAA,AAAA,AAAO7K;AAAP,AAAAI,AAAAyK,AAAA,AAAA,AAAY3K;AAAZ,AAAA,AACGF,AAAKE;;;;;AAEZ,AAAA,AAAM4K,AAAsBC,AAAI/I,AAAI3B;AAApC,AACE,AAAM2K,AAAgB,AAAA,AAAI3K,AAAM,AAAA,AAAA,AAAiB,AAACS,AAAYT;AAA9D,AACE,AAAA,AAAA,AAAA,AAAmB0K,AAAgB/I,AAAIgJ;;AAE3C,AAAA,AAAAC,AAAME,AAAsBnL;AAA5B,AAAA,AAAAkL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlH,AAAA,AAAAkH,AAAA,AAAA,AAAA,AAAA,AAAA5H,AAAAW,AAAAiH,AAAAA;AAAAA,AAAyDhL;AAAzD,AAAAgE,AAAAgH,AAAA,AAAyCrE;AAAzC,AACE,AAAI,AAAI,AAACxB,AAAI,AAAA,AAAmBnF,AAAQ,AAACuE,AAAOoC;AAAhD,AACG7G,AAAKE;;AACN,AAAA,AAAMgK;AACAkB,AAAQ,AAACC,AAAS,AAAC7C,AAAO0B,AAAQlK;AADxC,AAEE,AAAOsL,AAAGF;AACHtI,AAAS9C;;AADhB,AAEE,AAAI,AAACU,AAAI4K;AACP,AAAAC,AAAkB,AAAC5J,AAAM2J;AAAzB,AAAAlL,AAAAmL,AAAA,AAAA,AAAOC;AAAP,AAAApL,AAAAmL,AAAA,AAAA,AAASvJ;AAAT,AAAA5B,AAAAmL,AAAA,AAAA,AAAaE;AACPC,AAAO,AAACxH,AAAI2C,AAAW4E;AACvBE,AAAG,AAACb,AAAqB,AAACnJ,AAAM+J,AAAQ1J,AAAI,AAAC0F,AAAOgE;AAF1D,AAGE,AAAO,AAAC3K,AAAKuK;AAAI,AAACtC,AAAelG,AAAS0I,AAAEG;;;;;AAJhD,AAKG7I,AAAS5C","names",["markdown.links/href","text","link","state","vec__36119","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","title","cljs.core/split-with","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/not=","markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic","cljs.core/seq","cljs.core/not-empty","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/str","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core/rest","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","markdown.links/img","p__36132","vec__36133","seq36122","G__36123","cljs.core/first","cljs.core/next","G__36124","G__36125","self__4717__auto__","alt","url","markdown.links/handle-img-link","xs","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.take.cljs$core$IFn$_invoke$arity$2","vec__36152","vec__36155","vec__36158","vec__36161","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","xy","url-title","zy","new-text","new-state","markdown.links.img.cljs$core$IFn$_invoke$arity$variadic","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","markdown.links/process-link-title","p1__36180#","p2__36179#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","markdown.common/italics","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.links/make-link","img?","p__36188","map__36189","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","code","codeblock","or__4131__auto__","out","tokens","loop-state","cljs.core/empty?","vec__36233","vec__36236","vec__36239","vec__36242","vec__36245","head","ys","dud","zs","tail","cljs.core/count","cljs.core/not","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/last","vec__36250","link-text","new-loop-state","and__4120__auto__","vec__36256","vec__36259","img-text","cljs.core/butlast","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","markdown.links/link","markdown.links/image","markdown.links/reference","cljs.core/re-find","markdown.links/parse-reference","reference","start","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","clojure.string/trim","clojure.string.split.cljs$core$IFn$_invoke$arity$3","markdown.links/parse-reference-link","line","references","trimmed","temp__5720__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","markdown.links/replace-reference-link","vec__36273","vec__36276","id","markdown.links/encode-links","links","i","cljs.core/second","p__36279","vec__36280","encoded","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","markdown.common/gen-token","markdown.links/parse-links","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__36283","vec__36284","k","v","markdown.links/freeze-links","cljs.core/re-seq","encoded-links","G__36288","fexpr__36287","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","p__36298","vec__36299","s","clojure.string/replace","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","p__36302","map__36303","markdown.links/reference-link","markdown.links/implicit-reference-link","replacement-text","markdown.links/footnote","markdown.links/parse-footnote-link","footnotes","cljs.core/assoc-in","markdown.links/replace-footnote-link","footnote","next-fn-id","p__36310","map__36311","markdown.links/replace-all-footnote-links","matcher","match","next-text","clojure.string/replace-first","next-state","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/inc","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__36321","map__36322","markdown.links/footnote-link","vec__36325","markdown.links/make-image-reference","src","title-text","p__36331","map__36332","markdown.links/image-reference-link","matches","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","ms","vec__36338","m","ref","refval","im"]]],"~:cache-keys",["~#cmap",[["~:macro","^R"],[1559826623000],["^1<","goog/math/math.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^S","~$goog.array","~$goog.asserts"]]],["^1<","goog/array/array.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S","^1O"]]],["^1<","goog/debug/error.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S"]]],["^1<","goog/dom/nodetype.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S"]]],["^1<","markdown/common.cljc"],[1547313541000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S","^R","^O"]]],["^1<","goog/object/object.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^1<","goog/math/long.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S","^1O","~$goog.reflect"]]],["^1<","goog/string/internal.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S"]]],["^1<","goog/functions/functions.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S"]]],["^1<","goog/structs/map.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1<","goog/asserts/asserts.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1<","goog/uri/uri.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S","^1N","^1O","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1<","goog/base.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",[]]],["^1<","goog/structs/structs.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S","^1N","~$goog.object"]]],["^1<","clojure/string.cljs"],[1559826623000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S","^R","^1V","~$goog.string.StringBuffer"]]],["^1<","goog/string/string.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S","~$goog.string.internal"]]],["^1<","goog/reflect/reflect.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S"]]],["^1<","goog/string/stringbuffer.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S"]]],["^1<","goog/iter/iter.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S","^1N","^1O","~$goog.functions","~$goog.math"]]],["^1<","cljs/core.cljs"],[1559826623000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["~$goog.math.Long","~$goog.math.Integer","^1V","^20","^1N","~$goog.Uri","^21"]]],["^1<","goog/math/integer.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S"]]],["^1<","markdown/links.cljc"],[1547313541000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S","^R","^O","^Q"]]],["^1<","goog/uri/utils.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^H",[]],"^1M",["^S","^1N","^1O","^1V"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","markdown/links.cljc","^7",1,"^8",5,"^9",1,"^:",19],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^R","^S","^S"],"^T",["^H",["^U"]],"^V",["^ ","^W","^Q","^X","^Q","^Y","^Q","^Z","^Q","^[","^Q","^10","^Q","^11","^Q"],"~:defs",["^ ","~$replace-all-footnote-links",["^ ","~:protocol-inline",null,"^5",["^ ","^6","markdown/links.cljc","^7",161,"^8",7,"^9",161,"^:",33,"~:arglists",["^14",["~$quote",["^14",[["~$text",["^ ","~:keys",["~$footnotes"],"^16","~$state"]]]]]]],"^I","~$markdown.links/replace-all-footnote-links","^6","markdown/links.cljc","^:",33,"~:method-params",["^14",[["^2>","~$p__36310"]]],"~:protocol-impl",null,"~:arglists-meta",["^14",[null,null]],"^8",1,"~:variadic?",false,"^7",161,"~:ret-tag","~$cljs.core/IVector","^9",161,"~:max-fixed-arity",2,"~:fn-var",true,"^2<",["^14",["^2=",["^14",[["^2>",["^ ","^2?",["^2@"],"^16","^2A"]]]]]]],"~$make-image-reference",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",185,"^8",7,"^9",185,"^:",27,"^2<",["^14",["^2=",["^14",[["~$src","~$alt","~$title"]]]]]],"^I","~$markdown.links/make-image-reference","^6","markdown/links.cljc","^:",27,"^2C",["^14",[["^2M","^2N","^2O"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",185,"^2H","^P","^9",185,"^2J",3,"^2K",true,"^2<",["^14",["^2=",["^14",[["^2M","^2N","^2O"]]]]]],"~$href",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",13,"^8",7,"^9",13,"^:",11,"^2<",["^14",["^2=",["^14",[["^2>","~$link","^2A"]]]]]],"^I","~$markdown.links/href","^6","markdown/links.cljc","^:",11,"^2C",["^14",[["^2>","^2R","^2A"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",13,"^2H","^2I","^9",13,"^2J",3,"^2K",true,"^2<",["^14",["^2=",["^14",[["^2>","^2R","^2A"]]]]]],"~$img",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",22,"^8",7,"^9",22,"^:",10,"^2<",["^14",["^2=",["^14",[["^2N","~$url","^2A","~$&",["^2O"]]]]]],"~:top-fn",["^ ","^2G",true,"~:fixed-arity",3,"^2J",3,"^2C",[["^14",["^2N","^2U","^2A",["^2O"]]]],"^2<",["^14",[["^2N","^2U","^2A","~$&",["^2O"]]]],"^2F",["^14",[null]]]],"^I","~$markdown.links/img","^6","markdown/links.cljc","^:",10,"^2V",["^ ","^2G",true,"^2W",3,"^2J",3,"^2C",[["^14",["^2N","^2U","^2A",["^2O"]]]],"^2<",["^14",[["^2N","^2U","^2A","~$&",["^2O"]]]],"^2F",["^14",[null]]],"^2C",[["^14",["^2N","^2U","^2A",["^2O"]]]],"^2E",null,"^2W",3,"^2F",["^14",[null]],"^8",1,"^2G",true,"~:methods",[["^ ","^2W",3,"^2G",true,"~:tag","^2I"]],"^7",22,"^2H","~$any","^9",22,"^2J",3,"^2K",true,"^2<",["^14",[["^2N","^2U","^2A","~$&",["^2O"]]]]],"~$parse-footnote-link",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",150,"^8",7,"^9",150,"^:",26,"^2<",["^14",["^2=",["^14",[["~$line","^2@"]]]]]],"^I","~$markdown.links/parse-footnote-link","^6","markdown/links.cljc","^:",26,"^2C",["^14",[["^31","^2@"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",150,"^2H",["^H",[null,"^2[","~$clj-nil"]],"^9",150,"^2J",2,"^2K",true,"^2<",["^14",["^2=",["^14",[["^31","^2@"]]]]]],"~$implicit-reference-link",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",143,"^8",7,"^9",143,"^:",30,"^2<",["^14",["^2=",["^14",[["^2>","^2A"]]]]]],"^I","~$markdown.links/implicit-reference-link","^6","markdown/links.cljc","^:",30,"^2C",["^14",[["^2>","^2A"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",143,"^2H","^2I","^9",143,"^2J",2,"^2K",true,"^2<",["^14",["^2=",["^14",[["^2>","^2A"]]]]]],"~$parse-links",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",113,"^8",7,"^9",113,"^:",18,"^2<",["^14",["^2=",["^14",[["~$references","~$links"]]]]]],"^I","~$markdown.links/parse-links","^6","markdown/links.cljc","^:",18,"^2C",["^14",[["^37","^38"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",113,"^2H",["^H",[null,"~$clj","^2["]],"^9",113,"^2J",2,"^2K",true,"^2<",["^14",["^2=",["^14",[["^37","^38"]]]]]],"~$footnote-link",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",173,"^8",7,"^9",173,"^:",20,"^2<",["^14",["^2=",["^14",[["^2>",["^ ","^2?",["~$code","~$codeblock","^2@"],"^16","^2A"]]]]]]],"^I","~$markdown.links/footnote-link","^6","markdown/links.cljc","^:",20,"^2C",["^14",[["^2>","~$p__36321"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",173,"^2H","^2I","^9",173,"^2J",2,"^2K",true,"^2<",["^14",["^2=",["^14",[["^2>",["^ ","^2?",["^3<","^3=","^2@"],"^16","^2A"]]]]]]],"~$reference-link",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",132,"^8",7,"^9",132,"^:",21,"^2<",["^14",["^2=",["^14",[["^2>",["^ ","^2?",["^3<","^3=","^37"],"^16","^2A"]]]]]]],"^I","~$markdown.links/reference-link","^6","markdown/links.cljc","^:",21,"^2C",["^14",[["^2>","~$p__36302"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",132,"^2H","^2I","^9",132,"^2J",2,"^2K",true,"^2<",["^14",["^2=",["^14",[["^2>",["^ ","^2?",["^3<","^3=","^37"],"^16","^2A"]]]]]]],"~$image-reference-link",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",189,"^8",7,"^9",189,"^:",27,"^2<",["^14",["^2=",["^14",[["^2>",["^ ","^2?",["^37"],"^16","^2A"]]]]]]],"^I","~$markdown.links/image-reference-link","^6","markdown/links.cljc","^:",27,"^2C",["^14",[["^2>","~$p__36331"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",189,"^2H","^2I","^9",189,"^2J",2,"^2K",true,"^2<",["^14",["^2=",["^14",[["^2>",["^ ","^2?",["^37"],"^16","^2A"]]]]]]],"~$make-link",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",47,"^8",7,"^9",47,"^:",16,"^2<",["^14",["^2=",["^14",[["~$img?"]]]]]],"^I","~$markdown.links/make-link","^6","markdown/links.cljc","^:",16,"^2C",["^14",[["^3G"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",47,"^2H","~$function","^9",47,"^2J",1,"^2K",true,"^2<",["^14",["^2=",["^14",[["^3G"]]]]]],"~$replace-footnote-link",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",156,"^8",7,"^9",156,"^:",28,"^2<",["^14",["^2=",["^14",[["^2@","~$footnote"]]]]]],"^I","~$markdown.links/replace-footnote-link","^6","markdown/links.cljc","^:",28,"^2C",["^14",[["^2@","^3K"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",156,"^2H","^P","^9",156,"^2J",2,"^2K",true,"^2<",["^14",["^2=",["^14",[["^2@","^3K"]]]]]],"~$replace-reference-link",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",100,"^8",7,"^9",100,"^:",29,"^2<",["^14",["^2=",["^14",[["^37","~$reference"]]]]]],"^I","~$markdown.links/replace-reference-link","^6","markdown/links.cljc","^:",29,"^2C",["^14",[["^37","^3N"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",100,"^2H","^P","^9",100,"^2J",2,"^2K",true,"^2<",["^14",["^2=",["^14",[["^37","^3N"]]]]]],"~$handle-img-link",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",30,"^8",7,"^9",30,"^:",22,"^2<",["^14",["^2=",["^14",[["~$xs","^2A"]]]]]],"^I","~$markdown.links/handle-img-link","^6","markdown/links.cljc","^:",22,"^2C",["^14",[["^3Q","^2A"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",30,"^2H","^2I","^9",30,"^2J",2,"^2K",true,"^2<",["^14",["^2=",["^14",[["^3Q","^2A"]]]]]],"~$parse-reference",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",88,"^8",7,"^9",88,"^:",22,"^2<",["^14",["^2=",["^14",[["^3N","~$start"]]]]]],"^I","~$markdown.links/parse-reference","^6","markdown/links.cljc","^:",22,"^2C",["^14",[["^3N","^3T"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",88,"^2H",["^H",[null,"^2["]],"^9",88,"^2J",2,"^2K",true,"^2<",["^14",["^2=",["^14",[["^3N","^3T"]]]]]],"^3K",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",147,"^8",7,"^9",147,"^:",15,"^2<",["^14",["^2=",["^14",[["^2>"]]]]]],"^I","~$markdown.links/footnote","^6","markdown/links.cljc","^:",15,"^2C",["^14",[["^2>"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",147,"^2H",["^H",["^3:","^2I","^2[","~$cljs.core/MetaFn","^33"]],"^9",147,"^2J",1,"^2K",true,"^2<",["^14",["^2=",["^14",[["^2>"]]]]]],"~$parse-reference-link",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",94,"^8",7,"^9",94,"^:",27,"^2<",["^14",["^2=",["^14",[["^31","^37"]]]]]],"^I","~$markdown.links/parse-reference-link","^6","markdown/links.cljc","^:",27,"^2C",["^14",[["^31","^37"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",94,"^2H",["^H",[null,"^2[","^33"]],"^9",94,"^2J",2,"^2K",true,"^2<",["^14",["^2=",["^14",[["^31","^37"]]]]]],"^3N",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",85,"^8",7,"^9",85,"^:",16,"^2<",["^14",["^2=",["^14",[["^2>"]]]]]],"^I","~$markdown.links/reference","^6","markdown/links.cljc","^:",16,"^2C",["^14",[["^2>"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",85,"^2H",["^H",["^3:","^2I","^2[","^3W","^33"]],"^9",85,"^2J",1,"^2K",true,"^2<",["^14",["^2=",["^14",[["^2>"]]]]]],"^2R",["^ ","^I","~$markdown.links/link","^6","markdown/links.cljc","^7",82,"^8",1,"^9",82,"^:",10,"^5",["^ ","^6","markdown/links.cljc","^7",82,"^8",6,"^9",82,"^:",10],"^2Z","^3I"],"~$freeze-links",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",119,"^8",7,"^9",119,"^:",19,"^2<",["^14",["^2=",["^14",[["^37","^2>","^2A"]]]]]],"^I","~$markdown.links/freeze-links","^6","markdown/links.cljc","^:",19,"^2C",["^14",[["^37","^2>","^2A"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",119,"^2H","^2I","^9",119,"^2J",3,"^2K",true,"^2<",["^14",["^2=",["^14",[["^37","^2>","^2A"]]]]]],"~$encode-links",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",105,"^8",7,"^9",105,"^:",19,"^2<",["^14",["^2=",["^14",[["^38","~$i"]]]]]],"^I","~$markdown.links/encode-links","^6","markdown/links.cljc","^:",19,"^2C",["^14",[["^38","~$i"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",105,"^2H",["^H",["^2[","^33"]],"^9",105,"^2J",2,"^2K",true,"^2<",["^14",["^2=",["^14",[["^38","~$i"]]]]]],"~$image",["^ ","^I","~$markdown.links/image","^6","markdown/links.cljc","^7",83,"^8",1,"^9",83,"^:",11,"^5",["^ ","^6","markdown/links.cljc","^7",83,"^8",6,"^9",83,"^:",11],"^2Z","^3I"],"~$process-link-title",["^ ","^2;",null,"^5",["^ ","^6","markdown/links.cljc","^7",40,"^8",7,"^9",40,"^:",25,"^2<",["^14",["^2=",["^14",[["^2O","^2A"]]]]]],"^I","~$markdown.links/process-link-title","^6","markdown/links.cljc","^:",25,"^2C",["^14",[["^2O","^2A"]]],"^2E",null,"^2F",["^14",[null,null]],"^8",1,"^2G",false,"^7",40,"^2H",["^H",["^2[","^33"]],"^9",40,"^2J",2,"^2K",true,"^2<",["^14",["^2=",["^14",[["^2O","^2A"]]]]]]],"^12",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^H",["~:codeblock","~:footnotes","~:unprocessed","~:else","~:frozen-strings","~:references","~:next-fn-id","~:code","~:processed","~:reference-links?"]],"~:order",["^4@","^49","^4<","^4=","^4>","^4;","^4?","^4:","^4A","^4B"]],"^18",["^ ","^U",["^H",[]]],"^19",["^ "],"^1:",["^S","^R","^O","^Q"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1H",[["^4F","~:static-fns"],true,["^4F","~:elide-asserts"],false,["^4F","~:optimize-constants"],null,["^4F","^1?"],null,["^4F","~:external-config"],null,["^4F","~:tooling-config"],null,["^4F","~:emit-constants"],null,["^4F","~:load-tests"],null,["^4F","~:infer-externs"],"~:auto",["^4F","^1A"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4F","~:fn-invoke-direct"],null,["^4F","~:source-map"],"/dev/null"]]]