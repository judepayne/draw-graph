["^ ","~:output",["^ ","~:js","goog.provide('instaparse.combinators_source');\ngoog.require('cljs.core');\ngoog.require('instaparse.reduction');\ngoog.require('instaparse.util');\ninstaparse.combinators_source.Epsilon = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"epsilon\",\"epsilon\",-730158570)], null);\n/**\n * Optional, i.e., parser?\n */\ninstaparse.combinators_source.opt = (function instaparse$combinators_source$opt(parser){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(parser,instaparse.combinators_source.Epsilon)){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369),new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),parser], null);\n}\n});\n/**\n * One or more, i.e., parser+\n */\ninstaparse.combinators_source.plus = (function instaparse$combinators_source$plus(parser){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(parser,instaparse.combinators_source.Epsilon)){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"plus\",\"plus\",211540661),new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),parser], null);\n}\n});\n/**\n * Zero or more, i.e., parser*\n */\ninstaparse.combinators_source.star = (function instaparse$combinators_source$star(parser){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(parser,instaparse.combinators_source.Epsilon)){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"star\",\"star\",279424429),new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),parser], null);\n}\n});\n/**\n * Between m and n repetitions\n */\ninstaparse.combinators_source.rep = (function instaparse$combinators_source$rep(m,n,parser){\nif((m <= n)){\n} else {\nthrow (new Error(\"Assert failed: (<= m n)\"));\n}\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(parser,instaparse.combinators_source.Epsilon)){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"rep\",\"rep\",-1226820564),new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),parser,new cljs.core.Keyword(null,\"min\",\"min\",444991522),m,new cljs.core.Keyword(null,\"max\",\"max\",61366548),n], null);\n}\n});\n/**\n * Alternation, i.e., parser1 | parser2 | parser3 | ...\n */\ninstaparse.combinators_source.alt = (function instaparse$combinators_source$alt(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___47885 = arguments.length;\nvar i__4731__auto___47886 = (0);\nwhile(true){\nif((i__4731__auto___47886 < len__4730__auto___47885)){\nargs__4736__auto__.push((arguments[i__4731__auto___47886]));\n\nvar G__47887 = (i__4731__auto___47886 + (1));\ni__4731__auto___47886 = G__47887;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn instaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ninstaparse.combinators_source.alt.cljs$core$IFn$_invoke$arity$variadic = (function (parsers){\nif(cljs.core.every_QMARK_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,instaparse.combinators_source.Epsilon),parsers)){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nif(instaparse.reduction.singleton_QMARK_(parsers)){\nreturn cljs.core.first(parsers);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"alt\",\"alt\",-3214426),new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827),parsers], null);\n\n}\n}\n});\n\ninstaparse.combinators_source.alt.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ninstaparse.combinators_source.alt.cljs$lang$applyTo = (function (seq47707){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq47707));\n});\n\ninstaparse.combinators_source.ord2 = (function instaparse$combinators_source$ord2(parser1,parser2){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"ord\",\"ord\",1142548323),new cljs.core.Keyword(null,\"parser1\",\"parser1\",-439601422),parser1,new cljs.core.Keyword(null,\"parser2\",\"parser2\",1013754688),parser2], null);\n});\n/**\n * Ordered choice, i.e., parser1 / parser2\n */\ninstaparse.combinators_source.ord = (function instaparse$combinators_source$ord(var_args){\nvar G__47722 = arguments.length;\nswitch (G__47722) {\ncase 0:\nreturn instaparse.combinators_source.ord.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nvar args_arr__4751__auto__ = [];\nvar len__4730__auto___47891 = arguments.length;\nvar i__4731__auto___47892 = (0);\nwhile(true){\nif((i__4731__auto___47892 < len__4730__auto___47891)){\nargs_arr__4751__auto__.push((arguments[i__4731__auto___47892]));\n\nvar G__47893 = (i__4731__auto___47892 + (1));\ni__4731__auto___47892 = G__47893;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4752__auto__ = (new cljs.core.IndexedSeq(args_arr__4751__auto__.slice((1)),(0),null));\nreturn instaparse.combinators_source.ord.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4752__auto__);\n\n}\n});\n\ninstaparse.combinators_source.ord.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn instaparse.combinators_source.Epsilon;\n});\n\ninstaparse.combinators_source.ord.cljs$core$IFn$_invoke$arity$variadic = (function (parser1,parsers){\nvar parsers__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(parser1,instaparse.combinators_source.Epsilon))?cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.createAsIfByAssoc([instaparse.combinators_source.Epsilon]),parsers):parsers);\nif(cljs.core.seq(parsers__$1)){\nreturn instaparse.combinators_source.ord2(parser1,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(instaparse.combinators_source.ord,parsers__$1));\n} else {\nreturn parser1;\n}\n});\n\n/** @this {Function} */\ninstaparse.combinators_source.ord.cljs$lang$applyTo = (function (seq47720){\nvar G__47721 = cljs.core.first(seq47720);\nvar seq47720__$1 = cljs.core.next(seq47720);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__47721,seq47720__$1);\n});\n\ninstaparse.combinators_source.ord.cljs$lang$maxFixedArity = (1);\n\n/**\n * Concatenation, i.e., parser1 parser2 ...\n */\ninstaparse.combinators_source.cat = (function instaparse$combinators_source$cat(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___47894 = arguments.length;\nvar i__4731__auto___47895 = (0);\nwhile(true){\nif((i__4731__auto___47895 < len__4730__auto___47894)){\nargs__4736__auto__.push((arguments[i__4731__auto___47895]));\n\nvar G__47896 = (i__4731__auto___47895 + (1));\ni__4731__auto___47895 = G__47896;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ninstaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic = (function (parsers){\nif(cljs.core.every_QMARK_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,instaparse.combinators_source.Epsilon),parsers)){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nvar parsers__$1 = cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.createAsIfByAssoc([instaparse.combinators_source.Epsilon]),parsers);\nif(instaparse.reduction.singleton_QMARK_(parsers__$1)){\nreturn cljs.core.first(parsers__$1);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"cat\",\"cat\",-1457810207),new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827),parsers__$1], null);\n}\n}\n});\n\ninstaparse.combinators_source.cat.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ninstaparse.combinators_source.cat.cljs$lang$applyTo = (function (seq47743){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq47743));\n});\n\n/**\n * Create a string terminal out of s\n */\ninstaparse.combinators_source.string = (function instaparse$combinators_source$string(s){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(s,\"\")){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),s], null);\n}\n});\n/**\n * Create a case-insensitive string terminal out of s\n */\ninstaparse.combinators_source.string_ci = (function instaparse$combinators_source$string_ci(s){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(s,\"\")){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"string-ci\",\"string-ci\",374631805),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),s], null);\n}\n});\n/**\n * Matches a Unicode code point or a range of code points\n */\ninstaparse.combinators_source.unicode_char = (function instaparse$combinators_source$unicode_char(var_args){\nvar G__47768 = arguments.length;\nswitch (G__47768) {\ncase 1:\nreturn instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ninstaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$1 = (function (code_point){\nreturn instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$2(code_point,code_point);\n});\n\ninstaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$2 = (function (lo,hi){\nif((lo <= hi)){\n} else {\nthrow (new Error([\"Assert failed: \",\"Character range minimum must be less than or equal the maximum\",\"\\n\",\"(<= lo hi)\"].join('')));\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"char\",\"char\",-641587586),new cljs.core.Keyword(null,\"lo\",\"lo\",-931799889),lo,new cljs.core.Keyword(null,\"hi\",\"hi\",-1821422114),hi], null);\n});\n\ninstaparse.combinators_source.unicode_char.cljs$lang$maxFixedArity = 2;\n\n/**\n * JavaScript regexes have no .lookingAt method, so in cljs we just\n *   add a '^' character to the front of the regex.\n */\ninstaparse.combinators_source.add_beginning_constraint = (function instaparse$combinators_source$add_beginning_constraint(r){\nif(cljs.core.regexp_QMARK_(r)){\nreturn (new RegExp([\"^\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(r.source)].join(''),instaparse.util.regexp_flags(r)));\n} else {\nreturn r;\n}\n});\n/**\n * Create a regexp terminal out of regular expression r\n */\ninstaparse.combinators_source.regexp = (function instaparse$combinators_source$regexp(r){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(r,\"\")){\nreturn instaparse.combinators_source.Epsilon;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"regexp\",\"regexp\",-541372782),new cljs.core.Keyword(null,\"regexp\",\"regexp\",-541372782),instaparse.combinators_source.add_beginning_constraint(cljs.core.re_pattern(r))], null);\n}\n});\n/**\n * Refers to a non-terminal defined by the grammar map\n */\ninstaparse.combinators_source.nt = (function instaparse$combinators_source$nt(s){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"nt\",\"nt\",-835425781),new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747),s], null);\n});\n/**\n * Lookahead, i.e., &parser\n */\ninstaparse.combinators_source.look = (function instaparse$combinators_source$look(parser){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"look\",\"look\",-539441433),new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),parser], null);\n});\n/**\n * Negative lookahead, i.e., !parser\n */\ninstaparse.combinators_source.neg = (function instaparse$combinators_source$neg(parser){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Keyword(null,\"neg\",\"neg\",1800032960),new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),parser], null);\n});\n/**\n * Hide the result of parser, i.e., <parser>\n */\ninstaparse.combinators_source.hide = (function instaparse$combinators_source$hide(parser){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parser,new cljs.core.Keyword(null,\"hide\",\"hide\",-596913169),true);\n});\n/**\n * Hide the tag associated with this rule.  \n *   Wrap this combinator around the entire right-hand side.\n */\ninstaparse.combinators_source.hide_tag = (function instaparse$combinators_source$hide_tag(parser){\nreturn instaparse.reduction.red(parser,instaparse.reduction.raw_non_terminal_reduction);\n});\n/**\n * Tests whether parser was created with hide-tag combinator\n */\ninstaparse.combinators_source.hidden_tag_QMARK_ = (function instaparse$combinators_source$hidden_tag_QMARK_(parser){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1(parser),instaparse.reduction.raw_non_terminal_reduction);\n});\n/**\n * Recursively undoes the effect of hide on one parser\n */\ninstaparse.combinators_source.unhide_content = (function instaparse$combinators_source$unhide_content(parser){\nvar parser__$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"hide\",\"hide\",-596913169).cljs$core$IFn$_invoke$arity$1(parser))?cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parser,new cljs.core.Keyword(null,\"hide\",\"hide\",-596913169)):parser);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310).cljs$core$IFn$_invoke$arity$1(parser__$1))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parser__$1,new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),(function (){var G__47819 = new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310).cljs$core$IFn$_invoke$arity$1(parser__$1);\nreturn (instaparse.combinators_source.unhide_content.cljs$core$IFn$_invoke$arity$1 ? instaparse.combinators_source.unhide_content.cljs$core$IFn$_invoke$arity$1(G__47819) : instaparse.combinators_source.unhide_content.call(null,G__47819));\n})());\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827).cljs$core$IFn$_invoke$arity$1(parser__$1))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parser__$1,new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827),cljs.core.map.cljs$core$IFn$_invoke$arity$2(instaparse.combinators_source.unhide_content,new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827).cljs$core$IFn$_invoke$arity$1(parser__$1)));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(parser__$1),new cljs.core.Keyword(null,\"ord\",\"ord\",1142548323))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(parser__$1,new cljs.core.Keyword(null,\"parser1\",\"parser1\",-439601422),(function (){var G__47820 = new cljs.core.Keyword(null,\"parser1\",\"parser1\",-439601422).cljs$core$IFn$_invoke$arity$1(parser__$1);\nreturn (instaparse.combinators_source.unhide_content.cljs$core$IFn$_invoke$arity$1 ? instaparse.combinators_source.unhide_content.cljs$core$IFn$_invoke$arity$1(G__47820) : instaparse.combinators_source.unhide_content.call(null,G__47820));\n})(),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"parser2\",\"parser2\",1013754688),(function (){var G__47821 = new cljs.core.Keyword(null,\"parser2\",\"parser2\",1013754688).cljs$core$IFn$_invoke$arity$1(parser__$1);\nreturn (instaparse.combinators_source.unhide_content.cljs$core$IFn$_invoke$arity$1 ? instaparse.combinators_source.unhide_content.cljs$core$IFn$_invoke$arity$1(G__47821) : instaparse.combinators_source.unhide_content.call(null,G__47821));\n})()], 0));\n} else {\nreturn parser__$1;\n\n}\n}\n}\n});\n/**\n * Recursively undoes the effect of hide on all parsers in the grammar\n */\ninstaparse.combinators_source.unhide_all_content = (function instaparse$combinators_source$unhide_all_content(grammar){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__4523__auto__ = (function instaparse$combinators_source$unhide_all_content_$_iter__47822(s__47823){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__47823__$1 = s__47823;\nwhile(true){\nvar temp__5720__auto__ = cljs.core.seq(s__47823__$1);\nif(temp__5720__auto__){\nvar s__47823__$2 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__47823__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__47823__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__47825 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__47824 = (0);\nwhile(true){\nif((i__47824 < size__4522__auto__)){\nvar vec__47826 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__47824);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47826,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47826,(1),null);\ncljs.core.chunk_append(b__47825,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,instaparse.combinators_source.unhide_content(v)], null));\n\nvar G__47911 = (i__47824 + (1));\ni__47824 = G__47911;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__47825),instaparse$combinators_source$unhide_all_content_$_iter__47822(cljs.core.chunk_rest(s__47823__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__47825),null);\n}\n} else {\nvar vec__47829 = cljs.core.first(s__47823__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47829,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47829,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,instaparse.combinators_source.unhide_content(v)], null),instaparse$combinators_source$unhide_all_content_$_iter__47822(cljs.core.rest(s__47823__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4523__auto__(grammar);\n})());\n});\n/**\n * Recursively undoes the effect of hide-tag\n */\ninstaparse.combinators_source.unhide_tags = (function instaparse$combinators_source$unhide_tags(reduction_type,grammar){\nvar temp__5718__auto__ = (instaparse.reduction.reduction_types.cljs$core$IFn$_invoke$arity$1 ? instaparse.reduction.reduction_types.cljs$core$IFn$_invoke$arity$1(reduction_type) : instaparse.reduction.reduction_types.call(null,reduction_type));\nif(cljs.core.truth_(temp__5718__auto__)){\nvar reduction = temp__5718__auto__;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__4523__auto__ = ((function (reduction,temp__5718__auto__){\nreturn (function instaparse$combinators_source$unhide_tags_$_iter__47833(s__47834){\nreturn (new cljs.core.LazySeq(null,((function (reduction,temp__5718__auto__){\nreturn (function (){\nvar s__47834__$1 = s__47834;\nwhile(true){\nvar temp__5720__auto__ = cljs.core.seq(s__47834__$1);\nif(temp__5720__auto__){\nvar s__47834__$2 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__47834__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__47834__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__47836 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__47835 = (0);\nwhile(true){\nif((i__47835 < size__4522__auto__)){\nvar vec__47837 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__47835);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47837,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47837,(1),null);\ncljs.core.chunk_append(b__47836,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),(reduction.cljs$core$IFn$_invoke$arity$1 ? reduction.cljs$core$IFn$_invoke$arity$1(k) : reduction.call(null,k)))], null));\n\nvar G__47919 = (i__47835 + (1));\ni__47835 = G__47919;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__47836),instaparse$combinators_source$unhide_tags_$_iter__47833(cljs.core.chunk_rest(s__47834__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__47836),null);\n}\n} else {\nvar vec__47841 = cljs.core.first(s__47834__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47841,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47841,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),(reduction.cljs$core$IFn$_invoke$arity$1 ? reduction.cljs$core$IFn$_invoke$arity$1(k) : reduction.call(null,k)))], null),instaparse$combinators_source$unhide_tags_$_iter__47833(cljs.core.rest(s__47834__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(reduction,temp__5718__auto__))\n,null,null));\n});})(reduction,temp__5718__auto__))\n;\nreturn iter__4523__auto__(grammar);\n})());\n} else {\nreturn instaparse.util.throw_illegal_argument_exception.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Invalid output format \",reduction_type,\". Use :enlive or :hiccup.\"], 0));\n}\n});\n/**\n * Recursively undoes the effect of both hide and hide-tag\n */\ninstaparse.combinators_source.unhide_all = (function instaparse$combinators_source$unhide_all(reduction_type,grammar){\nvar temp__5718__auto__ = (instaparse.reduction.reduction_types.cljs$core$IFn$_invoke$arity$1 ? instaparse.reduction.reduction_types.cljs$core$IFn$_invoke$arity$1(reduction_type) : instaparse.reduction.reduction_types.call(null,reduction_type));\nif(cljs.core.truth_(temp__5718__auto__)){\nvar reduction = temp__5718__auto__;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__4523__auto__ = ((function (reduction,temp__5718__auto__){\nreturn (function instaparse$combinators_source$unhide_all_$_iter__47846(s__47847){\nreturn (new cljs.core.LazySeq(null,((function (reduction,temp__5718__auto__){\nreturn (function (){\nvar s__47847__$1 = s__47847;\nwhile(true){\nvar temp__5720__auto__ = cljs.core.seq(s__47847__$1);\nif(temp__5720__auto__){\nvar s__47847__$2 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__47847__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__47847__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__47849 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__47848 = (0);\nwhile(true){\nif((i__47848 < size__4522__auto__)){\nvar vec__47851 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__47848);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47851,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47851,(1),null);\ncljs.core.chunk_append(b__47849,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(instaparse.combinators_source.unhide_content(v),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),(reduction.cljs$core$IFn$_invoke$arity$1 ? reduction.cljs$core$IFn$_invoke$arity$1(k) : reduction.call(null,k)))], null));\n\nvar G__47949 = (i__47848 + (1));\ni__47848 = G__47949;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__47849),instaparse$combinators_source$unhide_all_$_iter__47846(cljs.core.chunk_rest(s__47847__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__47849),null);\n}\n} else {\nvar vec__47854 = cljs.core.first(s__47847__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47854,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47854,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(instaparse.combinators_source.unhide_content(v),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),(reduction.cljs$core$IFn$_invoke$arity$1 ? reduction.cljs$core$IFn$_invoke$arity$1(k) : reduction.call(null,k)))], null),instaparse$combinators_source$unhide_all_$_iter__47846(cljs.core.rest(s__47847__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(reduction,temp__5718__auto__))\n,null,null));\n});})(reduction,temp__5718__auto__))\n;\nreturn iter__4523__auto__(grammar);\n})());\n} else {\nreturn instaparse.util.throw_illegal_argument_exception.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Invalid output format \",reduction_type,\". Use :enlive or :hiccup.\"], 0));\n}\n});\ninstaparse.combinators_source.auto_whitespace_parser = (function instaparse$combinators_source$auto_whitespace_parser(parser,ws_parser){\nvar G__47861 = new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(parser);\nvar G__47861__$1 = (((G__47861 instanceof cljs.core.Keyword))?G__47861.fqn:null);\nswitch (G__47861__$1) {\ncase \"nt\":\ncase \"epsilon\":\nreturn parser;\n\nbreak;\ncase \"opt\":\ncase \"plus\":\ncase \"star\":\ncase \"rep\":\ncase \"look\":\ncase \"neg\":\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(parser,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310)], null),instaparse.combinators_source.auto_whitespace_parser,ws_parser);\n\nbreak;\ncase \"alt\":\ncase \"cat\":\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parser,new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827),cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (G__47861,G__47861__$1){\nreturn (function (p1__47860_SHARP_){\nreturn (instaparse.combinators_source.auto_whitespace_parser.cljs$core$IFn$_invoke$arity$2 ? instaparse.combinators_source.auto_whitespace_parser.cljs$core$IFn$_invoke$arity$2(p1__47860_SHARP_,ws_parser) : instaparse.combinators_source.auto_whitespace_parser.call(null,p1__47860_SHARP_,ws_parser));\n});})(G__47861,G__47861__$1))\n,new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827).cljs$core$IFn$_invoke$arity$1(parser)));\n\nbreak;\ncase \"ord\":\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(parser,new cljs.core.Keyword(null,\"parser1\",\"parser1\",-439601422),(function (){var G__47862 = new cljs.core.Keyword(null,\"parser1\",\"parser1\",-439601422).cljs$core$IFn$_invoke$arity$1(parser);\nvar G__47863 = ws_parser;\nreturn (instaparse.combinators_source.auto_whitespace_parser.cljs$core$IFn$_invoke$arity$2 ? instaparse.combinators_source.auto_whitespace_parser.cljs$core$IFn$_invoke$arity$2(G__47862,G__47863) : instaparse.combinators_source.auto_whitespace_parser.call(null,G__47862,G__47863));\n})(),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"parser2\",\"parser2\",1013754688),(function (){var G__47864 = new cljs.core.Keyword(null,\"parser2\",\"parser2\",1013754688).cljs$core$IFn$_invoke$arity$1(parser);\nvar G__47865 = ws_parser;\nreturn (instaparse.combinators_source.auto_whitespace_parser.cljs$core$IFn$_invoke$arity$2 ? instaparse.combinators_source.auto_whitespace_parser.cljs$core$IFn$_invoke$arity$2(G__47864,G__47865) : instaparse.combinators_source.auto_whitespace_parser.call(null,G__47864,G__47865));\n})()], 0));\n\nbreak;\ncase \"string\":\ncase \"string-ci\":\ncase \"regexp\":\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1(parser))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ws_parser,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parser,new cljs.core.Keyword(null,\"red\",\"red\",-969428204))], 0)),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1(parser));\n} else {\nreturn instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ws_parser,parser], 0));\n}\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__47861__$1)].join('')));\n\n}\n});\ninstaparse.combinators_source.auto_whitespace = (function instaparse$combinators_source$auto_whitespace(grammar,start,grammar_ws,start_ws){\nvar ws_parser = instaparse.combinators_source.hide(instaparse.combinators_source.opt(instaparse.combinators_source.nt(start_ws)));\nvar grammar_ws__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(grammar_ws,start_ws,instaparse.combinators_source.hide_tag((grammar_ws.cljs$core$IFn$_invoke$arity$1 ? grammar_ws.cljs$core$IFn$_invoke$arity$1(start_ws) : grammar_ws.call(null,start_ws))));\nvar modified_grammar = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__4523__auto__ = ((function (ws_parser,grammar_ws__$1){\nreturn (function instaparse$combinators_source$auto_whitespace_$_iter__47870(s__47871){\nreturn (new cljs.core.LazySeq(null,((function (ws_parser,grammar_ws__$1){\nreturn (function (){\nvar s__47871__$1 = s__47871;\nwhile(true){\nvar temp__5720__auto__ = cljs.core.seq(s__47871__$1);\nif(temp__5720__auto__){\nvar s__47871__$2 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__47871__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__47871__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__47873 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__47872 = (0);\nwhile(true){\nif((i__47872 < size__4522__auto__)){\nvar vec__47876 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__47872);\nvar nt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47876,(0),null);\nvar parser = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47876,(1),null);\ncljs.core.chunk_append(b__47873,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nt,instaparse.combinators_source.auto_whitespace_parser(parser,ws_parser)], null));\n\nvar G__48030 = (i__47872 + (1));\ni__47872 = G__48030;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__47873),instaparse$combinators_source$auto_whitespace_$_iter__47870(cljs.core.chunk_rest(s__47871__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__47873),null);\n}\n} else {\nvar vec__47881 = cljs.core.first(s__47871__$2);\nvar nt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47881,(0),null);\nvar parser = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47881,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nt,instaparse.combinators_source.auto_whitespace_parser(parser,ws_parser)], null),instaparse$combinators_source$auto_whitespace_$_iter__47870(cljs.core.rest(s__47871__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(ws_parser,grammar_ws__$1))\n,null,null));\n});})(ws_parser,grammar_ws__$1))\n;\nreturn iter__4523__auto__(grammar);\n})());\nvar final_grammar = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(modified_grammar,start,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2((modified_grammar.cljs$core$IFn$_invoke$arity$1 ? modified_grammar.cljs$core$IFn$_invoke$arity$1(start) : modified_grammar.call(null,start)),new cljs.core.Keyword(null,\"red\",\"red\",-969428204)),ws_parser], 0)),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1((modified_grammar.cljs$core$IFn$_invoke$arity$1 ? modified_grammar.cljs$core$IFn$_invoke$arity$1(start) : modified_grammar.call(null,start)))));\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([final_grammar,grammar_ws__$1], 0));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","This is the underlying implementation of the various combinators.","~:file","instaparse/combinators_source.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",34],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",["~$cat"]],"~:name","~$instaparse.combinators-source","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$instaparse.reduction","^Q","~$instaparse.util","^R","~$cljs.core","^S","~$goog","^T"],"~:seen",["^I",["~:require"]],"~:uses",["^ ","~$singleton?","^Q","~$red","^Q","~$raw-non-terminal-reduction","^Q","~$reduction-types","^Q","~$throw-illegal-argument-exception","^R","~$regexp-flags","^R"],"~:require-macros",["^ ","^S","^S"],"~:form",["~#list",["~$ns","^L","This is the underlying implementation of the various combinators.",["^14",["~:refer-clojure","~:exclude",["^J"]]],["^14",["^V",["^Q","~:refer",["^X","^Y","^Z","^["]],["^R","^18",["^10","^11"]]]]]],"~:flags",["^ ","^V",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^Q","^R"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","instaparse/combinators_source.cljc"],"~:compiled-at",1560836398239,"~:resource-name","instaparse/combinators_source.cljc","~:warnings",[],"~:source","(ns instaparse.combinators-source\r\n  \"This is the underlying implementation of the various combinators.\"\r\n  (:refer-clojure :exclude [cat])\r\n  (:require [instaparse.reduction :refer [singleton? red\r\n                                          raw-non-terminal-reduction\r\n                                          reduction-types]]\r\n            [instaparse.util :refer [throw-illegal-argument-exception #?(:cljs regexp-flags)]]))\r\n\r\n;; Ways to build parsers\r\n\r\n(def Epsilon {:tag :epsilon})\r\n\r\n(defn opt \"Optional, i.e., parser?\"\r\n  [parser] \r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :opt :parser parser}))\r\n\r\n(defn plus \"One or more, i.e., parser+\"\r\n  [parser]\r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :plus :parser parser}))\r\n\r\n(defn star \"Zero or more, i.e., parser*\"\r\n  [parser] \r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :star :parser parser}))\r\n\r\n(defn rep \"Between m and n repetitions\"\r\n  [m n parser]\r\n  {:pre [(<= m n)]}\r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :rep :parser parser :min m :max n}))\r\n\r\n(defn alt \"Alternation, i.e., parser1 | parser2 | parser3 | ...\"\r\n  [& parsers] \r\n  (cond\r\n    (every? (partial = Epsilon) parsers) Epsilon\r\n    (singleton? parsers) (first parsers)\r\n    :else {:tag :alt :parsers parsers}))\r\n\r\n(defn- ord2 [parser1 parser2]\r\n  {:tag :ord :parser1 parser1 :parser2 parser2})\r\n\r\n(defn ord \"Ordered choice, i.e., parser1 / parser2\"\r\n  ([] Epsilon)\r\n  ([parser1 & parsers]\r\n    (let [parsers (if (= parser1 Epsilon)\r\n                    (remove #{Epsilon} parsers)\r\n                    parsers)]\r\n      (if (seq parsers)\r\n        (ord2 parser1 (apply ord parsers))\r\n        parser1))))\r\n\r\n(defn cat \"Concatenation, i.e., parser1 parser2 ...\"\r\n  [& parsers]\r\n  (if (every? (partial = Epsilon) parsers) Epsilon\r\n    (let [parsers (remove #{Epsilon} parsers)]\r\n      (if (singleton? parsers) (first parsers) ; apply vector reduction\r\n        {:tag :cat :parsers parsers}))))\r\n\r\n(defn string \"Create a string terminal out of s\" \r\n  [s] \r\n  (if (= s \"\") Epsilon\r\n    {:tag :string :string s}))\r\n\r\n(defn string-ci \"Create a case-insensitive string terminal out of s\" \r\n  [s] \r\n  (if (= s \"\") Epsilon\r\n      {:tag :string-ci :string s}))\r\n\r\n(defn unicode-char\r\n  \"Matches a Unicode code point or a range of code points\"\r\n  ([code-point]\r\n   (unicode-char code-point code-point))\r\n  ([lo hi]\r\n   (assert (<= lo hi) \"Character range minimum must be less than or equal the maximum\")\r\n   {:tag :char :lo lo :hi hi}))\r\n\r\n#?(:cljs\r\n   (defn- add-beginning-constraint\r\n     \"JavaScript regexes have no .lookingAt method, so in cljs we just\r\n  add a '^' character to the front of the regex.\"\r\n     [r]\r\n     (if (regexp? r)\r\n       (js/RegExp. (str \"^\" (.-source r)) (regexp-flags r))\r\n       r)))\r\n\r\n(defn regexp \"Create a regexp terminal out of regular expression r\"\r\n  [r]\r\n  (if (= r \"\") Epsilon\r\n      {:tag :regexp\r\n       :regexp (-> (re-pattern r)\r\n                   #?(:cljs add-beginning-constraint))}))\r\n\r\n(defn nt \"Refers to a non-terminal defined by the grammar map\"\r\n  [s] \r\n  {:tag :nt :keyword s})\r\n\r\n(defn look \"Lookahead, i.e., &parser\" \r\n  [parser] \r\n  {:tag :look :parser parser}) \r\n\r\n(defn neg \"Negative lookahead, i.e., !parser\"\r\n  [parser] \r\n  {:tag :neg :parser parser})\r\n\r\n(defn hide \"Hide the result of parser, i.e., <parser>\"\r\n  [parser] \r\n  (assoc parser :hide true))\r\n\r\n(defn hide-tag \"Hide the tag associated with this rule.  \r\n  Wrap this combinator around the entire right-hand side.\"  \r\n  [parser]\r\n  (red parser raw-non-terminal-reduction))\r\n\r\n; Ways to alter a parser with hidden information, unhiding that information\r\n\r\n(defn hidden-tag?\r\n  \"Tests whether parser was created with hide-tag combinator\"\r\n  [parser]\r\n  (= (:red parser) raw-non-terminal-reduction))\r\n\r\n(defn unhide-content\r\n  \"Recursively undoes the effect of hide on one parser\"\r\n  [parser]\r\n  (let [parser (if (:hide parser) (dissoc parser :hide) parser)]\r\n    (cond\r\n      (:parser parser) (assoc parser :parser (unhide-content (:parser parser)))\r\n      (:parsers parser) (assoc parser :parsers (map unhide-content (:parsers parser)))\r\n      (= (:tag parser) :ord) (assoc parser \r\n                                    :parser1 (unhide-content (:parser1 parser))\r\n                                    :parser2 (unhide-content (:parser2 parser)))\r\n      :else parser)))\r\n\r\n(defn unhide-all-content\r\n  \"Recursively undoes the effect of hide on all parsers in the grammar\"\r\n  [grammar]\r\n  (into {} (for [[k v] grammar]\r\n             [k (unhide-content v)])))\r\n\r\n(defn unhide-tags \r\n  \"Recursively undoes the effect of hide-tag\"\r\n  [reduction-type grammar]\r\n  (if-let [reduction (reduction-types reduction-type)]\r\n    (into {} (for [[k v] grammar]\r\n               [k (assoc v :red (reduction k))]))\r\n    (throw-illegal-argument-exception\r\n      \"Invalid output format \" reduction-type \". Use :enlive or :hiccup.\")))\r\n\r\n(defn unhide-all\r\n  \"Recursively undoes the effect of both hide and hide-tag\"\r\n  [reduction-type grammar]\r\n  (if-let [reduction (reduction-types reduction-type)]\r\n    (into {} (for [[k v] grammar]\r\n               [k (assoc (unhide-content v) :red (reduction k))]))\r\n    (throw-illegal-argument-exception\r\n      \"Invalid output format \" reduction-type \". Use :enlive or :hiccup.\")))\r\n\r\n\r\n;; New beta feature: automatically add whitespace\r\n\r\n(defn auto-whitespace-parser [parser ws-parser]\r\n  (case (:tag parser)\r\n    (:nt :epsilon) parser  \r\n    (:opt :plus :star :rep :look :neg) (update-in parser [:parser] auto-whitespace-parser ws-parser)\r\n    (:alt :cat) (assoc parser :parsers  \r\n                       (map #(auto-whitespace-parser % ws-parser) (:parsers parser)))\r\n    :ord (assoc parser \r\n                :parser1 (auto-whitespace-parser (:parser1 parser) ws-parser)\r\n                :parser2 (auto-whitespace-parser (:parser2 parser) ws-parser))\r\n    (:string :string-ci :regexp) \r\n    ; If the string/regexp has a reduction associated with it,\r\n    ; we need to \"lift\" that reduction out to the (cat whitespace string)\r\n    ; parser that is being created.\r\n    (if (:red parser)\r\n      (assoc (cat ws-parser (dissoc parser :red)) :red (:red parser))\r\n      (cat ws-parser parser))))\r\n\r\n(defn auto-whitespace [grammar start grammar-ws start-ws]\r\n  (let [ws-parser (hide (opt (nt start-ws)))\r\n        grammar-ws (assoc grammar-ws start-ws (hide-tag (grammar-ws start-ws)))\r\n        modified-grammar (into {} \r\n                               (for [[nt parser] grammar] \r\n                                 [nt (auto-whitespace-parser parser ws-parser)]))\r\n        final-grammar (assoc modified-grammar start \r\n                             (assoc (cat (dissoc (modified-grammar start) :red) \r\n                                         ws-parser)\r\n                                    :red (:red (modified-grammar start))))]\r\n    (merge final-grammar grammar-ws)))\r\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;;AAUA,AAAA,AAAA,AAAA,AAAKA;AAEL;;;AAAA,AAAMC,AACHC;AADH,AAEE,AAAI,AAACC,AAAED,AAAOF;AAASA;;AAAvB,AAAA,AAAA,AAAA,AACqBE;;;AAEvB;;;AAAA,AAAME,AACHF;AADH,AAEE,AAAI,AAACC,AAAED,AAAOF;AAASA;;AAAvB,AAAA,AAAA,AAAA,AACsBE;;;AAExB;;;AAAA,AAAMG,AACHH;AADH,AAEE,AAAI,AAACC,AAAED,AAAOF;AAASA;;AAAvB,AAAA,AAAA,AAAA,AACsBE;;;AAExB;;;AAAA,AAAMK,AACHC,AAAEC,AAAEP;AADP,AAAA,AAES,AAAIM,AAAEC;AAFf;AAAA,AAAA,AAAA,AAAAH,AAAA;;;AAGE,AAAI,AAACH,AAAED,AAAOF;AAASA;;AAAvB,AAAA,AAAA,AAAA,AAAA,AAAA,AACqBE,AAAYM,AAAOC;;;AAE1C,AAAA;;;AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACDI;AADL,AAEE,AACE,AAACC,AAAO,AAACC,AAAQC,AAAEvB,AAASoB;AAASpB;;AADvC,AAEE,AAACwB,AAAWJ;AAAS,AAACK,AAAML;;AAF9B,AAAA,AAAA,AAAA,AAAA,AAG4BA;;;;;;AAL9B,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAOA,AAAA,AAAOS,AAAMC,AAAQC;AAArB,AAAA,AAAA,AAAA,AAAA,AAAA,AACsBD,AAAiBC;;AAEvC,AAAA;;;AAAA,AAAAlB,AAAMoB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAnB,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAmB,AAAA,AAAA,AAAAlB;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAmB,AAAA,AAAAjB,AAAA,AAAAgB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAAE;;;;;AAAA,AAAA,AAAA,AAAMF;AAAN,AACM9B;;;AADN,AAAA,AAAA,AAAA,AAAM8B,AAEFH,AAAUP;AAFd,AAGI,AAAMA,AAAQ,AAAI,AAACjB,AAAEwB,AAAQ3B,AACb,AAAA,AAACqC,AAASrC,AAASoB,AACnBA;AAFhB,AAGE,AAAI,AAACD,AAAIC;AACP,AAACM,AAAKC,AAAQ,AAACW,AAAMR,AAAIV;;AACzBO;;;;AARR;AAAA,AAAA,AAAA,AAAAM,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAT,AAAAQ;AAAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAAA,AAAAF,AAAAD;;;AAAA,AAAA,AAAA,AAAMH;;AAAN,AAUA,AAAA;;;AAAA,AAAApB,AAAM6B;AAAN,AAAA,AAAA5B,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4B,AAAAzB;;;AAAA,AAAA,AAAA,AAAA,AAAMyB,AACDnB;AADL,AAEE,AAAI,AAACC,AAAO,AAACC,AAAQC,AAAEvB,AAASoB;AAASpB;;AACvC,AAAMoB,AAAQ,AAAA,AAACiB,AAASrC,AAASoB;AAAjC,AACE,AAAI,AAACI,AAAWJ;AAAS,AAACK,AAAML;;AAAhC,AAAA,AAAA,AAAA,AACsBA;;;;;AAL5B,AAAA,AAAA,AAAMmB;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAArB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAqB;;;AAAA,AAOA;;;AAAA,AAAMC,AACHC;AADH,AAEE,AAAI,AAAA,AAACvC,AAAEuC;AAAM1C;;AAAb,AAAA,AAAA,AAAA,AACwB0C;;;AAE1B;;;AAAA,AAAMC,AACHD;AADH,AAEE,AAAI,AAAA,AAACvC,AAAEuC;AAAM1C;;AAAb,AAAA,AAAA,AAAA,AAC6B0C;;;AAE/B,AAAA;;;AAAA,AAAAhC,AAAMmC;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAvC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMuC,AAEFC;AAFJ,AAGG,AAACC,AAAaD,AAAWA;;;AAH5B,AAAA,AAAA,AAAMD,AAIFG,AAAGC;AAJP,AAKG,AAAQ,AAAID,AAAGC;AAAf;AAAA,AAAA,AAAA,AAAA3C,AAAA,AAAA,AAAA,AAAA,AAAA;;;AALH,AAAA,AAAA,AAAA,AAAA,AAMmB0C,AAAOC;;;AAN1B,AAAA,AAAA,AAAMJ;;AAAN,AASG;;;;AAAA,AAAOK,AAGJC;AAHH,AAIE,AAAI,AAACC,AAAQD;AACX,AAAAE,AAAY,AAAA,AAAS,AAAUF,AAAI,AAACG,AAAaH;;AACjDA;;;AAEP;;;AAAA,AAAMI,AACHJ;AADH,AAEE,AAAI,AAAA,AAAChD,AAAEgD;AAAMnD;;AAAb,AAAA,AAAA,AAAA,AAEa,AAAI,AAACwD,AAAWL,AACHD;;;AAE5B;;;AAAA,AAAMO,AACHf;AADH,AAAA,AAAA,AAAA,AAAA,AAEqBA;;AAErB;;;AAAA,AAAMgB,AACHxD;AADH,AAAA,AAAA,AAAA,AAAA,AAEsBA;;AAEtB;;;AAAA,AAAMyD,AACHzD;AADH,AAAA,AAAA,AAAA,AAAA,AAEqBA;;AAErB;;;AAAA,AAAM0D,AACH1D;AADH,AAEE,AAAA,AAAA,AAAC2D,AAAM3D;;AAET;;;;AAAA,AAAM4D,AAEH5D;AAFH,AAGE,AAAC6D,AAAI7D,AAAO8D;;AAId;;;AAAA,AAAMC,AAEH/D;AAFH,AAGE,AAACC,AAAE,AAAA,AAAMD,AAAQ8D;;AAEnB;;;AAAA,AAAME,AAEHhE;AAFH,AAGE,AAAMA,AAAO,AAAI,AAAA,AAAOA,AAAQ,AAAA,AAACiE,AAAOjE,AAAcA;AAAtD,AACE,AACE,AAAA,AAASA;AAAQ,AAAA,AAAC2D,AAAM3D,AAAe,AAAAkE,AAAgB,AAAA,AAASlE;AAAzB,AAAA,AAAAkE,AAAAA,AAACF,AAAAA,AAAAA;;;AAD1C,AAEE,AAAA,AAAUhE;AAAQ,AAAA,AAAC2D,AAAM3D,AAAgB,AAACmE,AAAIH,AAAe,AAAA,AAAUhE;;AAFzE,AAGE,AAAA,AAACC,AAAE,AAAA,AAAMD;AAAc,AAAA,AAACoE,AAAMpE,AACS,AAAAqE,AAAgB,AAAA,AAAUrE;AAA1B,AAAA,AAAAqE,AAAAA,AAACL,AAAAA,AAAAA;AADjB,AAEgB,AAAAM,AAAgB,AAAA,AAAUtE;AAA1B,AAAA,AAAAsE,AAAAA,AAACN,AAAAA,AAAAA;;;AAL1C,AAMQhE;;;;;;AAEZ;;;AAAA,AAAMuE,AAEHC;AAFH,AAGE,AAAA,AAACC,AAAQ,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAA5D,AAAA0D;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAC,AAAAH;AAAA,AAAAI,AA0xEwC,AAAA+D,AAAAnE;AA1xExCK,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAAK,AAAA,AAAAC,AAAAP,AAAAK;AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAOW;AAAP,AAAAT,AAAAF,AAAA,AAAA,AAASY;AAAT,AAAA,AAAA,AAAAT,AAAAN,AAAA,AACGc,AAAE,AAAChC,AAAeiC;;AADrB,AAAA,AAAAb,AAAA;;;;AAAA;;;;;AAAA,AAAAK,AAAA,AAAAC,AAAAR,AAAA,AAAAS,AAAA,AAAAC,AAAAjB;;AAAA,AAAAc,AAAA,AAAAC,AAAAR,AAAA;;;AAAA,AAAAW,AAAA,AAAAtE,AAAAoD;AAAA,AAAAY,AAAAM,AAAA,AAAA,AAAOG;AAAP,AAAAT,AAAAM,AAAA,AAAA,AAASI;AAAT,AAAA,AAAAH,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAApB,AACGqB,AAAE,AAAChC,AAAeiC;;;AADrB;;;;AAAA,AAAA;;AAAA,AAAA,AAAAvB,AAAYF;;;AAGvB;;;AAAA,AAAM0B,AAEHC,AAAe3B;AAFlB,AAGE,AAAA4B,AAAmB,AAACE,AAAAA,AAAAA,AAAgBH,AAAAA;AAApC,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAAA,AAAC5B,AAAQ,AAAAC,AAAA;AAAA6B;AAAA,AAAA,AAAA3B,AAAA,AAAA;;AAAA,AAAA,AAAA2B,AAAAA;;AAAA,AAAA,AAAA1B,AAAA,AAAA5D,AAAAsF;AAAA,AAAA,AAAA1B;AAAA,AAAA,AAAA0B,AAAA1B;AAAA,AAAA,AAAA,AAAAC,AAAAyB;AAAA,AAAAxB,AAmxEsC,AAAA+D,AAAAvC;AAnxEtCvB,AAAA,AAAAC,AAAAF;AAAAyB,AAAA,AAAArB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAyB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzB;AAAA,AAAA0B,AAAA,AAAApB,AAAAP,AAAA0B;AAAA,AAAAlB,AAAAmB,AAAA,AAAA,AAAOV;AAAP,AAAAT,AAAAmB,AAAA,AAAA,AAAST;AAAT,AAAA,AAAA,AAAAT,AAAAgB,AAAA,AACGR,AAAE,AAAA,AAACrC,AAAMsC,AAAO,AAACI,AAAAA,AAAAA,AAAUL,AAAAA;;AAD9B,AAAA,AAAAS,AAAA;;;;AAAA;;;;;AAAA,AAAAhB,AAAA,AAAAC,AAAAc,AAAA,AAAAG,AAAA,AAAAf,AAAAW;;AAAA,AAAAd,AAAA,AAAAC,AAAAc,AAAA;;;AAAA,AAAAI,AAAA,AAAArF,AAAAgF;AAAA,AAAAhB,AAAAqB,AAAA,AAAA,AAAOZ;AAAP,AAAAT,AAAAqB,AAAA,AAAA,AAASX;AAAT,AAAA,AAAAH,AAAA,AAAA,AAAAa,AAAA,AAAAZ,AAAAQ,AACGP,AAAE,AAAA,AAACrC,AAAMsC,AAAO,AAACI,AAAAA,AAAAA,AAAUL,AAAAA;;;AAD9B;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAtB,AAAYF;;;AAErB,AAAA,AAAA,AAACqC,AAC0BV;;;AAE/B;;;AAAA,AAAMW,AAEHX,AAAe3B;AAFlB,AAGE,AAAA4B,AAAmB,AAACE,AAAAA,AAAAA,AAAgBH,AAAAA;AAApC,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAAA,AAAC5B,AAAQ,AAAAC,AAAA;AAAAqC;AAAA,AAAA,AAAAnC,AAAA,AAAA;;AAAA,AAAA,AAAAmC,AAAAA;;AAAA,AAAA,AAAAlC,AAAA,AAAA5D,AAAA8F;AAAA,AAAA,AAAAlC;AAAA,AAAA,AAAAkC,AAAAlC;AAAA,AAAA,AAAA,AAAAC,AAAAiC;AAAA,AAAAhC,AA0wEsC,AAAA+D,AAAA/B;AA1wEtC/B,AAAA,AAAAC,AAAAF;AAAAiC,AAAA,AAAA7B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAiC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAjC;AAAA,AAAAkC,AAAA,AAAA5B,AAAAP,AAAAkC;AAAA,AAAA1B,AAAA2B,AAAA,AAAA,AAAOlB;AAAP,AAAAT,AAAA2B,AAAA,AAAA,AAASjB;AAAT,AAAA,AAAA,AAAAT,AAAAwB,AAAA,AACGhB,AAAE,AAAA,AAACrC,AAAM,AAACK,AAAeiC,AAAQ,AAACI,AAAAA,AAAAA,AAAUL,AAAAA;;AAD/C,AAAA,AAAAiB,AAAA;;;;AAAA;;;;;AAAA,AAAAxB,AAAA,AAAAC,AAAAsB,AAAA,AAAAG,AAAA,AAAAvB,AAAAmB;;AAAA,AAAAtB,AAAA,AAAAC,AAAAsB,AAAA;;;AAAA,AAAAI,AAAA,AAAA7F,AAAAwF;AAAA,AAAAxB,AAAA6B,AAAA,AAAA,AAAOpB;AAAP,AAAAT,AAAA6B,AAAA,AAAA,AAASnB;AAAT,AAAA,AAAAH,AAAA,AAAA,AAAAqB,AAAA,AAAApB,AAAAgB,AACGf,AAAE,AAAA,AAACrC,AAAM,AAACK,AAAeiC,AAAQ,AAACI,AAAAA,AAAAA,AAAUL,AAAAA;;;AAD/C;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAtB,AAAYF;;;AAErB,AAAA,AAAA,AAACqC,AAC0BV;;;AAK/B,AAAA,AAAMkB,AAAwBrH,AAAOsH;AAArC,AACE,AAAAC,AAAM,AAAA,AAAMvH;AAAZuH,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA;AACiBvH;;;AADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEqC,AAAA,AAAA,AAACyH,AAAUzH,AAAiBqH,AAAuBC;;;AAFxF;AAAA;AAGc,AAAA,AAAC3D,AAAM3D,AACA,AAAA,AAACmE;AAADuD;AAAA,AAAM,AAAAA,AAAAA,AAACL,AAAAA,AAAAA,AAAyBC,AAAAA;;AAAW,AAAA,AAAUtH;;;AAJ1E;AAKO,AAAA,AAACoE,AAAMpE,AACS,AAAA2H,AAAwB,AAAA,AAAU3H;AAAlC4H,AAA0CN;AAA1C,AAAA,AAAAK,AAAAC,AAAAD,AAAAC,AAACP,AAAAA,AAAAA;AADjB,AAEgB,AAAAQ,AAAwB,AAAA,AAAU7H;AAAlC8H,AAA0CR;AAA1C,AAAA,AAAAO,AAAAC,AAAAD,AAAAC,AAACT,AAAAA,AAAAA;;;;AAPxB;AAAA;AAAA;AAYE,AAAI,AAAA,AAAMrH;AACR,AAAA,AAAC2D,AAAM,AAACoE,AAAIT,AAAU,AAAA,AAACrD,AAAOjE,AAAmB,AAAA,AAAMA;;AACvD,AAAC+H,AAAIT,AAAUtH;;;;;AAdnB,AAAA,AAAAI,AAAA,AAAA,AAAAmH;;;;AAgBF,AAAA,AAAMS,AAAiBxD,AAAQyD,AAAMC,AAAWC;AAAhD,AACE,AAAMb,AAAU,AAAC5D,AAAK,AAAC3D,AAAI,AAACwD,AAAG4E;AACzBD,AAAW,AAACvE,AAAMuE,AAAWC,AAAS,AAACvE,AAAS,AAACsE,AAAAA,AAAAA,AAAWC,AAAAA;AAC5DC,AAAiB,AAAA,AAAC3D,AACK,AAAAC,AAAA;AAAA2D;AAAA,AAAA,AAAAzD,AAAA,AAAA;;AAAA,AAAA,AAAAyD,AAAAA;;AAAA,AAAA,AAAAxD,AAAA,AAAA5D,AAAAoH;AAAA,AAAA,AAAAxD;AAAA,AAAA,AAAAwD,AAAAxD;AAAA,AAAA,AAAA,AAAAC,AAAAuD;AAAA,AAAAtD,AA6uEoB,AAAA+D,AAAAT;AA7uEpBrD,AAAA,AAAAC,AAAAF;AAAAuD,AAAA,AAAAnD,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAuD,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAvD;AAAA,AAAAwD,AAAA,AAAAlD,AAAAP,AAAAwD;AAAA,AAAAhD,AAAAiD,AAAA,AAAA,AAAOG;AAAP,AAAApD,AAAAiD,AAAA,AAAA,AAAUxI;AAAV,AAAA,AAAA,AAAAwF,AAAA8C,AAAA,AACGK,AAAG,AAACtB,AAAuBrH,AAAOsH;;AADrC,AAAA,AAAAiB,AAAA;;;;AAAA;;;;;AAAA,AAAA9C,AAAA,AAAAC,AAAA4C,AAAA,AAAAG,AAAA,AAAA7C,AAAAyC;;AAAA,AAAA5C,AAAA,AAAAC,AAAA4C,AAAA;;;AAAA,AAAAI,AAAA,AAAAnH,AAAA8G;AAAA,AAAA9C,AAAAmD,AAAA,AAAA,AAAOC;AAAP,AAAApD,AAAAmD,AAAA,AAAA,AAAU1I;AAAV,AAAA,AAAA8F,AAAA,AAAA,AAAA2C,AAAA,AAAA1C,AAAAsC,AACGM,AAAG,AAACtB,AAAuBrH,AAAOsH;;;AADrC;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAA5C,AAAkBF;;AAEzCoE,AAAc,AAACjF,AAAMyE,AAAiBH,AACjB,AAAA,AAACtE,AAAM,AAACoE,AAAI,AAAA,AAAC9D,AAAO,AAACmE,AAAAA,AAAAA,AAAiBH,AAAAA,AAC1BX,AACA,AAAA,AAAM,AAACc,AAAAA,AAAAA,AAAiBH,AAAAA;AAR/D,AASE,AAACY,AAAMD,AAAcV","names",["instaparse.combinators-source/Epsilon","instaparse.combinators-source/opt","parser","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","instaparse.combinators-source/plus","instaparse.combinators-source/star","js/Error","instaparse.combinators-source/rep","m","n","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","instaparse.combinators-source/alt","seq47707","self__4718__auto__","cljs.core/seq","parsers","cljs.core/every?","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/=","instaparse.reduction/singleton?","cljs.core/first","instaparse.combinators-source/ord2","parser1","parser2","G__47722","instaparse.combinators-source/ord","args-arr__4751__auto__","argseq__4752__auto__","seq47720","G__47721","cljs.core/next","self__4717__auto__","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","instaparse.combinators-source/cat","seq47743","instaparse.combinators-source/string","s","instaparse.combinators-source/string-ci","G__47768","instaparse.combinators-source/unicode-char","code-point","instaparse.combinators_source.unicode_char.cljs$core$IFn$_invoke$arity$2","lo","hi","instaparse.combinators-source/add-beginning-constraint","r","cljs.core/regexp?","js/RegExp","instaparse.util/regexp-flags","instaparse.combinators-source/regexp","cljs.core/re-pattern","instaparse.combinators-source/nt","instaparse.combinators-source/look","instaparse.combinators-source/neg","instaparse.combinators-source/hide","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","instaparse.combinators-source/hide-tag","instaparse.reduction/red","instaparse.reduction/raw-non-terminal-reduction","instaparse.combinators-source/hidden-tag?","instaparse.combinators-source/unhide-content","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","G__47819","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__47820","G__47821","instaparse.combinators-source/unhide-all-content","grammar","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__47823","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__47825","cljs.core/chunk-buffer","i__47824","vec__47826","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47822","cljs.core/chunk-rest","vec__47829","cljs.core/cons","cljs.core/rest","k","v","instaparse.combinators-source/unhide-tags","reduction-type","temp__5718__auto__","reduction","instaparse.reduction/reduction-types","s__47834","b__47836","i__47835","vec__47837","iter__47833","vec__47841","instaparse.util.throw_illegal_argument_exception.cljs$core$IFn$_invoke$arity$variadic","instaparse.combinators-source/unhide-all","s__47847","b__47849","i__47848","vec__47851","iter__47846","vec__47854","instaparse.combinators-source/auto-whitespace-parser","ws-parser","G__47861","cljs.core/Keyword","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","p1__47860#","G__47862","G__47863","G__47864","G__47865","instaparse.combinators_source.cat.cljs$core$IFn$_invoke$arity$variadic","instaparse.combinators-source/auto-whitespace","start","grammar-ws","start-ws","modified-grammar","s__47871","b__47873","i__47872","vec__47876","iter__47870","vec__47881","nt","final-grammar","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/chunk-first"]]],"~:cache-keys",["~#cmap",[["^1=","instaparse/auto_flatten_seq.cljc"],[1548085352000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^T","^S"]]],["~:macro","^S"],[1559826623000],["^1=","goog/math/math.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T","~$goog.array","~$goog.asserts"]]],["^1=","goog/array/array.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T","^1P"]]],["^1=","goog/debug/error.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T"]]],["^1=","goog/dom/nodetype.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T"]]],["^1=","goog/object/object.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^1=","goog/math/long.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T","^1P","~$goog.reflect"]]],["^1=","instaparse/reduction.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T","^S","~$instaparse.auto-flatten-seq","^R"]]],["^1=","goog/string/internal.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T"]]],["^1=","goog/functions/functions.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T"]]],["^1=","goog/structs/map.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1=","goog/asserts/asserts.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1=","goog/uri/uri.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T","^1O","^1P","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","goog/base.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",[]]],["^1=","goog/structs/structs.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T","^1O","~$goog.object"]]],["^1=","goog/string/string.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T","~$goog.string.internal"]]],["^1=","goog/reflect/reflect.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T"]]],["^1=","goog/string/stringbuffer.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T"]]],["^1=","goog/iter/iter.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T","^1O","^1P","~$goog.functions","~$goog.math"]]],["^1=","cljs/core.cljs"],[1559826623000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["~$goog.math.Long","~$goog.math.Integer","^1X","^22","^1O","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1=","instaparse/util.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T","^S"]]],["^1=","goog/math/integer.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T"]]],["^1=","goog/uri/utils.js"],[1560546089000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T","^1O","^1P","^1X"]]],["^1=","instaparse/combinators_source.cljc"],[1548085352000,"^1J",["^ ","^1K",null,"^1L",["^I",[]],"^1M",["^T","^S","^Q","^R"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","This is the underlying implementation of the various combinators.","^7","instaparse/combinators_source.cljc","^8",1,"^9",5,"^:",1,"^;",34],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",["^J"]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^R","^S","^S","^T","^T"],"^U",["^I",["^V"]],"~:shadow/js-access-global",["^I",["RegExp","Error"]],"^W",["^ ","^X","^Q","^Y","^Q","^Z","^Q","^[","^Q","^10","^R","^11","^R"],"~:defs",["^ ","~$unhide-tags",["^ ","~:protocol-inline",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",141,"^9",7,"^:",141,"^;",18,"~:arglists",["^14",["~$quote",["^14",[["~$reduction-type","~$grammar"]]]]],"^6","Recursively undoes the effect of hide-tag"],"^K","~$instaparse.combinators-source/unhide-tags","^7","instaparse/combinators_source.cljc","^;",18,"~:method-params",["^14",[["^2A","^2B"]]],"~:protocol-impl",null,"~:arglists-meta",["^14",[null,null]],"^9",1,"~:variadic?",false,"^8",141,"~:ret-tag",["^I",[null,"~$clj","~$any"]],"^:",141,"~:max-fixed-arity",2,"~:fn-var",true,"^2?",["^14",["^2@",["^14",[["^2A","^2B"]]]]],"^6","Recursively undoes the effect of hide-tag"],"~$auto-whitespace",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",179,"^9",7,"^:",179,"^;",22,"^2?",["^14",["^2@",["^14",[["^2B","~$start","~$grammar-ws","~$start-ws"]]]]]],"^K","~$instaparse.combinators-source/auto-whitespace","^7","instaparse/combinators_source.cljc","^;",22,"^2D",["^14",[["^2B","^2N","^2O","^2P"]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",179,"^2H",["^I",["^2J","~$clj-nil"]],"^:",179,"^2K",4,"^2L",true,"^2?",["^14",["^2@",["^14",[["^2B","^2N","^2O","^2P"]]]]]],"~$string-ci",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",66,"^9",7,"^:",66,"^;",16,"^2?",["^14",["^2@",["^14",[["~$s"]]]]],"^6","Create a case-insensitive string terminal out of s"],"^K","~$instaparse.combinators-source/string-ci","^7","instaparse/combinators_source.cljc","^;",16,"^2D",["^14",[["~$s"]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",66,"^2H","~$cljs.core/IMap","^:",66,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["~$s"]]]]],"^6","Create a case-insensitive string terminal out of s"],"~$add-beginning-constraint",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",80,"^9",11,"^:",80,"^;",35,"~:private",true,"^2?",["^14",["^2@",["^14",[["~$r"]]]]],"^6","JavaScript regexes have no .lookingAt method, so in cljs we just\n  add a '^' character to the front of the regex."],"^2W",true,"^K","~$instaparse.combinators-source/add-beginning-constraint","^7","instaparse/combinators_source.cljc","^;",35,"^2D",["^14",[["~$r"]]],"^2E",null,"^2F",["^14",[null,null]],"^9",4,"^2G",false,"^8",80,"^2H",["^I",[null,"~$js/RegExp"]],"^:",80,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["~$r"]]]]],"^6","JavaScript regexes have no .lookingAt method, so in cljs we just\n  add a '^' character to the front of the regex."],"~$auto-whitespace-parser",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",162,"^9",7,"^:",162,"^;",29,"^2?",["^14",["^2@",["^14",[["~$parser","~$ws-parser"]]]]]],"^K","~$instaparse.combinators-source/auto-whitespace-parser","^7","instaparse/combinators_source.cljc","^;",29,"^2D",["^14",[["^2[","^30"]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",162,"^:",162,"^2K",2,"^2L",true,"^2?",["^14",["^2@",["^14",[["^2[","^30"]]]]]],"~$opt",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",13,"^9",7,"^:",13,"^;",10,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Optional, i.e., parser?"],"^K","~$instaparse.combinators-source/opt","^7","instaparse/combinators_source.cljc","^;",10,"^2D",["^14",[["^2["]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",13,"^2H","^2U","^:",13,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Optional, i.e., parser?"],"~$neg",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",103,"^9",7,"^:",103,"^;",10,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Negative lookahead, i.e., !parser"],"^K","~$instaparse.combinators-source/neg","^7","instaparse/combinators_source.cljc","^;",10,"^2D",["^14",[["^2["]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",103,"^2H","^2U","^:",103,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Negative lookahead, i.e., !parser"],"^J",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",54,"^9",7,"^:",54,"^;",10,"^2?",["^14",["^2@",["^14",[["~$&","~$parsers"]]]]],"^6","Concatenation, i.e., parser1 parser2 ...","~:top-fn",["^ ","^2G",true,"~:fixed-arity",0,"^2K",0,"^2D",[["^14",["^36"]]],"^2?",["^14",[["~$&","^36"]]],"^2F",["^14",[null]]]],"^K","~$instaparse.combinators-source/cat","^7","instaparse/combinators_source.cljc","^;",10,"^37",["^ ","^2G",true,"^38",0,"^2K",0,"^2D",[["^14",["^36"]]],"^2?",["^14",[["~$&","^36"]]],"^2F",["^14",[null]]],"^2D",[["^14",["^36"]]],"^2E",null,"^38",0,"^2F",["^14",[null]],"^9",1,"^2G",true,"~:methods",[["^ ","^38",0,"^2G",true,"~:tag",["^I",["^2J","^2U","^2R"]]]],"^8",54,"^2H","^2J","^:",54,"^2K",0,"^2L",true,"^2?",["^14",[["~$&","^36"]]],"^6","Concatenation, i.e., parser1 parser2 ..."],"~$ord",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",44,"^9",7,"^:",44,"^;",10,"^2?",["^14",["^2@",["^14",[[],["~$parser1","~$&","^36"]]]]],"^6","Ordered choice, i.e., parser1 / parser2","^37",["^ ","^2G",true,"^38",1,"^2K",1,"^2D",["^14",[[]]],"^2?",["^14",[[],["^3=","~$&","^36"]]],"^2F",["^14",[null,null]]]],"^K","~$instaparse.combinators-source/ord","^7","instaparse/combinators_source.cljc","^;",10,"^37",["^ ","^2G",true,"^38",1,"^2K",1,"^2D",["^14",[[]]],"^2?",["^14",[[],["^3=","~$&","^36"]]],"^2F",["^14",[null,null]]],"^2D",["^14",[[]]],"^2E",null,"^38",1,"^2F",["^14",[null,null]],"^9",1,"^2G",true,"^3:",[["^ ","^38",0,"^2G",false,"^3;","^2U"],["^ ","^38",1,"^2G",true,"^3;",["^I",[null,"^2U"]]]],"^8",44,"^:",44,"^2K",1,"^2L",true,"^2?",["^14",[[],["^3=","~$&","^36"]]],"^6","Ordered choice, i.e., parser1 / parser2"],"~$hide-tag",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",111,"^9",7,"^:",111,"^;",15,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Hide the tag associated with this rule.  \n  Wrap this combinator around the entire right-hand side."],"^K","~$instaparse.combinators-source/hide-tag","^7","instaparse/combinators_source.cljc","^;",15,"^2D",["^14",[["^2["]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",111,"^2H",["^I",["^2I","^2J"]],"^:",111,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Hide the tag associated with this rule.  \n  Wrap this combinator around the entire right-hand side."],"~$alt",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",34,"^9",7,"^:",34,"^;",10,"^2?",["^14",["^2@",["^14",[["~$&","^36"]]]]],"^6","Alternation, i.e., parser1 | parser2 | parser3 | ...","^37",["^ ","^2G",true,"^38",0,"^2K",0,"^2D",[["^14",["^36"]]],"^2?",["^14",[["~$&","^36"]]],"^2F",["^14",[null]]]],"^K","~$instaparse.combinators-source/alt","^7","instaparse/combinators_source.cljc","^;",10,"^37",["^ ","^2G",true,"^38",0,"^2K",0,"^2D",[["^14",["^36"]]],"^2?",["^14",[["~$&","^36"]]],"^2F",["^14",[null]]],"^2D",[["^14",["^36"]]],"^2E",null,"^38",0,"^2F",["^14",[null]],"^9",1,"^2G",true,"^3:",[["^ ","^38",0,"^2G",true,"^3;",["^I",["^2J","^2U","^2R"]]]],"^8",34,"^2H","^2J","^:",34,"^2K",0,"^2L",true,"^2?",["^14",[["~$&","^36"]]],"^6","Alternation, i.e., parser1 | parser2 | parser3 | ..."],"~$ord2",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",41,"^9",8,"^:",41,"^;",12,"^2W",true,"^2?",["^14",["^2@",["^14",[["^3=","~$parser2"]]]]]],"^2W",true,"^K","~$instaparse.combinators-source/ord2","^7","instaparse/combinators_source.cljc","^;",12,"^2D",["^14",[["^3=","^3D"]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",41,"^2H","^2U","^:",41,"^2K",2,"^2L",true,"^2?",["^14",["^2@",["^14",[["^3=","^3D"]]]]]],"~$look",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",99,"^9",7,"^:",99,"^;",11,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Lookahead, i.e., &parser"],"^K","~$instaparse.combinators-source/look","^7","instaparse/combinators_source.cljc","^;",11,"^2D",["^14",[["^2["]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",99,"^2H","^2U","^:",99,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Lookahead, i.e., &parser"],"~$unhide-content",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",123,"^9",7,"^:",123,"^;",21,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Recursively undoes the effect of hide on one parser"],"^K","~$instaparse.combinators-source/unhide-content","^7","instaparse/combinators_source.cljc","^;",21,"^2D",["^14",[["^2["]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",123,"^2H",["^I",[null,"^2I","^2J","^2R"]],"^:",123,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Recursively undoes the effect of hide on one parser"],"~$nt",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",95,"^9",7,"^:",95,"^;",9,"^2?",["^14",["^2@",["^14",[["~$s"]]]]],"^6","Refers to a non-terminal defined by the grammar map"],"^K","~$instaparse.combinators-source/nt","^7","instaparse/combinators_source.cljc","^;",9,"^2D",["^14",[["~$s"]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",95,"^2H","^2U","^:",95,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["~$s"]]]]],"^6","Refers to a non-terminal defined by the grammar map"],"~$unhide-all-content",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",135,"^9",7,"^:",135,"^;",25,"^2?",["^14",["^2@",["^14",[["^2B"]]]]],"^6","Recursively undoes the effect of hide on all parsers in the grammar"],"^K","~$instaparse.combinators-source/unhide-all-content","^7","instaparse/combinators_source.cljc","^;",25,"^2D",["^14",[["^2B"]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",135,"^2H",["^I",[null,"^2I","^2J"]],"^:",135,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["^2B"]]]]],"^6","Recursively undoes the effect of hide on all parsers in the grammar"],"~$rep",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",28,"^9",7,"^:",28,"^;",10,"^2?",["^14",["^2@",["^14",[["~$m","~$n","^2["]]]]],"^6","Between m and n repetitions"],"^K","~$instaparse.combinators-source/rep","^7","instaparse/combinators_source.cljc","^;",10,"^2D",["^14",[["~$m","~$n","^2["]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",28,"^2H","^2U","^:",28,"^2K",3,"^2L",true,"^2?",["^14",["^2@",["^14",[["~$m","~$n","^2["]]]]],"^6","Between m and n repetitions"],"~$unicode-char",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",71,"^9",7,"^:",71,"^;",19,"^2?",["^14",["^2@",["^14",[["~$code-point"],["~$lo","~$hi"]]]]],"^6","Matches a Unicode code point or a range of code points","^37",["^ ","^2G",false,"^38",2,"^2K",2,"^2D",["^14",[["^3Q"],["^3R","^3S"]]],"^2?",["^14",[["^3Q"],["^3R","^3S"]]],"^2F",["^14",[null,null]]]],"^K","~$instaparse.combinators-source/unicode-char","^7","instaparse/combinators_source.cljc","^;",19,"^37",["^ ","^2G",false,"^38",2,"^2K",2,"^2D",["^14",[["^3Q"],["^3R","^3S"]]],"^2?",["^14",[["^3Q"],["^3R","^3S"]]],"^2F",["^14",[null,null]]],"^2D",["^14",[["^3Q"],["^3R","^3S"]]],"^2E",null,"^38",2,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^3:",[["^ ","^38",1,"^2G",false,"^3;","^2J"],["^ ","^38",2,"^2G",false,"^3;","^2U"]],"^8",71,"^:",71,"^2K",2,"^2L",true,"^2?",["^14",[["^3Q"],["^3R","^3S"]]],"^6","Matches a Unicode code point or a range of code points"],"~$star",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",23,"^9",7,"^:",23,"^;",11,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Zero or more, i.e., parser*"],"^K","~$instaparse.combinators-source/star","^7","instaparse/combinators_source.cljc","^;",11,"^2D",["^14",[["^2["]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",23,"^2H","^2U","^:",23,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Zero or more, i.e., parser*"],"~$string",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",61,"^9",7,"^:",61,"^;",13,"^2?",["^14",["^2@",["^14",[["~$s"]]]]],"^6","Create a string terminal out of s"],"^K","~$instaparse.combinators-source/string","^7","instaparse/combinators_source.cljc","^;",13,"^2D",["^14",[["~$s"]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",61,"^2H","^2U","^:",61,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["~$s"]]]]],"^6","Create a string terminal out of s"],"~$hide",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",107,"^9",7,"^:",107,"^;",11,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Hide the result of parser, i.e., <parser>"],"^K","~$instaparse.combinators-source/hide","^7","instaparse/combinators_source.cljc","^;",11,"^2D",["^14",[["^2["]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",107,"^2H",["^I",["^2I","^2J"]],"^:",107,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Hide the result of parser, i.e., <parser>"],"~$unhide-all",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",150,"^9",7,"^:",150,"^;",17,"^2?",["^14",["^2@",["^14",[["^2A","^2B"]]]]],"^6","Recursively undoes the effect of both hide and hide-tag"],"^K","~$instaparse.combinators-source/unhide-all","^7","instaparse/combinators_source.cljc","^;",17,"^2D",["^14",[["^2A","^2B"]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",150,"^2H",["^I",[null,"^2I","^2J"]],"^:",150,"^2K",2,"^2L",true,"^2?",["^14",["^2@",["^14",[["^2A","^2B"]]]]],"^6","Recursively undoes the effect of both hide and hide-tag"],"~$regexp",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",88,"^9",7,"^:",88,"^;",13,"^2?",["^14",["^2@",["^14",[["~$r"]]]]],"^6","Create a regexp terminal out of regular expression r"],"^K","~$instaparse.combinators-source/regexp","^7","instaparse/combinators_source.cljc","^;",13,"^2D",["^14",[["~$r"]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",88,"^2H","^2U","^:",88,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["~$r"]]]]],"^6","Create a regexp terminal out of regular expression r"],"~$Epsilon",["^ ","^K","~$instaparse.combinators-source/Epsilon","^7","instaparse/combinators_source.cljc","^8",11,"^9",1,"^:",11,"^;",13,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",11,"^9",6,"^:",11,"^;",13],"^3;","^2U"],"~$plus",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",18,"^9",7,"^:",18,"^;",11,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","One or more, i.e., parser+"],"^K","~$instaparse.combinators-source/plus","^7","instaparse/combinators_source.cljc","^;",11,"^2D",["^14",[["^2["]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",18,"^2H","^2U","^:",18,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","One or more, i.e., parser+"],"~$hidden-tag?",["^ ","^2>",null,"^5",["^ ","^7","instaparse/combinators_source.cljc","^8",118,"^9",7,"^:",118,"^;",18,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Tests whether parser was created with hide-tag combinator"],"^K","~$instaparse.combinators-source/hidden-tag?","^7","instaparse/combinators_source.cljc","^;",18,"^2D",["^14",[["^2["]]],"^2E",null,"^2F",["^14",[null,null]],"^9",1,"^2G",false,"^8",118,"^2H","~$boolean","^:",118,"^2K",1,"^2L",true,"^2?",["^14",["^2@",["^14",[["^2["]]]]],"^6","Tests whether parser was created with hide-tag combinator"]],"^12",["^ ","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^I",["~:neg","~:parser2","~:cat","~:min","~:ord","~:else","~:alt","~:look","~:nt","~:rep","~:star","~:string","~:lo","~:hide","~:parser","~:regexp","~:parser1","~:keyword","~:max","~:red","~:plus","~:epsilon","^3;","~:parsers","~:string-ci","~:hi","~:char","~:opt"]],"~:order",["^3;","^4P","^4I","^4U","^4O","^4E","^4>","^4M","^4D","^4@","^4Q","^4A","^4K","^4<","^4?","^4=","^4F","^4R","^4G","^4S","^4T","^4J","^4L","^4C","^4B","^4;","^4H","^4N"]],"^19",["^ ","^V",["^I",[]]],"^1:",["^ "],"^1;",["^T","^S","^Q","^R"]],"^N","^L","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1I",[["^4Y","~:static-fns"],true,["^4Y","~:elide-asserts"],false,["^4Y","~:optimize-constants"],null,["^4Y","^1@"],null,["^4Y","~:external-config"],null,["^4Y","~:tooling-config"],null,["^4Y","~:emit-constants"],null,["^4Y","~:load-tests"],null,["^4Y","~:infer-externs"],"~:auto",["^4Y","^1B"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4Y","~:fn-invoke-direct"],null,["^4Y","~:source-map"],"/dev/null"]]]