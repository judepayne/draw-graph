["^ ","~:output",["^ ","~:js","goog.provide('instaparse.print');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ninstaparse.print.paren_for_tags = (function instaparse$print$paren_for_tags(tag_set,hidden_QMARK_,parser){\nif(cljs.core.truth_((function (){var and__4120__auto__ = cljs.core.not(hidden_QMARK_);\nif(and__4120__auto__){\nvar G__47400 = (function (){var G__47401 = new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223);\nreturn (parser.cljs$core$IFn$_invoke$arity$1 ? parser.cljs$core$IFn$_invoke$arity$1(G__47401) : parser.call(null,G__47401));\n})();\nreturn (tag_set.cljs$core$IFn$_invoke$arity$1 ? tag_set.cljs$core$IFn$_invoke$arity$1(G__47400) : tag_set.call(null,G__47400));\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn [\"(\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2 ? instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2(parser,false) : instaparse.print.combinators__GT_str.call(null,parser,false))),\")\"].join('');\n} else {\nreturn (instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2 ? instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2(parser,false) : instaparse.print.combinators__GT_str.call(null,parser,false));\n}\n});\ninstaparse.print.paren_for_compound = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(instaparse.print.paren_for_tags,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"cat\",\"cat\",-1457810207),null,new cljs.core.Keyword(null,\"ord\",\"ord\",1142548323),null,new cljs.core.Keyword(null,\"alt\",\"alt\",-3214426),null], null), null));\n/**\n * Replaces whitespace characters with escape sequences for better printing\n */\ninstaparse.print.regexp_replace = (function instaparse$print$regexp_replace(s){\nvar G__47402 = s;\nswitch (G__47402) {\ncase \"\\n\":\nreturn \"\\\\n\";\n\nbreak;\ncase \"\\b\":\nreturn \"\\\\b\";\n\nbreak;\ncase \"\\f\":\nreturn \"\\\\f\";\n\nbreak;\ncase \"\\r\":\nreturn \"\\\\r\";\n\nbreak;\ncase \"\\t\":\nreturn \"\\\\t\";\n\nbreak;\ndefault:\nreturn s;\n\n}\n});\ninstaparse.print.regexp__GT_str = (function instaparse$print$regexp__GT_str(r){\nreturn clojure.string.replace([\"#\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(r.source,(1))),\"\\\"\"].join(''),/[\\s]/,instaparse.print.regexp_replace);\n});\ninstaparse.print.number__GT_hex_padded = (function instaparse$print$number__GT_hex_padded(n){\nif((n <= (4095))){\nreturn [\"0000\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(n.toString((16)))].join('').substr((-4));\n} else {\nreturn n.toString((16));\n}\n});\n\ninstaparse.print.char_range__GT_str = (function instaparse$print$char_range__GT_str(p__47403){\nvar map__47404 = p__47403;\nvar map__47404__$1 = (((((!((map__47404 == null))))?(((((map__47404.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47404.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47404):map__47404);\nvar lo = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47404__$1,new cljs.core.Keyword(null,\"lo\",\"lo\",-931799889));\nvar hi = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47404__$1,new cljs.core.Keyword(null,\"hi\",\"hi\",-1821422114));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(lo,hi)){\nreturn [\"%x\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.number__GT_hex_padded(lo))].join('');\n} else {\nreturn [\"%x\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.number__GT_hex_padded(lo)),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.number__GT_hex_padded(hi))].join('');\n}\n});\n/**\n * Stringifies a parser built from combinators\n */\ninstaparse.print.combinators__GT_str = (function instaparse$print$combinators__GT_str(var_args){\nvar G__47411 = arguments.length;\nswitch (G__47411) {\ncase 1:\nreturn instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ninstaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$1 = (function (p){\nreturn instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2(p,false);\n});\n\ninstaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2 = (function (p__47412,hidden_QMARK_){\nvar map__47413 = p__47412;\nvar map__47413__$1 = (((((!((map__47413 == null))))?(((((map__47413.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47413.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47413):map__47413);\nvar p = map__47413__$1;\nvar parser = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47413__$1,new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310));\nvar parser1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47413__$1,new cljs.core.Keyword(null,\"parser1\",\"parser1\",-439601422));\nvar parser2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47413__$1,new cljs.core.Keyword(null,\"parser2\",\"parser2\",1013754688));\nvar parsers = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47413__$1,new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827));\nvar tag = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47413__$1,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223));\nif(cljs.core.truth_((function (){var and__4120__auto__ = cljs.core.not(hidden_QMARK_);\nif(and__4120__auto__){\nreturn new cljs.core.Keyword(null,\"hide\",\"hide\",-596913169).cljs$core$IFn$_invoke$arity$1(p);\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn [\"<\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2(p,true)),\">\"].join('');\n} else {\nvar G__47420 = tag;\nvar G__47420__$1 = (((G__47420 instanceof cljs.core.Keyword))?G__47420.fqn:null);\nswitch (G__47420__$1) {\ncase \"epsilon\":\nreturn \"\\u03B5\";\n\nbreak;\ncase \"opt\":\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1((instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2 ? instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2(hidden_QMARK_,parser) : instaparse.print.paren_for_compound.call(null,hidden_QMARK_,parser))),\"?\"].join('');\n\nbreak;\ncase \"plus\":\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1((instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2 ? instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2(hidden_QMARK_,parser) : instaparse.print.paren_for_compound.call(null,hidden_QMARK_,parser))),\"+\"].join('');\n\nbreak;\ncase \"star\":\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1((instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2 ? instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2(hidden_QMARK_,parser) : instaparse.print.paren_for_compound.call(null,hidden_QMARK_,parser))),\"*\"].join('');\n\nbreak;\ncase \"rep\":\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"min\",\"min\",444991522).cljs$core$IFn$_invoke$arity$1(p),new cljs.core.Keyword(null,\"max\",\"max\",61366548).cljs$core$IFn$_invoke$arity$1(p))){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1((instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2 ? instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2(hidden_QMARK_,parser) : instaparse.print.paren_for_compound.call(null,hidden_QMARK_,parser))),\"{\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"min\",\"min\",444991522).cljs$core$IFn$_invoke$arity$1(p)),\",\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"max\",\"max\",61366548).cljs$core$IFn$_invoke$arity$1(p)),\"}\"].join('');\n} else {\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1((instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2 ? instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2(hidden_QMARK_,parser) : instaparse.print.paren_for_compound.call(null,hidden_QMARK_,parser))),\"{\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"min\",\"min\",444991522).cljs$core$IFn$_invoke$arity$1(p)),\"}\"].join('');\n}\n\nbreak;\ncase \"alt\":\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" | \",cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$3(instaparse.print.paren_for_tags,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ord\",\"ord\",1142548323),null], null), null),hidden_QMARK_),parsers));\n\nbreak;\ncase \"ord\":\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_tags(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"alt\",\"alt\",-3214426),null], null), null),hidden_QMARK_,parser1)),\" / \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_tags(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"alt\",\"alt\",-3214426),null], null), null),hidden_QMARK_,parser2))].join('');\n\nbreak;\ncase \"cat\":\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$3(instaparse.print.paren_for_tags,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"ord\",\"ord\",1142548323),null,new cljs.core.Keyword(null,\"alt\",\"alt\",-3214426),null], null), null),hidden_QMARK_),parsers));\n\nbreak;\ncase \"string\":\nvar sb__4661__auto__ = (new goog.string.StringBuffer());\nvar _STAR_print_newline_STAR__orig_val__47430_47483 = cljs.core._STAR_print_newline_STAR_;\nvar _STAR_print_fn_STAR__orig_val__47431_47484 = cljs.core._STAR_print_fn_STAR_;\nvar _STAR_print_newline_STAR__temp_val__47432_47485 = true;\nvar _STAR_print_fn_STAR__temp_val__47433_47486 = ((function (_STAR_print_newline_STAR__orig_val__47430_47483,_STAR_print_fn_STAR__orig_val__47431_47484,_STAR_print_newline_STAR__temp_val__47432_47485,sb__4661__auto__,G__47420,G__47420__$1,map__47413,map__47413__$1,p,parser,parser1,parser2,parsers,tag){\nreturn (function (x__4662__auto__){\nreturn sb__4661__auto__.append(x__4662__auto__);\n});})(_STAR_print_newline_STAR__orig_val__47430_47483,_STAR_print_fn_STAR__orig_val__47431_47484,_STAR_print_newline_STAR__temp_val__47432_47485,sb__4661__auto__,G__47420,G__47420__$1,map__47413,map__47413__$1,p,parser,parser1,parser2,parsers,tag))\n;\ncljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__temp_val__47432_47485;\n\ncljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__47433_47486;\n\ntry{cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"string\",\"string\",-1989541586).cljs$core$IFn$_invoke$arity$1(p)], 0));\n}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__47431_47484;\n\ncljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__orig_val__47430_47483;\n}\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4661__auto__);\n\nbreak;\ncase \"string-ci\":\nvar sb__4661__auto__ = (new goog.string.StringBuffer());\nvar _STAR_print_newline_STAR__orig_val__47435_47487 = cljs.core._STAR_print_newline_STAR_;\nvar _STAR_print_fn_STAR__orig_val__47436_47488 = cljs.core._STAR_print_fn_STAR_;\nvar _STAR_print_newline_STAR__temp_val__47437_47489 = true;\nvar _STAR_print_fn_STAR__temp_val__47438_47490 = ((function (_STAR_print_newline_STAR__orig_val__47435_47487,_STAR_print_fn_STAR__orig_val__47436_47488,_STAR_print_newline_STAR__temp_val__47437_47489,sb__4661__auto__,G__47420,G__47420__$1,map__47413,map__47413__$1,p,parser,parser1,parser2,parsers,tag){\nreturn (function (x__4662__auto__){\nreturn sb__4661__auto__.append(x__4662__auto__);\n});})(_STAR_print_newline_STAR__orig_val__47435_47487,_STAR_print_fn_STAR__orig_val__47436_47488,_STAR_print_newline_STAR__temp_val__47437_47489,sb__4661__auto__,G__47420,G__47420__$1,map__47413,map__47413__$1,p,parser,parser1,parser2,parsers,tag))\n;\ncljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__temp_val__47437_47489;\n\ncljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__47438_47490;\n\ntry{cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"string\",\"string\",-1989541586).cljs$core$IFn$_invoke$arity$1(p)], 0));\n}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__47436_47488;\n\ncljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__orig_val__47435_47487;\n}\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4661__auto__);\n\nbreak;\ncase \"char\":\nreturn instaparse.print.char_range__GT_str(p);\n\nbreak;\ncase \"regexp\":\nreturn instaparse.print.regexp__GT_str(new cljs.core.Keyword(null,\"regexp\",\"regexp\",-541372782).cljs$core$IFn$_invoke$arity$1(p));\n\nbreak;\ncase \"nt\":\nreturn cljs.core.subs.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747).cljs$core$IFn$_invoke$arity$1(p)),(1));\n\nbreak;\ncase \"look\":\nreturn [\"&\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2 ? instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2(hidden_QMARK_,parser) : instaparse.print.paren_for_compound.call(null,hidden_QMARK_,parser)))].join('');\n\nbreak;\ncase \"neg\":\nreturn [\"!\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2 ? instaparse.print.paren_for_compound.cljs$core$IFn$_invoke$arity$2(hidden_QMARK_,parser) : instaparse.print.paren_for_compound.call(null,hidden_QMARK_,parser)))].join('');\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__47420__$1)].join('')));\n\n}\n}\n});\n\ninstaparse.print.combinators__GT_str.cljs$lang$maxFixedArity = 2;\n\n/**\n * Takes a non-terminal symbol and a parser built from combinators,\n * and returns a string for the rule.\n */\ninstaparse.print.rule__GT_str = (function instaparse$print$rule__GT_str(non_terminal,parser){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"reduction-type\",\"reduction-type\",-488293450).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1(parser)),new cljs.core.Keyword(null,\"raw\",\"raw\",1604651272))){\nreturn [\"<\",cljs.core.name(non_terminal),\">\",\" = \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$1(parser))].join('');\n} else {\nreturn [cljs.core.name(non_terminal),\" = \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$1(parser))].join('');\n}\n});\n/**\n * Takes a Parser object, i.e., something with a grammar map and a start \n * production keyword, and stringifies it.\n */\ninstaparse.print.Parser__GT_str = (function instaparse$print$Parser__GT_str(p__47449){\nvar map__47450 = p__47449;\nvar map__47450__$1 = (((((!((map__47450 == null))))?(((((map__47450.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47450.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47450):map__47450);\nvar grammar = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47450__$1,new cljs.core.Keyword(null,\"grammar\",\"grammar\",1881328267));\nvar start = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47450__$1,new cljs.core.Keyword(null,\"start-production\",\"start-production\",687546537));\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",cljs.core.cons(instaparse.print.rule__GT_str(start,(grammar.cljs$core$IFn$_invoke$arity$1 ? grammar.cljs$core$IFn$_invoke$arity$1(start) : grammar.call(null,start))),(function (){var iter__4523__auto__ = ((function (map__47450,map__47450__$1,grammar,start){\nreturn (function instaparse$print$Parser__GT_str_$_iter__47459(s__47460){\nreturn (new cljs.core.LazySeq(null,((function (map__47450,map__47450__$1,grammar,start){\nreturn (function (){\nvar s__47460__$1 = s__47460;\nwhile(true){\nvar temp__5720__auto__ = cljs.core.seq(s__47460__$1);\nif(temp__5720__auto__){\nvar s__47460__$2 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__47460__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__47460__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__47462 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__47461 = (0);\nwhile(true){\nif((i__47461 < size__4522__auto__)){\nvar vec__47463 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__47461);\nvar non_terminal = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47463,(0),null);\nvar parser = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47463,(1),null);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(non_terminal,start)){\ncljs.core.chunk_append(b__47462,instaparse.print.rule__GT_str(non_terminal,parser));\n\nvar G__47513 = (i__47461 + (1));\ni__47461 = G__47513;\ncontinue;\n} else {\nvar G__47514 = (i__47461 + (1));\ni__47461 = G__47514;\ncontinue;\n}\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__47462),instaparse$print$Parser__GT_str_$_iter__47459(cljs.core.chunk_rest(s__47460__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__47462),null);\n}\n} else {\nvar vec__47470 = cljs.core.first(s__47460__$2);\nvar non_terminal = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47470,(0),null);\nvar parser = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47470,(1),null);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(non_terminal,start)){\nreturn cljs.core.cons(instaparse.print.rule__GT_str(non_terminal,parser),instaparse$print$Parser__GT_str_$_iter__47459(cljs.core.rest(s__47460__$2)));\n} else {\nvar G__47515 = cljs.core.rest(s__47460__$2);\ns__47460__$1 = G__47515;\ncontinue;\n}\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(map__47450,map__47450__$1,grammar,start))\n,null,null));\n});})(map__47450,map__47450__$1,grammar,start))\n;\nreturn iter__4523__auto__(grammar);\n})()));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Facilities for taking parsers and grammars, and converting them to strings.\n   Used for pretty-printing.","~:file","instaparse/print.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$instaparse.print","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^P","~$str","^P","~$cljs.core","^R","~$goog","^S"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^K","Facilities for taking parsers and grammars, and converting them to strings.\n   Used for pretty-printing.",["^Y",["^U",["^P","~:as","^Q"]]]]],"~:flags",["^ ","^U",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^P"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","instaparse/print.cljc"],"~:compiled-at",1560836398059,"~:resource-name","instaparse/print.cljc","~:warnings",[],"~:source","(ns instaparse.print\r\n  \"Facilities for taking parsers and grammars, and converting them to strings.\r\n   Used for pretty-printing.\"\r\n  (:require [clojure.string :as str]))\r\n\r\n(declare combinators->str) ; mutual recursion\r\n\r\n(defn paren-for-tags [tag-set hidden? parser]\r\n  (if (and (not hidden?) (tag-set (parser :tag)))\r\n    (str \"(\" (combinators->str parser false) \")\")\r\n    (combinators->str parser false)))\r\n\r\n(def paren-for-compound \r\n  (partial paren-for-tags #{:alt :ord :cat}))\r\n\r\n(defn regexp-replace\r\n  \"Replaces whitespace characters with escape sequences for better printing\" \r\n  [s]\r\n  (case s\r\n    \"\\n\" \"\\\\n\"\r\n    \"\\b\" \"\\\\b\"\r\n    \"\\f\" \"\\\\f\"\r\n    \"\\r\" \"\\\\r\"\r\n    \"\\t\" \"\\\\t\"\r\n    s)) \r\n\r\n(defn regexp->str [r]\r\n  (str/replace \r\n    (str \"#\\\"\"\r\n         #?(:clj (str r)\r\n            :cljs (subs (.-source r) 1))\r\n         \"\\\"\")\r\n    #\"[\\s]\" regexp-replace))\r\n\r\n#?(:clj\r\n   (defn char-range->str [{:keys [lo hi]}]\r\n     (if (= lo hi)\r\n       (format \"%%x%04x\" lo)\r\n       (format \"%%x%04x-%04x\" lo hi)))\r\n\r\n   :cljs\r\n   (do\r\n     (defn number->hex-padded [n]\r\n       (if (<= n 0xFFF)\r\n         (.substr (str \"0000\" (.toString n 16)) -4)\r\n         (.toString n 16)))\r\n\r\n     (defn char-range->str [{:keys [lo hi]}]\r\n       (if (= lo hi)\r\n         (str \"%x\" (number->hex-padded lo))\r\n         (str \"%x\" (number->hex-padded lo) \"-\" (number->hex-padded hi))))))\r\n\r\n(defn combinators->str\r\n  \"Stringifies a parser built from combinators\"\r\n  ([p] (combinators->str p false))\r\n  ([{:keys [parser parser1 parser2 parsers tag] :as p} hidden?]\r\n    (if (and (not hidden?) (:hide p))\r\n      (str \\< (combinators->str p true) \\>)\r\n      (case tag\r\n        :epsilon \"\\u03b5\"\r\n        :opt (str (paren-for-compound hidden? parser) \"?\")\r\n        :plus (str (paren-for-compound hidden? parser) \"+\")\r\n        :star (str (paren-for-compound hidden? parser) \"*\")\r\n        :rep (if (not= (:min p) (:max p))\r\n               (str (paren-for-compound hidden? parser) \\{ \r\n                    (:min p) \\, (:max p) \\})\r\n               (str (paren-for-compound hidden? parser) \\{ \r\n                    (:min p)\\}))\r\n        :alt (str/join \" | \" (map (partial paren-for-tags #{:ord} hidden?) parsers))\r\n        :ord (str (paren-for-tags #{:alt} hidden? parser1)\r\n                  \" / \"\r\n                  (paren-for-tags #{:alt} hidden? parser2))\r\n        :cat (str/join \" \" (map (partial paren-for-tags #{:alt :ord} hidden?) parsers))\r\n        :string (with-out-str (pr (:string p)))\r\n        :string-ci (with-out-str (pr (:string p)))\r\n        :char (char-range->str p)\r\n        :regexp (regexp->str (:regexp p))\r\n        :nt (subs (str (:keyword p)) 1)\r\n        :look (str \"&\" (paren-for-compound hidden? parser))\r\n        :neg (str \"!\" (paren-for-compound hidden? parser))))))\r\n  \r\n(defn rule->str\r\n  \"Takes a non-terminal symbol and a parser built from combinators,\r\n   and returns a string for the rule.\"\r\n  [non-terminal parser]\r\n  (if (= (-> parser :red :reduction-type) :raw)\r\n    (str \\< (name non-terminal) \\> \r\n         \" = \" \r\n         (combinators->str parser))\r\n    (str (name non-terminal)\r\n         \" = \" \r\n         (combinators->str parser))))\r\n\r\n(defn Parser->str\r\n  \"Takes a Parser object, i.e., something with a grammar map and a start \r\n   production keyword, and stringifies it.\" \r\n  [{grammar :grammar start :start-production}]\r\n  (str/join \\newline\r\n            (cons\r\n              ; Put starting production first\r\n              (rule->str start (grammar start))\r\n              ; Then the others\r\n              (for [[non-terminal parser] grammar\r\n                    :when (not= non-terminal start)]\r\n                (rule->str non-terminal parser)))))\r\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["instaparse.print/paren-for-tags","tag-set","hidden?","parser","and__4120__auto__","cljs.core/not","G__47400","G__47401","instaparse.print/combinators->str","instaparse.print/paren-for-compound","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","instaparse.print/regexp-replace","s","G__47402","instaparse.print/regexp->str","r","clojure.string/replace","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","instaparse.print/number->hex-padded","n","p__47403","map__47404","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","instaparse.print/char-range->str","lo","hi","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","var_args","G__47411","js/Error","p__47412","map__47413","p","instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$2","parser1","parser2","parsers","tag","G__47420","cljs.core/Keyword","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","sb__4661__auto__","goog.string/StringBuffer","*print-newline*-orig-val__47430","cljs.core/*print-newline*","*print-fn*-orig-val__47431","cljs.core/*print-fn*","*print-newline*-temp-val__47432","*print-fn*-temp-val__47433","x__4662__auto__","cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic","*print-newline*-orig-val__47435","*print-fn*-orig-val__47436","*print-newline*-temp-val__47437","*print-fn*-temp-val__47438","instaparse.print/rule->str","non-terminal","cljs.core/name","instaparse.print.combinators__GT_str.cljs$core$IFn$_invoke$arity$1","p__47449","map__47450","instaparse.print/Parser->str","grammar","start","cljs.core/cons","iter__4523__auto__","s__47460","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__47462","cljs.core/chunk-buffer","i__47461","vec__47463","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47459","cljs.core/chunk-rest","vec__47470","cljs.core/first","cljs.core/rest","cljs.core/chunk-first"]]],"~:cache-keys",["~#cmap",[["~:macro","^R"],[1559826623000],["^14","goog/math/math.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^S","~$goog.array","~$goog.asserts"]]],["^14","goog/array/array.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S","^1G"]]],["^14","goog/debug/error.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S"]]],["^14","goog/dom/nodetype.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S"]]],["^14","goog/object/object.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^14","goog/math/long.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S","^1G","~$goog.reflect"]]],["^14","goog/string/internal.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S"]]],["^14","goog/functions/functions.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S"]]],["^14","goog/structs/map.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^14","goog/asserts/asserts.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^14","goog/uri/uri.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S","^1F","^1G","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^14","instaparse/print.cljc"],[1548085352000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S","^R","^P"]]],["^14","goog/base.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",[]]],["^14","goog/structs/structs.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S","^1F","~$goog.object"]]],["^14","clojure/string.cljs"],[1559826623000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S","^R","^1N","~$goog.string.StringBuffer"]]],["^14","goog/string/string.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S","~$goog.string.internal"]]],["^14","goog/reflect/reflect.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S"]]],["^14","goog/string/stringbuffer.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S"]]],["^14","goog/iter/iter.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S","^1F","^1G","~$goog.functions","~$goog.math"]]],["^14","cljs/core.cljs"],[1559826623000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["~$goog.math.Long","~$goog.math.Integer","^1N","^1T","^1F","~$goog.Uri","^1U"]]],["^14","goog/math/integer.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S"]]],["^14","goog/uri/utils.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^I",[]],"^1E",["^S","^1F","^1G","^1N"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Facilities for taking parsers and grammars, and converting them to strings.\n   Used for pretty-printing.","^7","instaparse/print.cljc","^8",1,"^9",5,"^:",1,"^;",21],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^N",null,"^O",["^ ","^P","^P","^Q","^P","^R","^R","^S","^S"],"^T",["^I",["^U"]],"~:shadow/js-access-global",["^I",["Error"]],"^V",null,"~:defs",["^ ","~$regexp-replace",["^ ","~:protocol-inline",null,"^5",["^ ","^7","instaparse/print.cljc","^8",16,"^9",7,"^:",16,"^;",21,"~:arglists",["^Y",["~$quote",["^Y",[["~$s"]]]]],"^6","Replaces whitespace characters with escape sequences for better printing"],"^J","~$instaparse.print/regexp-replace","^7","instaparse/print.cljc","^;",21,"~:method-params",["^Y",[["~$s"]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^9",1,"~:variadic?",false,"^8",16,"^:",16,"~:max-fixed-arity",1,"~:fn-var",true,"^25",["^Y",["^26",["^Y",[["~$s"]]]]],"^6","Replaces whitespace characters with escape sequences for better printing"],"~$combinators->str",["^ ","^24",null,"^5",["^ ","^7","instaparse/print.cljc","^8",53,"^9",7,"^:",53,"^;",23,"^25",["^Y",["^26",["^Y",[["~$p"],[["^ ","~:keys",["~$parser","~$parser1","~$parser2","~$parsers","~$tag"],"^[","~$p"],"~$hidden?"]]]]],"^6","Stringifies a parser built from combinators","~:top-fn",["^ ","^2;",false,"~:fixed-arity",2,"^2<",2,"^28",["^Y",[["~$p"],[["^ ","^2?",["^2@","^2A","^2B","^2C","^2D"],"^[","~$p"],"^2E"]]],"^25",["^Y",[["~$p"],[["^ ","^2?",["^2@","^2A","^2B","^2C","^2D"],"^[","~$p"],"^2E"]]],"^2:",["^Y",[null,null]]]],"^J","~$instaparse.print/combinators->str","^7","instaparse/print.cljc","^;",23,"^2F",["^ ","^2;",false,"^2G",2,"^2<",2,"^28",["^Y",[["~$p"],[["^ ","^2?",["^2@","^2A","^2B","^2C","^2D"],"^[","~$p"],"^2E"]]],"^25",["^Y",[["~$p"],[["^ ","^2?",["^2@","^2A","^2B","^2C","^2D"],"^[","~$p"],"^2E"]]],"^2:",["^Y",[null,null]]],"^28",["^Y",[["~$p"],[["^ ","^2?",["^2@","^2A","^2B","^2C","^2D"],"^[","~$p"],"^2E"]]],"^29",null,"^2G",2,"^2:",["^Y",[null,null]],"^9",1,"^2;",false,"~:methods",[["^ ","^2G",1,"^2;",false,"~:tag","~$any"],["^ ","^2G",2,"^2;",false,"^2J",["^I",[null,"~$string"]]]],"^8",53,"^:",53,"^2<",2,"^2=",true,"^25",["^Y",[["~$p"],[["^ ","^2?",["^2@","^2A","^2B","^2C","^2D"],"^[","~$p"],"^2E"]]],"^6","Stringifies a parser built from combinators"],"~$char-range->str",["^ ","^24",null,"^5",["^ ","^7","instaparse/print.cljc","^8",48,"^9",12,"^:",48,"^;",27,"^25",["^Y",["^26",["^Y",[[["^ ","^2?",["~$lo","~$hi"]]]]]]]],"^J","~$instaparse.print/char-range->str","^7","instaparse/print.cljc","^;",27,"^28",["^Y",[["~$p__47403"]]],"^29",null,"^2:",["^Y",[null,null]],"^9",6,"^2;",false,"^8",48,"~:ret-tag","^2L","^:",48,"^2<",1,"^2=",true,"^25",["^Y",["^26",["^Y",[[["^ ","^2?",["^2N","^2O"]]]]]]]],"~$Parser->str",["^ ","^24",null,"^5",["^ ","^7","instaparse/print.cljc","^8",94,"^9",7,"^:",94,"^;",18,"^25",["^Y",["^26",["^Y",[[["^ ","~$grammar","~:grammar","~$start","~:start-production"]]]]]],"^6","Takes a Parser object, i.e., something with a grammar map and a start \n   production keyword, and stringifies it."],"^J","~$instaparse.print/Parser->str","^7","instaparse/print.cljc","^;",18,"^28",["^Y",[["~$p__47449"]]],"^29",null,"^2:",["^Y",[null,null]],"^9",1,"^2;",false,"^8",94,"^2R","~$js","^:",94,"^2<",1,"^2=",true,"^25",["^Y",["^26",["^Y",[[["^ ","^2T","^2U","^2V","^2W"]]]]]],"^6","Takes a Parser object, i.e., something with a grammar map and a start \n   production keyword, and stringifies it."],"~$paren-for-tags",["^ ","^24",null,"^5",["^ ","^7","instaparse/print.cljc","^8",8,"^9",7,"^:",8,"^;",21,"^25",["^Y",["^26",["^Y",[["~$tag-set","^2E","^2@"]]]]]],"^J","~$instaparse.print/paren-for-tags","^7","instaparse/print.cljc","^;",21,"^28",["^Y",[["^30","^2E","^2@"]]],"^29",null,"^2:",["^Y",[null,null]],"^9",1,"^2;",false,"^8",8,"^2R",["^I",["^2K","^2L"]],"^:",8,"^2<",3,"^2=",true,"^25",["^Y",["^26",["^Y",[["^30","^2E","^2@"]]]]]],"~$regexp->str",["^ ","^24",null,"^5",["^ ","^7","instaparse/print.cljc","^8",27,"^9",7,"^:",27,"^;",18,"^25",["^Y",["^26",["^Y",[["~$r"]]]]]],"^J","~$instaparse.print/regexp->str","^7","instaparse/print.cljc","^;",18,"^28",["^Y",[["~$r"]]],"^29",null,"^2:",["^Y",[null,null]],"^9",1,"^2;",false,"^8",27,"^2R","^2K","^:",27,"^2<",1,"^2=",true,"^25",["^Y",["^26",["^Y",[["~$r"]]]]]],"~$rule->str",["^ ","^24",null,"^5",["^ ","^7","instaparse/print.cljc","^8",82,"^9",7,"^:",82,"^;",16,"^25",["^Y",["^26",["^Y",[["~$non-terminal","^2@"]]]]],"^6","Takes a non-terminal symbol and a parser built from combinators,\n   and returns a string for the rule."],"^J","~$instaparse.print/rule->str","^7","instaparse/print.cljc","^;",16,"^28",["^Y",[["^35","^2@"]]],"^29",null,"^2:",["^Y",[null,null]],"^9",1,"^2;",false,"^8",82,"^2R","^2L","^:",82,"^2<",2,"^2=",true,"^25",["^Y",["^26",["^Y",[["^35","^2@"]]]]],"^6","Takes a non-terminal symbol and a parser built from combinators,\n   and returns a string for the rule."],"~$number->hex-padded",["^ ","^24",null,"^5",["^ ","^7","instaparse/print.cljc","^8",43,"^9",12,"^:",43,"^;",30,"^25",["^Y",["^26",["^Y",[["~$n"]]]]]],"^J","~$instaparse.print/number->hex-padded","^7","instaparse/print.cljc","^;",30,"^28",["^Y",[["~$n"]]],"^29",null,"^2:",["^Y",[null,null]],"^9",6,"^2;",false,"^8",43,"^2R","^2K","^:",43,"^2<",1,"^2=",true,"^25",["^Y",["^26",["^Y",[["~$n"]]]]]],"~$paren-for-compound",["^ ","^J","~$instaparse.print/paren-for-compound","^7","instaparse/print.cljc","^8",13,"^9",1,"^:",13,"^;",24,"^5",["^ ","^7","instaparse/print.cljc","^8",13,"^9",6,"^:",13,"^;",24],"^2J","~$function"]],"^W",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^I",["~:parser2","~:cat","~:min","~:ord","~:alt","~:raw","^2W","^2U","~:string","~:lo","~:hide","~:parser","~:regexp","~:parser1","~:keyword","~:max","~:red","~:reduction-type","^2J","~:parsers","~:hi"]],"~:order",["^2J","^3>","^3@","^3A","^3D","^3N","^3F","^3H","^3=","^3M","^3E","^3?","^3J","^3C","^3G","^3I","^3L","^3K","^3B","^2U","^2W"]],"^10",["^ ","^U",["^I",[]]],"^11",["^ "],"^12",["^S","^R","^P"]],"^M","^K","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1@",[["^3R","~:static-fns"],true,["^3R","~:elide-asserts"],false,["^3R","~:optimize-constants"],null,["^3R","^17"],null,["^3R","~:external-config"],null,["^3R","~:tooling-config"],null,["^3R","~:emit-constants"],null,["^3R","~:load-tests"],null,["^3R","~:infer-externs"],"~:auto",["^3R","^19"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3R","~:fn-invoke-direct"],null,["^3R","~:source-map"],"/dev/null"]]]