["^ ","~:output",["^ ","~:js","goog.provide('instaparse.viz');\ngoog.require('cljs.core');\n/**\n * Takes a subtree of the parse tree and returns a [start-index end-index] pair\n * indicating the span of text parsed by this subtree.\n * start-index is inclusive and end-index is exclusive, as is customary\n * with substrings.\n * Returns nil if no span metadata is attached.\n */\ninstaparse.viz.span = (function instaparse$viz$span(tree){\nvar m = cljs.core.meta(tree);\nvar s = new cljs.core.Keyword(\"instaparse.gll\",\"start-index\",\"instaparse.gll/start-index\",404653620).cljs$core$IFn$_invoke$arity$1(m);\nvar e = new cljs.core.Keyword(\"instaparse.gll\",\"end-index\",\"instaparse.gll/end-index\",-1851404441).cljs$core$IFn$_invoke$arity$1(m);\nif(cljs.core.truth_((function (){var and__4120__auto__ = s;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn e;\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s,e], null);\n} else {\nreturn null;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","instaparse/viz.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$instaparse.viz","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^O","~$goog","^P"],"~:seen",["^H",[]],"~:uses",null,"~:require-macros",["^ ","^O","^O"],"~:form",["~#list",["~$ns","^J"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^P","^O"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","instaparse/viz.cljs"],"~:compiled-at",1560836399052,"~:resource-name","instaparse/viz.cljs","~:warnings",[],"~:source","(ns instaparse.viz)   \r\n\r\n(defn span\r\n  \"Takes a subtree of the parse tree and returns a [start-index end-index] pair\r\n   indicating the span of text parsed by this subtree.\r\n   start-index is inclusive and end-index is exclusive, as is customary\r\n   with substrings.\r\n   Returns nil if no span metadata is attached.\"\r\n  [tree]\r\n  (let [m (meta tree)\r\n        s (:instaparse.gll/start-index m)\r\n        e (:instaparse.gll/end-index m)]\r\n    (when (and s e)\r\n      [s e])))\r\n\r\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;AAEA;;;;;;;AAAA,AAAMA,AAMHC;AANH,AAOE,AAAMC,AAAE,AAACC,AAAKF;AACRG,AAAE,AAAA,AAA6BF;AAC/BG,AAAE,AAAA,AAA2BH;AAFnC,AAGE,AAAM,AAAAI,AAAKF;AAAL,AAAA,AAAAE;AAAOD;;AAAPC;;;AAAN,AAAA,AACGF,AAAEC;;AADL","names",["instaparse.viz/span","tree","m","cljs.core/meta","s","e","and__4120__auto__"]]],"~:cache-keys",["~#cmap",[["~:macro","^O"],[1559826623000],["^[","goog/math/math.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^P","~$goog.array","~$goog.asserts"]]],["^[","goog/array/array.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^1B"]]],["^[","goog/debug/error.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","goog/dom/nodetype.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","instaparse/viz.cljs"],[1548085352000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^O"]]],["^[","goog/object/object.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^[","goog/math/long.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^1B","~$goog.reflect"]]],["^[","goog/string/internal.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","goog/functions/functions.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","goog/structs/map.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^[","goog/asserts/asserts.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^[","goog/uri/uri.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^1A","^1B","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^[","goog/base.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",[]]],["^[","goog/structs/structs.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^1A","~$goog.object"]]],["^[","goog/string/string.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","~$goog.string.internal"]]],["^[","goog/reflect/reflect.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","goog/string/stringbuffer.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","goog/iter/iter.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^1A","^1B","~$goog.functions","~$goog.math"]]],["^[","cljs/core.cljs"],[1559826623000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["~$goog.math.Long","~$goog.math.Integer","^1I","^1O","^1A","~$goog.Uri","~$goog.string.StringBuffer"]]],["^[","goog/math/integer.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","goog/uri/utils.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^1A","^1B","^1I"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","instaparse/viz.cljs","^7",1,"^8",5,"^9",1,"^:",19],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^P"],"^Q",["^H",[]],"^R",null,"~:defs",["^ ","~$span",["^ ","~:protocol-inline",null,"^5",["^ ","^6","instaparse/viz.cljs","^7",3,"^8",7,"^9",3,"^:",11,"~:arglists",["^U",["~$quote",["^U",[["~$tree"]]]]],"~:doc","Takes a subtree of the parse tree and returns a [start-index end-index] pair\n   indicating the span of text parsed by this subtree.\n   start-index is inclusive and end-index is exclusive, as is customary\n   with substrings.\n   Returns nil if no span metadata is attached."],"^I","~$instaparse.viz/span","^6","instaparse/viz.cljs","^:",11,"~:method-params",["^U",[["^21"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^8",1,"~:variadic?",false,"^7",3,"~:ret-tag",["^H",["~$cljs.core/IVector","~$clj-nil"]],"^9",3,"~:max-fixed-arity",1,"~:fn-var",true,"^1[",["^U",["^20",["^U",[["^21"]]]]],"^22","Takes a subtree of the parse tree and returns a [start-index end-index] pair\n   indicating the span of text parsed by this subtree.\n   start-index is inclusive and end-index is exclusive, as is customary\n   with substrings.\n   Returns nil if no span metadata is attached."]],"^S",["^ ","^O","^O"],"~:cljs.analyzer/constants",["^ ","^Q",["^H",["~:instaparse.gll/end-index","~:instaparse.gll/start-index"]],"~:order",["^2?","^2>"]],"^W",["^ "],"^X",["^ "],"^Y",["^P","^O"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1;",[["^2C","~:static-fns"],true,["^2C","~:elide-asserts"],false,["^2C","~:optimize-constants"],null,["^2C","^12"],null,["^2C","~:external-config"],null,["^2C","~:tooling-config"],null,["^2C","~:emit-constants"],null,["^2C","~:load-tests"],null,["^2C","~:infer-externs"],"~:auto",["^2C","^14"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^2C","~:fn-invoke-direct"],null,["^2C","~:source-map"],"/dev/null"]]]