["^ ","~:output",["^ ","~:js","goog.provide('instaparse.repeat');\ngoog.require('cljs.core');\ngoog.require('instaparse.gll');\ngoog.require('instaparse.combinators_source');\ngoog.require('instaparse.auto_flatten_seq');\ngoog.require('instaparse.viz');\ngoog.require('instaparse.reduction');\ngoog.require('instaparse.failure');\ninstaparse.repeat.empty_result_QMARK_ = (function instaparse$repeat$empty_result_QMARK_(result){\nreturn ((((cljs.core.vector_QMARK_(result)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(result),(1))))) || (((cljs.core.map_QMARK_(result)) && (cljs.core.contains_QMARK_(result,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223))) && (cljs.core.empty_QMARK_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(result,new cljs.core.Keyword(null,\"content\",\"content\",15833224)))))) || (cljs.core.empty_QMARK_(result)));\n});\ninstaparse.repeat.failure_signal = instaparse.gll.__GT_Failure(null,null);\ninstaparse.repeat.get_end = (function instaparse$repeat$get_end(var_args){\nvar G__49558 = arguments.length;\nswitch (G__49558) {\ncase 1:\nreturn instaparse.repeat.get_end.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn instaparse.repeat.get_end.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ninstaparse.repeat.get_end.cljs$core$IFn$_invoke$arity$1 = (function (parse){\nvar vec__49560 = instaparse.viz.span(parse);\nvar start = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49560,(0),null);\nvar end = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49560,(1),null);\nif(cljs.core.truth_(end)){\nreturn cljs.core.long$(end);\n} else {\nreturn cljs.core.count(parse);\n}\n});\n\ninstaparse.repeat.get_end.cljs$core$IFn$_invoke$arity$2 = (function (parse,index){\nvar vec__49563 = instaparse.viz.span(parse);\nvar start = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49563,(0),null);\nvar end = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49563,(1),null);\nif(cljs.core.truth_(end)){\nreturn cljs.core.long$(end);\n} else {\nreturn (index + cljs.core.count(parse));\n}\n});\n\ninstaparse.repeat.get_end.cljs$lang$maxFixedArity = 2;\n\ninstaparse.repeat.parse_from_index = (function instaparse$repeat$parse_from_index(grammar,initial_parser,text,segment,index){\nvar tramp = instaparse.gll.make_tramp.cljs$core$IFn$_invoke$arity$3(grammar,text,segment);\ninstaparse.gll.push_listener(tramp,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index,initial_parser], null),instaparse.gll.TopListener(tramp));\n\nreturn instaparse.gll.run.cljs$core$IFn$_invoke$arity$1(tramp);\n});\n/**\n * Returns either:\n * [a-parse end-index a-list-of-valid-follow-up-parses]\n * [a-parse end-index nil] (successfully reached end of text)\n * nil (hit a dead-end with this strategy)\n */\ninstaparse.repeat.select_parse = (function instaparse$repeat$select_parse(grammar,initial_parser,text,segment,index,parses){\nvar length = cljs.core.count(text);\nvar parses__$1 = cljs.core.seq(parses);\nwhile(true){\nif(parses__$1){\nvar parse = cljs.core.first(parses__$1);\nvar vec__49566 = instaparse.viz.span(parse);\nvar start = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49566,(0),null);\nvar end = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49566,(1),null);\nvar end__$1 = (cljs.core.truth_(end)?end:(index + cljs.core.count(parse)));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(end__$1,length)){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [parse,end__$1,null], null);\n} else {\nvar temp__5718__auto__ = cljs.core.seq(instaparse.repeat.parse_from_index(grammar,initial_parser,text,segment,end__$1));\nif(temp__5718__auto__){\nvar follow_ups = temp__5718__auto__;\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [parse,end__$1,follow_ups], null);\n} else {\nvar G__49727 = cljs.core.next(parses__$1);\nparses__$1 = G__49727;\ncontinue;\n}\n\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});\ninstaparse.repeat.repeat_parse_hiccup = (function instaparse$repeat$repeat_parse_hiccup(var_args){\nvar G__49574 = arguments.length;\nswitch (G__49574) {\ncase 5:\nreturn instaparse.repeat.repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ncase 6:\nreturn instaparse.repeat.repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ninstaparse.repeat.repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$5 = (function (grammar,initial_parser,root_tag,text,segment){\nreturn instaparse.repeat.repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$6(grammar,initial_parser,root_tag,text,segment,(0));\n});\n\ninstaparse.repeat.repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$6 = (function (grammar,initial_parser,root_tag,text,segment,index){\nvar length = cljs.core.count(text);\nvar first_result = instaparse.repeat.parse_from_index(grammar,initial_parser,text,segment,index);\nvar index__$1 = cljs.core.long$(index);\nvar parses = instaparse.auto_flatten_seq.auto_flatten_seq(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [root_tag], null));\nvar G__49584 = instaparse.repeat.select_parse(grammar,initial_parser,text,segment,index__$1,first_result);\nvar vec__49585 = G__49584;\nvar parse = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49585,(0),null);\nvar end = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49585,(1),null);\nvar follow_ups = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49585,(2),null);\nvar selection = vec__49585;\nvar index__$2 = index__$1;\nvar parses__$1 = parses;\nvar G__49584__$1 = G__49584;\nwhile(true){\nvar index__$3 = index__$2;\nvar parses__$2 = parses__$1;\nvar vec__49593 = G__49584__$1;\nvar parse__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49593,(0),null);\nvar end__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49593,(1),null);\nvar follow_ups__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49593,(2),null);\nvar selection__$1 = vec__49593;\nif((selection__$1 == null)){\nreturn instaparse.repeat.failure_signal;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(index__$3,end__$1)){\nreturn instaparse.repeat.failure_signal;\n} else {\nif((follow_ups__$1 == null)){\nreturn instaparse.gll.safe_with_meta(instaparse.auto_flatten_seq.convert_afs_to_vec(instaparse.auto_flatten_seq.conj_flat(parses__$2,parse__$1)),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"optimize\",\"optimize\",-1912349448),new cljs.core.Keyword(null,\"memory\",\"memory\",-1449401430),new cljs.core.Keyword(\"instaparse.gll\",\"start-index\",\"instaparse.gll/start-index\",404653620),(0),new cljs.core.Keyword(\"instaparse.gll\",\"end-index\",\"instaparse.gll/end-index\",-1851404441),length], null));\n} else {\nvar G__49753 = cljs.core.long$(end__$1);\nvar G__49754 = instaparse.auto_flatten_seq.conj_flat(parses__$2,parse__$1);\nvar G__49755 = instaparse.repeat.select_parse(grammar,initial_parser,text,segment,end__$1,follow_ups__$1);\nindex__$2 = G__49753;\nparses__$1 = G__49754;\nG__49584__$1 = G__49755;\ncontinue;\n\n}\n}\n}\nbreak;\n}\n});\n\ninstaparse.repeat.repeat_parse_hiccup.cljs$lang$maxFixedArity = 6;\n\ninstaparse.repeat.repeat_parse_enlive = (function instaparse$repeat$repeat_parse_enlive(var_args){\nvar G__49602 = arguments.length;\nswitch (G__49602) {\ncase 5:\nreturn instaparse.repeat.repeat_parse_enlive.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ncase 6:\nreturn instaparse.repeat.repeat_parse_enlive.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ninstaparse.repeat.repeat_parse_enlive.cljs$core$IFn$_invoke$arity$5 = (function (grammar,initial_parser,root_tag,text,segment){\nreturn instaparse.repeat.repeat_parse_enlive.cljs$core$IFn$_invoke$arity$6(grammar,initial_parser,root_tag,text,segment,(0));\n});\n\ninstaparse.repeat.repeat_parse_enlive.cljs$core$IFn$_invoke$arity$6 = (function (grammar,initial_parser,root_tag,text,segment,index){\nvar length = cljs.core.count(text);\nvar first_result = instaparse.repeat.parse_from_index(grammar,initial_parser,text,segment,index);\nvar index__$1 = cljs.core.long$(index);\nvar parses = instaparse.auto_flatten_seq.EMPTY;\nvar G__49607 = instaparse.repeat.select_parse(grammar,initial_parser,text,segment,index__$1,first_result);\nvar vec__49611 = G__49607;\nvar parse = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49611,(0),null);\nvar end = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49611,(1),null);\nvar follow_ups = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49611,(2),null);\nvar selection = vec__49611;\nvar index__$2 = index__$1;\nvar parses__$1 = parses;\nvar G__49607__$1 = G__49607;\nwhile(true){\nvar index__$3 = index__$2;\nvar parses__$2 = parses__$1;\nvar vec__49624 = G__49607__$1;\nvar parse__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49624,(0),null);\nvar end__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49624,(1),null);\nvar follow_ups__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49624,(2),null);\nvar selection__$1 = vec__49624;\nif((selection__$1 == null)){\nreturn instaparse.repeat.failure_signal;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(index__$3,end__$1)){\nreturn instaparse.repeat.failure_signal;\n} else {\nif((follow_ups__$1 == null)){\nreturn instaparse.gll.safe_with_meta(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),root_tag,new cljs.core.Keyword(null,\"content\",\"content\",15833224),cljs.core.seq(instaparse.auto_flatten_seq.conj_flat(parses__$2,parse__$1))], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"optimize\",\"optimize\",-1912349448),new cljs.core.Keyword(null,\"memory\",\"memory\",-1449401430),new cljs.core.Keyword(\"instaparse.gll\",\"start-index\",\"instaparse.gll/start-index\",404653620),(0),new cljs.core.Keyword(\"instaparse.gll\",\"end-index\",\"instaparse.gll/end-index\",-1851404441),length], null));\n} else {\nvar G__49792 = cljs.core.long$(end__$1);\nvar G__49793 = instaparse.auto_flatten_seq.conj_flat(parses__$2,parse__$1);\nvar G__49794 = instaparse.repeat.select_parse(grammar,initial_parser,text,segment,end__$1,follow_ups__$1);\nindex__$2 = G__49792;\nparses__$1 = G__49793;\nG__49607__$1 = G__49794;\ncontinue;\n\n}\n}\n}\nbreak;\n}\n});\n\ninstaparse.repeat.repeat_parse_enlive.cljs$lang$maxFixedArity = 6;\n\ninstaparse.repeat.repeat_parse_no_tag = (function instaparse$repeat$repeat_parse_no_tag(var_args){\nvar G__49630 = arguments.length;\nswitch (G__49630) {\ncase 4:\nreturn instaparse.repeat.repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ncase 5:\nreturn instaparse.repeat.repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ninstaparse.repeat.repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$4 = (function (grammar,initial_parser,text,segment){\nreturn instaparse.repeat.repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$5(grammar,initial_parser,text,segment,(0));\n});\n\ninstaparse.repeat.repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$5 = (function (grammar,initial_parser,text,segment,index){\nvar length = cljs.core.count(text);\nvar first_result = instaparse.repeat.parse_from_index(grammar,initial_parser,text,segment,index);\nvar index__$1 = cljs.core.long$(index);\nvar parses = instaparse.auto_flatten_seq.EMPTY;\nvar G__49645 = instaparse.repeat.select_parse(grammar,initial_parser,text,segment,index__$1,first_result);\nvar vec__49646 = G__49645;\nvar parse = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49646,(0),null);\nvar end = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49646,(1),null);\nvar follow_ups = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49646,(2),null);\nvar selection = vec__49646;\nvar index__$2 = index__$1;\nvar parses__$1 = parses;\nvar G__49645__$1 = G__49645;\nwhile(true){\nvar index__$3 = index__$2;\nvar parses__$2 = parses__$1;\nvar vec__49654 = G__49645__$1;\nvar parse__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49654,(0),null);\nvar end__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49654,(1),null);\nvar follow_ups__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49654,(2),null);\nvar selection__$1 = vec__49654;\nif((selection__$1 == null)){\nreturn instaparse.repeat.failure_signal;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(index__$3,end__$1)){\nreturn instaparse.repeat.failure_signal;\n} else {\nif((follow_ups__$1 == null)){\nreturn instaparse.gll.safe_with_meta(instaparse.auto_flatten_seq.conj_flat(parses__$2,parse__$1),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"optimize\",\"optimize\",-1912349448),new cljs.core.Keyword(null,\"memory\",\"memory\",-1449401430),new cljs.core.Keyword(\"instaparse.gll\",\"start-index\",\"instaparse.gll/start-index\",404653620),(0),new cljs.core.Keyword(\"instaparse.gll\",\"end-index\",\"instaparse.gll/end-index\",-1851404441),length], null));\n} else {\nvar G__49807 = cljs.core.long$(end__$1);\nvar G__49808 = instaparse.auto_flatten_seq.conj_flat(parses__$2,parse__$1);\nvar G__49809 = instaparse.repeat.select_parse(grammar,initial_parser,text,segment,end__$1,follow_ups__$1);\nindex__$2 = G__49807;\nparses__$1 = G__49808;\nG__49645__$1 = G__49809;\ncontinue;\n\n}\n}\n}\nbreak;\n}\n});\n\ninstaparse.repeat.repeat_parse_no_tag.cljs$lang$maxFixedArity = 5;\n\ninstaparse.repeat.repeat_parse = (function instaparse$repeat$repeat_parse(var_args){\nvar G__49668 = arguments.length;\nswitch (G__49668) {\ncase 4:\nreturn instaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ncase 5:\nreturn instaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ninstaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$4 = (function (grammar,initial_parser,output_format,text){\nreturn instaparse.repeat.repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$4(grammar,initial_parser,text,instaparse.gll.text__GT_segment(text));\n});\n\ninstaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$5 = (function (grammar,initial_parser,output_format,root_tag,text){\nif(cljs.core.truth_((function (){var fexpr__49690 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"hiccup\",\"hiccup\",1218876238),null,new cljs.core.Keyword(null,\"enlive\",\"enlive\",1679023921),null], null), null);\nreturn (fexpr__49690.cljs$core$IFn$_invoke$arity$1 ? fexpr__49690.cljs$core$IFn$_invoke$arity$1(output_format) : fexpr__49690.call(null,output_format));\n})())){\n} else {\nthrow (new Error(\"Assert failed: (#{:hiccup :enlive} output-format)\"));\n}\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(output_format,new cljs.core.Keyword(null,\"hiccup\",\"hiccup\",1218876238))){\nreturn instaparse.repeat.repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$5(grammar,initial_parser,root_tag,text,instaparse.gll.text__GT_segment(text));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(output_format,new cljs.core.Keyword(null,\"enlive\",\"enlive\",1679023921))){\nreturn instaparse.repeat.repeat_parse_enlive.cljs$core$IFn$_invoke$arity$5(grammar,initial_parser,root_tag,text,instaparse.gll.text__GT_segment(text));\n} else {\nreturn null;\n}\n}\n});\n\ninstaparse.repeat.repeat_parse.cljs$lang$maxFixedArity = 5;\n\ninstaparse.repeat.repeat_parse_with_header = (function instaparse$repeat$repeat_parse_with_header(grammar,header_parser,repeating_parser,output_format,root_tag,text){\nvar segment = instaparse.gll.text__GT_segment(text);\nvar length = cljs.core.count(text);\nvar header_results = instaparse.repeat.parse_from_index(grammar,header_parser,text,segment,(0));\nif(cljs.core.truth_((function (){var or__4131__auto__ = cljs.core.empty_QMARK_(header_results);\nif(or__4131__auto__){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"hide\",\"hide\",-596913169).cljs$core$IFn$_invoke$arity$1(header_parser);\n}\n})())){\nreturn instaparse.repeat.failure_signal;\n} else {\nvar header_result = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,instaparse.repeat.get_end,header_results);\nvar end = instaparse.repeat.get_end.cljs$core$IFn$_invoke$arity$1(header_result);\nvar repeat_result = instaparse.repeat.repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$5(grammar,new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310).cljs$core$IFn$_invoke$arity$1(repeating_parser),text,segment,end);\nvar span_meta = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"optimize\",\"optimize\",-1912349448),new cljs.core.Keyword(null,\"memory\",\"memory\",-1449401430),new cljs.core.Keyword(\"instaparse.gll\",\"start-index\",\"instaparse.gll/start-index\",404653620),(0),new cljs.core.Keyword(\"instaparse.gll\",\"end-index\",\"instaparse.gll/end-index\",-1851404441),length], null);\nif((((repeat_result instanceof instaparse.gll.Failure)) || (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(repeating_parser),new cljs.core.Keyword(null,\"star\",\"star\",279424429))) && (instaparse.repeat.empty_result_QMARK_(repeat_result)))))){\nreturn instaparse.repeat.failure_signal;\n} else {\nvar G__49693 = output_format;\nvar G__49693__$1 = (((G__49693 instanceof cljs.core.Keyword))?G__49693.fqn:null);\nswitch (G__49693__$1) {\ncase \"enlive\":\nreturn instaparse.gll.safe_with_meta(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),root_tag,new cljs.core.Keyword(null,\"content\",\"content\",15833224),instaparse.auto_flatten_seq.conj_flat(instaparse.auto_flatten_seq.EMPTY.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2(null,header_result),repeat_result)], null),span_meta);\n\nbreak;\ncase \"hiccup\":\nreturn instaparse.gll.safe_with_meta(instaparse.auto_flatten_seq.convert_afs_to_vec(instaparse.auto_flatten_seq.conj_flat(instaparse.auto_flatten_seq.auto_flatten_seq(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [root_tag], null)).instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2(null,header_result),repeat_result)),span_meta);\n\nbreak;\ndefault:\nreturn instaparse.gll.safe_with_meta(instaparse.auto_flatten_seq.conj_flat(instaparse.auto_flatten_seq.EMPTY.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2(null,header_result),repeat_result),span_meta);\n\n}\n}\n}\n});\ninstaparse.repeat.try_repeating_parse_strategy_with_header = (function instaparse$repeat$try_repeating_parse_strategy_with_header(grammar,text,start_production,start_rule,output_format){\n\nvar parsers = new cljs.core.Keyword(null,\"parsers\",\"parsers\",-804353827).cljs$core$IFn$_invoke$arity$1(start_rule);\nvar repeating_parser = cljs.core.last(parsers);\nif(cljs.core.not((function (){var and__4120__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(start_rule),new cljs.core.Keyword(null,\"cat\",\"cat\",-1457810207));\nif(and__4120__auto__){\nvar and__4120__auto____$1 = (function (){var G__49701 = new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(repeating_parser);\nvar fexpr__49700 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"star\",\"star\",279424429),null,new cljs.core.Keyword(null,\"plus\",\"plus\",211540661),null], null), null);\nreturn (fexpr__49700.cljs$core$IFn$_invoke$arity$1 ? fexpr__49700.cljs$core$IFn$_invoke$arity$1(G__49701) : fexpr__49700.call(null,G__49701));\n})();\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn ((cljs.core.not(new cljs.core.Keyword(null,\"hide\",\"hide\",-596913169).cljs$core$IFn$_invoke$arity$1(repeating_parser))) && (cljs.core.not(new cljs.core.Keyword(null,\"hide\",\"hide\",-596913169).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310).cljs$core$IFn$_invoke$arity$1(repeating_parser)))));\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn instaparse.repeat.failure_signal;\n} else {\nvar header_parser = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(instaparse.combinators_source.cat,cljs.core.butlast(parsers));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1(start_rule),instaparse.reduction.raw_non_terminal_reduction)){\nreturn instaparse.repeat.repeat_parse_with_header(grammar,header_parser,repeating_parser,null,start_production,text);\n} else {\nreturn instaparse.repeat.repeat_parse_with_header(grammar,header_parser,repeating_parser,output_format,start_production,text);\n}\n}\n});\ninstaparse.repeat.try_repeating_parse_strategy = (function instaparse$repeat$try_repeating_parse_strategy(parser,text,start_production){\nvar grammar = new cljs.core.Keyword(null,\"grammar\",\"grammar\",1881328267).cljs$core$IFn$_invoke$arity$1(parser);\nvar output_format = new cljs.core.Keyword(null,\"output-format\",\"output-format\",-1826382676).cljs$core$IFn$_invoke$arity$1(parser);\nvar start_rule = cljs.core.get.cljs$core$IFn$_invoke$arity$2(grammar,start_production);\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"hide\",\"hide\",-596913169).cljs$core$IFn$_invoke$arity$1(start_rule),true)){\nreturn instaparse.repeat.failure_signal;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1(start_rule),instaparse.reduction.raw_non_terminal_reduction)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(start_rule),new cljs.core.Keyword(null,\"star\",\"star\",279424429))){\nreturn instaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$4(grammar,new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310).cljs$core$IFn$_invoke$arity$1(start_rule),output_format,text);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(start_rule),new cljs.core.Keyword(null,\"plus\",\"plus\",211540661))){\nvar result = instaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$4(grammar,new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310).cljs$core$IFn$_invoke$arity$1(start_rule),output_format,text);\nif(instaparse.repeat.empty_result_QMARK_(result)){\nreturn instaparse.repeat.failure_signal;\n} else {\nreturn result;\n}\n} else {\nreturn instaparse.repeat.try_repeating_parse_strategy_with_header(grammar,text,start_production,start_rule,output_format);\n\n}\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(start_rule),new cljs.core.Keyword(null,\"star\",\"star\",279424429))){\nreturn instaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$5(grammar,new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310).cljs$core$IFn$_invoke$arity$1(start_rule),output_format,start_production,text);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223).cljs$core$IFn$_invoke$arity$1(start_rule),new cljs.core.Keyword(null,\"plus\",\"plus\",211540661))){\nvar result = instaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$5(grammar,new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310).cljs$core$IFn$_invoke$arity$1(start_rule),output_format,start_production,text);\nif(instaparse.repeat.empty_result_QMARK_(result)){\nreturn instaparse.repeat.failure_signal;\n} else {\nreturn result;\n}\n} else {\nreturn instaparse.repeat.try_repeating_parse_strategy_with_header(grammar,text,start_production,start_rule,output_format);\n\n}\n}\n}\n}\n});\ninstaparse.repeat.used_memory_optimization_QMARK_ = (function instaparse$repeat$used_memory_optimization_QMARK_(tree){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"memory\",\"memory\",-1449401430),new cljs.core.Keyword(null,\"optimize\",\"optimize\",-1912349448).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(tree)));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","instaparse/repeat.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",22],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",["^ ","~$profile","~$instaparse.gll"],"~:excludes",["~#set",[]],"~:name","~$instaparse.repeat","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$instaparse.combinators-source","^Q","~$afs","~$instaparse.auto-flatten-seq","~$viz","~$instaparse.viz","~$gll","^H","~$instaparse.reduction","^W","~$cljs.core","^X","~$goog","^Y","^S","^S","~$instaparse.failure","^Z","~$c","^Q","^H","^H","~$fail","^Z","~$red","^W","^U","^U"],"~:seen",["^J",["~:require","~:require-macros"]],"~:uses",null,"^13",["^ ","^H","^H","^X","^X","^V","^H"],"~:form",["~#list",["~$ns","^L",["^16",["^12",["^H","~:as","^V"],["^Q","^18","~$c"],["^S","^18","^R"],["^U","^18","^T"],["^W","^18","^10"],["^Z","^18","^["]]],["^16",["^13",["^H","~:refer",["^G"]]]]]],"~:flags",["^ ","^12",["^J",[]],"^13",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^Y","^X","^H","^Q","^S","^U","^W","^Z"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","instaparse/repeat.cljc"],"~:compiled-at",1560836399285,"~:resource-name","instaparse/repeat.cljc","~:warnings",[],"~:source","(ns instaparse.repeat\r\n  (:require [instaparse.gll :as gll\r\n             #?@(:clj [:refer [profile]])]\r\n            [instaparse.combinators-source :as c]\r\n            [instaparse.auto-flatten-seq :as afs]\r\n            [instaparse.viz :as viz]\r\n            [instaparse.reduction :as red]\r\n            [instaparse.failure :as fail])\r\n  #?(:cljs\r\n     (:require-macros [instaparse.gll :refer [profile]])))\r\n\r\n(defn empty-result? [result]\r\n  (or (and (vector? result) (= (count result) 1))\r\n      (and (map? result) (contains? result :tag) (empty? (get result :content)))\r\n      (empty? result)))       \r\n\r\n(def ^:constant failure-signal (gll/->Failure nil nil))\r\n\r\n(defn get-end \r\n  (#?(:clj ^long [parse]\r\n      :cljs ^number [parse])\r\n    (let [[start end] (viz/span parse)]\r\n      (if end (long end) (count parse))))\r\n  (#?(:clj ^long [parse ^long index]\r\n      :cljs ^number [parse ^number index])\r\n    (let [[start end] (viz/span parse)]\r\n      (if end (long end) (+ index (count parse))))))\r\n\r\n(defn parse-from-index [grammar initial-parser text segment index]\r\n  (let [tramp (gll/make-tramp grammar text segment)]\r\n    (gll/push-listener tramp [index initial-parser] (gll/TopListener tramp))\r\n    (gll/run tramp)))\r\n\r\n(defn select-parse\r\n  \"Returns either:\r\n   [a-parse end-index a-list-of-valid-follow-up-parses]\r\n   [a-parse end-index nil] (successfully reached end of text)\r\n   nil (hit a dead-end with this strategy)\"\r\n  [grammar initial-parser text segment index parses]\r\n  ;(clojure.pprint/pprint parses)\r\n  (let [length (count text)]\r\n    (loop [parses (seq parses)]\r\n      (when parses\r\n        (let [parse (first parses)\r\n              [start end] (viz/span parse)\r\n              end (if end end (+ index (count parse)))]\r\n          (cond\r\n            (= end length) [parse end nil]\r\n            :else \r\n            (if-let [follow-ups (seq (parse-from-index grammar initial-parser text segment end))]\r\n              [parse end follow-ups]\r\n              (recur (next parses)))))))))\r\n                                 \r\n(defn repeat-parse-hiccup \r\n  ([grammar initial-parser root-tag text segment]\r\n    (repeat-parse-hiccup grammar initial-parser root-tag text segment 0))\r\n  ([grammar initial-parser root-tag text segment index]\r\n    (let [length (count text)\r\n          first-result (parse-from-index grammar initial-parser text segment index)]\r\n      (loop [index (long index)\r\n             parses (afs/auto-flatten-seq [root-tag])\r\n             \r\n             [parse end follow-ups :as selection]\r\n             (select-parse grammar initial-parser text segment index first-result)]\r\n        (cond\r\n          (nil? selection) failure-signal\r\n          (= index end) failure-signal\r\n          (nil? follow-ups) (gll/safe-with-meta\r\n                              (afs/convert-afs-to-vec \r\n                                (afs/conj-flat parses parse))\r\n                              {:optimize :memory\r\n                               :instaparse.gll/start-index 0\r\n                               :instaparse.gll/end-index length})\r\n          :else (recur (long end)\r\n                       (afs/conj-flat parses parse)\r\n                       (select-parse grammar initial-parser text segment end follow-ups)))))))\r\n\r\n(defn repeat-parse-enlive\r\n  ([grammar initial-parser root-tag text segment]\r\n    (repeat-parse-enlive grammar initial-parser root-tag text segment 0))\r\n  ([grammar initial-parser root-tag text segment index]\r\n    (let [length (count text)\r\n          first-result (parse-from-index grammar initial-parser text segment index)]\r\n      (loop [index (long index)\r\n             parses afs/EMPTY\r\n             \r\n             [parse end follow-ups :as selection]\r\n             (select-parse grammar initial-parser text segment index first-result)]\r\n        (cond\r\n          (nil? selection) failure-signal\r\n          (= index end) failure-signal          \r\n          (nil? follow-ups) (gll/safe-with-meta\r\n                              {:tag root-tag \r\n                               :content (seq (afs/conj-flat parses parse))}\r\n                              {:optimize :memory\r\n                               :instaparse.gll/start-index 0\r\n                               :instaparse.gll/end-index length})\r\n          :else (recur (long end)\r\n                       (afs/conj-flat parses parse)\r\n                       (select-parse grammar initial-parser text segment end follow-ups)))))))\r\n\r\n(defn repeat-parse-no-tag \r\n  ([grammar initial-parser text segment]\r\n    (repeat-parse-no-tag grammar initial-parser text segment 0))\r\n  ([grammar initial-parser text segment index]\r\n    (let [length (count text)\r\n          first-result (parse-from-index grammar initial-parser text segment index)]\r\n      (loop [index (long index)\r\n             parses afs/EMPTY\r\n             \r\n             [parse end follow-ups :as selection]\r\n             (select-parse grammar initial-parser text segment index first-result)]\r\n        (cond\r\n          (nil? selection) failure-signal\r\n          (= index end) failure-signal          \r\n          (nil? follow-ups) (gll/safe-with-meta\r\n                              (afs/conj-flat parses parse)\r\n                              {:optimize :memory\r\n                               :instaparse.gll/start-index 0\r\n                               :instaparse.gll/end-index length})\r\n          :else (recur (long end)\r\n                       (afs/conj-flat parses parse)\r\n                       (select-parse grammar initial-parser text segment end follow-ups)))))))\r\n\r\n(defn repeat-parse \r\n  ([grammar initial-parser output-format text] (repeat-parse-no-tag grammar initial-parser text (gll/text->segment text)))\r\n  ([grammar initial-parser output-format root-tag text]\r\n    {:pre [(#{:hiccup :enlive} output-format)]} \r\n    (cond\r\n      (= output-format :hiccup)\r\n      (repeat-parse-hiccup grammar initial-parser root-tag text (gll/text->segment text))\r\n      (= output-format :enlive)\r\n      (repeat-parse-enlive grammar initial-parser root-tag text (gll/text->segment text)))))\r\n\r\n(defn repeat-parse-with-header\r\n  ([grammar header-parser repeating-parser output-format root-tag text]\r\n    (let [segment (gll/text->segment text)\r\n          length (count text)\r\n          header-results (parse-from-index grammar header-parser text segment 0)]\r\n      (if (or (empty? header-results)\r\n              (:hide header-parser))\r\n        failure-signal\r\n        (let [header-result (apply max-key get-end header-results)\r\n              end (get-end header-result)\r\n              repeat-result (repeat-parse-no-tag grammar (:parser repeating-parser) text segment end)\r\n              span-meta {:optimize :memory\r\n                         :instaparse.gll/start-index 0\r\n                         :instaparse.gll/end-index length}]\r\n          (if (or (instance? instaparse.gll.Failure repeat-result)\r\n                  (and (= (:tag repeating-parser) :star)\r\n                       (empty-result? repeat-result)))\r\n            failure-signal\r\n            (case output-format\r\n              :enlive\r\n              (gll/safe-with-meta\r\n                {:tag root-tag \r\n                 :content\r\n                 (afs/conj-flat (afs/conj-flat afs/EMPTY header-result) repeat-result)}\r\n                span-meta)\r\n              :hiccup\r\n              (gll/safe-with-meta\r\n                (afs/convert-afs-to-vec \r\n                  (afs/conj-flat (afs/conj-flat (afs/auto-flatten-seq [root-tag])\r\n                                                header-result) \r\n                                 repeat-result))\r\n                span-meta)\r\n              (gll/safe-with-meta \r\n                (afs/conj-flat (afs/conj-flat afs/EMPTY header-result) repeat-result)\r\n                span-meta))))))))\r\n    \r\n(defn try-repeating-parse-strategy-with-header\r\n  [grammar text start-production start-rule output-format]\r\n  (gll/profile (gll/clear!))\r\n  (let [parsers (:parsers start-rule)\r\n        repeating-parser (last parsers)]\r\n    (if\r\n      (not (and (= (:tag start-rule) :cat)\r\n                (#{:star :plus} (:tag repeating-parser))\r\n                (not (:hide repeating-parser))\r\n                (not (:hide (:parser repeating-parser)))))\r\n      failure-signal\r\n      (let [header-parser (apply c/cat (butlast parsers))]\r\n        (if (= (:red start-rule) red/raw-non-terminal-reduction)\r\n          (repeat-parse-with-header grammar header-parser repeating-parser nil start-production text)\r\n          (repeat-parse-with-header grammar header-parser repeating-parser output-format start-production text))))))\r\n  \r\n(defn try-repeating-parse-strategy\r\n  [parser text start-production]\r\n  (let [grammar (:grammar parser)\r\n        output-format (:output-format parser)\r\n        start-rule (get grammar start-production)]\r\n    (profile (gll/clear!))\r\n    (cond\r\n      (= (:hide start-rule) true) failure-signal\r\n      (= (:red start-rule) red/raw-non-terminal-reduction)\r\n      (cond\r\n        (= (:tag start-rule) :star)\r\n        (repeat-parse grammar (:parser start-rule) output-format text)\r\n        (= (:tag start-rule) :plus)\r\n        (let [result (repeat-parse grammar (:parser start-rule) output-format text)]\r\n          (if (empty-result? result)\r\n            failure-signal\r\n            result))\r\n        :else (try-repeating-parse-strategy-with-header \r\n                grammar text start-production start-rule output-format))\r\n              \r\n      (= (:tag start-rule) :star)\r\n      (repeat-parse grammar (:parser start-rule) output-format start-production text)\r\n      (= (:tag start-rule) :plus)      \r\n      (let [result (repeat-parse grammar (:parser start-rule) output-format start-production text)]\r\n        (if (empty-result? result)\r\n          failure-signal\r\n          result))\r\n      \r\n      :else (try-repeating-parse-strategy-with-header \r\n                grammar text start-production start-rule output-format))))\r\n\r\n(defn used-memory-optimization? [tree]\r\n  (= :memory (-> tree meta :optimize)))","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["instaparse.repeat/empty-result?","result","cljs.core/vector?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core/map?","cljs.core/contains?","cljs.core/empty?","cljs.core.get.cljs$core$IFn$_invoke$arity$2","instaparse.repeat/failure-signal","instaparse.gll/->Failure","var_args","G__49558","instaparse.repeat/get-end","js/Error","parse","vec__49560","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","start","end","instaparse.viz/span","cljs.core/long","index","vec__49563","instaparse.repeat/parse-from-index","grammar","initial-parser","text","segment","tramp","instaparse.gll.make_tramp.cljs$core$IFn$_invoke$arity$3","instaparse.gll/push-listener","instaparse.gll/TopListener","instaparse.gll.run.cljs$core$IFn$_invoke$arity$1","instaparse.repeat/select-parse","parses","length","cljs.core/seq","vec__49566","cljs.core/first","temp__5718__auto__","follow-ups","cljs.core/next","G__49574","instaparse.repeat/repeat-parse-hiccup","root-tag","instaparse.repeat.repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$6","first-result","G__49584","vec__49585","vec__49593","instaparse.auto-flatten-seq/auto-flatten-seq","selection","instaparse.gll/safe-with-meta","instaparse.auto-flatten-seq/convert-afs-to-vec","instaparse.auto-flatten-seq/conj-flat","G__49602","instaparse.repeat/repeat-parse-enlive","instaparse.repeat.repeat_parse_enlive.cljs$core$IFn$_invoke$arity$6","G__49607","vec__49611","vec__49624","instaparse.auto-flatten-seq/EMPTY","G__49630","instaparse.repeat/repeat-parse-no-tag","instaparse.repeat.repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$5","G__49645","vec__49646","vec__49654","G__49668","instaparse.repeat/repeat-parse","output-format","instaparse.repeat.repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$4","instaparse.gll/text->segment","fexpr__49690","instaparse.repeat.repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$5","instaparse.repeat.repeat_parse_enlive.cljs$core$IFn$_invoke$arity$5","instaparse.repeat/repeat-parse-with-header","header-parser","repeating-parser","header-results","or__4131__auto__","header-result","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/max-key","instaparse.repeat.get_end.cljs$core$IFn$_invoke$arity$1","repeat-result","span-meta","instaparse.gll/Failure","G__49693","cljs.core/Keyword","instaparse.repeat/try-repeating-parse-strategy-with-header","start-production","start-rule","parsers","cljs.core/last","cljs.core/not","and__4120__auto__","G__49701","fexpr__49700","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","instaparse.combinators-source/cat","cljs.core/butlast","instaparse.reduction/raw-non-terminal-reduction","instaparse.repeat/try-repeating-parse-strategy","parser","instaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$4","instaparse.repeat.repeat_parse.cljs$core$IFn$_invoke$arity$5","instaparse.repeat/used-memory-optimization?","tree","cljs.core/meta"]]],"~:cache-keys",["~#cmap",[["^1>","instaparse/auto_flatten_seq.cljc"],[1548085352000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^Y","^X"]]],["~:macro","^X"],[1559826623000],["^1>","goog/math/math.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","~$goog.array","~$goog.asserts"]]],["^1>","instaparse/gll.cljc"],[1548085352000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^X","^S","^Z","^W","^Q","~$instaparse.print","~$instaparse.util","~$goog.i18n.uChar"]]],["^1>","goog/array/array.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^1Q"]]],["^1>","goog/debug/error.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y"]]],["^1>","goog/dom/nodetype.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y"]]],["^1>","instaparse/viz.cljs"],[1548085352000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^X"]]],["^1>","goog/object/object.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^1>","goog/math/long.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^1Q","~$goog.reflect"]]],["^1>","instaparse/reduction.cljc"],[1548085352000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^X","^S","^1S"]]],["^1>","goog/string/internal.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y"]]],["^1>","goog/i18n/uchar.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y"]]],["^1>","goog/functions/functions.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y"]]],["^1>","goog/structs/map.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1>","instaparse/failure.cljc"],[1548085352000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^X","^1R"]]],["^1>","goog/asserts/asserts.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1>","goog/uri/uri.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^1P","^1Q","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1>","instaparse/print.cljc"],[1548085352000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^X","~$clojure.string"]]],["^1O","^H"],[1548085352000],["^1>","goog/base.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",[]]],["^1>","goog/structs/structs.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^1P","~$goog.object"]]],["^1>","clojure/string.cljs"],[1559826623000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^X","^1[","~$goog.string.StringBuffer"]]],["^1>","goog/string/string.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","~$goog.string.internal"]]],["^1>","goog/reflect/reflect.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y"]]],["^1>","goog/string/stringbuffer.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y"]]],["^1>","goog/iter/iter.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^1P","^1Q","~$goog.functions","~$goog.math"]]],["^1>","instaparse/repeat.cljc"],[1548085352000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^X","^H","^Q","^S","^U","^W","^Z"]]],["^1>","cljs/core.cljs"],[1559826623000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["~$goog.math.Long","~$goog.math.Integer","^1[","^26","^1P","~$goog.Uri","^27"]]],["^1>","instaparse/util.cljc"],[1548085352000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^X"]]],["^1>","goog/math/integer.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y"]]],["^1>","goog/uri/utils.js"],[1560546089000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^1P","^1Q","^1["]]],["^1>","instaparse/combinators_source.cljc"],[1548085352000,"^1K",["^ ","^1L",null,"^1M",["^J",[]],"^1N",["^Y","^X","^W","^1S"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","instaparse/repeat.cljc","^7",1,"^8",5,"^9",1,"^:",22],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",["^ ","^G","^H"],"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^S","^T","^U","^V","^H","^W","^W","^X","^X","^Y","^Y","^S","^S","^Z","^Z","~$c","^Q","^H","^H","^[","^Z","^10","^W","^U","^U"],"^11",["^J",["^12","^13"]],"~:shadow/js-access-global",["^J",["Error"]],"^14",null,"~:defs",["^ ","~$empty-result?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","instaparse/repeat.cljc","^7",12,"^8",7,"^9",12,"^:",20,"~:arglists",["^16",["~$quote",["^16",[["~$result"]]]]]],"^K","~$instaparse.repeat/empty-result?","^6","instaparse/repeat.cljc","^:",20,"~:method-params",["^16",[["^2E"]]],"~:protocol-impl",null,"~:arglists-meta",["^16",[null,null]],"^8",1,"~:variadic?",false,"^7",12,"~:ret-tag","~$boolean","^9",12,"~:max-fixed-arity",1,"~:fn-var",true,"^2C",["^16",["^2D",["^16",[["^2E"]]]]]],"~$repeat-parse-hiccup",["^ ","^2B",null,"^5",["^ ","^6","instaparse/repeat.cljc","^7",54,"^8",7,"^9",54,"^:",26,"^2C",["^16",["^2D",["^16",[["~$grammar","~$initial-parser","~$root-tag","~$text","~$segment"],["^2P","^2Q","^2R","^2S","^2T","~$index"]]]]],"~:top-fn",["^ ","^2J",false,"~:fixed-arity",6,"^2M",6,"^2G",["^16",[["^2P","^2Q","^2R","^2S","^2T"],["^2P","^2Q","^2R","^2S","^2T","^2U"]]],"^2C",["^16",[["^2P","^2Q","^2R","^2S","^2T"],["^2P","^2Q","^2R","^2S","^2T","^2U"]]],"^2I",["^16",[null,null]]]],"^K","~$instaparse.repeat/repeat-parse-hiccup","^6","instaparse/repeat.cljc","^:",26,"^2V",["^ ","^2J",false,"^2W",6,"^2M",6,"^2G",["^16",[["^2P","^2Q","^2R","^2S","^2T"],["^2P","^2Q","^2R","^2S","^2T","^2U"]]],"^2C",["^16",[["^2P","^2Q","^2R","^2S","^2T"],["^2P","^2Q","^2R","^2S","^2T","^2U"]]],"^2I",["^16",[null,null]]],"^2G",["^16",[["^2P","^2Q","^2R","^2S","^2T"],["^2P","^2Q","^2R","^2S","^2T","^2U"]]],"^2H",null,"^2W",6,"^2I",["^16",[null,null]],"^8",1,"^2J",false,"~:methods",[["^ ","^2W",5,"^2J",false,"~:tag","~$any"],["^ ","^2W",6,"^2J",false,"^2Z",["^J",[null,"~$clj","~$cljs.core/MetaFn","~$instaparse.gll/Failure","~$clj-nil"]]]],"^7",54,"^9",54,"^2M",6,"^2N",true,"^2C",["^16",[["^2P","^2Q","^2R","^2S","^2T"],["^2P","^2Q","^2R","^2S","^2T","^2U"]]]],"~$used-memory-optimization?",["^ ","^2B",null,"^5",["^ ","^6","instaparse/repeat.cljc","^7",218,"^8",7,"^9",218,"^:",32,"^2C",["^16",["^2D",["^16",[["~$tree"]]]]]],"^K","~$instaparse.repeat/used-memory-optimization?","^6","instaparse/repeat.cljc","^:",32,"^2G",["^16",[["^35"]]],"^2H",null,"^2I",["^16",[null,null]],"^8",1,"^2J",false,"^7",218,"^2K","^2L","^9",218,"^2M",1,"^2N",true,"^2C",["^16",["^2D",["^16",[["^35"]]]]]],"~$select-parse",["^ ","^2B",null,"^5",["^ ","^6","instaparse/repeat.cljc","^7",34,"^8",7,"^9",34,"^:",19,"^2C",["^16",["^2D",["^16",[["^2P","^2Q","^2S","^2T","^2U","~$parses"]]]]],"~:doc","Returns either:\n   [a-parse end-index a-list-of-valid-follow-up-parses]\n   [a-parse end-index nil] (successfully reached end of text)\n   nil (hit a dead-end with this strategy)"],"^K","~$instaparse.repeat/select-parse","^6","instaparse/repeat.cljc","^:",19,"^2G",["^16",[["^2P","^2Q","^2S","^2T","^2U","^38"]]],"^2H",null,"^2I",["^16",[null,null]],"^8",1,"^2J",false,"^7",34,"^2K",["^J",["~$cljs.core/IVector","^33"]],"^9",34,"^2M",6,"^2N",true,"^2C",["^16",["^2D",["^16",[["^2P","^2Q","^2S","^2T","^2U","^38"]]]]],"^39","Returns either:\n   [a-parse end-index a-list-of-valid-follow-up-parses]\n   [a-parse end-index nil] (successfully reached end of text)\n   nil (hit a dead-end with this strategy)"],"~$repeat-parse",["^ ","^2B",null,"^5",["^ ","^6","instaparse/repeat.cljc","^7",125,"^8",7,"^9",125,"^:",19,"^2C",["^16",["^2D",["^16",[["^2P","^2Q","~$output-format","^2S"],["^2P","^2Q","^3=","^2R","^2S"]]]]],"^2V",["^ ","^2J",false,"^2W",5,"^2M",5,"^2G",["^16",[["^2P","^2Q","^3=","^2S"],["^2P","^2Q","^3=","^2R","^2S"]]],"^2C",["^16",[["^2P","^2Q","^3=","^2S"],["^2P","^2Q","^3=","^2R","^2S"]]],"^2I",["^16",[null,null]]]],"^K","~$instaparse.repeat/repeat-parse","^6","instaparse/repeat.cljc","^:",19,"^2V",["^ ","^2J",false,"^2W",5,"^2M",5,"^2G",["^16",[["^2P","^2Q","^3=","^2S"],["^2P","^2Q","^3=","^2R","^2S"]]],"^2C",["^16",[["^2P","^2Q","^3=","^2S"],["^2P","^2Q","^3=","^2R","^2S"]]],"^2I",["^16",[null,null]]],"^2G",["^16",[["^2P","^2Q","^3=","^2S"],["^2P","^2Q","^3=","^2R","^2S"]]],"^2H",null,"^2W",5,"^2I",["^16",[null,null]],"^8",1,"^2J",false,"^2Y",[["^ ","^2W",4,"^2J",false,"^2Z","^2["],["^ ","^2W",5,"^2J",false,"^2Z",["^J",["^2[","^33"]]]],"^7",125,"^9",125,"^2M",5,"^2N",true,"^2C",["^16",[["^2P","^2Q","^3=","^2S"],["^2P","^2Q","^3=","^2R","^2S"]]]],"~$repeat-parse-enlive",["^ ","^2B",null,"^5",["^ ","^6","instaparse/repeat.cljc","^7",78,"^8",7,"^9",78,"^:",26,"^2C",["^16",["^2D",["^16",[["^2P","^2Q","^2R","^2S","^2T"],["^2P","^2Q","^2R","^2S","^2T","^2U"]]]]],"^2V",["^ ","^2J",false,"^2W",6,"^2M",6,"^2G",["^16",[["^2P","^2Q","^2R","^2S","^2T"],["^2P","^2Q","^2R","^2S","^2T","^2U"]]],"^2C",["^16",[["^2P","^2Q","^2R","^2S","^2T"],["^2P","^2Q","^2R","^2S","^2T","^2U"]]],"^2I",["^16",[null,null]]]],"^K","~$instaparse.repeat/repeat-parse-enlive","^6","instaparse/repeat.cljc","^:",26,"^2V",["^ ","^2J",false,"^2W",6,"^2M",6,"^2G",["^16",[["^2P","^2Q","^2R","^2S","^2T"],["^2P","^2Q","^2R","^2S","^2T","^2U"]]],"^2C",["^16",[["^2P","^2Q","^2R","^2S","^2T"],["^2P","^2Q","^2R","^2S","^2T","^2U"]]],"^2I",["^16",[null,null]]],"^2G",["^16",[["^2P","^2Q","^2R","^2S","^2T"],["^2P","^2Q","^2R","^2S","^2T","^2U"]]],"^2H",null,"^2W",6,"^2I",["^16",[null,null]],"^8",1,"^2J",false,"^2Y",[["^ ","^2W",5,"^2J",false,"^2Z","^2["],["^ ","^2W",6,"^2J",false,"^2Z",["^J",[null,"^30","^31","^32","^33"]]]],"^7",78,"^9",78,"^2M",6,"^2N",true,"^2C",["^16",[["^2P","^2Q","^2R","^2S","^2T"],["^2P","^2Q","^2R","^2S","^2T","^2U"]]]],"~$repeat-parse-with-header",["^ ","^2B",null,"^5",["^ ","^6","instaparse/repeat.cljc","^7",135,"^8",7,"^9",135,"^:",31,"^2C",["^16",["^2D",["^16",[["^2P","~$header-parser","~$repeating-parser","^3=","^2R","^2S"]]]]]],"^K","~$instaparse.repeat/repeat-parse-with-header","^6","instaparse/repeat.cljc","^:",31,"^2G",["^16",[["^2P","^3B","^3C","^3=","^2R","^2S"]]],"^2H",null,"^2I",["^16",[null,null]],"^8",1,"^2J",false,"^7",135,"^2K",["^J",[null,"^32"]],"^9",135,"^2M",6,"^2N",true,"^2C",["^16",["^2D",["^16",[["^2P","^3B","^3C","^3=","^2R","^2S"]]]]]],"~$repeat-parse-no-tag",["^ ","^2B",null,"^5",["^ ","^6","instaparse/repeat.cljc","^7",102,"^8",7,"^9",102,"^:",26,"^2C",["^16",["^2D",["^16",[["^2P","^2Q","^2S","^2T"],["^2P","^2Q","^2S","^2T","^2U"]]]]],"^2V",["^ ","^2J",false,"^2W",5,"^2M",5,"^2G",["^16",[["^2P","^2Q","^2S","^2T"],["^2P","^2Q","^2S","^2T","^2U"]]],"^2C",["^16",[["^2P","^2Q","^2S","^2T"],["^2P","^2Q","^2S","^2T","^2U"]]],"^2I",["^16",[null,null]]]],"^K","~$instaparse.repeat/repeat-parse-no-tag","^6","instaparse/repeat.cljc","^:",26,"^2V",["^ ","^2J",false,"^2W",5,"^2M",5,"^2G",["^16",[["^2P","^2Q","^2S","^2T"],["^2P","^2Q","^2S","^2T","^2U"]]],"^2C",["^16",[["^2P","^2Q","^2S","^2T"],["^2P","^2Q","^2S","^2T","^2U"]]],"^2I",["^16",[null,null]]],"^2G",["^16",[["^2P","^2Q","^2S","^2T"],["^2P","^2Q","^2S","^2T","^2U"]]],"^2H",null,"^2W",5,"^2I",["^16",[null,null]],"^8",1,"^2J",false,"^2Y",[["^ ","^2W",4,"^2J",false,"^2Z","^2["],["^ ","^2W",5,"^2J",false,"^2Z",["^J",[null,"^30","^31","^32","^33"]]]],"^7",102,"^9",102,"^2M",5,"^2N",true,"^2C",["^16",[["^2P","^2Q","^2S","^2T"],["^2P","^2Q","^2S","^2T","^2U"]]]],"~$parse-from-index",["^ ","^2B",null,"^5",["^ ","^6","instaparse/repeat.cljc","^7",29,"^8",7,"^9",29,"^:",23,"^2C",["^16",["^2D",["^16",[["^2P","^2Q","^2S","^2T","^2U"]]]]]],"^K","~$instaparse.repeat/parse-from-index","^6","instaparse/repeat.cljc","^:",23,"^2G",["^16",[["^2P","^2Q","^2S","^2T","^2U"]]],"^2H",null,"^2I",["^16",[null,null]],"^8",1,"^2J",false,"^7",29,"^2K","^2[","^9",29,"^2M",5,"^2N",true,"^2C",["^16",["^2D",["^16",[["^2P","^2Q","^2S","^2T","^2U"]]]]]],"~$failure-signal",["^ ","^5",["^ ","^6","instaparse/repeat.cljc","^7",17,"^8",17,"^9",17,"^:",31,"~:constant",true],"^K","~$instaparse.repeat/failure-signal","^3J",true,"^6","instaparse/repeat.cljc","^:",31,"^8",1,"^7",17,"^9",17,"^2Z","^32"],"~$try-repeating-parse-strategy-with-header",["^ ","^2B",null,"^5",["^ ","^6","instaparse/repeat.cljc","^7",171,"^8",7,"^9",171,"^:",47,"^2C",["^16",["^2D",["^16",[["^2P","^2S","~$start-production","~$start-rule","^3="]]]]]],"^K","~$instaparse.repeat/try-repeating-parse-strategy-with-header","^6","instaparse/repeat.cljc","^:",47,"^2G",["^16",[["^2P","^2S","^3M","^3N","^3="]]],"^2H",null,"^2I",["^16",[null,null]],"^8",1,"^2J",false,"^7",171,"^2K",["^J",[null,"^32"]],"^9",171,"^2M",5,"^2N",true,"^2C",["^16",["^2D",["^16",[["^2P","^2S","^3M","^3N","^3="]]]]]],"~$get-end",["^ ","^2B",null,"^5",["^ ","^6","instaparse/repeat.cljc","^7",19,"^8",7,"^9",19,"^:",14,"^2C",["^16",["^2D",["^16",[["~$parse"],["^3Q","^2U"]]]]],"^2V",["^ ","^2J",false,"^2W",2,"^2M",2,"^2G",["^16",[["^3Q"],["^3Q","^2U"]]],"^2C",["^16",[["^3Q"],["^3Q","^2U"]]],"^2I",["^16",[null,null]]]],"^K","~$instaparse.repeat/get-end","^6","instaparse/repeat.cljc","^:",14,"^2V",["^ ","^2J",false,"^2W",2,"^2M",2,"^2G",["^16",[["^3Q"],["^3Q","^2U"]]],"^2C",["^16",[["^3Q"],["^3Q","^2U"]]],"^2I",["^16",[null,null]]],"^2G",["^16",[["^3Q"],["^3Q","^2U"]]],"^2H",null,"^2W",2,"^2I",["^16",[null,null]],"^8",1,"^2J",false,"^2Y",[["^ ","^2W",1,"^2J",false,"^2Z","~$number"],["^ ","^2W",2,"^2J",false,"^2Z","^3S"]],"^7",19,"^9",19,"^2M",2,"^2N",true,"^2C",["^16",[["^3Q"],["^3Q","^2U"]]]],"~$try-repeating-parse-strategy",["^ ","^2B",null,"^5",["^ ","^6","instaparse/repeat.cljc","^7",187,"^8",7,"^9",187,"^:",35,"^2C",["^16",["^2D",["^16",[["~$parser","^2S","^3M"]]]]]],"^K","~$instaparse.repeat/try-repeating-parse-strategy","^6","instaparse/repeat.cljc","^:",35,"^2G",["^16",[["^3U","^2S","^3M"]]],"^2H",null,"^2I",["^16",[null,null]],"^8",1,"^2J",false,"^7",187,"^2K",["^J",[null,"^2[","^32","^33"]],"^9",187,"^2M",3,"^2N",true,"^2C",["^16",["^2D",["^16",[["^3U","^2S","^3M"]]]]]]],"^13",["^ ","^H","^H","^X","^X","^V","^H"],"~:cljs.analyzer/constants",["^ ","^11",["^J",["~:cat","~:else","~:instaparse.gll/end-index","~:content","~:memory","~:grammar","~:output-format","~:star","~:hiccup","~:hide","~:enlive","~:parser","~:instaparse.gll/start-index","~:red","~:plus","~:optimize","^2Z","~:parsers"]],"~:order",["^2Z","^3[","^3Y","^4;","^48","^3Z","^40","^44","^46","^45","^47","^43","^4<","^3X","^4:","^49","^41","^42"]],"^1:",["^ ","^12",["^J",[]],"^13",["^J",[]]],"^1;",["^ "],"^1<",["^Y","^X","^H","^Q","^S","^U","^W","^Z"]],"^N","^L","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1J",[["^4@","~:static-fns"],true,["^4@","~:elide-asserts"],false,["^4@","~:optimize-constants"],null,["^4@","^1A"],null,["^4@","~:external-config"],null,["^4@","~:tooling-config"],null,["^4@","~:emit-constants"],null,["^4@","~:load-tests"],null,["^4@","~:infer-externs"],"~:auto",["^4@","^1C"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4@","~:fn-invoke-direct"],null,["^4@","~:source-map"],"/dev/null"]]]