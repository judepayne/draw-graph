["^ ","~:output",["^ ","~:js","goog.provide('promesa.core');\ngoog.require('cljs.core');\ngoog.require('promesa.impl.promise');\ngoog.require('promesa.impl.proto');\ngoog.require('promesa.impl.scheduler');\npromesa.core.Promise = promesa.impl.promise.Promise;\n/**\n * Schedule a callable to be executed after the `ms` delay\n *   is reached.\n * \n *   In JVM it uses a scheduled executor service and in JS\n *   it uses the `setTimeout` function.\n */\npromesa.core.schedule = (function promesa$core$schedule(ms,func){\nreturn promesa.impl.scheduler.schedule(ms,func);\n});\n/**\n * Return a resolved promise with provided value.\n */\npromesa.core.resolved = (function promesa$core$resolved(v){\nreturn promesa.impl.promise.resolved(v);\n});\n/**\n * Return a rejected promise with provided reason.\n */\npromesa.core.rejected = (function promesa$core$rejected(v){\nreturn promesa.impl.promise.rejected(v);\n});\n/**\n * The promise constructor.\n */\npromesa.core.promise = (function promesa$core$promise(v){\nreturn promesa.impl.proto._promise(v);\n});\n/**\n * Return true if `v` is a promise instance.\n */\npromesa.core.promise_QMARK_ = (function promesa$core$promise_QMARK_(v){\nreturn (v instanceof promesa.core.Promise);\n});\n/**\n * Returns true if promise `p` is already fulfilled.\n */\npromesa.core.resolved_QMARK_ = (function promesa$core$resolved_QMARK_(p){\nreturn promesa.impl.proto._resolved_QMARK_(p);\n});\n/**\n * Returns true if promise `p` is already rejected.\n */\npromesa.core.rejected_QMARK_ = (function promesa$core$rejected_QMARK_(p){\nreturn promesa.impl.proto._rejected_QMARK_(p);\n});\n/**\n * Returns true if promise `p` is stil pending.\n */\npromesa.core.pending_QMARK_ = (function promesa$core$pending_QMARK_(p){\nreturn promesa.impl.proto._pending_QMARK_(p);\n});\n/**\n * Returns the current promise value.\n */\npromesa.core.extract = (function promesa$core$extract(p){\nreturn promesa.impl.proto._extract(p);\n});\n/**\n * Returns true if promise `p` is already done.\n */\npromesa.core.done_QMARK_ = cljs.core.complement(promesa.core.pending_QMARK_);\n/**\n * Apply a function to the promise value and\n *   return a new promise with the result.\n */\npromesa.core.map = (function promesa$core$map(f,p){\nreturn promesa.impl.proto._map(p,f);\n});\n/**\n * Same as `map` but removes one level of\n *   promise neesting. Useful when the map function\n *   returns a promise instead of value.\n * \n *   In JS environment this function is analogous\n *   to `map` because the promise abstraction overloads\n *   the `map` operator.\n */\npromesa.core.mapcat = (function promesa$core$mapcat(f,p){\nreturn promesa.impl.proto._bind(p,f);\n});\n/**\n * A chain helper for promises.\n */\npromesa.core.bind = (function promesa$core$bind(p,f){\nreturn promesa.impl.proto._bind(p,f);\n});\n/**\n * Same as `map` but with parameters inverted\n *   for convenience and for familiarity with\n *   javascript's promises `.then` operator.\n */\npromesa.core.then = (function promesa$core$then(p,f){\nreturn promesa.impl.proto._map(p,f);\n});\n/**\n * Like then but accepts multiple parameters.\n */\npromesa.core.chain = (function promesa$core$chain(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___38979 = arguments.length;\nvar i__4731__auto___38980 = (0);\nwhile(true){\nif((i__4731__auto___38980 < len__4730__auto___38979)){\nargs__4736__auto__.push((arguments[i__4731__auto___38980]));\n\nvar G__38981 = (i__4731__auto___38980 + (1));\ni__4731__auto___38980 = G__38981;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn promesa.core.chain.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\npromesa.core.chain.cljs$core$IFn$_invoke$arity$variadic = (function (p,funcs){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__38953_SHARP_,p2__38954_SHARP_){\nreturn promesa.core.then(p1__38953_SHARP_,p2__38954_SHARP_);\n}),p,funcs);\n});\n\npromesa.core.chain.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\npromesa.core.chain.cljs$lang$applyTo = (function (seq38955){\nvar G__38956 = cljs.core.first(seq38955);\nvar seq38955__$1 = cljs.core.next(seq38955);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__38956,seq38955__$1);\n});\n\npromesa.core.branch = (function promesa$core$branch(p,success,failure){\nreturn promesa.impl.proto._catch(promesa.impl.proto._map(p,success),failure);\n});\n/**\n * Catch all promise chain helper.\n */\npromesa.core.catch$ = (function promesa$core$catch(var_args){\nvar G__38965 = arguments.length;\nswitch (G__38965) {\ncase 2:\nreturn promesa.core.catch$.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.catch$.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\npromesa.core.catch$.cljs$core$IFn$_invoke$arity$2 = (function (p,f){\nreturn promesa.impl.proto._catch(p,f);\n});\n\npromesa.core.catch$.cljs$core$IFn$_invoke$arity$3 = (function (p,pred_or_type,f){\nvar accept_QMARK_ = ((cljs.core.ifn_QMARK_(pred_or_type))?pred_or_type:(function (p1__38963_SHARP_){\nreturn (p1__38963_SHARP_ instanceof pred_or_type);\n}));\nreturn promesa.impl.proto._catch(p,((function (accept_QMARK_){\nreturn (function (e){\nif(cljs.core.truth_((accept_QMARK_.cljs$core$IFn$_invoke$arity$1 ? accept_QMARK_.cljs$core$IFn$_invoke$arity$1(e) : accept_QMARK_.call(null,e)))){\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(e) : f.call(null,e));\n} else {\nreturn promesa.impl.promise.rejected(e);\n}\n});})(accept_QMARK_))\n);\n});\n\npromesa.core.catch$.cljs$lang$maxFixedArity = 3;\n\n/**\n * Same as `catch` but with parameters inverted.\n */\npromesa.core.error = (function promesa$core$error(var_args){\nvar G__38967 = arguments.length;\nswitch (G__38967) {\ncase 2:\nreturn promesa.core.error.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.error.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\npromesa.core.error.cljs$core$IFn$_invoke$arity$2 = (function (f,p){\nreturn promesa.core.catch$.cljs$core$IFn$_invoke$arity$2(p,f);\n});\n\npromesa.core.error.cljs$core$IFn$_invoke$arity$3 = (function (f,type,p){\nreturn promesa.core.catch$.cljs$core$IFn$_invoke$arity$3(p,type,f);\n});\n\npromesa.core.error.cljs$lang$maxFixedArity = 3;\n\n/**\n * A short alias for `error` function.\n */\npromesa.core.err = promesa.core.error;\n/**\n * Attach handler to promise that will be\n *   executed independently if promise is\n *   resolved or rejected.\n */\npromesa.core.finally$ = (function promesa$core$finally(p,callback){\nreturn p.finally(callback);\n});\n/**\n * Given an array of promises, return a promise\n *   that is fulfilled  when all the items in the\n *   array are fulfilled.\n */\npromesa.core.all = (function promesa$core$all(promises){\nreturn promesa.core.then(promesa.core.Promise.all(cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(promises)),cljs.core.vec);\n});\n/**\n * Given an array of promises, return a promise\n *   that is fulfilled when first one item in the\n *   array is fulfilled.\n */\npromesa.core.any = (function promesa$core$any(promises){\nreturn promesa.core.Promise.any(cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(promises));\n});\n/**\n * Cancel the promise.\n */\npromesa.core.cancel_BANG_ = (function promesa$core$cancel_BANG_(p){\npromesa.impl.proto._cancel(p);\n\nreturn p;\n});\n/**\n * Return true if `v` is a cancelled promise.\n */\npromesa.core.cancelled_QMARK_ = (function promesa$core$cancelled_QMARK_(v){\nreturn promesa.impl.proto._cancelled_QMARK_(v);\n});\n/**\n * Given a function that accepts a callback as the last argument return other\n *   function that returns a promise. Callback is expected to take single\n *   parameter (result of a computation).\n */\npromesa.core.promisify = (function promesa$core$promisify(callable){\nreturn (function() { \nvar G__38984__delegate = function (args){\nreturn promesa.core.promise((function (resolve,reject){\nvar args__$1 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(args),resolve);\ntry{return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(callable,args__$1);\n}catch (e38972){if((e38972 instanceof Error)){\nvar e = e38972;\nreturn (reject.cljs$core$IFn$_invoke$arity$1 ? reject.cljs$core$IFn$_invoke$arity$1(e) : reject.call(null,e));\n} else {\nthrow e38972;\n\n}\n}}));\n};\nvar G__38984 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__38985__i = 0, G__38985__a = new Array(arguments.length -  0);\nwhile (G__38985__i < G__38985__a.length) {G__38985__a[G__38985__i] = arguments[G__38985__i + 0]; ++G__38985__i;}\n  args = new cljs.core.IndexedSeq(G__38985__a,0,null);\n} \nreturn G__38984__delegate.call(this,args);};\nG__38984.cljs$lang$maxFixedArity = 0;\nG__38984.cljs$lang$applyTo = (function (arglist__38986){\nvar args = cljs.core.seq(arglist__38986);\nreturn G__38984__delegate(args);\n});\nG__38984.cljs$core$IFn$_invoke$arity$variadic = G__38984__delegate;\nreturn G__38984;\n})()\n;\n});\n/**\n * Returns a cancellable promise that will be fulfilled\n *   with this promise's fulfillment value or rejection reason.\n *   However, if this promise is not fulfilled or rejected\n *   within `ms` milliseconds, the returned promise is cancelled\n *   with a TimeoutError\n */\npromesa.core.timeout = (function promesa$core$timeout(var_args){\nvar G__38974 = arguments.length;\nswitch (G__38974) {\ncase 2:\nreturn promesa.core.timeout.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn promesa.core.timeout.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\npromesa.core.timeout.cljs$core$IFn$_invoke$arity$2 = (function (p,t){\nreturn p.timeout(t);\n});\n\npromesa.core.timeout.cljs$core$IFn$_invoke$arity$3 = (function (p,t,v){\nreturn p.timeout(t,v);\n});\n\npromesa.core.timeout.cljs$lang$maxFixedArity = 3;\n\n/**\n * Given a timeout in miliseconds and optional\n *   value, returns a promise that will fulfilled\n *   with provided value (or nil) after the\n *   time is reached.\n */\npromesa.core.delay = (function promesa$core$delay(var_args){\nvar G__38976 = arguments.length;\nswitch (G__38976) {\ncase 1:\nreturn promesa.core.delay.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn promesa.core.delay.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\npromesa.core.delay.cljs$core$IFn$_invoke$arity$1 = (function (t){\nreturn promesa.core.delay.cljs$core$IFn$_invoke$arity$2(t,null);\n});\n\npromesa.core.delay.cljs$core$IFn$_invoke$arity$2 = (function (t,v){\nreturn promesa.core.Promise.delay(t).then(cljs.core.constantly(v));\n});\n\npromesa.core.delay.cljs$lang$maxFixedArity = 2;\n\n/**\n * A helper for start promise chain without worry about\n *   synchronous or asynchronous exceptions. Returns a promise\n *   resolved with the return value of the callback.\n */\npromesa.core.attempt = (function promesa$core$attempt(callback){\nreturn promesa.core.promise((function (resolve){\nvar G__38977 = (callback.cljs$core$IFn$_invoke$arity$0 ? callback.cljs$core$IFn$_invoke$arity$0() : callback.call(null));\nreturn (resolve.cljs$core$IFn$_invoke$arity$1 ? resolve.cljs$core$IFn$_invoke$arity$1(G__38977) : resolve.call(null,G__38977));\n}));\n});\npromesa.core.await$ = (function promesa$core$await(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___38989 = arguments.length;\nvar i__4731__auto___38990 = (0);\nwhile(true){\nif((i__4731__auto___38990 < len__4730__auto___38989)){\nargs__4736__auto__.push((arguments[i__4731__auto___38990]));\n\nvar G__38991 = (i__4731__auto___38990 + (1));\ni__4731__auto___38990 = G__38991;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn promesa.core.await$.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\npromesa.core.await$.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Should be only used in alet macro.\",cljs.core.PersistentArrayMap.EMPTY);\n});\n\npromesa.core.await$.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\npromesa.core.await$.cljs$lang$applyTo = (function (seq38978){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq38978));\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","promesa/core.cljc","~:line",25,"~:column",5,"~:end-line",25,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",["~$map","~$delay","~$mapcat","~$await","~$spread","~$promise"]],"~:name","~$promesa.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$promesa.impl.promise","^U","~$pm","^U","~$promesa.impl.proto","^W","~$pt","^W","~$promesa.impl.scheduler","^Y","~$ps","^Y","~$cljs.core","^[","~$goog","^10"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^[","^["],"~:form",["~#list",["~$ns","^P",["^16",["~:refer-clojure","~:exclude",["^J","^M","^N","^L","^I","^K"]]],["^16",["^12",["^U","~:as","^V"],["^W","^1:","^X"],["^Y","^1:","^Z"]]]]],"~:flags",["^ ","^12",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^10","^[","^U","^W","^Y"]],"^R","^P","~:resource-id",["~:shadow.build.classpath/resource","promesa/core.cljc"],"~:compiled-at",1560836394162,"~:resource-name","promesa/core.cljc","~:warnings",[],"~:source",";; Copyright (c) 2015-2016 Andrey Antukh <niwi@niwi.nz>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns promesa.core\n  (:refer-clojure :exclude [delay spread promise await map mapcat])\n  (:require [promesa.impl.promise :as pm]\n            [promesa.impl.proto :as pt]\n            [promesa.impl.scheduler :as ps])\n  #?(:clj\n     (:import java.util.concurrent.CompletableFuture\n              java.util.concurrent.CompletionStage)))\n\n;; --- Global Constants\n\n#?(:cljs (def ^:const Promise pm/Promise))\n\n#?(:clj\n   (defn set-executor!\n     \"Replace the default executor instance with\n     your own instance.\"\n     [executor]\n     (alter-var-root #'pm/+executor+ (constantly executor))))\n\n;; --- Scheduling helpers\n\n(defn schedule\n  \"Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function.\"\n  [ms func]\n  (ps/schedule ms func))\n\n;; --- Promise\n\n(defn resolved\n  \"Return a resolved promise with provided value.\"\n  [v]\n  (pm/resolved v))\n\n(defn rejected\n  \"Return a rejected promise with provided reason.\"\n  [v]\n  (pm/rejected v))\n\n(defn promise\n  \"The promise constructor.\"\n  [v]\n  (pt/-promise v))\n\n(defn promise?\n  \"Return true if `v` is a promise instance.\"\n  [v]\n  #?(:clj (instance? CompletionStage v)\n     :cljs (instance? Promise v)))\n\n;; Predicates\n\n(defn resolved?\n  \"Returns true if promise `p` is already fulfilled.\"\n  [p]\n  (pt/-resolved? p))\n\n(defn rejected?\n  \"Returns true if promise `p` is already rejected.\"\n  [p]\n  (pt/-rejected? p))\n\n(defn pending?\n  \"Returns true if promise `p` is stil pending.\"\n  [p]\n  (pt/-pending? p))\n\n(defn extract\n  \"Returns the current promise value.\"\n  [p]\n  (pt/-extract p))\n\n(def done?\n  \"Returns true if promise `p` is already done.\"\n  (complement pending?))\n\n;; Chaining\n\n(defn map\n  \"Apply a function to the promise value and\n  return a new promise with the result.\"\n  [f p]\n  (pt/-map p f))\n\n(defn mapcat\n  \"Same as `map` but removes one level of\n  promise neesting. Useful when the map function\n  returns a promise instead of value.\n\n  In JS environment this function is analogous\n  to `map` because the promise abstraction overloads\n  the `map` operator.\"\n  [f p]\n  (pt/-bind p f))\n\n(defn bind\n  \"A chain helper for promises.\"\n  [p f]\n  (pt/-bind p f))\n\n(defn then\n  \"Same as `map` but with parameters inverted\n  for convenience and for familiarity with\n  javascript's promises `.then` operator.\"\n  [p f]\n  (pt/-map p f))\n\n(defn chain\n  \"Like then but accepts multiple parameters.\"\n  [p & funcs]\n  (reduce #(then %1 %2) p funcs))\n\n(defn branch\n  [p success failure]\n  (-> p\n      (pt/-map success)\n      (pt/-catch failure)))\n\n(defn catch\n  \"Catch all promise chain helper.\"\n  ([p f]\n   (pt/-catch p f))\n  ([p pred-or-type f]\n   (let [accept? (if (ifn? pred-or-type)\n                   pred-or-type\n                   #(instance? pred-or-type %))]\n     (pt/-catch p (fn [e]\n                    (if (accept? e)\n                      (f e)\n                      (pm/rejected e)))))))\n\n(defn error\n  \"Same as `catch` but with parameters inverted.\"\n  ([f p] (catch p f))\n  ([f type p] (catch p type f)))\n\n(def err\n  \"A short alias for `error` function.\"\n  error)\n\n(defn finally\n  \"Attach handler to promise that will be\n  executed independently if promise is\n  resolved or rejected.\"\n  [p callback]\n  #?(:clj (-> p\n              (then #(callback))\n              (catch #(callback)))\n     :cljs (.finally p callback)))\n\n(defn all\n  \"Given an array of promises, return a promise\n  that is fulfilled  when all the items in the\n  array are fulfilled.\"\n  [promises]\n  #?(:cljs (then (.all Promise (into-array promises)) vec)\n     :clj (let [promises (clojure.core/map pt/-promise promises)]\n            (then (->> (into-array CompletableFuture promises)\n                       (CompletableFuture/allOf))\n                  (fn [_]\n                    (mapv pt/-extract promises))))))\n\n(defn any\n  \"Given an array of promises, return a promise\n  that is fulfilled when first one item in the\n  array is fulfilled.\"\n  [promises]\n  #?(:cljs (.any Promise (into-array promises))\n     :clj (->> (clojure.core/map pt/-promise promises)\n               (into-array CompletableFuture)\n               (CompletableFuture/anyOf))))\n\n;; Cancellation\n\n(defn cancel!\n  \"Cancel the promise.\"\n  [p]\n  (pt/-cancel p)\n  p)\n\n(defn cancelled?\n  \"Return true if `v` is a cancelled promise.\"\n  [v]\n  (pt/-cancelled? v))\n\n;; Utils\n\n(defn promisify\n  \"Given a function that accepts a callback as the last argument return other\n  function that returns a promise. Callback is expected to take single\n  parameter (result of a computation).\"\n  [callable]\n  (fn [& args]\n    (promise (fn [resolve reject]\n               (let [args (-> (vec args)\n                              (conj resolve))]\n                 (try\n                   (apply callable args)\n                   (catch #?(:clj Throwable :cljs js/Error) e\n                     (reject e))))))))\n\n#?(:cljs\n   (defn timeout\n     \"Returns a cancellable promise that will be fulfilled\n     with this promise's fulfillment value or rejection reason.\n     However, if this promise is not fulfilled or rejected\n     within `ms` milliseconds, the returned promise is cancelled\n     with a TimeoutError\"\n     ([p t] (.timeout p t))\n     ([p t v] (.timeout p t v))))\n\n(defn delay\n  \"Given a timeout in miliseconds and optional\n  value, returns a promise that will fulfilled\n  with provided value (or nil) after the\n  time is reached.\"\n  ([t] (delay t nil))\n  ([t v]\n   #?(:cljs (.then (.delay Promise t)\n                   (constantly v))\n      :clj (let [p (CompletableFuture.)]\n             (schedule t #(.complete p v))\n             p))))\n\n(defn attempt\n  \"A helper for start promise chain without worry about\n  synchronous or asynchronous exceptions. Returns a promise\n  resolved with the return value of the callback.\"\n  [callback]\n  #?(:cljs (promise (fn [resolve] (resolve (callback))))\n     :clj  (promise (fn [resolve reject]\n                      (let [result (callback)]\n                        (if (promise? result)\n                          (then result resolve)\n                          (resolve result)))))))\n\n#?(:clj\n   (defmacro do*\n     \"A sugar syntax on top of `attempt`.\"\n     [& body]\n     `(attempt #(do ~@body))))\n\n(defn await\n  [& args]\n  (throw (ex-info \"Should be only used in alet macro.\" {})))\n\n#?(:clj\n   (defmacro alet\n     \"A `let` alternative that always returns promise and allows\n     use `await` marker function in order to emulate the async/await\n     syntax and make the let expression look like synchronous where\n     async operations are performed.\"\n     [bindings & body]\n     (->> (reverse (partition 2 bindings))\n          (reduce (fn [acc [l r]]\n                    (if (and (coll? r) (symbol? (first r)))\n                      (let [mark (name (first r))]\n                        (if (= mark \"await\")\n                          `(bind ~(second r) (fn [~l] ~acc))\n                          `(let [~l ~r] ~acc)))\n                      `(let [~l ~r] ~acc)))\n                  `(promise (do ~@body))))))\n\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["promesa.core/Promise","promesa.impl.promise/Promise","promesa.core/schedule","ms","func","promesa.impl.scheduler/schedule","promesa.core/resolved","v","promesa.impl.promise/resolved","promesa.core/rejected","promesa.impl.promise/rejected","promesa.core/promise","promesa.impl.proto/-promise","promesa.core/promise?","promesa.core/resolved?","p","promesa.impl.proto/-resolved?","promesa.core/rejected?","promesa.impl.proto/-rejected?","promesa.core/pending?","promesa.impl.proto/-pending?","promesa.core/extract","promesa.impl.proto/-extract","promesa.core/done?","cljs.core/complement","promesa.core/map","f","promesa.impl.proto/-map","promesa.core/mapcat","promesa.impl.proto/-bind","promesa.core/bind","promesa.core/then","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","promesa.core/chain","seq38955","G__38956","cljs.core/first","cljs.core/next","self__4717__auto__","funcs","p1__38953#","p2__38954#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","promesa.core/branch","success","failure","promesa.impl.proto/-catch","G__38965","promesa.core/catch","js/Error","pred-or-type","accept?","p1__38963#","cljs.core/ifn?","e","G__38967","promesa.core/error","promesa.core.catch$.cljs$core$IFn$_invoke$arity$2","type","promesa.core.catch$.cljs$core$IFn$_invoke$arity$3","promesa.core/err","promesa.core/finally","callback","promesa.core/all","promises","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core/vec","promesa.core/any","promesa.core/cancel!","promesa.impl.proto/-cancel","promesa.core/cancelled?","promesa.impl.proto/-cancelled?","promesa.core/promisify","callable","args","resolve","reject","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","e38972","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__38974","promesa.core/timeout","t","G__38976","promesa.core/delay","promesa.core.delay.cljs$core$IFn$_invoke$arity$2","cljs.core/constantly","promesa.core/attempt","G__38977","promesa.core/await","seq38978","self__4718__auto__","cljs.core/seq","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2"]]],"~:cache-keys",["~#cmap",[["~:macro","^["],[1559826623000],["^1?","goog/math/math.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^10","~$goog.array","~$goog.asserts"]]],["^1?","goog/array/array.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","^1R"]]],["~:shadow.build.npm/resource","node_modules/bluebird/js/browser/bluebird.js"],[1560546091000,1560546091000,1560546832000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["~$shadow.js","~$module$node_modules$process$browser"]]],["^1?","goog/debug/error.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10"]]],["^1?","promesa/impl/scheduler.cljc"],[1547383501000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","^[","^W"]]],["^1?","goog/dom/nodetype.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10"]]],["^1?","shadow/js.js"],[1560546091000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10"]]],["^1?","goog/object/object.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^1?","goog/math/long.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","^1R","~$goog.reflect"]]],["^1?","goog/string/internal.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10"]]],["^1?","goog/functions/functions.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10"]]],["^1?","goog/structs/map.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1?","promesa/impl/proto.cljc"],[1547383501000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","^["]]],["^1?","goog/asserts/asserts.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1?","goog/uri/uri.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","^1Q","^1R","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1S","node_modules/process/browser.js"],[1560546091000,1560546091000,1559925118000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^1T"]]],["^1?","goog/base.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",[]]],["^1?","promesa/core.cljc"],[1547383501000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","^[","^U","^W","^Y"]]],["^1?","goog/structs/structs.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","^1Q","~$goog.object"]]],["^1?","org/bluebird.cljs"],[1560546090000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","^[","~$module$node_modules$bluebird$js$browser$bluebird"]]],["^1?","goog/string/string.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","~$goog.string.internal"]]],["^1?","goog/reflect/reflect.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10"]]],["^1?","goog/string/stringbuffer.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10"]]],["^1?","goog/iter/iter.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","^1Q","^1R","~$goog.functions","~$goog.math"]]],["^1?","cljs/core.cljs"],[1559826623000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["~$goog.math.Long","~$goog.math.Integer","^20","^26","^1Q","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1?","goog/math/integer.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10"]]],["^1?","goog/uri/utils.js"],[1560546089000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","^1Q","^1R","^20"]]],["^1?","promesa/impl/promise.cljc"],[1547383501000,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^10","^[","~$org.bluebird","^W"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","promesa/core.cljc","^7",25,"^8",5,"^9",25,"^:",17],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",["^I","^J","^K","^L","^M","^N"]],"^O","^P","^S",null,"^T",["^ ","^U","^U","^V","^U","^W","^W","^X","^W","^Y","^Y","^Z","^Y","^[","^[","^10","^10"],"^11",["^H",["^12"]],"~:shadow/js-access-global",["^H",["Error"]],"^13",null,"~:defs",["^ ","~$timeout",["^ ","~:protocol-inline",null,"^5",["^ ","^6","promesa/core.cljc","^7",231,"^8",10,"^9",231,"^:",17,"~:arglists",["^16",["~$quote",["^16",[["~$p","~$t"],["~$p","~$t","~$v"]]]]],"~:doc","Returns a cancellable promise that will be fulfilled\n     with this promise's fulfillment value or rejection reason.\n     However, if this promise is not fulfilled or rejected\n     within `ms` milliseconds, the returned promise is cancelled\n     with a TimeoutError","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",["^16",[["~$p","~$t"],["~$p","~$t","~$v"]]],"^2E",["^16",[["~$p","~$t"],["~$p","~$t","~$v"]]],"~:arglists-meta",["^16",[null,null]]]],"^O","~$promesa.core/timeout","^6","promesa/core.cljc","^:",17,"^2H",["^ ","^2I",false,"^2J",3,"^2K",3,"^2L",["^16",[["~$p","~$t"],["~$p","~$t","~$v"]]],"^2E",["^16",[["~$p","~$t"],["~$p","~$t","~$v"]]],"^2M",["^16",[null,null]]],"^2L",["^16",[["~$p","~$t"],["~$p","~$t","~$v"]]],"~:protocol-impl",null,"^2J",3,"^2M",["^16",[null,null]],"^8",4,"^2I",false,"~:methods",[["^ ","^2J",2,"^2I",false,"~:tag","~$any"],["^ ","^2J",3,"^2I",false,"^2Q","^2R"]],"^7",231,"^9",231,"^2K",3,"~:fn-var",true,"^2E",["^16",[["~$p","~$t"],["~$p","~$t","~$v"]]],"^2G","Returns a cancellable promise that will be fulfilled\n     with this promise's fulfillment value or rejection reason.\n     However, if this promise is not fulfilled or rejected\n     within `ms` milliseconds, the returned promise is cancelled\n     with a TimeoutError"],"~$Promise",["^ ","^5",["^ ","^6","promesa/core.cljc","^7",36,"^8",23,"^9",36,"^:",30,"~:const",true],"^O","~$promesa.core/Promise","^6","promesa/core.cljc","^:",30,"^8",10,"^2U",true,"^7",36,"^9",36,"^2Q","~$js"],"~$branch",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",141,"^8",7,"^9",141,"^:",13,"^2E",["^16",["^2F",["^16",[["~$p","~$success","~$failure"]]]]]],"^O","~$promesa.core/branch","^6","promesa/core.cljc","^:",13,"^2L",["^16",[["~$p","^2Y","^2Z"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",141,"~:ret-tag","^2R","^9",141,"^2K",3,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$p","^2Y","^2Z"]]]]]],"~$attempt",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",253,"^8",7,"^9",253,"^:",14,"^2E",["^16",["^2F",["^16",[["~$callback"]]]]],"^2G","A helper for start promise chain without worry about\n  synchronous or asynchronous exceptions. Returns a promise\n  resolved with the return value of the callback."],"^O","~$promesa.core/attempt","^6","promesa/core.cljc","^:",14,"^2L",["^16",[["^32"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",253,"^30","^2R","^9",253,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["^32"]]]]],"^2G","A helper for start promise chain without worry about\n  synchronous or asynchronous exceptions. Returns a promise\n  resolved with the return value of the callback."],"^I",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",107,"^8",7,"^9",107,"^:",10,"^2E",["^16",["^2F",["^16",[["~$f","~$p"]]]]],"^2G","Apply a function to the promise value and\n  return a new promise with the result."],"^O","~$promesa.core/map","^6","promesa/core.cljc","^:",10,"^2L",["^16",[["~$f","~$p"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",107,"^30","^2R","^9",107,"^2K",2,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$f","~$p"]]]]],"^2G","Apply a function to the promise value and\n  return a new promise with the result."],"^J",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",240,"^8",7,"^9",240,"^:",12,"^2E",["^16",["^2F",["^16",[["~$t"],["~$t","~$v"]]]]],"^2G","Given a timeout in miliseconds and optional\n  value, returns a promise that will fulfilled\n  with provided value (or nil) after the\n  time is reached.","^2H",["^ ","^2I",false,"^2J",2,"^2K",2,"^2L",["^16",[["~$t"],["~$t","~$v"]]],"^2E",["^16",[["~$t"],["~$t","~$v"]]],"^2M",["^16",[null,null]]]],"^O","~$promesa.core/delay","^6","promesa/core.cljc","^:",12,"^2H",["^ ","^2I",false,"^2J",2,"^2K",2,"^2L",["^16",[["~$t"],["~$t","~$v"]]],"^2E",["^16",[["~$t"],["~$t","~$v"]]],"^2M",["^16",[null,null]]],"^2L",["^16",[["~$t"],["~$t","~$v"]]],"^2O",null,"^2J",2,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^2P",[["^ ","^2J",1,"^2I",false,"^2Q","^2R"],["^ ","^2J",2,"^2I",false,"^2Q","^2W"]],"^7",240,"^9",240,"^2K",2,"^2S",true,"^2E",["^16",[["~$t"],["~$t","~$v"]]],"^2G","Given a timeout in miliseconds and optional\n  value, returns a promise that will fulfilled\n  with provided value (or nil) after the\n  time is reached."],"~$resolved?",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",81,"^8",7,"^9",81,"^:",16,"^2E",["^16",["^2F",["^16",[["~$p"]]]]],"^2G","Returns true if promise `p` is already fulfilled."],"^O","~$promesa.core/resolved?","^6","promesa/core.cljc","^:",16,"^2L",["^16",[["~$p"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",81,"^30","^2R","^9",81,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$p"]]]]],"^2G","Returns true if promise `p` is already fulfilled."],"^K",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",113,"^8",7,"^9",113,"^:",13,"^2E",["^16",["^2F",["^16",[["~$f","~$p"]]]]],"^2G","Same as `map` but removes one level of\n  promise neesting. Useful when the map function\n  returns a promise instead of value.\n\n  In JS environment this function is analogous\n  to `map` because the promise abstraction overloads\n  the `map` operator."],"^O","~$promesa.core/mapcat","^6","promesa/core.cljc","^:",13,"^2L",["^16",[["~$f","~$p"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",113,"^30","^2R","^9",113,"^2K",2,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$f","~$p"]]]]],"^2G","Same as `map` but removes one level of\n  promise neesting. Useful when the map function\n  returns a promise instead of value.\n\n  In JS environment this function is analogous\n  to `map` because the promise abstraction overloads\n  the `map` operator."],"~$cancelled?",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",209,"^8",7,"^9",209,"^:",17,"^2E",["^16",["^2F",["^16",[["~$v"]]]]],"^2G","Return true if `v` is a cancelled promise."],"^O","~$promesa.core/cancelled?","^6","promesa/core.cljc","^:",17,"^2L",["^16",[["~$v"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",209,"^30","^2R","^9",209,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$v"]]]]],"^2G","Return true if `v` is a cancelled promise."],"^L",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",271,"^8",7,"^9",271,"^:",12,"^2E",["^16",["^2F",["^16",[["~$&","~$args"]]]]],"^2H",["^ ","^2I",true,"^2J",0,"^2K",0,"^2L",[["^16",["^3;"]]],"^2E",["^16",[["~$&","^3;"]]],"^2M",["^16",[null]]]],"^O","~$promesa.core/await","^6","promesa/core.cljc","^:",12,"^2H",["^ ","^2I",true,"^2J",0,"^2K",0,"^2L",[["^16",["^3;"]]],"^2E",["^16",[["~$&","^3;"]]],"^2M",["^16",[null]]],"^2L",[["^16",["^3;"]]],"^2O",null,"^2J",0,"^2M",["^16",[null]],"^8",1,"^2I",true,"^2P",[["^ ","^2J",0,"^2I",true,"^2Q","~$ignore"]],"^7",271,"^30","^2R","^9",271,"^2K",0,"^2S",true,"^2E",["^16",[["~$&","^3;"]]]],"~$bind",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",124,"^8",7,"^9",124,"^:",11,"^2E",["^16",["^2F",["^16",[["~$p","~$f"]]]]],"^2G","A chain helper for promises."],"^O","~$promesa.core/bind","^6","promesa/core.cljc","^:",11,"^2L",["^16",[["~$p","~$f"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",124,"^30","^2R","^9",124,"^2K",2,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$p","~$f"]]]]],"^2G","A chain helper for promises."],"^2R",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",191,"^8",7,"^9",191,"^:",10,"^2E",["^16",["^2F",["^16",[["~$promises"]]]]],"^2G","Given an array of promises, return a promise\n  that is fulfilled when first one item in the\n  array is fulfilled."],"^O","~$promesa.core/any","^6","promesa/core.cljc","^:",10,"^2L",["^16",[["^3@"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",191,"^30","^2W","^9",191,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["^3@"]]]]],"^2G","Given an array of promises, return a promise\n  that is fulfilled when first one item in the\n  array is fulfilled."],"~$finally",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",169,"^8",7,"^9",169,"^:",14,"^2E",["^16",["^2F",["^16",[["~$p","^32"]]]]],"^2G","Attach handler to promise that will be\n  executed independently if promise is\n  resolved or rejected."],"^O","~$promesa.core/finally","^6","promesa/core.cljc","^:",14,"^2L",["^16",[["~$p","^32"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",169,"^30","^2R","^9",169,"^2K",2,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$p","^32"]]]]],"^2G","Attach handler to promise that will be\n  executed independently if promise is\n  resolved or rejected."],"~$schedule",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",47,"^8",7,"^9",47,"^:",15,"^2E",["^16",["^2F",["^16",[["~$ms","~$func"]]]]],"^2G","Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function."],"^O","~$promesa.core/schedule","^6","promesa/core.cljc","^:",15,"^2L",["^16",[["^3E","^3F"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",47,"^30","^2R","^9",47,"^2K",2,"^2S",true,"^2E",["^16",["^2F",["^16",[["^3E","^3F"]]]]],"^2G","Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function."],"~$promisify",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",216,"^8",7,"^9",216,"^:",16,"^2E",["^16",["^2F",["^16",[["~$callable"]]]]],"^2G","Given a function that accepts a callback as the last argument return other\n  function that returns a promise. Callback is expected to take single\n  parameter (result of a computation)."],"^O","~$promesa.core/promisify","^6","promesa/core.cljc","^:",16,"^2L",["^16",[["^3I"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",216,"^30","~$function","^9",216,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["^3I"]]]]],"^2G","Given a function that accepts a callback as the last argument return other\n  function that returns a promise. Callback is expected to take single\n  parameter (result of a computation)."],"~$rejected",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",63,"^8",7,"^9",63,"^:",15,"^2E",["^16",["^2F",["^16",[["~$v"]]]]],"^2G","Return a rejected promise with provided reason."],"^O","~$promesa.core/rejected","^6","promesa/core.cljc","^:",15,"^2L",["^16",[["~$v"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",63,"^30","^2W","^9",63,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$v"]]]]],"^2G","Return a rejected promise with provided reason."],"^N",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",68,"^8",7,"^9",68,"^:",14,"^2E",["^16",["^2F",["^16",[["~$v"]]]]],"^2G","The promise constructor."],"^O","~$promesa.core/promise","^6","promesa/core.cljc","^:",14,"^2L",["^16",[["~$v"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",68,"^30","^2R","^9",68,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$v"]]]]],"^2G","The promise constructor."],"~$cancel!",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",203,"^8",7,"^9",203,"^:",14,"^2E",["^16",["^2F",["^16",[["~$p"]]]]],"^2G","Cancel the promise."],"^O","~$promesa.core/cancel!","^6","promesa/core.cljc","^:",14,"^2L",["^16",[["~$p"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",203,"^9",203,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$p"]]]]],"^2G","Cancel the promise."],"~$done?",["^ ","^5",["^ ","^6","promesa/core.cljc","^7",101,"^8",6,"^9",101,"^:",11],"^O","~$promesa.core/done?","^6","promesa/core.cljc","^:",11,"^8",1,"^7",101,"^9",101,"^2Q","^3K","^2G","Returns true if promise `p` is already done."],"~$err",["^ ","^O","~$promesa.core/err","^6","promesa/core.cljc","^7",165,"^8",1,"^9",165,"^:",9,"^5",["^ ","^6","promesa/core.cljc","^7",165,"^8",6,"^9",165,"^:",9],"^2G","A short alias for `error` function."],"~$all",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",179,"^8",7,"^9",179,"^:",10,"^2E",["^16",["^2F",["^16",[["^3@"]]]]],"^2G","Given an array of promises, return a promise\n  that is fulfilled  when all the items in the\n  array are fulfilled."],"^O","~$promesa.core/all","^6","promesa/core.cljc","^:",10,"^2L",["^16",[["^3@"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",179,"^30","^2R","^9",179,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["^3@"]]]]],"^2G","Given an array of promises, return a promise\n  that is fulfilled  when all the items in the\n  array are fulfilled."],"~$promise?",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",73,"^8",7,"^9",73,"^:",15,"^2E",["^16",["^2F",["^16",[["~$v"]]]]],"^2G","Return true if `v` is a promise instance."],"^O","~$promesa.core/promise?","^6","promesa/core.cljc","^:",15,"^2L",["^16",[["~$v"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",73,"^30","~$boolean","^9",73,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$v"]]]]],"^2G","Return true if `v` is a promise instance."],"~$resolved",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",58,"^8",7,"^9",58,"^:",15,"^2E",["^16",["^2F",["^16",[["~$v"]]]]],"^2G","Return a resolved promise with provided value."],"^O","~$promesa.core/resolved","^6","promesa/core.cljc","^:",15,"^2L",["^16",[["~$v"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",58,"^30","^2W","^9",58,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$v"]]]]],"^2G","Return a resolved promise with provided value."],"~$catch",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",147,"^8",7,"^9",147,"^:",12,"^2E",["^16",["^2F",["^16",[["~$p","~$f"],["~$p","~$pred-or-type","~$f"]]]]],"^2G","Catch all promise chain helper.","^2H",["^ ","^2I",false,"^2J",3,"^2K",3,"^2L",["^16",[["~$p","~$f"],["~$p","^41","~$f"]]],"^2E",["^16",[["~$p","~$f"],["~$p","^41","~$f"]]],"^2M",["^16",[null,null]]]],"^O","~$promesa.core/catch","^6","promesa/core.cljc","^:",12,"^2H",["^ ","^2I",false,"^2J",3,"^2K",3,"^2L",["^16",[["~$p","~$f"],["~$p","^41","~$f"]]],"^2E",["^16",[["~$p","~$f"],["~$p","^41","~$f"]]],"^2M",["^16",[null,null]]],"^2L",["^16",[["~$p","~$f"],["~$p","^41","~$f"]]],"^2O",null,"^2J",3,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^2P",[["^ ","^2J",2,"^2I",false,"^2Q","^2R"],["^ ","^2J",3,"^2I",false,"^2Q","^2R"]],"^7",147,"^9",147,"^2K",3,"^2S",true,"^2E",["^16",[["~$p","~$f"],["~$p","^41","~$f"]]],"^2G","Catch all promise chain helper."],"~$chain",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",136,"^8",7,"^9",136,"^:",12,"^2E",["^16",["^2F",["^16",[["~$p","~$&","~$funcs"]]]]],"^2G","Like then but accepts multiple parameters.","^2H",["^ ","^2I",true,"^2J",1,"^2K",1,"^2L",[["^16",["~$p","^44"]]],"^2E",["^16",[["~$p","~$&","^44"]]],"^2M",["^16",[null]]]],"^O","~$promesa.core/chain","^6","promesa/core.cljc","^:",12,"^2H",["^ ","^2I",true,"^2J",1,"^2K",1,"^2L",[["^16",["~$p","^44"]]],"^2E",["^16",[["~$p","~$&","^44"]]],"^2M",["^16",[null]]],"^2L",[["^16",["~$p","^44"]]],"^2O",null,"^2J",1,"^2M",["^16",[null]],"^8",1,"^2I",true,"^2P",[["^ ","^2J",1,"^2I",true,"^2Q",["^H",[null,"^2R"]]]],"^7",136,"^30","^2R","^9",136,"^2K",1,"^2S",true,"^2E",["^16",[["~$p","~$&","^44"]]],"^2G","Like then but accepts multiple parameters."],"~$rejected?",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",86,"^8",7,"^9",86,"^:",16,"^2E",["^16",["^2F",["^16",[["~$p"]]]]],"^2G","Returns true if promise `p` is already rejected."],"^O","~$promesa.core/rejected?","^6","promesa/core.cljc","^:",16,"^2L",["^16",[["~$p"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",86,"^30","^2R","^9",86,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$p"]]]]],"^2G","Returns true if promise `p` is already rejected."],"~$then",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",129,"^8",7,"^9",129,"^:",11,"^2E",["^16",["^2F",["^16",[["~$p","~$f"]]]]],"^2G","Same as `map` but with parameters inverted\n  for convenience and for familiarity with\n  javascript's promises `.then` operator."],"^O","~$promesa.core/then","^6","promesa/core.cljc","^:",11,"^2L",["^16",[["~$p","~$f"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",129,"^30","^2R","^9",129,"^2K",2,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$p","~$f"]]]]],"^2G","Same as `map` but with parameters inverted\n  for convenience and for familiarity with\n  javascript's promises `.then` operator."],"~$extract",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",96,"^8",7,"^9",96,"^:",14,"^2E",["^16",["^2F",["^16",[["~$p"]]]]],"^2G","Returns the current promise value."],"^O","~$promesa.core/extract","^6","promesa/core.cljc","^:",14,"^2L",["^16",[["~$p"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",96,"^30","^2R","^9",96,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$p"]]]]],"^2G","Returns the current promise value."],"~$error",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",160,"^8",7,"^9",160,"^:",12,"^2E",["^16",["^2F",["^16",[["~$f","~$p"],["~$f","~$type","~$p"]]]]],"^2G","Same as `catch` but with parameters inverted.","^2H",["^ ","^2I",false,"^2J",3,"^2K",3,"^2L",["^16",[["~$f","~$p"],["~$f","^4=","~$p"]]],"^2E",["^16",[["~$f","~$p"],["~$f","^4=","~$p"]]],"^2M",["^16",[null,null]]]],"^O","~$promesa.core/error","^6","promesa/core.cljc","^:",12,"^2H",["^ ","^2I",false,"^2J",3,"^2K",3,"^2L",["^16",[["~$f","~$p"],["~$f","^4=","~$p"]]],"^2E",["^16",[["~$f","~$p"],["~$f","^4=","~$p"]]],"^2M",["^16",[null,null]]],"^2L",["^16",[["~$f","~$p"],["~$f","^4=","~$p"]]],"^2O",null,"^2J",3,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^2P",[["^ ","^2J",2,"^2I",false,"^2Q","^2R"],["^ ","^2J",3,"^2I",false,"^2Q","^2R"]],"^7",160,"^9",160,"^2K",3,"^2S",true,"^2E",["^16",[["~$f","~$p"],["~$f","^4=","~$p"]]],"^2G","Same as `catch` but with parameters inverted."],"~$pending?",["^ ","^2D",null,"^5",["^ ","^6","promesa/core.cljc","^7",91,"^8",7,"^9",91,"^:",15,"^2E",["^16",["^2F",["^16",[["~$p"]]]]],"^2G","Returns true if promise `p` is stil pending."],"^O","~$promesa.core/pending?","^6","promesa/core.cljc","^:",15,"^2L",["^16",[["~$p"]]],"^2O",null,"^2M",["^16",[null,null]],"^8",1,"^2I",false,"^7",91,"^30","^2R","^9",91,"^2K",1,"^2S",true,"^2E",["^16",["^2F",["^16",[["~$p"]]]]],"^2G","Returns true if promise `p` is stil pending."]],"^14",["^ ","^[","^["],"~:cljs.analyzer/constants",["^ ","^11",["^H",["~:else"]],"~:order",["^4B"]],"^1;",["^ ","^12",["^H",[]]],"^1<",["^ "],"^1=",["^10","^[","^U","^W","^Y"]],"^R","^P","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1K",[["^4F","~:static-fns"],true,["^4F","~:elide-asserts"],false,["^4F","~:optimize-constants"],null,["^4F","^1B"],null,["^4F","~:external-config"],null,["^4F","~:tooling-config"],null,["^4F","~:emit-constants"],null,["^4F","~:load-tests"],null,["^4F","~:infer-externs"],"~:auto",["^4F","^1D"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4F","~:fn-invoke-direct"],null,["^4F","~:source-map"],"/dev/null"]]]