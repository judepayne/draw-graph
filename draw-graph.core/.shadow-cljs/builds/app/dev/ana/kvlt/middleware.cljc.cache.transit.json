["^ ","~:output",["^ ","~:js","goog.provide('kvlt.middleware');\ngoog.require('cljs.core');\ngoog.require('cljs.reader');\ngoog.require('kvlt.middleware.util');\ngoog.require('kvlt.util');\ngoog.require('kvlt.platform.util');\ngoog.require('clojure.set');\ngoog.require('clojure.walk');\ngoog.require('clojure.string');\ngoog.require('cats.core');\nkvlt.middleware.header = (function kvlt$middleware$header(var_args){\nvar G__47053 = arguments.length;\nswitch (G__47053) {\ncase 2:\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nkvlt.middleware.header.cljs$core$IFn$_invoke$arity$2 = (function (p__47054,k){\nvar map__47057 = p__47054;\nvar map__47057__$1 = (((((!((map__47057 == null))))?(((((map__47057.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47057.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47057):map__47057);\nvar resp = map__47057__$1;\nvar hs = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47057__$1,new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129));\nvar and__4120__auto__ = hs;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.some(hs,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.name(k)], null));\n} else {\nreturn and__4120__auto__;\n}\n});\n\nkvlt.middleware.header.cljs$core$IFn$_invoke$arity$3 = (function (m,k,v){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(m,new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),(function (h){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(h,k,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.name(k)], 0)),cljs.core.name(k),v);\n}));\n});\n\nkvlt.middleware.header.cljs$lang$maxFixedArity = 3;\n\nkvlt.middleware.body__GT_string = (function kvlt$middleware$body__GT_string(p__47072){\nvar map__47073 = p__47072;\nvar map__47073__$1 = (((((!((map__47073 == null))))?(((((map__47073.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47073.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47073):map__47073);\nvar resp = map__47073__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47073__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nreturn kvlt.platform.util.byte_array__GT_str(body,kvlt.middleware.util.charset(kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2(resp,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634))));\n});\nif((typeof kvlt !== 'undefined') && (typeof kvlt.middleware !== 'undefined') && (typeof kvlt.middleware.from_content_type !== 'undefined')){\n} else {\n/**\n * Used by [[as]] to transform an incoming response.  Dispatches on\n *   `:content-type`' header, as a namespace-qualified\n *   keyword (e.g. `:application/edn`).  The input and output are the\n *   top-level response map, not only the response body.\n * \n *   The default implementation (i.e. unrecognized content-type) returns\n *   the response map unmodified.\n */\nkvlt.middleware.from_content_type = (function (){var method_table__4613__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4614__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4615__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4616__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4617__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__47082 = cljs.core.get_global_hierarchy;\nreturn (fexpr__47082.cljs$core$IFn$_invoke$arity$0 ? fexpr__47082.cljs$core$IFn$_invoke$arity$0() : fexpr__47082.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"kvlt.middleware\",\"from-content-type\"),((function (method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__,hierarchy__4617__auto__){\nreturn (function (resp){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$1(kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2(resp,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634))));\n});})(method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__,hierarchy__4617__auto__))\n,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4617__auto__,method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__));\n})();\n}\nkvlt.middleware.from_content_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (resp){\nreturn resp;\n}));\nkvlt.middleware.from_content_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"application\",\"edn\",\"application/edn\",-63927515),(function (resp){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1(kvlt.middleware.body__GT_string(resp)));\n}));\nkvlt.middleware.from_content_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"application\",\"json\",\"application/json\",1747896298),(function (p__47092){\nvar map__47093 = p__47092;\nvar map__47093__$1 = (((((!((map__47093 == null))))?(((((map__47093.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47093.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47093):map__47093);\nvar resp = map__47093__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47093__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),kvlt.platform.util.parse_json(kvlt.middleware.body__GT_string(resp)));\n}));\nkvlt.middleware.hint__GT_body_type = (function kvlt$middleware$hint__GT_body_type(x){\nif((((x instanceof cljs.core.Keyword)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"kvlt.body\",cljs.core.namespace(x))))){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.name(x));\n} else {\nreturn null;\n}\n});\n/**\n * Look for a body with a `:kvlt.body/`-prefixed metadata key, setting\n *   the request's `:type` and `:form-params` keys\n *   accordingly (e.g. `:body ^:kvlt/edn {:x 1}`)\n */\nkvlt.middleware.body_type_hint = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"body-type-hint\",\"body-type-hint\",-939145957),cljs.core.with_meta((function (p__47099){\nvar map__47100 = p__47099;\nvar map__47100__$1 = (((((!((map__47100 == null))))?(((((map__47100.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47100.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47100):map__47100);\nvar req = map__47100__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47100__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar temp__5718__auto__ = cljs.core.some(kvlt.middleware.hint__GT_body_type,cljs.core.keys(cljs.core.meta(body)));\nif(cljs.core.truth_(temp__5718__auto__)){\nvar t = temp__5718__auto__;\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(req,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(t),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"form-params\",\"form-params\",1884296467),body], 0)),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\n} else {\nreturn req;\n}\n}),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.body_type_hint;},new cljs.core.Symbol(\"kvlt.middleware\",\"body-type-hint\",\"kvlt.middleware/body-type-hint\",-789443311,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"body-type-hint\",\"body-type-hint\",701385570,null),\"kvlt/middleware.cljc\",22,1,48,48,cljs.core.List.EMPTY,\"Look for a body with a `:kvlt.body/`-prefixed metadata key, setting\\n  the request's `:type` and `:form-params` keys\\n  accordingly (e.g. `:body ^:kvlt/edn {:x 1}`)\",(cljs.core.truth_(kvlt.middleware.body_type_hint)?kvlt.middleware.body_type_hint.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"method\",\"method\",55703592),new cljs.core.Keyword(null,\"post\",\"post\",269697687),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(2),(3)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"kvlt.body\",\"edn\",\"kvlt.body/edn\",1136261434),true], null))], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"method\",\"method\",55703592),new cljs.core.Keyword(null,\"post\",\"post\",269697687),new cljs.core.Keyword(null,\"form-params\",\"form-params\",1884296467),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(2),(3)], null),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"edn\",\"edn\",1317840885)], null)], null)));\n/**\n * Turn request's `:content-type` (or `:type`), if any, and\n * `:character-encoding`, if any, into a \"content-type\" header & leave\n * top-level `:content-type` key in place. \n */\nkvlt.middleware.content_type = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),(function (p__47111){\nvar map__47112 = p__47111;\nvar map__47112__$1 = (((((!((map__47112 == null))))?(((((map__47112.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47112.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47112):map__47112);\nvar req = map__47112__$1;\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47112__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47112__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar character_encoding = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47112__$1,new cljs.core.Keyword(null,\"character-encoding\",\"character-encoding\",-1946080777));\nvar map__47144 = (function (){var G__47145 = req;\nif(cljs.core.truth_(type)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__47145,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),type);\n} else {\nreturn G__47145;\n}\n})();\nvar map__47144__$1 = (((((!((map__47144 == null))))?(((((map__47144.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47144.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47144):map__47144);\nvar req__$1 = map__47144__$1;\nvar content_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47144__$1,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634));\nvar G__47152 = req__$1;\nif(cljs.core.truth_(content_type)){\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(G__47152,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$2(content_type,character_encoding));\n} else {\nreturn G__47152;\n}\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.content_type;},new cljs.core.Symbol(\"kvlt.middleware\",\"content-type\",\"kvlt.middleware/content-type\",-400988246,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"content-type\",\"content-type\",1132308893,null),\"kvlt/middleware.cljc\",20,1,67,67,cljs.core.List.EMPTY,\"Turn request's `:content-type` (or `:type`), if any, and\\n   `:character-encoding`, if any, into a \\\"content-type\\\" header & leave\\n   top-level `:content-type` key in place. \",(cljs.core.truth_(kvlt.middleware.content_type)?kvlt.middleware.content_type.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),\"text/html\",new cljs.core.Keyword(null,\"character-encoding\",\"character-encoding\",-1946080777),\"US-ASCII\"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),\"text/html; charset=US-ASCII\"], null),new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),\"text/html\"], null)], null)));\n/**\n * Turn request's `:accept` value, if any, into an \"accept\" header &\n *   remove the top-level key.\n */\nkvlt.middleware.accept = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"accept\",\"accept\",1874130431),cljs.core.with_meta((function (p__47162){\nvar map__47163 = p__47162;\nvar map__47163__$1 = (((((!((map__47163 == null))))?(((((map__47163.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47163.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47163):map__47163);\nvar req = map__47163__$1;\nvar accept = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47163__$1,new cljs.core.Keyword(null,\"accept\",\"accept\",1874130431));\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"accept\",\"accept\",1874130431),kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$1(accept));\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"accept\",\"accept\",1874130431),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"accept\",\"accept\",1874130431)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.accept;},new cljs.core.Symbol(\"kvlt.middleware\",\"accept\",\"kvlt.middleware/accept\",2047916971,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"accept\",\"accept\",-780305338,null),\"kvlt/middleware.cljc\",14,1,86,86,cljs.core.List.EMPTY,\"Turn request's `:accept` value, if any, into an \\\"accept\\\" header &\\n  remove the top-level key.\",(cljs.core.truth_(kvlt.middleware.accept)?kvlt.middleware.accept.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"accept\",\"accept\",1874130431),new cljs.core.Keyword(null,\"edn\",\"edn\",1317840885)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [\"accept\",\"application/edn\"], null)], null)], null)));\nkvlt.middleware.as_key = (function kvlt$middleware$as_key(resp){\nreturn new cljs.core.Keyword(null,\"as\",\"as\",1148689641).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(\"kvlt\",\"request\",\"kvlt/request\",1769844894).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(resp)));\n});\nif((typeof kvlt !== 'undefined') && (typeof kvlt.middleware !== 'undefined') && (typeof kvlt.middleware.as_type !== 'undefined')){\n} else {\nkvlt.middleware.as_type = (function (){var method_table__4613__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4614__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4615__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4616__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4617__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__47168 = cljs.core.get_global_hierarchy;\nreturn (fexpr__47168.cljs$core$IFn$_invoke$arity$0 ? fexpr__47168.cljs$core$IFn$_invoke$arity$0() : fexpr__47168.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"kvlt.middleware\",\"as-type\"),kvlt.middleware.as_key,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4617__auto__,method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__));\n})();\n}\nkvlt.middleware.as_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),(function (p__47169){\nvar map__47170 = p__47169;\nvar map__47170__$1 = (((((!((map__47170 == null))))?(((((map__47170.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47170.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47170):map__47170);\nvar resp = map__47170__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47170__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nreturn resp;\n}));\nkvlt.middleware.as_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"byte-array\",\"byte-array\",369158537),(function (p__47173){\nvar map__47174 = p__47173;\nvar map__47174__$1 = (((((!((map__47174 == null))))?(((((map__47174.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47174.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47174):map__47174);\nvar resp = map__47174__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47174__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(kvlt.platform.util.byte_array_QMARK_(body)){\n} else {\nthrow (new Error([\"Assert failed: \",\"For platform-specific reasons, :as :byte-array is special-cased in\\n  kvlt.platform.http/request\",\"\\n\",\"(platform.util/byte-array? body)\"].join('')));\n}\n\nreturn resp;\n}));\nkvlt.middleware.as_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(function (resp){\nreturn (kvlt.middleware.from_content_type.cljs$core$IFn$_invoke$arity$1 ? kvlt.middleware.from_content_type.cljs$core$IFn$_invoke$arity$1(resp) : kvlt.middleware.from_content_type.call(null,resp));\n}));\nkvlt.middleware.as_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (p__47181){\nvar map__47182 = p__47181;\nvar map__47182__$1 = (((((!((map__47182 == null))))?(((((map__47182.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47182.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47182):map__47182);\nvar resp = map__47182__$1;\nvar headers = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47182__$1,new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129));\nvar t = kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2(resp,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634));\nvar resp__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"orig-content-type\",\"orig-content-type\",-995245643),t);\nvar G__47187 = kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(resp__$1,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$1(kvlt.middleware.as_key(resp__$1)));\nreturn (kvlt.middleware.from_content_type.cljs$core$IFn$_invoke$arity$1 ? kvlt.middleware.from_content_type.cljs$core$IFn$_invoke$arity$1(G__47187) : kvlt.middleware.from_content_type.call(null,G__47187));\n}));\nkvlt.middleware.parsing_error = (function kvlt$middleware$parsing_error(resp,e){\nvar error = kvlt.platform.util.exception__GT_map.cljs$core$IFn$_invoke$arity$variadic(e,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"middleware-error\",\"middleware-error\",873820682),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"middleware-error\",\"middleware-error\",873820682)], null)], 0));\nvar G__47188 = resp;\nif(cljs.core.not((function (){var G__47189 = new cljs.core.Keyword(null,\"error\",\"error\",-978969032);\nreturn (resp.cljs$core$IFn$_invoke$arity$1 ? resp.cljs$core$IFn$_invoke$arity$1(G__47189) : resp.call(null,G__47189));\n})())){\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([G__47188,error], 0));\n} else {\nreturn G__47188;\n}\n});\n/**\n * Response body type conversion --- `:string` `:byte-array` `:auto` `:json` `:edn` etc..\n * \n *   See [[from-content-type]] for custom conversions.\n */\nkvlt.middleware.as = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"as\",\"as\",1148689641),(function (p1__47190_SHARP_){\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"as\",\"as\",1148689641),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586)], null),p1__47190_SHARP_], 0));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (resp){\ntry{return (kvlt.middleware.as_type.cljs$core$IFn$_invoke$arity$1 ? kvlt.middleware.as_type.cljs$core$IFn$_invoke$arity$1(resp) : kvlt.middleware.as_type.call(null,resp));\n}catch (e47191){if((e47191 instanceof Error)){\nvar e = e47191;\nreturn kvlt.middleware.parsing_error(resp,e);\n} else {\nthrow e47191;\n\n}\n}})], 0));\n/**\n * Convert the `:accept-encoding` option (keyword/str, or collection of) to an\n *   acceptable `Accept-Encoding` header.\n * \n *   This middleware is not likely to have any effect in a browser\n *   environment.\n */\nkvlt.middleware.accept_encoding = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),cljs.core.with_meta((function (p__47195){\nvar map__47196 = p__47195;\nvar map__47196__$1 = (((((!((map__47196 == null))))?(((((map__47196.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47196.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47196):map__47196);\nvar req = map__47196__$1;\nvar v = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47196__$1,new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396));\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),((cljs.core.coll_QMARK_(v))?clojure.string.join.cljs$core$IFn$_invoke$arity$2(\", \",cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.name,v)):cljs.core.name(v)));\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.accept_encoding;},new cljs.core.Symbol(\"kvlt.middleware\",\"accept-encoding\",\"kvlt.middleware/accept-encoding\",-504291282,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"accept-encoding\",\"accept-encoding\",1322607131,null),\"kvlt/middleware.cljc\",23,1,137,137,cljs.core.List.EMPTY,\"Convert the `:accept-encoding` option (keyword/str, or collection of) to an\\n  acceptable `Accept-Encoding` header.\\n\\n  This middleware is not likely to have any effect in a browser\\n  environment.\",(cljs.core.truth_(kvlt.middleware.accept_encoding)?kvlt.middleware.accept_encoding.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),new cljs.core.Keyword(null,\"origami\",\"origami\",1780950841)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),\"origami\"], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"a\",\"a\",-2123407586),new cljs.core.Keyword(null,\"b\",\"b\",1482224470)], null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),\"a, b\"], null)], null)], null)));\n/**\n * Rename request's `:method` key to `:request-method`\n */\nkvlt.middleware.method = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"method\",\"method\",55703592),cljs.core.with_meta((function (p__47201){\nvar map__47202 = p__47201;\nvar map__47202__$1 = (((((!((map__47202 == null))))?(((((map__47202.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47202.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47202):map__47202);\nvar req = map__47202__$1;\nvar m = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47202__$1,new cljs.core.Keyword(null,\"method\",\"method\",55703592));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"request-method\",\"request-method\",1764796830),m);\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"method\",\"method\",55703592),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"method\",\"method\",55703592)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\n/**\n * Rename request's `:port` key to `:server-port`\n */\nkvlt.middleware.port = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"port\",\"port\",1534937262),cljs.core.with_meta((function (p__47204){\nvar map__47205 = p__47204;\nvar map__47205__$1 = (((((!((map__47205 == null))))?(((((map__47205.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47205.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47205):map__47205);\nvar req = map__47205__$1;\nvar port = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47205__$1,new cljs.core.Keyword(null,\"port\",\"port\",1534937262));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"server-port\",\"server-port\",663745648),port);\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"port\",\"port\",1534937262),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"port\",\"port\",1534937262)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.method;},new cljs.core.Symbol(\"kvlt.middleware\",\"method\",\"kvlt.middleware/method\",-635028478,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"method\",\"method\",1696235119,null),\"kvlt/middleware.cljc\",14,1,158,158,cljs.core.List.EMPTY,\"Rename request's `:method` key to `:request-method`\",(cljs.core.truth_(kvlt.middleware.method)?kvlt.middleware.method.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"method\",\"method\",55703592),new cljs.core.Keyword(null,\"get\",\"get\",1683182755)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"request-method\",\"request-method\",1764796830),new cljs.core.Keyword(null,\"get\",\"get\",1683182755)], null)], null)));\n/**\n * Turn request's `:url` value, if any, into top-level `:scheme`,\n *   `:server-name`, `:server-port`, `:uri`, `:query-string`, and\n *   `:user-info` keys\n */\nkvlt.middleware.url = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"url\",\"url\",276297046),cljs.core.with_meta((function (p__47210){\nvar map__47211 = p__47210;\nvar map__47211__$1 = (((((!((map__47211 == null))))?(((((map__47211.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47211.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47211):map__47211);\nvar req = map__47211__$1;\nvar url = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47211__$1,new cljs.core.Keyword(null,\"url\",\"url\",276297046));\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([req,kvlt.middleware.util.parse_url(url)], 0));\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"url\",\"url\",276297046),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"url\",\"url\",276297046)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.url;},new cljs.core.Symbol(\"kvlt.middleware\",\"url\",\"kvlt.middleware/url\",-847267414,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"url\",\"url\",1916828573,null),\"kvlt/middleware.cljc\",11,1,173,173,cljs.core.List.EMPTY,\"Turn request's `:url` value, if any, into top-level `:scheme`,\\n  `:server-name`, `:server-port`, `:uri`, `:query-string`, and\\n  `:user-info` keys\",(cljs.core.truth_(kvlt.middleware.url)?kvlt.middleware.url.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"url\",\"url\",276297046),\"ftp://localhost:9/x?x=1\"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"scheme\",\"scheme\",90199613),new cljs.core.Keyword(null,\"ftp\",\"ftp\",911215182),new cljs.core.Keyword(null,\"server-name\",\"server-name\",-1012104295),\"localhost\",new cljs.core.Keyword(null,\"server-port\",\"server-port\",663745648),(9),new cljs.core.Keyword(null,\"uri\",\"uri\",-774711847),\"/x\",new cljs.core.Keyword(null,\"user-info\",\"user-info\",-1061909920),null,new cljs.core.Keyword(null,\"query-string\",\"query-string\",-1018845061),\"x=1\"], null)], null)));\n/**\n * Add `:content-type` key having value `:text/plain`, if no `:content-type` present.\n * \n *   Assumes placement before [[content-type]].\n */\nkvlt.middleware.default_content_type = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"default-content-type\",\"default-content-type\",28331753),(function (req){\nif(cljs.core.truth_((function (){var and__4120__auto__ = (function (){var G__47236 = new cljs.core.Keyword(null,\"body\",\"body\",-2049205669);\nreturn (req.cljs$core$IFn$_invoke$arity$1 ? req.cljs$core$IFn$_invoke$arity$1(G__47236) : req.call(null,G__47236));\n})();\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not((function (){var or__4131__auto__ = (function (){var G__47238 = new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634);\nreturn (req.cljs$core$IFn$_invoke$arity$1 ? req.cljs$core$IFn$_invoke$arity$1(G__47238) : req.call(null,G__47238));\n})();\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2(req,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634));\n}\n})());\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),new cljs.core.Keyword(\"text\",\"plain\",\"text/plain\",1363827258));\n} else {\nreturn req;\n}\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\n/**\n * Convert keys within request's `:headers` value to strings, and\n * response's `:headers` values to keywords. \n */\nkvlt.middleware.keyword_headers = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"keyword-headers\",\"keyword-headers\",1310589326),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),clojure.walk.stringify_keys], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),clojure.walk.keywordize_keys], null)], 0));\nkvlt.middleware.lower_case = (function kvlt$middleware$lower_case(p1__47239_SHARP_){\nvar G__47240 = clojure.string.lower_case(cljs.core.name(p1__47239_SHARP_));\nif((p1__47239_SHARP_ instanceof cljs.core.Keyword)){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(G__47240);\n} else {\nreturn G__47240;\n}\n});\n/**\n * Convert keys within request & response's `:headers` value to lower\n *   case.\n */\nkvlt.middleware.lower_case_headers = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"lower-case-headers\",\"lower-case-headers\",541852280),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),(function (p1__47241_SHARP_){\nreturn kvlt.util.map_keys(kvlt.middleware.lower_case,p1__47241_SHARP_);\n})], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),(function (p1__47242_SHARP_){\nreturn kvlt.util.map_keys(kvlt.middleware.lower_case,p1__47242_SHARP_);\n})], null)], 0));\n/**\n * Convert `:basic-auth` values (vector or map) into an\n *  `:authorization` header.\n */\nkvlt.middleware.basic_auth = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"basic-auth\",\"basic-auth\",-673163332),cljs.core.with_meta((function (p__47243){\nvar map__47244 = p__47243;\nvar map__47244__$1 = (((((!((map__47244 == null))))?(((((map__47244.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47244.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47244):map__47244);\nvar req = map__47244__$1;\nvar basic_auth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47244__$1,new cljs.core.Keyword(null,\"basic-auth\",\"basic-auth\",-673163332));\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"authorization\",\"authorization\",-166302136),kvlt.middleware.util.basic_auth(basic_auth));\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"basic-auth\",\"basic-auth\",-673163332),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"basic-auth\",\"basic-auth\",-673163332)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.basic_auth;},new cljs.core.Symbol(\"kvlt.middleware\",\"basic-auth\",\"kvlt.middleware/basic-auth\",-1836285898,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"basic-auth\",\"basic-auth\",967368195,null),\"kvlt/middleware.cljc\",18,1,214,214,cljs.core.List.EMPTY,\"Convert `:basic-auth` values (vector or map) into an\\n `:authorization` header.\",(cljs.core.truth_(kvlt.middleware.basic_auth)?kvlt.middleware.basic_auth.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-auth\",\"basic-auth\",-673163332),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"user\",\"pass\"], null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"authorization\",\"authorization\",-166302136),\"Basic ...\"], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-auth\",\"basic-auth\",-673163332),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"username\",\"username\",1605666410),\"user\",new cljs.core.Keyword(null,\"password\",\"password\",417022471),\"pass\"], null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"authorization\",\"authorization\",-166302136),\"Basic ...\"], null)], null)], null)));\n/**\n * Convert `:oauth-token` value into an `:authorization` header\n */\nkvlt.middleware.oauth_token = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"oauth-token\",\"oauth-token\",311415191),cljs.core.with_meta((function (p__47246){\nvar map__47247 = p__47246;\nvar map__47247__$1 = (((((!((map__47247 == null))))?(((((map__47247.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47247.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47247):map__47247);\nvar req = map__47247__$1;\nvar oauth_token = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47247__$1,new cljs.core.Keyword(null,\"oauth-token\",\"oauth-token\",311415191));\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"authorization\",\"authorization\",-166302136),[\"Bearer \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(oauth_token)].join(''));\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"oauth-token\",\"oauth-token\",311415191),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"oauth-token\",\"oauth-token\",311415191)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.oauth_token;},new cljs.core.Symbol(\"kvlt.middleware\",\"oauth-token\",\"kvlt.middleware/oauth-token\",-1556344573,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"oauth-token\",\"oauth-token\",1951946718,null),\"kvlt/middleware.cljc\",19,1,226,226,cljs.core.List.EMPTY,\"Convert `:oauth-token` value into an `:authorization` header\",(cljs.core.truth_(kvlt.middleware.oauth_token)?kvlt.middleware.oauth_token.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"oauth-token\",\"oauth-token\",311415191),\"xyz\"], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"authorization\",\"authorization\",-166302136),\"Bearer xyz\"], null)], null)], null)));\n/**\n * Merge request map with `{:method :get}`.\n * \n *   Assumes placement before [[method]].\n */\nkvlt.middleware.default_method = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"default-method\",\"default-method\",-616461794),(function (p1__47255_SHARP_){\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"method\",\"method\",55703592),new cljs.core.Keyword(null,\"get\",\"get\",1683182755)], null),p1__47255_SHARP_], 0));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.default_method;},new cljs.core.Symbol(\"kvlt.middleware\",\"default-method\",\"kvlt.middleware/default-method\",-2078157256,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"default-method\",\"default-method\",1024069733,null),\"kvlt/middleware.cljc\",22,1,235,235,cljs.core.List.EMPTY,\"Merge request map with `{:method :get}`.\\n\\n  Assumes placement before [[method]].\",(cljs.core.truth_(kvlt.middleware.default_method)?kvlt.middleware.default_method.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"method\",\"method\",55703592),new cljs.core.Keyword(null,\"get\",\"get\",1683182755)], null)], null)));\nif((typeof kvlt !== 'undefined') && (typeof kvlt.middleware !== 'undefined') && (typeof kvlt.middleware.decompress_body !== 'undefined')){\n} else {\n/**\n * Dispatch on the response's `:content-encoding` header value.\n *   Clojure implementations exist for \"gzip\" and \"deflate\".\n */\nkvlt.middleware.decompress_body = (function (){var method_table__4613__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4614__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4615__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4616__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4617__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__47256 = cljs.core.get_global_hierarchy;\nreturn (fexpr__47256.cljs$core$IFn$_invoke$arity$0 ? fexpr__47256.cljs$core$IFn$_invoke$arity$0() : fexpr__47256.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"kvlt.middleware\",\"decompress-body\"),((function (method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__,hierarchy__4617__auto__){\nreturn (function (resp){\nvar and__4120__auto__ = new cljs.core.Keyword(null,\"body\",\"body\",-2049205669).cljs$core$IFn$_invoke$arity$1(resp);\nif(cljs.core.truth_(and__4120__auto__)){\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2(resp,new cljs.core.Keyword(null,\"content-encoding\",\"content-encoding\",2011780217));\n} else {\nreturn and__4120__auto__;\n}\n});})(method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__,hierarchy__4617__auto__))\n,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4617__auto__,method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__));\n})();\n}\nkvlt.middleware.lift_content_encoding = (function kvlt$middleware$lift_content_encoding(p__47257){\nvar map__47258 = p__47257;\nvar map__47258__$1 = (((((!((map__47258 == null))))?(((((map__47258.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47258.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47258):map__47258);\nvar resp = map__47258__$1;\nvar map__47259 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47258__$1,new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129));\nvar map__47259__$1 = (((((!((map__47259 == null))))?(((((map__47259.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47259.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47259):map__47259);\nvar content_encoding = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47259__$1,\"content-encoding\");\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"orig-content-encoding\",\"orig-content-encoding\",-1642988561),content_encoding),new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),cljs.core.dissoc,\"content-encoding\");\n});\nkvlt.middleware.decompress_body.cljs$core$IMultiFn$_add_method$arity$3(null,\"gzip\",(function (p__47262){\nvar map__47263 = p__47262;\nvar map__47263__$1 = (((((!((map__47263 == null))))?(((((map__47263.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47263.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47263):map__47263);\nvar resp = map__47263__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47263__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar body__$1 = kvlt.platform.util.gunzip(body);\nreturn kvlt.middleware.lift_content_encoding(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),body__$1));\n}));\nkvlt.middleware.decompress_body.cljs$core$IMultiFn$_add_method$arity$3(null,\"deflate\",(function (p__47272){\nvar map__47273 = p__47272;\nvar map__47273__$1 = (((((!((map__47273 == null))))?(((((map__47273.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47273.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47273):map__47273);\nvar resp = map__47273__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47273__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar body__$1 = kvlt.platform.util.inflate(body);\nreturn kvlt.middleware.lift_content_encoding(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),body__$1));\n}));\nkvlt.middleware.decompress_body.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (resp){\nreturn kvlt.middleware.lift_content_encoding(resp);\n}));\n/**\n * Response body decompression.  Defaults request's \"Accept-Encoding\" header.\n *   Can be disabled per-request via `:decompress-body? false'\n */\nkvlt.middleware.decompress = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"decompress\",\"decompress\",1427568636),cljs.core.with_meta((function (req){\nvar G__47281 = req;\nif((((!((function (){var G__47283 = new cljs.core.Keyword(null,\"decompress-body?\",\"decompress-body?\",421693857);\nreturn (req.cljs$core$IFn$_invoke$arity$1 ? req.cljs$core$IFn$_invoke$arity$1(G__47283) : req.call(null,G__47283));\n})() === false))) && (cljs.core.not(kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2(req,new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396)))))){\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(G__47281,new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),\"gzip, deflate\");\n} else {\nreturn G__47281;\n}\n}),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (resp){\nreturn resp;\n})], 0));\nkvlt.middleware.unexceptional_status_QMARK_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [(205),null,(206),null,(300),null,(204),null,(307),null,(304),null,(303),null,(301),null,(201),null,(302),null,(202),null,(200),null,(203),null,(207),null], null), null);\nkvlt.middleware.status__GT_reason = cljs.core.PersistentHashMap.fromArrays([(410),(205),(416),(101),(206),(415),(300),(204),(405),(504),(505),(502),(307),(402),(407),(305),(304),(401),(412),(417),(500),(501),(303),(100),(413),(301),(408),(411),(201),(302),(202),(200),(503),(414),(404),(203),(409),(400),(403),(406)],[new cljs.core.Keyword(null,\"gone\",\"gone\",-1158371124),new cljs.core.Keyword(null,\"reset-content\",\"reset-content\",-1325960994),new cljs.core.Keyword(null,\"requested-range-not-satisfiable\",\"requested-range-not-satisfiable\",2110942027),new cljs.core.Keyword(null,\"switching-protocols\",\"switching-protocols\",446359171),new cljs.core.Keyword(null,\"partial-content\",\"partial-content\",1842744152),new cljs.core.Keyword(null,\"unsupported-media-type\",\"unsupported-media-type\",-248081522),new cljs.core.Keyword(null,\"multiple-choices\",\"multiple-choices\",1536362331),new cljs.core.Keyword(null,\"no-content\",\"no-content\",-1860206018),new cljs.core.Keyword(null,\"method-not-allowed\",\"method-not-allowed\",-108023673),new cljs.core.Keyword(null,\"gateway-timeout\",\"gateway-timeout\",699666147),new cljs.core.Keyword(null,\"http-version-not-supported\",\"http-version-not-supported\",-847851583),new cljs.core.Keyword(null,\"bad-gateway\",\"bad-gateway\",1203629050),new cljs.core.Keyword(null,\"temporary-redirect\",\"temporary-redirect\",1675904222),new cljs.core.Keyword(null,\"payment-required\",\"payment-required\",-846532084),new cljs.core.Keyword(null,\"proxy-authentication-required\",\"proxy-authentication-required\",1911666581),new cljs.core.Keyword(null,\"use-proxy\",\"use-proxy\",-501370822),new cljs.core.Keyword(null,\"not-modified\",\"not-modified\",597560057),new cljs.core.Keyword(null,\"unauthorized\",\"unauthorized\",-2089027806),new cljs.core.Keyword(null,\"precondition-failed\",\"precondition-failed\",-430047674),new cljs.core.Keyword(null,\"expectation-failed\",\"expectation-failed\",-1685971474),new cljs.core.Keyword(null,\"internal-server-error\",\"internal-server-error\",-795953713),new cljs.core.Keyword(null,\"not-implemented\",\"not-implemented\",1918806714),new cljs.core.Keyword(null,\"see-other\",\"see-other\",286531018),new cljs.core.Keyword(null,\"continue\",\"continue\",-207346553),new cljs.core.Keyword(null,\"request-entity-too-large\",\"request-entity-too-large\",1041677666),new cljs.core.Keyword(null,\"moved-permanently\",\"moved-permanently\",590604284),new cljs.core.Keyword(null,\"request-timeout\",\"request-timeout\",-2047539823),new cljs.core.Keyword(null,\"length-required\",\"length-required\",-1380021768),new cljs.core.Keyword(null,\"created\",\"created\",-704993748),new cljs.core.Keyword(null,\"found\",\"found\",-584700170),new cljs.core.Keyword(null,\"accepted\",\"accepted\",-1953464374),new cljs.core.Keyword(null,\"ok\",\"ok\",967785236),new cljs.core.Keyword(null,\"service-unavailable\",\"service-unavailable\",751643155),new cljs.core.Keyword(null,\"request-uri-too-large\",\"request-uri-too-large\",254200757),new cljs.core.Keyword(null,\"not-found\",\"not-found\",-629079980),new cljs.core.Keyword(null,\"non-authoritative-information\",\"non-authoritative-information\",1990094789),new cljs.core.Keyword(null,\"conflict\",\"conflict\",1978796605),new cljs.core.Keyword(null,\"bad-request\",\"bad-request\",-1466249863),new cljs.core.Keyword(null,\"forbidden\",\"forbidden\",-1979448146),new cljs.core.Keyword(null,\"not-acceptable\",\"not-acceptable\",1151521504)]);\n/**\n * Turn error responses into `ExceptionInfo` instances, with the full\n *   response map as the attached data.  Additionally, a `:reason`\n *   value (e.g. `:service-unavailable`) will be used to augment the\n *   `:status` key.\n * \n *   For uniformity, `:type` is provided as an alias for `:reason`, e.g.\n */\nkvlt.middleware.error = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),null,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (p__47284){\nvar map__47285 = p__47284;\nvar map__47285__$1 = (((((!((map__47285 == null))))?(((((map__47285.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47285.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47285):map__47285);\nvar resp = map__47285__$1;\nvar message = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47285__$1,new cljs.core.Keyword(null,\"message\",\"message\",-406056002));\nvar status = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47285__$1,new cljs.core.Keyword(null,\"status\",\"status\",-1997798413));\nvar cause = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47285__$1,new cljs.core.Keyword(null,\"cause\",\"cause\",231901252));\nvar error = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47285__$1,new cljs.core.Keyword(null,\"error\",\"error\",-978969032));\nvar reason = (kvlt.middleware.status__GT_reason.cljs$core$IFn$_invoke$arity$2 ? kvlt.middleware.status__GT_reason.cljs$core$IFn$_invoke$arity$2(status,error) : kvlt.middleware.status__GT_reason.call(null,status,error));\nif(cljs.core.truth_((function (){var and__4120__auto__ = cljs.core.not(error);\nif(and__4120__auto__){\nreturn (kvlt.middleware.unexceptional_status_QMARK_.cljs$core$IFn$_invoke$arity$1 ? kvlt.middleware.unexceptional_status_QMARK_.cljs$core$IFn$_invoke$arity$1(status) : kvlt.middleware.unexceptional_status_QMARK_.call(null,status));\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"reason\",\"reason\",-2070751759),reason);\n} else {\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(message,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(resp,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),(function (){var or__4131__auto__ = error;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn reason;\n}\n})(),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"type\",\"type\",1174270348),reason,new cljs.core.Keyword(null,\"reason\",\"reason\",-2070751759),reason], 0)),cause);\n}\n})], 0));\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.error;},new cljs.core.Symbol(\"kvlt.middleware\",\"error\",\"kvlt.middleware/error\",1309338120,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"error\",\"error\",661562495,null),\"kvlt/middleware.cljc\",13,1,325,325,cljs.core.List.EMPTY,\"Turn error responses into `ExceptionInfo` instances, with the full\\n  response map as the attached data.  Additionally, a `:reason`\\n  value (e.g. `:service-unavailable`) will be used to augment the\\n  `:status` key.\\n\\n  For uniformity, `:type` is provided as an alias for `:reason`, e.g.\",(cljs.core.truth_(kvlt.middleware.error)?kvlt.middleware.error.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),(500),new cljs.core.Keyword(null,\"reason\",\"reason\",-2070751759),new cljs.core.Keyword(null,\"internal-server-error\",\"internal-server-error\",-795953713),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"internal-server-error\",\"internal-server-error\",-795953713),new cljs.core.Keyword(null,\"cause\",\"cause\",231901252),new cljs.core.Symbol(null,\"error?\",\"error?\",1179842368,null),new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.Symbol(null,\"...\",\"...\",-1926939749,null)], null)], null)));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","kvlt/middleware.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",["^ ","~$defmw","~$kvlt.middleware.util","~$with-doc-examples!","~$kvlt.util"],"~:excludes",["~#set",[]],"~:name","~$kvlt.middleware","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","^J","^J","~$cljs.core","^U","~$goog","^V","~$walk","~$clojure.walk","^H","^H","^T","^T","~$m","~$cats.core","~$util","^H","^Y","^Y","~$str","~$clojure.string","~$platform.util","~$kvlt.platform.util","^10","^10","~$cljs.reader","^13","^X","^X","~$edn","^13","^12","^12"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$map-keys","^J"],"~:require-macros",["^ ","^H","^H","^Z","^H","^J","^J","^U","^U","~$m","^Y","^Y","^Y","^13","^13","^14","^13"],"~:form",["~#list",["~$ns","^N",["^1;",["^16",["^13","~:as","^14"],["^H","^1=","^Z","~:refer-macros",["^G"]],["^J","^1>",["^I"]],["^12","^1=","^11"],["^T","^1=","^S"],["^X","^1=","^W"],["^10","^1=","^["],["^Y","^1=","~$m"],["^J","~:refer",["^18"]]]]]],"~:flags",["^ ","^16",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^V","^U","^13","^H","^J","^12","^T","^X","^10","^Y"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","kvlt/middleware.cljc"],"~:compiled-at",1560836398013,"~:resource-name","kvlt/middleware.cljc","~:warnings",[],"~:source","(ns kvlt.middleware\n  (:require [#?(:clj clojure.edn :cljs cljs.reader) :as edn]\n            [kvlt.middleware.util :as util #? (:clj :refer :cljs :refer-macros) [defmw]]\n            [kvlt.util #? (:clj :refer :cljs :refer-macros) [with-doc-examples!]]\n            [kvlt.platform.util :as platform.util]\n            [clojure.set :as set]\n            [clojure.walk :as walk]\n            [clojure.string :as str]\n            [cats.core :as m]\n            [kvlt.util :refer [map-keys]]))\n\n(defn ^:no-doc header\n  ([{hs :headers :as resp} k]\n   (and hs (some hs [k (name k)])))\n  ([m k v]\n   (update m :headers\n           (fn [h]\n             (-> h\n                 (dissoc k (name k))\n                 (assoc (name k) v))))))\n\n(defn- body->string [{:keys [body] :as resp}]\n  (platform.util/byte-array->str\n   body (util/charset (header resp :content-type))))\n\n(defmulti from-content-type\n  \"Used by [[as]] to transform an incoming response.  Dispatches on\n  `:content-type`' header, as a namespace-qualified\n  keyword (e.g. `:application/edn`).  The input and output are the\n  top-level response map, not only the response body.\n\n  The default implementation (i.e. unrecognized content-type) returns\n  the response map unmodified.\"\n  (fn [resp]\n    (-> resp (header :content-type) util/->content-type keyword)))\n\n(defmethod from-content-type :default [resp]\n  resp)\n(defmethod from-content-type :application/edn [resp]\n  (assoc resp :body (edn/read-string (body->string resp))))\n(defmethod from-content-type :application/json [{:keys [body] :as resp}]\n  (assoc resp :body (platform.util/parse-json (body->string resp))))\n\n(defn- hint->body-type [x]\n  (when (and (keyword? x) (= \"kvlt.body\" (namespace x)))\n    (keyword (name x))))\n\n(defmw body-type-hint\n  \"Look for a body with a `:kvlt.body/`-prefixed metadata key, setting\n  the request's `:type` and `:form-params` keys\n  accordingly (e.g. `:body ^:kvlt/edn {:x 1}`)\"\n  ^{:has :body}\n  (fn [{:keys [body] :as req}]\n    (if-let [t (->> body meta keys (some hint->body-type))]\n      (-> req\n          (assoc  :type (keyword t) :form-params body)\n          (dissoc :body))\n      req)))\n\n(with-doc-examples! body-type-hint\n  [{:method :post\n    :body ^:kvlt.body/edn [1 2 3]}\n   {:method :post\n    :form-params [1 2 3]\n    :type :edn}])\n\n(defmw content-type\n  \"Turn request's `:content-type` (or `:type`), if any, and\n   `:character-encoding`, if any, into a \\\"content-type\\\" header & leave\n   top-level `:content-type` key in place. \"\n  (fn [{:keys [type body character-encoding] :as req}]\n    (let [{:keys [content-type] :as req}\n          (cond-> req type (assoc :content-type type))]\n      (cond-> req\n        content-type\n        (header :content-type\n                (util/->content-type content-type character-encoding))))))\n\n(with-doc-examples!\n  content-type\n  [{:content-type \"text/html\"\n    :character-encoding \"US-ASCII\"}\n   {:headers {:content-type \"text/html; charset=US-ASCII\"}\n    :content-type \"text/html\"}])\n\n(defmw accept\n  \"Turn request's `:accept` value, if any, into an \\\"accept\\\" header &\n  remove the top-level key.\"\n  ^{:has :accept :removing :accept}\n  (fn [{:keys [accept] :as req}]\n    (header req :accept (util/->content-type accept))))\n\n(with-doc-examples! accept\n  [{:accept :edn} {:headers {\"accept\" \"application/edn\"}}])\n\n(defn- as-key [resp]\n  (-> resp meta :kvlt/request :as))\n\n(defmulti ^:no-doc as-type as-key)\n(defmethod as-type :string [{:keys [body] :as resp}]\n  #? (:clj\n      (update resp :body platform.util/byte-array->str\n              (util/charset (header resp :content-type)))\n      :cljs resp))\n\n(defmethod as-type :byte-array [{:keys [body] :as resp}]\n  (assert\n   (platform.util/byte-array? body)\n   \"For platform-specific reasons, :as :byte-array is special-cased in\n  kvlt.platform.http/request\")\n  resp)\n(defmethod as-type :auto [resp] (from-content-type resp))\n(defmethod as-type :default [{:keys [headers] :as resp}]\n  (let [t    (header resp :content-type)\n        resp (assoc resp :orig-content-type t)]\n    (from-content-type\n     (header resp :content-type (util/->content-type (as-key resp))))))\n\n(defn- parsing-error [resp e]\n  (let [error (platform.util/exception->map\n               e {:error :middleware-error\n                  :type  :middleware-error})]\n    (cond-> resp\n      (not (resp :error)) (merge error))))\n\n(defmw as\n  \"Response body type conversion --- `:string` `:byte-array` `:auto` `:json` `:edn` etc..\n\n  See [[from-content-type]] for custom conversions.\"\n  #(merge {:as :string} %)\n  (fn [resp]\n    (try\n      (as-type resp)\n      (catch #? (:clj Exception :cljs js/Error) e\n        (parsing-error resp e)))))\n\n(defmw accept-encoding\n  \"Convert the `:accept-encoding` option (keyword/str, or collection of) to an\n  acceptable `Accept-Encoding` header.\n\n  This middleware is not likely to have any effect in a browser\n  environment.\"\n  ^{:has :accept-encoding :removing :accept-encoding}\n  (fn [{v :accept-encoding :as req}]\n    (header\n     req\n     :accept-encoding\n     (if (coll? v)\n       (str/join \", \" (map name v))\n       (name v)))))\n\n(with-doc-examples! accept-encoding\n  [{:accept-encoding :origami}\n   {:headers {:accept-encoding \"origami\"}}]\n  [{:accept-encoding [:a :b]}\n   {:headers {:accept-encoding \"a, b\"}}])\n\n(defmw method\n  \"Rename request's `:method` key to `:request-method`\"\n  ^{:has :method :removing :method}\n  (fn [{m :method :as req}]\n    (assoc req :request-method m)))\n\n(defmw port\n  \"Rename request's `:port` key to `:server-port`\"\n  ^{:has :port :removing :port}\n  (fn [{port :port :as req}]\n    (assoc req :server-port port)))\n\n(with-doc-examples! method\n  [{:method :get} {:request-method :get}])\n\n(defmw url\n  \"Turn request's `:url` value, if any, into top-level `:scheme`,\n  `:server-name`, `:server-port`, `:uri`, `:query-string`, and\n  `:user-info` keys\"\n  ^{:has :url :removing :url}\n  (fn [{url :url :as req}]\n    (merge req (util/parse-url url))))\n\n(with-doc-examples! url\n  [{:url \"ftp://localhost:9/x?x=1\"}\n   {:scheme :ftp\n    :server-name \"localhost\"\n    :server-port 9\n    :uri \"/x\"\n    :user-info nil\n    :query-string \"x=1\"}])\n\n(defmw default-content-type\n  \"Add `:content-type` key having value `:text/plain`, if no `:content-type` present.\n\n  Assumes placement before [[content-type]].\"\n  (fn [req]\n    (if (and (req :body) (not (or (req :content-type) (header req :content-type))))\n      (assoc req :content-type :text/plain)\n      req)))\n\n(defmw keyword-headers\n  \"Convert keys within request's `:headers` value to strings, and\nresponse's `:headers` values to keywords. \"\n  [:headers walk/stringify-keys]\n  [:headers walk/keywordize-keys])\n\n(def ^:private lower-case\n  #(cond-> (str/lower-case (name %)) (keyword? %) keyword))\n\n(defmw lower-case-headers\n  \"Convert keys within request & response's `:headers` value to lower\n  case.\"\n  [:headers #(map-keys lower-case %)]\n  [:headers #(map-keys lower-case %)])\n\n(defmw basic-auth\n  \"Convert `:basic-auth` values (vector or map) into an\n `:authorization` header.\"\n  ^{:has :basic-auth :removing :basic-auth}\n  (fn [{:keys [basic-auth] :as req}]\n    (header req :authorization (util/basic-auth basic-auth))))\n\n(with-doc-examples! basic-auth\n  [{:basic-auth [\"user\" \"pass\"]} {:headers {:authorization \"Basic ...\"}}]\n  [{:basic-auth {:username \"user\" :password \"pass\"}}\n   {:headers {:authorization \"Basic ...\"}}])\n\n(defmw oauth-token\n  \"Convert `:oauth-token` value into an `:authorization` header\"\n  ^{:has :oauth-token :removing :oauth-token}\n  (fn [{:keys [oauth-token] :as req}]\n    (header req :authorization (str \"Bearer \" oauth-token))))\n\n(with-doc-examples! oauth-token\n  [{:oauth-token \"xyz\"} {:headers {:authorization \"Bearer xyz\"}}])\n\n(defmw default-method\n  \"Merge request map with `{:method :get}`.\n\n  Assumes placement before [[method]].\"\n  #(merge {:method :get} %))\n\n(with-doc-examples! default-method\n  [{} {:method :get}])\n\n(defmulti decompress-body\n  \"Dispatch on the response's `:content-encoding` header value.\n  Clojure implementations exist for \\\"gzip\\\" and \\\"deflate\\\".\"\n  (fn [resp]\n    (and (:body resp) (header resp :content-encoding))))\n\n(defn ^:no-doc lift-content-encoding [{{:strs [content-encoding]} :headers :as resp}]\n  (-> resp\n      (assoc :orig-content-encoding content-encoding)\n      (update :headers dissoc \"content-encoding\")))\n\n(defmethod decompress-body \"gzip\" [{:keys [body] :as resp}]\n  (let [body (platform.util/gunzip body)]\n    (lift-content-encoding (assoc resp :body body))))\n\n(defmethod decompress-body \"deflate\" [{:keys [body] :as resp}]\n  (let [body (platform.util/inflate body)]\n    (lift-content-encoding (assoc resp :body body))))\n\n(defmethod decompress-body :default [resp]\n  (lift-content-encoding resp))\n\n(defmw decompress\n  \"Response body decompression.  Defaults request's \\\"Accept-Encoding\\\" header.\n  Can be disabled per-request via `:decompress-body? false'\"\n  ^{:removing :accept-encoding}\n  (fn [req]\n    (cond-> req\n      (and (not (false? (req :decompress-body?)))\n           (not (header req :accept-encoding)))\n      (header :accept-encoding \"gzip, deflate\")))\n  (fn [resp]\n    #? (:clj  (let [decomp? (-> resp meta :kvlt/request :decompress-body? false? not)]\n                (cond-> resp (and decomp? (not-empty (resp :body))) decompress-body))\n        :cljs resp)))\n\n(def ^:no-doc unexceptional-status?\n  #{200 201 202 203 204 205 206 207 300 301 302 303 304 307})\n\n(def ^:no-doc status->reason\n  {100 :continue\n   101 :switching-protocols\n   200 :ok\n   201 :created\n   202 :accepted\n   203 :non-authoritative-information\n   204 :no-content\n   205 :reset-content\n   206 :partial-content\n   300 :multiple-choices\n   301 :moved-permanently\n   302 :found\n   303 :see-other\n   304 :not-modified\n   305 :use-proxy\n   307 :temporary-redirect\n   400 :bad-request\n   401 :unauthorized\n   402 :payment-required ;; serious business\n   403 :forbidden\n   404 :not-found\n   405 :method-not-allowed\n   406 :not-acceptable\n   407 :proxy-authentication-required\n   408 :request-timeout\n   409 :conflict\n   410 :gone\n   411 :length-required\n   412 :precondition-failed\n   413 :request-entity-too-large\n   414 :request-uri-too-large\n   415 :unsupported-media-type\n   416 :requested-range-not-satisfiable\n   417 :expectation-failed\n   500 :internal-server-error\n   501 :not-implemented\n   502 :bad-gateway\n   503 :service-unavailable\n   504 :gateway-timeout\n   505 :http-version-not-supported})\n\n(defmw error\n  \"Turn error responses into `ExceptionInfo` instances, with the full\n  response map as the attached data.  Additionally, a `:reason`\n  value (e.g. `:service-unavailable`) will be used to augment the\n  `:status` key.\n\n  For uniformity, `:type` is provided as an alias for `:reason`, e.g.\"\n  nil\n  (fn [{:keys [message status cause error] :as resp}]\n    (let [reason (status->reason status error)]\n      (if (and (not error) (unexceptional-status? status))\n        (assoc resp :reason reason)\n        (ex-info message\n                 (assoc resp\n                   :error  (or error reason)\n                   :type   reason\n                   :reason reason)\n                 cause)))))\n\n(with-doc-examples! error\n  [{:status  500\n    :reason  :internal-server-error\n    :type    :internal-server-error\n    :cause   error?\n    :headers ...}])\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__47053","kvlt.middleware/header","js/Error","p__47054","map__47057","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","hs","resp","k","and__4120__auto__","cljs.core/some","cljs.core/name","m","v","cljs.core.update.cljs$core$IFn$_invoke$arity$3","h","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__47072","map__47073","kvlt.middleware/body->string","body","kvlt.platform.util/byte-array->str","kvlt.middleware.util/charset","kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2","js/kvlt","js/kvlt.middleware","js/kvlt.middleware.from-content-type","method-table__4613__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__47082","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","kvlt.middleware/from-content-type","kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$1","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","p__47092","map__47093","kvlt.platform.util/parse-json","kvlt.middleware/hint->body-type","x","cljs.core/Keyword","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic","kvlt.middleware/body-type-hint","p__47099","map__47100","req","temp__5718__auto__","t","cljs.core/meta","cljs.core/keys","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","kvlt.util/doc-examples!","kvlt.middleware/content-type","p__47111","map__47112","type","character-encoding","map__47144","content-type","G__47145","G__47152","kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3","kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$2","kvlt.middleware/accept","p__47162","map__47163","accept","kvlt.middleware/as-key","js/kvlt.middleware.as-type","fexpr__47168","kvlt.middleware/as-type","p__47169","map__47170","p__47173","map__47174","kvlt.platform.util/byte-array?","p__47181","map__47182","headers","G__47187","kvlt.middleware/parsing-error","e","error","kvlt.platform.util.exception__GT_map.cljs$core$IFn$_invoke$arity$variadic","G__47188","cljs.core/not","G__47189","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p1__47190#","kvlt.middleware/as","e47191","kvlt.middleware/accept-encoding","p__47195","map__47196","cljs.core/coll?","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","kvlt.middleware/method","p__47201","map__47202","kvlt.middleware/port","p__47204","map__47205","port","kvlt.middleware/url","p__47210","map__47211","url","kvlt.middleware.util/parse-url","kvlt.middleware/default-content-type","G__47236","or__4131__auto__","G__47238","kvlt.middleware/keyword-headers","clojure.walk/stringify-keys","clojure.walk/keywordize-keys","p1__47239#","kvlt.middleware/lower-case","G__47240","clojure.string/lower-case","p1__47241#","p1__47242#","kvlt.middleware/lower-case-headers","kvlt.util/map-keys","kvlt.middleware/basic-auth","p__47243","map__47244","basic-auth","kvlt.middleware.util/basic-auth","kvlt.middleware/oauth-token","p__47246","map__47247","oauth-token","p1__47255#","kvlt.middleware/default-method","js/kvlt.middleware.decompress-body","fexpr__47256","kvlt.middleware/decompress-body","p__47257","map__47258","map__47259","kvlt.middleware/lift-content-encoding","content-encoding","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","p__47262","map__47263","kvlt.platform.util/gunzip","p__47272","map__47273","kvlt.platform.util/inflate","kvlt.middleware/decompress","G__47281","G__47283","kvlt.middleware/unexceptional-status?","kvlt.middleware/status->reason","kvlt.middleware/error","p__47284","map__47285","message","status","cause","reason","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3"]]],"~:cache-keys",["~#cmap",[["^1D","goog/dom/tagname.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^V","~$goog.dom.HtmlElement"]]],["^1D","goog/async/freelist.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/labs/useragent/platform.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.labs.userAgent.util","~$goog.string"]]],["~:macro","^U"],[1559826623000],["^1D","goog/crypt/crypt.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.array","~$goog.asserts"]]],["^1D","goog/timer/timer.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.Promise","~$goog.events.EventTarget"]]],["^1D","cljs/tools/reader/impl/utils.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^10","^1W"]]],["^1D","goog/math/math.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Y","^1Z"]]],["^1D","goog/string/stringformat.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1W"]]],["^1D","goog/events/eventtype.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1D","goog/labs/useragent/browser.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Y","^1V","~$goog.object","~$goog.string.internal"]]],["^1D","goog/array/array.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Z"]]],["^1D","goog/useragent/useragent.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^1V","~$goog.reflect","^1W"]]],["^1D","goog/structs/prioritypool.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1X","~$cljs.tools.reader.reader-types"],[1560546087000],["~:shadow.build.npm/resource","node_modules/bluebird/js/browser/bluebird.js"],[1560546091000,1560546091000,1560546832000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["~$shadow.js","~$module$node_modules$process$browser"]]],["^1D","goog/async/run.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1D","taoensso/encore.cljs"],[1547383502000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^10","^T","^13","~$cljs.tools.reader.edn","~$cljs.test","^23","^1W","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.structs","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1D","goog/debug/error.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","cats/protocols.cljc"],[1547383501000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U"]]],["^1D","goog/async/workqueue.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Z","~$goog.async.FreeList"]]],["^1D","promesa/impl/scheduler.cljc"],[1547383501000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","~$promesa.impl.proto"]]],["^1D","goog/events/events.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Z","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^21","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1D","goog/promise/resolver.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/events/browserfeature.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^22"]]],["^1D","cljs/tools/reader/edn.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","~$cljs.tools.reader.impl.errors","^2;","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^1W","^2E"]]],["^1D","goog/structs/priorityqueue.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.structs.Heap"]]],["^1D","goog/net/xhrio.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.Timer","^1Y","^1Z","^2P","^20","~$goog.json.hybrid","~$goog.log","^2L","^2K","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^23","^1W","^2J","~$goog.structs.Map","~$goog.uri.utils","^22"]]],["^1D","goog/promise/thenable.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1X","^Y"],[1547383501000],["^1D","goog/dom/nodetype.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1X","~$taoensso.timbre"],[1547383502000],["^1D","cljs/tools/reader/impl/inspect.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U"]]],["^1D","cljs/pprint.cljs"],[1559826623000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^10","^1W","^2E"]]],["^1D","cljs/tools/reader.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^2;","^2U","^2V","^2T","^1Y","^1W","^2E"]]],["^1D","cats/labs/promise.cljc"],[1547383501000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^Y","~$cats.context","~$cats.protocols","~$promesa.core","^2O"]]],["^1D","goog/net/wrapperxmlhttpfactory.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1D","goog/events/eventtarget.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.Disposable","^1Z","^2F","~$goog.events.Event","^2R","^2S","^23"]]],["^1D","cats/core.cljc"],[1547383501000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^36","^T","^35"]]],["^1D","goog/disposable/disposable.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.disposable.IDisposable"]]],["^1D","shadow/js.js"],[1560546091000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/object/object.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/structs/set.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^2J","~$goog.structs.Collection","^32"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^1D","kvlt/platform/util.cljs"],[1547383501000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^X"]]],["^1D","goog/math/long.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Z","^28"]]],["^1D","goog/events/listener.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.events.ListenableKey"]]],["^1D","goog/events/listenermap.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Y","~$goog.events.Listener","^23"]]],["^1D","goog/events/eventid.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","taoensso/truss.cljs"],[1547383502000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","~$taoensso.truss.impl"]]],["^1D","goog/string/internal.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/functions/functions.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","kvlt/middleware/util.cljc"],[1547383501000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^12","~$cats.labs.promise","^10","^Y","^34","~$goog.crypt.base64"]]],["^1D","taoensso/truss/impl.cljs"],[1547383502000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^T"]]],["^1D","clojure/walk.cljs"],[1559826623000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U"]]],["^1D","goog/useragent/product.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^25","^27","^22"]]],["^1D","cljs/core/async/impl/protocols.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U"]]],["^1D","goog/net/eventtype.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/structs/map.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1D","goog/net/xhriopool.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^2G","~$goog.structs.PriorityPool"]]],["^1D","promesa/impl/proto.cljc"],[1547383501000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U"]]],["^1D","kvlt/util.cljc"],[1547383501000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^10","~$cljs.core.async.impl.protocols","~$cljs.pprint"]]],["^1D","goog/structs/queue.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Y"]]],["^1D","goog/labs/useragent/engine.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Y","^1V","^1W"]]],["^1D","taoensso/timbre/appenders/core.cljs"],[1547383502000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^10","~$taoensso.encore"]]],["^1D","cljs/reader.cljs"],[1559826623000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^23","^2W","^2B","^2E"]]],["^1D","cats/context.cljc"],[1547383501000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^36"]]],["^1D","goog/asserts/asserts.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1X","^3H"],[1559826623000],["^1D","goog/debug/logbuffer.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Z","~$goog.debug.LogRecord"]]],["^1X","^3I"],[1547383502000],["^1D","goog/uri/uri.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Y","^1Z","^1W","^2J","^32","^33","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1D","goog/net/errorcode.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1X","^2C"],[1559826623000],["^1D","goog/disposable/idisposable.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/promise/promise.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","~$goog.Thenable","^1Z","^2N","~$goog.async.run","^2A","^3J","~$goog.promise.Resolver"]]],["^2<","node_modules/process/browser.js"],[1560546091000,1560546091000,1559925118000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^2="]]],["^1D","goog/debug/logrecord.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/base.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",[]]],["^1D","promesa/core.cljc"],[1547383501000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","~$promesa.impl.promise","^2O","~$promesa.impl.scheduler"]]],["^1D","goog/json/hybrid.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Z","~$goog.json"]]],["^1D","goog/structs/structs.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Y","^23"]]],["^1D","cljs/tools/reader/impl/errors.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^2;","^10","~$cljs.tools.reader.impl.inspect"]]],["^1D","org/bluebird.cljs"],[1560546090000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","~$module$node_modules$bluebird$js$browser$bluebird"]]],["^1D","clojure/string.cljs"],[1559826623000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^1W","^2E"]]],["^1X","^H"],[1547383501000],["^1D","goog/structs/pool.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^3:","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1D","goog/net/httpstatus.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/structs/heap.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Y","^23","~$goog.structs.Node"]]],["^1D","goog/debug/entrypointregistry.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Z"]]],["^1D","goog/string/string.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^24"]]],["^1D","goog/reflect/reflect.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/labs/useragent/util.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^24"]]],["^1X","~$clojure.template"],[1545934326000],["^1D","kvlt/middleware.cljc"],[1547383501000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^13","^H","^J","^12","^T","^X","^10","^Y"]]],["^1D","goog/debug/debug.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Y","~$goog.debug.errorcontext","^22"]]],["^1D","goog/string/stringbuffer.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/debug/errorcontext.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","cljs/tools/reader/reader_types.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^2U","^1W","^2E"]]],["^1D","goog/iter/iter.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Y","^1Z","~$goog.functions","~$goog.math"]]],["^1X","^J"],[1547383501000],["^1D","goog/async/nexttick.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^2P","~$goog.dom.TagName","^40","^25","^26"]]],["^1X","^35"],[1547383501000],["^1D","goog/debug/logger.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Y","^1Z","~$goog.debug","~$goog.debug.LogBuffer","^3L"]]],["^1D","goog/events/event.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^3:","~$goog.events.EventId"]]],["^1D","cljs/tools/reader/impl/commons.cljs"],[1560546087000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^2T","^2;","^2U"]]],["^1D","goog/dom/htmlelement.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","cljs/core.cljs"],[1559826623000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["~$goog.math.Long","~$goog.math.Integer","^1W","^23","^1Y","~$goog.Uri","^2E"]]],["^1D","goog/log/log.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^43","~$goog.debug.LogManager","^3L","~$goog.debug.Logger"]]],["^1D","goog/structs/collection.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/events/browserevent.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^43","^21","^3;","~$goog.events.EventType","^28","^22"]]],["^1D","goog/math/integer.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/structs/node.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1X","^3A"],[1547383502000],["^1D","clojure/set.cljs"],[1559826623000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U"]]],["^1D","goog/uri/utils.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Y","^1Z","^1W"]]],["^1D","taoensso/timbre.cljs"],[1547383502000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^10","^3I","~$taoensso.timbre.appenders.core"]]],["^1D","goog/json/json.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1D","goog/events/listenable.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^45"]]],["^1D","goog/net/xmlhttpfactory.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^38"]]],["^1D","goog/net/xmlhttp.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Z","~$goog.net.WrapperXmlHttpFactory","^39"]]],["^1D","cljs/test.cljs"],[1559826623000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","^10","^3H"]]],["^1D","goog/net/xhrlike.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V"]]],["^1X","^13"],[1559826623000],["^1D","promesa/impl/promise.cljc"],[1547383501000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^U","~$org.bluebird","^2O"]]],["^1D","goog/crypt/base64.js"],[1560546089000,"^1Q",["^ ","^1R",null,"^1S",["^L",[]],"^1T",["^V","^1Z","~$goog.crypt","^1W","^22","~$goog.userAgent.product"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","kvlt/middleware.cljc","^7",1,"^8",5,"^9",1,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",["^ ","^G","^H","^I","^J"],"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^T","^J","^J","^U","^U","^V","^V","^W","^X","^H","^H","^T","^T","~$m","^Y","^Z","^H","^Y","^Y","^[","^10","^11","^12","^10","^10","^13","^13","^X","^X","^14","^13","^12","^12"],"^15",["^L",["^16"]],"~:shadow/js-access-global",["^L",["Error"]],"^17",["^ ","^18","^J"],"~:defs",["^ ","~$body-type-hint",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",48,"^8",8,"^9",48,"^:",22],"^M","~$kvlt.middleware/body-type-hint","^6","kvlt/middleware.cljc","^:",22,"^8",1,"^7",48,"^9",48,"~:tag","~$function","~:doc","Look for a body with a `:kvlt.body/`-prefixed metadata key, setting\n  the request's `:type` and `:form-params` keys\n  accordingly (e.g. `:body ^:kvlt/edn {:x 1}`)"],"~$basic-auth",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",214,"^8",8,"^9",214,"^:",18],"^M","~$kvlt.middleware/basic-auth","^6","kvlt/middleware.cljc","^:",18,"^8",1,"^7",214,"^9",214,"^4F","^4G","^4H","Convert `:basic-auth` values (vector or map) into an\n `:authorization` header."],"~$as-key",["^ ","~:protocol-inline",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",96,"^8",8,"^9",96,"^:",14,"~:private",true,"~:arglists",["^1;",["~$quote",["^1;",[["~$resp"]]]]]],"^4M",true,"^M","~$kvlt.middleware/as-key","^6","kvlt/middleware.cljc","^:",14,"~:method-params",["^1;",[["^4P"]]],"~:protocol-impl",null,"~:arglists-meta",["^1;",[null,null]],"^8",1,"~:variadic?",false,"^7",96,"~:ret-tag","~$any","^9",96,"~:max-fixed-arity",1,"~:fn-var",true,"^4N",["^1;",["^4O",["^1;",[["^4P"]]]]]],"~$decompress",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",266,"^8",8,"^9",266,"^:",18],"^M","~$kvlt.middleware/decompress","^6","kvlt/middleware.cljc","^:",18,"^8",1,"^7",266,"^9",266,"^4F","^4G","^4H","Response body decompression.  Defaults request's \"Accept-Encoding\" header.\n  Can be disabled per-request via `:decompress-body? false'"],"~$lift-content-encoding",["^ ","~:no-doc",true,"^4L",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",250,"^8",16,"^9",250,"^:",37,"^51",true,"^4N",["^1;",["^4O",["^1;",[[["^1P",[["^ ","~:strs",["~$content-encoding"]],"~:headers","^1=","^4P"]]]]]]]],"^M","~$kvlt.middleware/lift-content-encoding","^6","kvlt/middleware.cljc","^:",37,"^4R",["^1;",[["~$p__47257"]]],"^4S",null,"^4T",["^1;",[null,null]],"^8",1,"^4U",false,"^7",250,"^4V",["^L",["~$clj","^4W"]],"^9",250,"^4X",1,"^4Y",true,"^4N",["^1;",["^4O",["^1;",[[["^1P",[["^ ","^52",["^53"]],"^54","^1=","^4P"]]]]]]]],"~$default-method",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",235,"^8",8,"^9",235,"^:",22],"^M","~$kvlt.middleware/default-method","^6","kvlt/middleware.cljc","^:",22,"^8",1,"^7",235,"^9",235,"^4F","^4G","^4H","Merge request map with `{:method :get}`.\n\n  Assumes placement before [[method]]."],"~$accept",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",86,"^8",8,"^9",86,"^:",14],"^M","~$kvlt.middleware/accept","^6","kvlt/middleware.cljc","^:",14,"^8",1,"^7",86,"^9",86,"^4F","^4G","^4H","Turn request's `:accept` value, if any, into an \"accept\" header &\n  remove the top-level key."],"~$from-content-type",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",26,"^8",11,"^9",26,"^:",28,"^4H","Used by [[as]] to transform an incoming response.  Dispatches on\n  `:content-type`' header, as a namespace-qualified\n  keyword (e.g. `:application/edn`).  The input and output are the\n  top-level response map, not only the response body.\n\n  The default implementation (i.e. unrecognized content-type) returns\n  the response map unmodified."],"^M","~$kvlt.middleware/from-content-type","^6","kvlt/middleware.cljc","^:",28,"^8",1,"^7",26,"^9",26,"^4F","~$cljs.core/MultiFn","^4H","Used by [[as]] to transform an incoming response.  Dispatches on\n  `:content-type`' header, as a namespace-qualified\n  keyword (e.g. `:application/edn`).  The input and output are the\n  top-level response map, not only the response body.\n\n  The default implementation (i.e. unrecognized content-type) returns\n  the response map unmodified."],"~$decompress-body",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",244,"^8",11,"^9",244,"^:",26,"^4H","Dispatch on the response's `:content-encoding` header value.\n  Clojure implementations exist for \"gzip\" and \"deflate\"."],"^M","~$kvlt.middleware/decompress-body","^6","kvlt/middleware.cljc","^:",26,"^8",1,"^7",244,"^9",244,"^4F","^5>","^4H","Dispatch on the response's `:content-encoding` header value.\n  Clojure implementations exist for \"gzip\" and \"deflate\"."],"~$parsing-error",["^ ","^4L",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",119,"^8",8,"^9",119,"^:",21,"^4M",true,"^4N",["^1;",["^4O",["^1;",[["^4P","~$e"]]]]]],"^4M",true,"^M","~$kvlt.middleware/parsing-error","^6","kvlt/middleware.cljc","^:",21,"^4R",["^1;",[["^4P","~$e"]]],"^4S",null,"^4T",["^1;",[null,null]],"^8",1,"^4U",false,"^7",119,"^4V",["^L",[null,"^4W","~$clj-nil"]],"^9",119,"^4X",2,"^4Y",true,"^4N",["^1;",["^4O",["^1;",[["^4P","~$e"]]]]]],"~$method",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",158,"^8",8,"^9",158,"^:",14],"^M","~$kvlt.middleware/method","^6","kvlt/middleware.cljc","^:",14,"^8",1,"^7",158,"^9",158,"^4F","^4G","^4H","Rename request's `:method` key to `:request-method`"],"~$lower-case",["^ ","^4L",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",205,"^8",16,"^9",205,"^:",26,"^4M",true],"^4M",true,"^M","~$kvlt.middleware/lower-case","^6","kvlt/middleware.cljc","^:",26,"^4R",["^1;",[["~$p1__47239#"]]],"^4S",null,"^4T",["^1;",[]],"^8",1,"^4U",false,"^7",205,"^4V",["^L",["^4W","~$cljs.core/Keyword","^5C"]],"^9",205,"^4X",1,"^4Y",true,"^4N",null],"~$default-content-type",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",190,"^8",8,"^9",190,"^:",28],"^M","~$kvlt.middleware/default-content-type","^6","kvlt/middleware.cljc","^:",28,"^8",1,"^7",190,"^9",190,"^4F","^4G","^4H","Add `:content-type` key having value `:text/plain`, if no `:content-type` present.\n\n  Assumes placement before [[content-type]]."],"~$as",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",126,"^8",8,"^9",126,"^:",10],"^M","~$kvlt.middleware/as","^6","kvlt/middleware.cljc","^:",10,"^8",1,"^7",126,"^9",126,"^4F","^4G","^4H","Response body type conversion --- `:string` `:byte-array` `:auto` `:json` `:edn` etc..\n\n  See [[from-content-type]] for custom conversions."],"~$header",["^ ","^51",true,"^4L",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",12,"^8",16,"^9",12,"^:",22,"^51",true,"^4N",["^1;",["^4O",["^1;",[[["^ ","~$hs","^54","^1=","^4P"],"~$k"],["~$m","~$k","~$v"]]]]],"~:top-fn",["^ ","^4U",false,"~:fixed-arity",3,"^4X",3,"^4R",["^1;",[[["^ ","^5O","^54","^1=","^4P"],"~$k"],["~$m","~$k","~$v"]]],"^4N",["^1;",[[["^ ","^5O","^54","^1=","^4P"],"~$k"],["~$m","~$k","~$v"]]],"^4T",["^1;",[null,null]]]],"^M","~$kvlt.middleware/header","^6","kvlt/middleware.cljc","^:",22,"^5P",["^ ","^4U",false,"^5Q",3,"^4X",3,"^4R",["^1;",[[["^ ","^5O","^54","^1=","^4P"],"~$k"],["~$m","~$k","~$v"]]],"^4N",["^1;",[[["^ ","^5O","^54","^1=","^4P"],"~$k"],["~$m","~$k","~$v"]]],"^4T",["^1;",[null,null]]],"^4R",["^1;",[[["^ ","^5O","^54","^1=","^4P"],"~$k"],["~$m","~$k","~$v"]]],"^4S",null,"^5Q",3,"^4T",["^1;",[null,null]],"^8",1,"^4U",false,"~:methods",[["^ ","^5Q",2,"^4U",false,"^4F",["^L",["^4W","^5C"]]],["^ ","^5Q",3,"^4U",false,"^4F",["^L",["^57","^4W"]]]],"^7",12,"^9",12,"^4X",3,"^4Y",true,"^4N",["^1;",[[["^ ","^5O","^54","^1=","^4P"],"~$k"],["~$m","~$k","~$v"]]]],"~$port",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",164,"^8",8,"^9",164,"^:",12],"^M","~$kvlt.middleware/port","^6","kvlt/middleware.cljc","^:",12,"^8",1,"^7",164,"^9",164,"^4F","^4G","^4H","Rename request's `:port` key to `:server-port`"],"~$as-type",["^ ","^51",true,"^5",["^ ","^6","kvlt/middleware.cljc","^7",99,"^8",20,"^9",99,"^:",27,"^51",true],"^M","~$kvlt.middleware/as-type","^6","kvlt/middleware.cljc","^:",27,"^8",1,"^7",99,"^9",99,"^4F","^5>"],"~$keyword-headers",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",199,"^8",8,"^9",199,"^:",23],"^M","~$kvlt.middleware/keyword-headers","^6","kvlt/middleware.cljc","^:",23,"^8",1,"^7",199,"^9",199,"^4F","^4G","^4H","Convert keys within request's `:headers` value to strings, and\nresponse's `:headers` values to keywords. "],"~$hint->body-type",["^ ","^4L",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",44,"^8",8,"^9",44,"^:",23,"^4M",true,"^4N",["^1;",["^4O",["^1;",[["~$x"]]]]]],"^4M",true,"^M","~$kvlt.middleware/hint->body-type","^6","kvlt/middleware.cljc","^:",23,"^4R",["^1;",[["~$x"]]],"^4S",null,"^4T",["^1;",[null,null]],"^8",1,"^4U",false,"^7",44,"^4V",["^L",["^5I","^5C"]],"^9",44,"^4X",1,"^4Y",true,"^4N",["^1;",["^4O",["^1;",[["~$x"]]]]]],"~$body->string",["^ ","^4L",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",22,"^8",8,"^9",22,"^:",20,"^4M",true,"^4N",["^1;",["^4O",["^1;",[[["^ ","~:keys",["~$body"],"^1=","^4P"]]]]]]],"^4M",true,"^M","~$kvlt.middleware/body->string","^6","kvlt/middleware.cljc","^:",20,"^4R",["^1;",[["~$p__47072"]]],"^4S",null,"^4T",["^1;",[null,null]],"^8",1,"^4U",false,"^7",22,"^4V",["^L",[null,"^4W"]],"^9",22,"^4X",1,"^4Y",true,"^4N",["^1;",["^4O",["^1;",[[["^ ","^61",["^62"],"^1=","^4P"]]]]]]],"~$status->reason",["^ ","^51",true,"^5",["^ ","^6","kvlt/middleware.cljc","^7",283,"^8",15,"^9",283,"^:",29,"^51",true],"^M","~$kvlt.middleware/status->reason","^6","kvlt/middleware.cljc","^:",29,"^8",1,"^7",283,"^9",283,"^4F","~$cljs.core/IMap"],"~$accept-encoding",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",137,"^8",8,"^9",137,"^:",23],"^M","~$kvlt.middleware/accept-encoding","^6","kvlt/middleware.cljc","^:",23,"^8",1,"^7",137,"^9",137,"^4F","^4G","^4H","Convert the `:accept-encoding` option (keyword/str, or collection of) to an\n  acceptable `Accept-Encoding` header.\n\n  This middleware is not likely to have any effect in a browser\n  environment."],"~$content-type",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",67,"^8",8,"^9",67,"^:",20],"^M","~$kvlt.middleware/content-type","^6","kvlt/middleware.cljc","^:",20,"^8",1,"^7",67,"^9",67,"^4F","^4G","^4H","Turn request's `:content-type` (or `:type`), if any, and\n   `:character-encoding`, if any, into a \"content-type\" header & leave\n   top-level `:content-type` key in place. "],"~$url",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",173,"^8",8,"^9",173,"^:",11],"^M","~$kvlt.middleware/url","^6","kvlt/middleware.cljc","^:",11,"^8",1,"^7",173,"^9",173,"^4F","^4G","^4H","Turn request's `:url` value, if any, into top-level `:scheme`,\n  `:server-name`, `:server-port`, `:uri`, `:query-string`, and\n  `:user-info` keys"],"~$oauth-token",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",226,"^8",8,"^9",226,"^:",19],"^M","~$kvlt.middleware/oauth-token","^6","kvlt/middleware.cljc","^:",19,"^8",1,"^7",226,"^9",226,"^4F","^4G","^4H","Convert `:oauth-token` value into an `:authorization` header"],"~$error",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",325,"^8",8,"^9",325,"^:",13],"^M","~$kvlt.middleware/error","^6","kvlt/middleware.cljc","^:",13,"^8",1,"^7",325,"^9",325,"^4F","^4G","^4H","Turn error responses into `ExceptionInfo` instances, with the full\n  response map as the attached data.  Additionally, a `:reason`\n  value (e.g. `:service-unavailable`) will be used to augment the\n  `:status` key.\n\n  For uniformity, `:type` is provided as an alias for `:reason`, e.g."],"~$lower-case-headers",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",208,"^8",8,"^9",208,"^:",26],"^M","~$kvlt.middleware/lower-case-headers","^6","kvlt/middleware.cljc","^:",26,"^8",1,"^7",208,"^9",208,"^4F","^4G","^4H","Convert keys within request & response's `:headers` value to lower\n  case."],"~$unexceptional-status?",["^ ","^51",true,"^5",["^ ","^6","kvlt/middleware.cljc","^7",280,"^8",15,"^9",280,"^:",36,"^51",true],"^M","~$kvlt.middleware/unexceptional-status?","^6","kvlt/middleware.cljc","^:",36,"^8",1,"^7",280,"^9",280,"^4F","~$cljs.core/ISet"]],"^19",["^ ","^H","^H","^Z","^H","^J","^J","^U","^U","~$m","^Y","^Y","^Y","^13","^13","^14","^13"],"~:cljs.analyzer/constants",["^ ","^15",["^L",["~:user-info","~:not-acceptable","~$error?","~:decompress-body?","~:http-version-not-supported","^5E","~:request-entity-too-large","~:unauthorized","^4D","~:get","^6?","^4I","~:switching-protocols","~:gateway-timeout","~:cause","^58","~:application/edn","~:non-authoritative-information","^5:","~:else","~:precondition-failed","~:continue","~:method-not-allowed","~:password","~:removing","~:method","~:default","^6A","~:authorization","^P","^M","^1=","~:byte-array","~:default-content-type","^6=","~:see-other","^6","~:middleware-error","~:username","^6;","^:","~:accepted","~:application/json","~:requested-range-not-satisfiable","^5;","~:gone","~:type","~:payment-required","~:created","^69","~:forbidden","~:port","~:string","~:keyword-headers","~:expectation-failed","~:ftp","~:unsupported-media-type","~:internal-server-error","^5D","^8","^54","~:orig-content-encoding","~:server-port","^4E","~:request-timeout","~:reason","~:form-params","^7","~:service-unavailable","~:status","~:not-found","^N","~:ok","~:accept-encoding","~:orig-content-type","~:proxy-authentication-required","~:request-uri-too-large","~:edn","^4J","~:url","~:found","~:content-type","~:b","^9","~:has","~:oauth-token","~:character-encoding","~:post","~:length-required","~:error","^59","~:lower-case-headers","~:partial-content","~:content-encoding","~:bad-request","~:uri","~:not-modified","~:origami","~:server-name","~:use-proxy","~:kvlt.body/edn","~:text/plain","~:not-implemented","^4N","~:bad-gateway","~:query-string","~:body-type-hint","~:hierarchy","^68","~:body","~:multiple-choices","~$...","^4H","~:auto","~:basic-auth","~:moved-permanently","~:decompress","^6:","~:conflict","~:scheme","~:test","^6<","~:kvlt/request","~:temporary-redirect","~:reset-content","~:request-method","~:default-method","~:no-content","~:a","~:message","^6>","^6@","~:accept"]],"~:order",["^54","^8A","^7V","^8@","^70","^6S","^78","^8?","^7;","^7J","^7W","^4E","^P","^M","^6","^:","^8","^7","^9","^4N","^4H","^8J","^N","^4D","^6[","^7Z","^8:","^7S","^7Y","^6;","^6:","^8R","^6Z","^5;","^5:","^1=","^8K","^7@","^72","^8D","^7P","^80","^75","^6U","^7O","^69","^68","^87","~:a","~:b~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1P",[["^8V","~:static-fns"],true,["^8V","~:elide-asserts"],false,["^8V","~:optimize-constants"],null,["^8V","^1G"],null,["^8V","~:external-config"],null,["^8V","~:tooling-config"],null,["^8V","~:emit-constants"],null,["^8V","~:load-tests"],null,["^8V","~:infer-externs"],"^8D",["^8V","^1I"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8V","~:fn-invoke-direct"],null,["^8V","~:source-map"],"/dev/null"]]]