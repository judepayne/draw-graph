["^ ","~:output",["^ ","~:js","goog.provide('rhizome.dot');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('clojure.set');\nrhizome.dot.escapable_characters = \"\\\\|{}\\\"\";\n/**\n * Escape characters that are significant for the dot format.\n */\nrhizome.dot.escape_string = (function rhizome$dot$escape_string(s){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__47096_SHARP_,p2__47097_SHARP_){\nreturn clojure.string.replace(p1__47096_SHARP_,cljs.core.str.cljs$core$IFn$_invoke$arity$1(p2__47097_SHARP_),[\"\\\\\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(p2__47097_SHARP_)].join(''));\n}),s,rhizome.dot.escapable_characters);\n});\nrhizome.dot.default_options = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"dpi\",\"dpi\",-986162832),(100)], null);\nrhizome.dot.default_node_options = cljs.core.PersistentArrayMap.EMPTY;\nrhizome.dot.default_edge_options = cljs.core.PersistentArrayMap.EMPTY;\nrhizome.dot.option_translations = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"vertical?\",\"vertical?\",-1522630444),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rankdir\",\"rankdir\",-2029540135),new cljs.core.PersistentArrayMap(null, 2, [true,new cljs.core.Keyword(null,\"TP\",\"TP\",163239233),false,new cljs.core.Keyword(null,\"LR\",\"LR\",341359911)], null)], null)], null);\nrhizome.dot.translate_options = (function rhizome$dot$translate_options(m){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__47103){\nvar vec__47104 = p__47103;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47104,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47104,(1),null);\nvar temp__5718__auto__ = (rhizome.dot.option_translations.cljs$core$IFn$_invoke$arity$1 ? rhizome.dot.option_translations.cljs$core$IFn$_invoke$arity$1(k) : rhizome.dot.option_translations.call(null,k));\nif(cljs.core.truth_(temp__5718__auto__)){\nvar vec__47114 = temp__5718__auto__;\nvar k_STAR_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47114,(0),null);\nvar f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47114,(1),null);\nif(cljs.core.contains_QMARK_(m,k_STAR_)){\nreturn null;\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k_STAR_,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(v) : f.call(null,v))], null);\n}\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,v], null);\n}\n}),m)));\n});\nrhizome.dot.__GT_literal = (function rhizome$dot$__GT_literal(s){\nreturn cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"rhizome.dot\",\"literal\",\"rhizome.dot/literal\",-405662190),true], null));\n});\nrhizome.dot.literal_QMARK_ = (function rhizome$dot$literal_QMARK_(x){\nreturn new cljs.core.Keyword(\"rhizome.dot\",\"literal\",\"rhizome.dot/literal\",-405662190).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(x));\n});\nrhizome.dot.unwrap_literal = (function rhizome$dot$unwrap_literal(x){\nif(cljs.core.truth_(rhizome.dot.literal_QMARK_(x))){\nreturn cljs.core.first(x);\n} else {\nreturn x;\n}\n});\nrhizome.dot.format_options_value = (function rhizome$dot$format_options_value(v){\nvar v_str = cljs.core.str.cljs$core$IFn$_invoke$arity$1(v);\nif(clojure.string.starts_with_QMARK_(v_str,\"<<\")){\nreturn v_str;\n} else {\nif(typeof v === 'string'){\nreturn [\"\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhizome.dot.escape_string(v)),\"\\\"\"].join('');\n} else {\nif((v instanceof cljs.core.Keyword)){\nreturn cljs.core.name(v);\n} else {\nif(cljs.core.coll_QMARK_(v)){\nif(cljs.core.truth_(rhizome.dot.literal_QMARK_(v))){\nreturn [\"\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhizome.dot.unwrap_literal(v)),\"\\\"\"].join('');\n} else {\nreturn [\"\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\",\",cljs.core.map.cljs$core$IFn$_invoke$arity$2(rhizome.dot.format_options_value,v)))),\"\\\"\"].join('');\n}\n} else {\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(v);\n\n}\n}\n}\n}\n});\nrhizome.dot.format_label = (function rhizome$dot$format_label(label){\nif(cljs.core.sequential_QMARK_(label)){\nreturn rhizome.dot.__GT_literal(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\" | \",cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__47142_SHARP_){\nreturn [\"{ \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhizome.dot.unwrap_literal((rhizome.dot.format_label.cljs$core$IFn$_invoke$arity$1 ? rhizome.dot.format_label.cljs$core$IFn$_invoke$arity$1(p1__47142_SHARP_) : rhizome.dot.format_label.call(null,p1__47142_SHARP_)))),\" }\"].join('');\n}),label))));\n} else {\nif(typeof label === 'string'){\nreturn label;\n} else {\nif((label == null)){\nreturn \"\";\n} else {\nreturn cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([label], 0));\n\n}\n}\n}\n});\nrhizome.dot.format_options = (function rhizome$dot$format_options(m,separator){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(separator,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p__47176){\nvar vec__47177 = p__47176;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47177,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47177,(1),null);\nreturn [cljs.core.name(k),\"=\",rhizome.dot.format_options_value(v)].join('');\n}),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.second),cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(m,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"label\",\"label\",1718410804)], null),(function (p1__47151_SHARP_){\nif(cljs.core.truth_(p1__47151_SHARP_)){\nreturn rhizome.dot.format_label(p1__47151_SHARP_);\n} else {\nreturn null;\n}\n}))))));\n});\nrhizome.dot.format_edge = (function rhizome$dot$format_edge(src,dst,p__47184){\nvar map__47185 = p__47184;\nvar map__47185__$1 = (((((!((map__47185 == null))))?(((((map__47185.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47185.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47185):map__47185);\nvar options = map__47185__$1;\nvar directed_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47185__$1,new cljs.core.Keyword(null,\"directed?\",\"directed?\",-323153830));\nvar options__$1 = cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"label\",\"label\",1718410804)], null),((function (map__47185,map__47185__$1,options,directed_QMARK_){\nreturn (function (p1__47180_SHARP_){\nvar or__4131__auto__ = p1__47180_SHARP_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn \"\";\n}\n});})(map__47185,map__47185__$1,options,directed_QMARK_))\n);\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(src),(cljs.core.truth_(directed_QMARK_)?\" -> \":\" -- \"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(dst),\"[\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhizome.dot.format_options(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(options__$1,new cljs.core.Keyword(null,\"directed?\",\"directed?\",-323153830)),\", \")),\"]\"].join('');\n});\nrhizome.dot.format_node = (function rhizome$dot$format_node(id,p__47198){\nvar map__47199 = p__47198;\nvar map__47199__$1 = (((((!((map__47199 == null))))?(((((map__47199.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47199.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47199):map__47199);\nvar options = map__47199__$1;\nvar label = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47199__$1,new cljs.core.Keyword(null,\"label\",\"label\",1718410804));\nvar shape = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47199__$1,new cljs.core.Keyword(null,\"shape\",\"shape\",1190694006));\nvar shape__$1 = (function (){var or__4131__auto__ = shape;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nif(cljs.core.sequential_QMARK_(label)){\nreturn new cljs.core.Keyword(null,\"record\",\"record\",-779106859);\n} else {\nreturn null;\n}\n}\n})();\nvar options__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(options,new cljs.core.Keyword(null,\"label\",\"label\",1718410804),(function (){var or__4131__auto__ = label;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn \"\";\n}\n})(),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"shape\",\"shape\",1190694006),shape__$1], 0));\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"[\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhizome.dot.format_options(options__$1,\", \")),\"]\"].join('');\n});\nrhizome.dot.format_rank = (function rhizome$dot$format_rank(ids){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.str,\"{ rank=same; \",cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\", \",ids),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"}\"], null)));\n});\nrhizome.dot._STAR_node__GT_id_STAR_ = null;\nrhizome.dot._STAR_cluster__GT_id_STAR_ = null;\nrhizome.dot.node__GT_id = (function rhizome$dot$node__GT_id(n){\nreturn (rhizome.dot._STAR_node__GT_id_STAR_.cljs$core$IFn$_invoke$arity$1 ? rhizome.dot._STAR_node__GT_id_STAR_.cljs$core$IFn$_invoke$arity$1(n) : rhizome.dot._STAR_node__GT_id_STAR_.call(null,n));\n});\nrhizome.dot.cluster__GT_id = (function rhizome$dot$cluster__GT_id(s){\nreturn (rhizome.dot._STAR_cluster__GT_id_STAR_.cljs$core$IFn$_invoke$arity$1 ? rhizome.dot._STAR_cluster__GT_id_STAR_.cljs$core$IFn$_invoke$arity$1(s) : rhizome.dot._STAR_cluster__GT_id_STAR_.call(null,s));\n});\nrhizome.dot.clust__GT_nds = (function rhizome$dot$clust__GT_nds(f,nodes){\nreturn cljs.core.reduce_kv((function (m,k,v){\nvar separated = cljs.core.zipmap(k,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,v)));\nreturn cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(clojure.set.union,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([separated,m], 0));\n}),cljs.core.PersistentArrayMap.EMPTY,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.group_by(f,nodes),null));\n});\n/**\n * Takes a description of a graph, and returns a string describing a GraphViz dot file.\n * \n * Requires two fields: `nodes`, which is a list of the nodes in the graph, and `adjacent`, which\n * is a function that takes a node and returns a list of adjacent nodes.\n */\nrhizome.dot.graph__GT_dot = (function rhizome$dot$graph__GT_dot(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___47304 = arguments.length;\nvar i__4731__auto___47305 = (0);\nwhile(true){\nif((i__4731__auto___47305 < len__4730__auto___47304)){\nargs__4736__auto__.push((arguments[i__4731__auto___47305]));\n\nvar G__47306 = (i__4731__auto___47305 + (1));\ni__4731__auto___47305 = G__47306;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn rhizome.dot.graph__GT_dot.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\nrhizome.dot.graph__GT_dot.cljs$core$IFn$_invoke$arity$variadic = (function (nodes,adjacent,p__47228){\nvar map__47229 = p__47228;\nvar map__47229__$1 = (((((!((map__47229 == null))))?(((((map__47229.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47229.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47229):map__47229);\nvar graph_descriptor = map__47229__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47229__$1,new cljs.core.Keyword(null,\"options\",\"options\",99638489));\nvar directed_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__47229__$1,new cljs.core.Keyword(null,\"directed?\",\"directed?\",-323153830),true);\nvar cluster__GT_descriptor = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__47229__$1,new cljs.core.Keyword(null,\"cluster->descriptor\",\"cluster->descriptor\",-1433685113),cljs.core.constantly(null));\nvar cluster__GT_ranks = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__47229__$1,new cljs.core.Keyword(null,\"cluster->ranks\",\"cluster->ranks\",296694829),cljs.core.constantly(null));\nvar edge__GT_descriptor = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__47229__$1,new cljs.core.Keyword(null,\"edge->descriptor\",\"edge->descriptor\",-2146285457),cljs.core.constantly(null));\nvar cluster__GT_parent = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__47229__$1,new cljs.core.Keyword(null,\"cluster->parent\",\"cluster->parent\",1941927856),cljs.core.constantly(null));\nvar node__GT_descriptor = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__47229__$1,new cljs.core.Keyword(null,\"node->descriptor\",\"node->descriptor\",-1696154479),cljs.core.constantly(null));\nvar vertical_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__47229__$1,new cljs.core.Keyword(null,\"vertical?\",\"vertical?\",-1522630444),true);\nvar node__GT_clusters = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__47229__$1,new cljs.core.Keyword(null,\"node->clusters\",\"node->clusters\",-265377067),cljs.core.constantly(null));\nvar _STAR_node__GT_id_STAR__orig_val__47231 = rhizome.dot._STAR_node__GT_id_STAR_;\nvar _STAR_cluster__GT_id_STAR__orig_val__47232 = rhizome.dot._STAR_cluster__GT_id_STAR_;\nvar _STAR_node__GT_id_STAR__temp_val__47233 = (function (){var or__4131__auto__ = rhizome.dot._STAR_node__GT_id_STAR_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.memoize(((function (or__4131__auto__,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (_){\nreturn cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(\"node\");\n});})(or__4131__auto__,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n);\n}\n})();\nvar _STAR_cluster__GT_id_STAR__temp_val__47234 = (function (){var or__4131__auto__ = rhizome.dot._STAR_cluster__GT_id_STAR_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.memoize(((function (or__4131__auto__,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (_){\nreturn cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(\"cluster\");\n});})(or__4131__auto__,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n);\n}\n})();\nrhizome.dot._STAR_node__GT_id_STAR_ = _STAR_node__GT_id_STAR__temp_val__47233;\n\nrhizome.dot._STAR_cluster__GT_id_STAR_ = _STAR_cluster__GT_id_STAR__temp_val__47234;\n\ntry{var current_cluster = new cljs.core.Keyword(\"rhizome.dot\",\"cluster\",\"rhizome.dot/cluster\",-748815582).cljs$core$IFn$_invoke$arity$1(graph_descriptor);\nvar subgraph_QMARK_ = cljs.core.boolean$(current_cluster);\nvar cluster__GT_nodes = (cljs.core.truth_(node__GT_clusters)?rhizome.dot.clust__GT_nds(node__GT_clusters,nodes):null);\nvar cluster_QMARK_ = (cljs.core.truth_(cluster__GT_nodes)?cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.boolean$,cluster__GT_nodes):cljs.core.constantly(false));\nvar node_QMARK_ = cljs.core.set(nodes);\nvar ranks = (cluster__GT_ranks.cljs$core$IFn$_invoke$arity$1 ? cluster__GT_ranks.cljs$core$IFn$_invoke$arity$1(current_cluster) : cluster__GT_ranks.call(null,current_cluster));\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.str,(cljs.core.truth_(current_cluster)?[\"subgraph \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhizome.dot.cluster__GT_id(current_cluster))].join(''):(cljs.core.truth_(directed_QMARK_)?\"digraph\":\"graph\")),\" {\\n\",(function (){var edge_options = new cljs.core.Keyword(null,\"edge\",\"edge\",919909153).cljs$core$IFn$_invoke$arity$1(options);\nvar node_options = new cljs.core.Keyword(null,\"node\",\"node\",581201198).cljs$core$IFn$_invoke$arity$1(options);\nreturn [\"graph[\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhizome.dot.format_options(rhizome.dot.translate_options(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([rhizome.dot.default_options,options], 0)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"fontname\",\"fontname\",-1891838675)], null),((function (edge_options,node_options,current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (p1__47213_SHARP_){\nvar or__4131__auto__ = p1__47213_SHARP_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nif(subgraph_QMARK_){\nreturn \"Monospace\";\n} else {\nreturn null;\n}\n}\n});})(edge_options,node_options,current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n),new cljs.core.Keyword(null,\"vertical?\",\"vertical?\",-1522630444),vertical_QMARK_),new cljs.core.Keyword(null,\"edge\",\"edge\",919909153),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"node\",\"node\",581201198)], 0))),\", \")),\"]\\n\",\"node[\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhizome.dot.format_options(rhizome.dot.translate_options(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(node_options,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"fontname\",\"fontname\",-1891838675)], null),((function (edge_options,node_options,current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (p1__47214_SHARP_){\nvar or__4131__auto__ = p1__47214_SHARP_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn \"Monospace\";\n}\n});})(edge_options,node_options,current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n)),\", \")),\"]\\n\",\"edge[\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhizome.dot.format_options(rhizome.dot.translate_options(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(edge_options,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"fontname\",\"fontname\",-1891838675)], null),((function (edge_options,node_options,current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (p1__47215_SHARP_){\nvar or__4131__auto__ = p1__47215_SHARP_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn \"Monospace\";\n}\n});})(edge_options,node_options,current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n)),\", \")),\"]\\n\\n\"].join('');\n})(),cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\"\\n\",cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (p1__47217_SHARP_){\nreturn rhizome.dot.format_node(rhizome.dot.node__GT_id(p1__47217_SHARP_),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([rhizome.dot.default_node_options,(node__GT_descriptor.cljs$core$IFn$_invoke$arity$1 ? node__GT_descriptor.cljs$core$IFn$_invoke$arity$1(p1__47217_SHARP_) : node__GT_descriptor.call(null,p1__47217_SHARP_))], 0)));\n});})(current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n,cljs.core.remove.cljs$core$IFn$_invoke$arity$2(((function (current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (p1__47216_SHARP_){\nif(cljs.core.truth_(current_cluster)){\nreturn (!(cljs.core.contains_QMARK_((node__GT_clusters.cljs$core$IFn$_invoke$arity$1 ? node__GT_clusters.cljs$core$IFn$_invoke$arity$1(p1__47216_SHARP_) : node__GT_clusters.call(null,p1__47216_SHARP_)),current_cluster)));\n} else {\nreturn false;\n}\n});})(current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n,nodes)),cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (r){\nreturn rhizome.dot.format_rank(cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(rhizome.dot._STAR_node__GT_id_STAR_,r));\n});})(current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n,ranks),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (p1__47219_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(rhizome.dot.graph__GT_dot,nodes,adjacent,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(graph_descriptor,new cljs.core.Keyword(\"rhizome.dot\",\"cluster\",\"rhizome.dot/cluster\",-748815582),p1__47219_SHARP_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"options\",\"options\",99638489),(cluster__GT_descriptor.cljs$core$IFn$_invoke$arity$1 ? cluster__GT_descriptor.cljs$core$IFn$_invoke$arity$1(p1__47219_SHARP_) : cluster__GT_descriptor.call(null,p1__47219_SHARP_))], 0))));\n});})(current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n,cljs.core.remove.cljs$core$IFn$_invoke$arity$2(((function (current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (p1__47218_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(current_cluster,(cluster__GT_parent.cljs$core$IFn$_invoke$arity$1 ? cluster__GT_parent.cljs$core$IFn$_invoke$arity$1(p1__47218_SHARP_) : cluster__GT_parent.call(null,p1__47218_SHARP_)));\n});})(current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n,cljs.core.keys(cluster__GT_nodes))),((subgraph_QMARK_)?null:cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (p__47265){\nvar vec__47266 = p__47265;\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47266,(0),null);\nvar vec__47269 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47266,(1),null);\nvar type = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47269,(0),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47269,(1),null);\nvar descriptor = (edge__GT_descriptor.cljs$core$IFn$_invoke$arity$2 ? edge__GT_descriptor.cljs$core$IFn$_invoke$arity$2(a,b) : edge__GT_descriptor.call(null,a,b));\nvar format = ((function (descriptor,vec__47266,a,vec__47269,type,b,current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (p1__47221_SHARP_){\nreturn rhizome.dot.format_edge(rhizome.dot.node__GT_id(a),((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"node\",\"node\",581201198),type))?rhizome.dot.node__GT_id(b):rhizome.dot.cluster__GT_id(b)),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([rhizome.dot.default_edge_options,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"directed?\",\"directed?\",-323153830),directed_QMARK_], null),p1__47221_SHARP_], 0)));\n});})(descriptor,vec__47266,a,vec__47269,type,b,current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n;\nif(cljs.core.vector_QMARK_(descriptor)){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\"\\n\",cljs.core.map.cljs$core$IFn$_invoke$arity$2(format,descriptor)));\n} else {\nreturn format(descriptor);\n}\n});})(current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(((function (current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (node){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(node),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters){\nreturn (function (p1__47220_SHARP_){\nif(cljs.core.truth_((node_QMARK_.cljs$core$IFn$_invoke$arity$1 ? node_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__47220_SHARP_) : node_QMARK_.call(null,p1__47220_SHARP_)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"node\",\"node\",581201198),p1__47220_SHARP_], null);\n} else {\nif(cljs.core.truth_((cluster_QMARK_.cljs$core$IFn$_invoke$arity$1 ? cluster_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__47220_SHARP_) : cluster_QMARK_.call(null,p1__47220_SHARP_)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"cluster\",\"cluster\",535175621),p1__47220_SHARP_], null);\n} else {\nreturn null;\n\n}\n}\n});})(current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n,(adjacent.cljs$core$IFn$_invoke$arity$1 ? adjacent.cljs$core$IFn$_invoke$arity$1(node) : adjacent.call(null,node)))));\n});})(current_cluster,subgraph_QMARK_,cluster__GT_nodes,cluster_QMARK_,node_QMARK_,ranks,_STAR_node__GT_id_STAR__orig_val__47231,_STAR_cluster__GT_id_STAR__orig_val__47232,_STAR_node__GT_id_STAR__temp_val__47233,_STAR_cluster__GT_id_STAR__temp_val__47234,map__47229,map__47229__$1,graph_descriptor,options,directed_QMARK_,cluster__GT_descriptor,cluster__GT_ranks,edge__GT_descriptor,cluster__GT_parent,node__GT_descriptor,vertical_QMARK_,node__GT_clusters))\n,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([nodes], 0)))),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"}\\n\"], null)], 0))));\n}finally {rhizome.dot._STAR_cluster__GT_id_STAR_ = _STAR_cluster__GT_id_STAR__orig_val__47232;\n\nrhizome.dot._STAR_node__GT_id_STAR_ = _STAR_node__GT_id_STAR__orig_val__47231;\n}});\n\nrhizome.dot.graph__GT_dot.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\nrhizome.dot.graph__GT_dot.cljs$lang$applyTo = (function (seq47222){\nvar G__47223 = cljs.core.first(seq47222);\nvar seq47222__$1 = cljs.core.next(seq47222);\nvar G__47224 = cljs.core.first(seq47222__$1);\nvar seq47222__$2 = cljs.core.next(seq47222__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__47223,G__47224,seq47222__$2);\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rhizome/dot.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rhizome.dot","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^O","~$str","^O","~$clojure.set","^Q","~$set","^Q","~$cljs.core","^S","~$goog","^T"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^S","^S"],"~:form",["~#list",["~$ns","^J",["^Z",["^V",["^O","~:as","^P"],["^Q","^10","^R"]]]]],"~:flags",["^ ","^V",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^O","^Q"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","rhizome/dot.cljc"],"~:compiled-at",1560836397967,"~:resource-name","rhizome/dot.cljc","~:warnings",[],"~:source","(ns rhizome.dot\n  (:require [clojure.string :as str]\n            [clojure.set :as set]))\n\n;;;\n\n(def ^:private escapable-characters \"\\\\|{}\\\"\")\n\n(defn- escape-string\n  \"Escape characters that are significant for the dot format.\"\n  [s]\n  (reduce\n    #(str/replace %1 (str %2) (str \"\\\\\" %2))\n    s\n    escapable-characters))\n\n;;;\n\n(def ^:private default-options\n  {:dpi 100})\n\n(def ^:private default-node-options\n  {})\n\n(def ^:private default-edge-options\n  {})\n\n;;;\n\n(def ^:private option-translations\n  {:vertical? [:rankdir {true :TP, false :LR}]})\n\n(defn translate-options [m]\n  (->> m\n    (map\n      (fn [[k v]]\n        (if-let [[k* f] (option-translations k)]\n          (when-not (contains? m k*)\n            [k* (f v)])\n          [k v])))\n    (remove nil?)\n    (into {})))\n\n;;;\n\n(defn ->literal [s]\n  ^::literal [s])\n\n(defn literal? [x]\n  (-> x meta ::literal))\n\n(defn unwrap-literal [x]\n  (if (literal? x)\n    (first x)\n    x))\n\n;;;\n\n\n\n(defn- format-options-value [v]\n  (let [v-str (str v)]\n    (cond\n      ;; added first condition to handle html like labels which don't\n      ;; work if wrapped in quotes\n      (str/starts-with? v-str \"<<\") v-str\n      (string? v) (str \\\" (escape-string v) \\\")\n      (keyword? v) (name v)\n      (coll? v) (if (literal? v)\n                  (str \"\\\"\" (unwrap-literal v) \"\\\"\")\n                  (str \"\\\"\"\n                       (->> v\n                            (map format-options-value)\n                            (interpose \",\")\n                            (apply str))\n                       \"\\\"\"))\n      :else (str v))))\n\n(defn format-label [label]\n  (cond\n    (sequential? label)\n    (->> label\n      (map #(str \"{ \" (-> % format-label unwrap-literal) \" }\"))\n      (interpose \" | \")\n      (apply str)\n      ->literal)\n\n    (string? label)\n    label\n\n    (nil? label)\n    \"\"\n\n    :else\n    (pr-str label)))\n\n(defn- format-options [m separator]\n  (->>\n    (update-in m [:label] #(when % (format-label %)))\n    (remove (comp nil? second))\n    (map\n      (fn [[k v]]\n        (str (name k) \"=\" (format-options-value v))))\n    (interpose separator)\n    (apply str)))\n\n(defn- format-edge [src dst {:keys [directed?] :as options}]\n  (let [options (update-in options [:label] #(or % \"\"))]\n    (str src\n      (if directed?\n        \" -> \"\n        \" -- \")\n      dst\n      \"[\" (format-options (dissoc options :directed?) \", \") \"]\")))\n\n(defn- format-node [id {:keys [label shape] :as options}]\n  (let [shape (or shape\n                (when (sequential? label)\n                  :record))\n        options (assoc options\n                  :label (or label \"\")\n                  :shape shape)]\n    (str id \"[\"\n      (format-options options \", \")\n      \"]\")))\n\n\n;; added formatter for ranks\n(defn- format-rank [ids]\n  (apply str \"{ rank=same; \"\n         (concat (interpose \", \" ids) [\"}\"])))\n\n;;;\n\n(def ^:private ^:dynamic *node->id* nil)\n(def ^:private ^:dynamic *cluster->id* nil)\n\n(defn- node->id [n]\n  (*node->id* n))\n\n(defn- cluster->id [s]\n  (*cluster->id* s))\n\n;; added to allow for a node to be in more than one cluster which\n;; is needed when we have nested clusters\n(defn- clust->nds [f nodes] \n  (reduce-kv\n   (fn [m k v]\n     (let [separated (zipmap k (repeat (into #{} v)))]\n       (merge-with set/union separated m)))\n   {}\n   (dissoc (group-by f nodes) nil)))\n\n\n(defn graph->dot\n  \"Takes a description of a graph, and returns a string describing a GraphViz dot file.\n\n   Requires two fields: `nodes`, which is a list of the nodes in the graph, and `adjacent`, which\n   is a function that takes a node and returns a list of adjacent nodes.\"\n  [nodes adjacent\n   & {:keys [directed?\n             vertical?\n             options\n             node->descriptor\n             edge->descriptor\n             cluster->parent\n             node->clusters  ;; changed from ->cluster to ->cluster*s*\n             cluster->descriptor\n             cluster->ranks]\n      :or {directed? true\n           vertical? true\n           node->descriptor (constantly nil)\n           edge->descriptor (constantly nil)\n           cluster->parent (constantly nil)\n           node->clusters (constantly nil)\n           cluster->descriptor (constantly nil)\n           cluster->ranks (constantly nil)}\n      :as graph-descriptor}]\n\n;; inlined the macro code for cljc\n  (binding [*node->id* (or *node->id* (memoize (fn [_] (gensym \"node\"))))\n            *cluster->id* (or *cluster->id* (memoize (fn [_] (gensym \"cluster\"))))]\n    (let [current-cluster (::cluster graph-descriptor)\n          subgraph? (boolean current-cluster)\n          cluster->nodes (when node->clusters\n                           (clust->nds node->clusters nodes)) ;; changed for nested clusters\n          cluster? (if cluster->nodes\n                     (comp boolean cluster->nodes)\n                     (constantly false))\n          node? (set nodes)\n          ranks (cluster->ranks current-cluster)]\n\n     (apply str\n       (if current-cluster\n         (str \"subgraph \" (cluster->id current-cluster))\n         (if directed?\n           \"digraph\"\n           \"graph\"))\n       \" {\\n\"\n\n       ;; global options\n       (let [edge-options (:edge options)\n             node-options (:node options)]\n         (str\n           ;; graph[...]\n           \"graph[\"\n           (-> (merge default-options options)\n             (update-in [:fontname] #(or % (when subgraph? \"Monospace\")))\n             (assoc :vertical? vertical?)\n             (dissoc :edge :node)\n             translate-options\n             (format-options \", \"))\n           \"]\\n\"\n\n           ;; node[...]\n           \"node[\"\n           (-> node-options\n             (update-in [:fontname] #(or % \"Monospace\"))\n             (translate-options)\n             (format-options \", \"))\n           \"]\\n\"\n\n           ;; edge[...]\n           \"edge[\"\n           (-> edge-options\n             (update-in [:fontname] #(or % \"Monospace\"))\n             (translate-options)\n             (format-options \", \"))\n           \"]\\n\\n\"))\n\n       (interpose \"\\n\"\n         (concat\n\n           ;; nodes\n           (->> nodes\n             (remove #(if current-cluster\n                        (not (contains? (node->clusters %) current-cluster))\n                        false)) ;; <-changed\n             (map\n               #(format-node (node->id %)\n                  (merge\n                    default-node-options\n                    (node->descriptor %)))))\n\n           ;; added ranks functionality\n           (->> ranks\n                (map\n                 (fn [r]\n                   (format-rank\n                    (mapv *node->id* r)))))\n\n           ;; clusters\n           (->> cluster->nodes\n             keys\n             (remove #(not= current-cluster (cluster->parent %)))\n             (map\n               #(apply graph->dot\n                  nodes\n                  adjacent\n                  (apply concat\n                    (assoc graph-descriptor\n                      ::cluster %\n                      :options (cluster->descriptor %))))))\n\n           ;; edges\n           (when-not subgraph?\n\n             (->> nodes\n\n               ;; filter out destinations that aren't in `nodes`, and differentiate\n               ;; between nodes and clusters\n               (mapcat\n                 (fn [node]\n                   (map vector\n                     (repeat node)\n                     (->> node\n                       adjacent\n                       (map\n                         #(cond\n                            (node? %) [:node %]\n                            (cluster? %) [:cluster %]\n                            :else nil))\n                       (remove nil?)))))\n\n               ;; format the edges\n               (map (fn [[a [type b]]]\n                      (let [descriptor (edge->descriptor a b)\n                            format #(format-edge\n                                      (node->id a)\n                                      (if (= :node type)\n                                        (node->id b)\n                                        (cluster->id b))\n                                      (merge\n                                        default-edge-options\n                                        {:directed? directed?}\n                                        %))]\n                        (if (vector? descriptor)\n                          (->> descriptor\n                            (map format)\n                            (interpose \"\\n\")\n                            (apply str))\n                          (format descriptor)))))))\n\n           [\"}\\n\"]))))))\n\n;; deleted tree->dot as didn't need\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;;AAMA,AAAA,AAAeA;AAEf;;;AAAA,AAAOC,AAEJC;AAFH,AAGE,AAAA,AAAAC,AAAAC,AAACC;AAAD,AACG,AAAAF,AAACG,AAAe,AAAAF,AAAS,AAAA,AAAAA;AAC1BF,AACAF;;AAIJ,AAAA,AAAA,AAAA,AAAeO;AAGf,AAAA,AAAeC;AAGf,AAAA,AAAeC;AAKf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAeC;AAGf,AAAA,AAAMC,AAAmBC;AAAzB,AAEI,AAACC,AACC,AAAAC,AAKF,AAACU,AAAOC,AACR,AAAA,AAACC;AANC,AAAA,AAAAX,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AAAAD,AAAAD,AAAA,AAAA,AAAQG;AAAR,AACE,AAAAC,AAAgB,AAACT,AAAAA,AAAAA,AAAoBO,AAAAA;AAArC,AAAA,AAAAE;AAAA,AAAAC,AAAAD;AAAA,AAAAH,AAAAI,AAAA,AAAA,AAAUC;AAAV,AAAAL,AAAAI,AAAA,AAAA,AAAaE;AAAb,AACE,AAAU,AAACC,AAAUX,AAAES;AAAvB;;AAAA,AAAA,AACGA,AAAG,AAACC,AAAAA,AAAAA,AAAEJ,AAAAA;;;AAFX,AAGGD,AAAEC;;AANNN;;AAYP,AAAA,AAAMe,AAAWzB;AAAjB,AAAA,AAAA,AAAA,AAAA,AAAA,AACcA;;AAEd,AAAA,AAAM0B,AAAUC;AAAhB,AACE,AAAA,AAAA,AAAIA,AAAEC;;AAER,AAAA,AAAMC,AAAgBF;AAAtB,AACE,AAAI,AAACD,AAASC;AACZ,AAACG,AAAMH;;AACPA;;;AAMJ,AAAA,AAAOI,AAAsBf;AAA7B,AACE,AAAMgB,AAAM,AAAKhB;AAAjB,AACE,AAGE,AAAA,AAACiB,AAAiBD;AAAYA;;AAHhC,AAIE,AAAShB;AAAG,AAAA,AAAA,AAAQ,AAACjB,AAAciB;;AAJrC,AAKE,AAAAkB,AAAUlB;AAAG,AAACmB,AAAKnB;;AALrB,AAME,AAACoB,AAAMpB;AAAG,AAAI,AAACU,AAASV;AACZ,AAAA,AAAA,AAAU,AAACa,AAAeb;;AAC1B,AAAA,AAAA,AACUA,AACA,AAACL,AAAIoB,AACL,AAAA,AAACM,AACD,AAACC,AAAMC;;;AAZ/B,AAcQ,AAAKvB;;;;;;;AAEjB,AAAA,AAAMwB,AAAcC;AAApB,AACE,AACE,AAACC,AAAYD;AACb,AACE,AAAA,AAAAE,AAAChC,AACD,AAAA,AAAC0B,AACD,AAACC,AAAMC,AACPd;AAHA,AAAM,AAAA,AAAA,AAAU,AAAA,AAAAkB,AAAAA,AAAMH,AAAAA,AAAAA,AAAaX;AADhCY;;AAFP,AAQE,AAASA;AACTA;;AATF,AAWE,AAAA,AAAMA;AAXR;;AAAA,AAeE,AAACG,AAAOH;;;;;;AAEZ,AAAA,AAAOI,AAAgBnC,AAAEoC;AAAzB,AAII,AAACnC,AACC,AAAAwC,AAEF,AAACd,AAAUS,AACX,AAACR,AAAMC;AAHL,AAAA,AAAAa,AAAAD;AAAA,AAAArC,AAAAsC,AAAA,AAAA,AAAMrC;AAAN,AAAAD,AAAAsC,AAAA,AAAA,AAAQpC;AAAR,AACE,AAAA,AAAK,AAACmB,AAAKpB,AAAO,AAACgB,AAAqBf;AAJ5C,AAAA,AAAA,AAAA,AAAA+B,AAACC,AAAUtC,AACX,AAACY,AAAO,AAAC2B,AAAK1B,AAAK2B;AADnB,AAAuB,AAAAH;AAAA,AAAQ,AAAAA,AAACP;;AAAT;;;;AAQ3B,AAAA,AAAAa,AAAOK,AAAaC,AAAIC;AAAxB,AAAA,AAAAN,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAhB,AAAAkB,AAAAF,AAAAA;AAAAA,AAAmDQ;AAAnD,AAAAL,AAAAH,AAAA,AAAoCO;AAApC,AACE,AAAMC,AAAQ,AAAA,AAAA,AAAA,AAACd,AAAUc;AAAXC;AAAA,AAA6B,AAAAC,AAAAD;AAAA,AAAA,AAAAC;AAAAA;;AAAA;;;;AAA3C,AACE,AAAA,AAAA,AAAKL,AACH,AAAA,AAAA,AAAIE,AAGJD,AACI,AAAA,AAACf,AAAe,AAAA,AAACoB,AAAOH;;AAElC,AAAA,AAAAI,AAAOE,AAAaC;AAApB,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAZ,AAAA,AAAAY,AAAA,AAAA,AAAA,AAAA,AAAA7B,AAAAkB,AAAAW,AAAAA;AAAAA,AAAgDL;AAAhD,AAAAL,AAAAU,AAAA,AAA+B1B;AAA/B,AAAAgB,AAAAU,AAAA,AAAqCG;AAArC,AACE,AAAMA,AAAM,AAAAN,AAAIM;AAAJ,AAAA,AAAAN;AAAAA;;AACE,AAAM,AAACtB,AAAYD;AAAnB,AAAA;;AAAA;;;;AAERqB,AAAQ,AAAA,AAACS,AAAMT,AACE,AAAAE,AAAIvB;AAAJ,AAAA,AAAAuB;AAAAA;;AAAA;;AADT,AAESM;AALvB,AAME,AAAA,AAAA,AAAKD,AACH,AAAA,AAACxB,AAAeiB;;AAKtB,AAAA,AAAOU,AAAaC;AAApB,AACE,AAAA,AAACC,AAAMnC,AACA,AAAA,AAAA,AAACoC,AAAO,AAAA,AAACtC,AAAeoC;;AAIjC,AAAA,AAAyBG;AACzB,AAAA,AAAyBC;AAEzB,AAAA,AAAOC,AAAUC;AAAjB,AACE,AAACH,AAAAA,AAAAA,AAAWG,AAAAA;;AAEd,AAAA,AAAOC,AAAahF;AAApB,AACE,AAAC6E,AAAAA,AAAAA,AAAc7E,AAAAA;;AAIjB,AAAA,AAAOiF,AAAY7D,AAAE8D;AAArB,AACE,AAACC,AACA,AAAKzE,AAAEK,AAAEC;AAAT,AACE,AAAMoE,AAAU,AAACC,AAAOtE,AAAE,AAACuE,AAAO,AAAA,AAAC9D,AAASR;AAA5C,AACE,AAACuE,AAAWC,AAAUJ,AAAU1E;AAHrC,AAKC,AAAA,AAACuD,AAAO,AAACwB,AAASrE,AAAE8D;;AAGvB,AAAA;;;;;;AAAA,AAAAQ,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAKHd,AAAMuB;AALT,AAAA,AAAAP,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3C,AAAA,AAAA2C,AAAA,AAAA,AAAA,AAAA,AAAA5D,AAAAkB,AAAA0C,AAAAA;AAAAA,AAuBUgB;AAvBV,AAAAzD,AAAAyC,AAAA,AAQapC;AARb,AAAAqC,AAAAD,AAAA,AAAA,AAMarC;AANb,AAAAsC,AAAAD,AAAA,AAaaa,AAQkB,AAAA,AAACE;AArBhC,AAAAd,AAAAD,AAAA,AAcac,AAQa,AAAA,AAACC;AAtB3B,AAAAd,AAAAD,AAAA,AAUaU,AAQe,AAAA,AAACK;AAlB7B,AAAAd,AAAAD,AAAA,AAWaW,AAQc,AAAA,AAACI;AAnB5B,AAAAd,AAAAD,AAAA,AASaS,AAQe,AAAA,AAACM;AAjB7B,AAAAd,AAAAD,AAAA,AAAA,AAOaQ;AAPb,AAAAP,AAAAD,AAAA,AAYaY,AAQa,AAAA,AAACG;AApB3B,AA0BE,AAAAE,AAAUvC;AAAVwC,AACUvC;AADVwC,AAAqB,AAAArD,AAAIY;AAAJ,AAAA,AAAAZ;AAAAA;;AAAe,AAACuD,AAAQ;AAAKC;AAAL,AAAQ,AAAA,AAACC;;;;;AAAtDH,AACwB,AAAAtD,AAAIa;AAAJ,AAAA,AAAAb;AAAAA;;AAAkB,AAACuD,AAAQ;AAAKC;AAAL,AAAQ,AAAA,AAACC;;;;;AAD5D,AAAA,AAAAJ,AAAUzC;;AAAV,AAAA0C,AACUzC;;AADV,AAAA,AAEE,AAAM6C,AAAgB,AAAA,AAAWR;AAC3BS,AAAU,AAACC,AAAQF;AACnBG,AAAe,AAAA,AAAA,AAAMf,AACJ,AAAC7B,AAAW6B,AAAe5B;AAC5C4C,AAAS,AAAID,AACF,AAAC5E,AAAK2E,AAAQC,AACd,AAAA,AAACZ;AACZc,AAAM,AAACC,AAAI9C;AACX+C,AAAM,AAACjB,AAAAA,AAAAA,AAAeU,AAAAA;AAR5B,AAUC,AAAA,AAACQ,AAAM3F,AACL,AAAImF,AACF,AAAA,AAAiB,AAAC1C,AAAY0C,AAC9B,AAAA,AAAA,AAAI7D,AAMN,AAAMsE,AAAa,AAAA,AAAOrE;AACpBsE,AAAa,AAAA,AAAOtE;AAD1B,AAEE,AAAA,AAGM,AAACuE,AAAMhI,AAAgByD,AACzB,AAAA,AAAA,AAAA,AAACd,AACD,AAACuF,AACD,AAACC,AACD/H,AACA,AAAA,AAACoC;AAJDyF;AAAA,AAAwB,AAAAtE,AAAAsE;AAAA,AAAA,AAAAtE;AAAAA;;AAAM,AAAM2D;AAAN,AAAA;;AAAA;;;;AAJlC,AAAA,AAKI,AAAkBjB,AAClB,AAAA,AAEA,AAKE0B,AACF,AAAA,AAAA,AAAA,AAACpF,AACD,AAACvC,AACD,AAACoC;AAFD4F;AAAA,AAAwB,AAAAzE,AAAAyE;AAAA,AAAA,AAAAzE;AAAAA;;AAAA;;;AAd5B,AAAA,AAgBI,AAKEmE,AACF,AAAA,AAAA,AAAA,AAACnF,AACD,AAACvC,AACD,AAACoC;AAFD6F;AAAA,AAAwB,AAAA1E,AAAA0E;AAAA,AAAA,AAAA1E;AAAAA;;AAAA;;;AAtB5B,AAwBI;AAGN,AAAA,AAAC3B,AACC,AAACsG,AAOG,AAAA,AAAChI;AAADkI;AAAA,AACG,AAACzE,AAAY,AAAAyE,AAAC/D,AACZ,AAACuD,AACC/H,AACA,AAAAuI,AAAAA,AAAClC,AAAAA,AAAAA;;AAPR,AAAA,AAACrF;AAADsH;AAAA,AAAS,AAAIlB;AACF,AAAK,AAACrG,AAAU,AAAAuH,AAAAA,AAAC9B,AAAAA,AAAAA,AAAkBY;;AADrC;;;AADNxC,AAYA,AAACvE,AACA;AAAKmI;AAAL,AACE,AAACtE,AACA,AAACuE,AAAKnE,AAAWkE;;AAJrBb,AAUH,AAAA,AAACtH;AAADwI;AAAA,AACG,AAACC,AAAMpD,AACLd,AACAuB,AACA,AAACnE,AAAM+G,AACL,AAAA,AAAAF,AAAA,AAAC5E,AAAM2C,AAEI,AAAAiC,AAAAA,AAACpC,AAAAA,AAAAA;;AARnB,AAAA,AAACzF;AAAD2H;AAAA,AAAS,AAACC,AAAKxB,AAAgB,AAAAuB,AAAAA,AAACpC,AAAAA,AAAAA;;AAF7BgB,AACHmB,AACA,AAWF,AAAA,AAAA,AAAUrB,AAoBN,AAAChH,AAAI;AAAAgJ;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA7I,AAAA8I,AAAA,AAAA,AAAME;AAAND,AAAA,AAAA/I,AAAA8I,AAAA,AAAA;AAAA,AAAA9I,AAAA+I,AAAA,AAAA,AAASE;AAAT,AAAAjJ,AAAA+I,AAAA,AAAA,AAAcG;AAAd,AACE,AAAME,AAAW,AAACtD,AAAAA,AAAAA,AAAiBkD,AAAAA,AAAEE,AAAAA;AAArC,AACMG;AADNF;AAAA,AACc,AAACvG,AACC,AAACoB,AAASgF,AACV,AAAI,AAAA,AAACM,AAAQL,AACX,AAACjF,AAASkF,AACV,AAAChF,AAAYgF,AACf,AAAA,AAAA,AAAAC,AAAC5B,AACC9H,AACYsD;;;AAR9B,AAUE,AAAI,AAACwG,AAAQH;AACNA,AACH,AAACvJ,AAAIwJ,AACL,AAAA,AAAC9H,AACD,AAACC,AAAMC;;AACT,AAAC4H,AAAOD;;;AA9BnB,AAACZ,AACC;AAAKC;AAAL,AACE,AAACC,AAAIC,AACH,AAACnE,AAAOiE,AAGN,AAAA,AAAC5I,AAKD,AAACW,AAAOC;AALRmI;AAAA,AACG,AACE,AAAAA,AAAAA,AAAC3B,AAAAA,AAAAA;AADH,AAAA,AAAA2B;;AAAA,AAEE,AAAAA,AAAAA,AAAC5B,AAAAA,AAAAA;AAFH,AAAA,AAAA4B;;AAAA,AAAA;;;;;AAHAH,AAAAA,AACH9C,AAAAA,AAAAA,AACA;;AA9Cd,AAAA,AAoCSvB;AAvFhB,AAAA,AAAAkC,AACUvC;;AADV,AAAAsC,AAAUvC;;;AA1BZ,AAAA,AAAA,AAAMoB;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA,AAAAvE,AAAAsE;AAAAA,AAAA,AAAAE,AAAAF;AAAAG,AAAA,AAAAzE,AAAAsE;AAAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAE,AAAAH;;;AAAA","names",["rhizome.dot/escapable-characters","rhizome.dot/escape-string","s","p1__47096#","p2__47097#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","clojure.string/replace","rhizome.dot/default-options","rhizome.dot/default-node-options","rhizome.dot/default-edge-options","rhizome.dot/option-translations","rhizome.dot/translate-options","m","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__47103","vec__47104","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","temp__5718__auto__","vec__47114","k*","f","cljs.core/contains?","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","rhizome.dot/->literal","rhizome.dot/literal?","x","cljs.core/meta","rhizome.dot/unwrap-literal","cljs.core/first","rhizome.dot/format-options-value","v-str","clojure.string/starts-with?","cljs.core/Keyword","cljs.core/name","cljs.core/coll?","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","rhizome.dot/format-label","label","cljs.core/sequential?","p1__47142#","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","rhizome.dot/format-options","separator","p1__47151#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/second","p__47176","vec__47177","p__47184","map__47185","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","rhizome.dot/format-edge","src","dst","directed?","options","p1__47180#","or__4131__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","p__47198","map__47199","rhizome.dot/format-node","id","shape","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","rhizome.dot/format-rank","ids","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","rhizome.dot/*node->id*","rhizome.dot/*cluster->id*","rhizome.dot/node->id","n","rhizome.dot/cluster->id","rhizome.dot/clust->nds","nodes","cljs.core/reduce-kv","separated","cljs.core/zipmap","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","clojure.set/union","cljs.core/group-by","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","rhizome.dot/graph->dot","p__47228","map__47229","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq47222","G__47223","cljs.core/next","G__47224","self__4717__auto__","adjacent","vertical?","node->descriptor","edge->descriptor","cluster->parent","node->clusters","cluster->descriptor","cluster->ranks","cljs.core/constantly","graph-descriptor","*node->id*-orig-val__47231","*cluster->id*-orig-val__47232","*node->id*-temp-val__47233","*cluster->id*-temp-val__47234","cljs.core/memoize","_","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","current-cluster","subgraph?","cljs.core/boolean","cluster->nodes","cluster?","node?","cljs.core/set","ranks","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","edge-options","node-options","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p1__47213#","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","p1__47214#","p1__47215#","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","p1__47216#","p1__47217#","r","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","p1__47218#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","p1__47219#","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/concat","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","node","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","p1__47220#","p__47265","vec__47266","vec__47269","a","type","b","p1__47221#","descriptor","format","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/vector?"]]],"~:cache-keys",["~#cmap",[["^15","rhizome/dot.cljc"],[1558372261000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^T","^S","^O","^Q"]]],["~:macro","^S"],[1559826623000],["^15","goog/math/math.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T","~$goog.array","~$goog.asserts"]]],["^15","goog/array/array.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T","^1H"]]],["^15","goog/debug/error.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T"]]],["^15","goog/dom/nodetype.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T"]]],["^15","goog/object/object.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^15","goog/math/long.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T","^1H","~$goog.reflect"]]],["^15","goog/string/internal.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T"]]],["^15","goog/functions/functions.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T"]]],["^15","goog/structs/map.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^15","goog/asserts/asserts.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^15","goog/uri/uri.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T","^1G","^1H","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^15","goog/base.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",[]]],["^15","goog/structs/structs.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T","^1G","~$goog.object"]]],["^15","clojure/string.cljs"],[1559826623000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T","^S","^1O","~$goog.string.StringBuffer"]]],["^15","goog/string/string.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T","~$goog.string.internal"]]],["^15","goog/reflect/reflect.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T"]]],["^15","goog/string/stringbuffer.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T"]]],["^15","goog/iter/iter.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T","^1G","^1H","~$goog.functions","~$goog.math"]]],["^15","cljs/core.cljs"],[1559826623000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["~$goog.math.Long","~$goog.math.Integer","^1O","^1U","^1G","~$goog.Uri","^1V"]]],["^15","goog/math/integer.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T"]]],["^15","clojure/set.cljs"],[1559826623000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T","^S"]]],["^15","goog/uri/utils.js"],[1560546089000,"^1B",["^ ","^1C",null,"^1D",["^H",[]],"^1E",["^T","^1G","^1H","^1O"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rhizome/dot.cljc","^7",1,"^8",5,"^9",1,"^:",16],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^Q","^S","^S","^T","^T"],"^U",["^H",["^V"]],"^W",null,"~:defs",["^ ","~$->literal",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",46,"^8",7,"^9",46,"^:",16,"~:arglists",["^Z",["~$quote",["^Z",[["~$s"]]]]]],"^I","~$rhizome.dot/->literal","^6","rhizome/dot.cljc","^:",16,"~:method-params",["^Z",[["~$s"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^8",1,"~:variadic?",false,"^7",46,"^9",46,"~:max-fixed-arity",1,"~:fn-var",true,"^25",["^Z",["^26",["^Z",[["~$s"]]]]]],"~$node->id",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",138,"^8",8,"^9",138,"^:",16,"~:private",true,"^25",["^Z",["^26",["^Z",[["~$n"]]]]]],"^2?",true,"^I","~$rhizome.dot/node->id","^6","rhizome/dot.cljc","^:",16,"^28",["^Z",[["~$n"]]],"^29",null,"^2:",["^Z",[null,null]],"^8",1,"^2;",false,"^7",138,"~:ret-tag","~$any","^9",138,"^2<",1,"^2=",true,"^25",["^Z",["^26",["^Z",[["~$n"]]]]]],"~$default-node-options",["^ ","^5",["^ ","^6","rhizome/dot.cljc","^7",22,"^8",16,"^9",22,"^:",36,"^2?",true],"^2?",true,"^I","~$rhizome.dot/default-node-options","^6","rhizome/dot.cljc","^:",36,"^8",1,"^7",22,"^9",22,"~:tag","~$cljs.core/IMap"],"~$format-node",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",116,"^8",8,"^9",116,"^:",19,"^2?",true,"^25",["^Z",["^26",["^Z",[["~$id",["^ ","~:keys",["~$label","~$shape"],"^10","~$options"]]]]]]],"^2?",true,"^I","~$rhizome.dot/format-node","^6","rhizome/dot.cljc","^:",19,"^28",["^Z",[["^2H","~$p__47198"]]],"^29",null,"^2:",["^Z",[null,null]],"^8",1,"^2;",false,"^7",116,"^2A","~$string","^9",116,"^2<",2,"^2=",true,"^25",["^Z",["^26",["^Z",[["^2H",["^ ","^2I",["^2J","^2K"],"^10","^2L"]]]]]]],"~$format-edge",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",107,"^8",8,"^9",107,"^:",19,"^2?",true,"^25",["^Z",["^26",["^Z",[["~$src","~$dst",["^ ","^2I",["~$directed?"],"^10","^2L"]]]]]]],"^2?",true,"^I","~$rhizome.dot/format-edge","^6","rhizome/dot.cljc","^:",19,"^28",["^Z",[["^2Q","^2R","~$p__47184"]]],"^29",null,"^2:",["^Z",[null,null]],"^8",1,"^2;",false,"^7",107,"^2A","^2O","^9",107,"^2<",3,"^2=",true,"^25",["^Z",["^26",["^Z",[["^2Q","^2R",["^ ","^2I",["^2S"],"^10","^2L"]]]]]]],"~$option-translations",["^ ","^5",["^ ","^6","rhizome/dot.cljc","^7",30,"^8",16,"^9",30,"^:",35,"^2?",true],"^2?",true,"^I","~$rhizome.dot/option-translations","^6","rhizome/dot.cljc","^:",35,"^8",1,"^7",30,"^9",30,"^2E","^2F"],"~$escapable-characters",["^ ","^5",["^ ","^6","rhizome/dot.cljc","^7",7,"^8",16,"^9",7,"^:",36,"^2?",true],"^2?",true,"^I","~$rhizome.dot/escapable-characters","^6","rhizome/dot.cljc","^:",36,"^8",1,"^7",7,"^9",7,"^2E","^2O"],"~$format-label",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",79,"^8",7,"^9",79,"^:",19,"^25",["^Z",["^26",["^Z",[["^2J"]]]]]],"^I","~$rhizome.dot/format-label","^6","rhizome/dot.cljc","^:",19,"^28",["^Z",[["^2J"]]],"^29",null,"^2:",["^Z",[null,null]],"^8",1,"^2;",false,"^7",79,"^2A",["^H",["^2B","^2O"]],"^9",79,"^2<",1,"^2=",true,"^25",["^Z",["^26",["^Z",[["^2J"]]]]]],"~$cluster->id",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",141,"^8",8,"^9",141,"^:",19,"^2?",true,"^25",["^Z",["^26",["^Z",[["~$s"]]]]]],"^2?",true,"^I","~$rhizome.dot/cluster->id","^6","rhizome/dot.cljc","^:",19,"^28",["^Z",[["~$s"]]],"^29",null,"^2:",["^Z",[null,null]],"^8",1,"^2;",false,"^7",141,"^2A","^2B","^9",141,"^2<",1,"^2=",true,"^25",["^Z",["^26",["^Z",[["~$s"]]]]]],"~$default-edge-options",["^ ","^5",["^ ","^6","rhizome/dot.cljc","^7",25,"^8",16,"^9",25,"^:",36,"^2?",true],"^2?",true,"^I","~$rhizome.dot/default-edge-options","^6","rhizome/dot.cljc","^:",36,"^8",1,"^7",25,"^9",25,"^2E","^2F"],"~$default-options",["^ ","^5",["^ ","^6","rhizome/dot.cljc","^7",19,"^8",16,"^9",19,"^:",31,"^2?",true],"^2?",true,"^I","~$rhizome.dot/default-options","^6","rhizome/dot.cljc","^:",31,"^8",1,"^7",19,"^9",19,"^2E","^2F"],"~$translate-options",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",33,"^8",7,"^9",33,"^:",24,"^25",["^Z",["^26",["^Z",[["~$m"]]]]]],"^I","~$rhizome.dot/translate-options","^6","rhizome/dot.cljc","^:",24,"^28",["^Z",[["~$m"]]],"^29",null,"^2:",["^Z",[null,null]],"^8",1,"^2;",false,"^7",33,"^2A",["^H",[null,"~$clj","^2B"]],"^9",33,"^2<",1,"^2=",true,"^25",["^Z",["^26",["^Z",[["~$m"]]]]]],"~$*cluster->id*",["^ ","^5",["^ ","^6","rhizome/dot.cljc","^7",136,"^8",26,"^9",136,"^:",39,"~:dynamic",true,"^2?",true],"^2?",true,"^I","~$rhizome.dot/*cluster->id*","^6","rhizome/dot.cljc","^:",39,"^8",1,"^3:",true,"^7",136,"^9",136,"^2E","~$clj-nil"],"~$graph->dot",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",155,"^8",7,"^9",155,"^:",17,"^25",["^Z",["^26",["^Z",[["~$nodes","~$adjacent","~$&",["^ ","^2I",["^2S","~$vertical?","^2L","~$node->descriptor","~$edge->descriptor","~$cluster->parent","~$node->clusters","~$cluster->descriptor","~$cluster->ranks"],"~:or",["^ ","^2S",true,"^3@",true,"^3A",["^Z",["~$constantly",null]],"^3B",["^Z",["^3H",null]],"^3C",["^Z",["^3H",null]],"^3D",["^Z",["^3H",null]],"^3E",["^Z",["^3H",null]],"^3F",["^Z",["^3H",null]]],"^10","~$graph-descriptor"]]]]]],"~:doc","Takes a description of a graph, and returns a string describing a GraphViz dot file.\n\n   Requires two fields: `nodes`, which is a list of the nodes in the graph, and `adjacent`, which\n   is a function that takes a node and returns a list of adjacent nodes.","~:top-fn",["^ ","^2;",true,"~:fixed-arity",2,"^2<",2,"^28",[["^Z",["^3>","^3?",["^ ","^2I",["^2S","^3@","^2L","^3A","^3B","^3C","^3D","^3E","^3F"],"^3G",["^ ","^2S",true,"^3@",true,"^3A",["^Z",["^3H",null]],"^3B",["^Z",["^3H",null]],"^3C",["^Z",["^3H",null]],"^3D",["^Z",["^3H",null]],"^3E",["^Z",["^3H",null]],"^3F",["^Z",["^3H",null]]],"^10","^3I"]]]],"^25",["^Z",[["^3>","^3?","~$&",["^ ","^2I",["^2S","^3@","^2L","^3A","^3B","^3C","^3D","^3E","^3F"],"^3G",["^ ","^2S",true,"^3@",true,"^3A",["^Z",["^3H",null]],"^3B",["^Z",["^3H",null]],"^3C",["^Z",["^3H",null]],"^3D",["^Z",["^3H",null]],"^3E",["^Z",["^3H",null]],"^3F",["^Z",["^3H",null]]],"^10","^3I"]]]],"^2:",["^Z",[null]]]],"^I","~$rhizome.dot/graph->dot","^6","rhizome/dot.cljc","^:",17,"^3K",["^ ","^2;",true,"^3L",2,"^2<",2,"^28",[["^Z",["^3>","^3?",["^ ","^2I",["^2S","^3@","^2L","^3A","^3B","^3C","^3D","^3E","^3F"],"^3G",["^ ","^2S",true,"^3@",true,"^3A",["^Z",["^3H",null]],"^3B",["^Z",["^3H",null]],"^3C",["^Z",["^3H",null]],"^3D",["^Z",["^3H",null]],"^3E",["^Z",["^3H",null]],"^3F",["^Z",["^3H",null]]],"^10","^3I"]]]],"^25",["^Z",[["^3>","^3?","~$&",["^ ","^2I",["^2S","^3@","^2L","^3A","^3B","^3C","^3D","^3E","^3F"],"^3G",["^ ","^2S",true,"^3@",true,"^3A",["^Z",["^3H",null]],"^3B",["^Z",["^3H",null]],"^3C",["^Z",["^3H",null]],"^3D",["^Z",["^3H",null]],"^3E",["^Z",["^3H",null]],"^3F",["^Z",["^3H",null]]],"^10","^3I"]]]],"^2:",["^Z",[null]]],"^28",[["^Z",["^3>","^3?",["^ ","^2I",["^2S","^3@","^2L","^3A","^3B","^3C","^3D","^3E","^3F"],"^3G",["^ ","^2S",true,"^3@",true,"^3A",["^Z",["^3H",null]],"^3B",["^Z",["^3H",null]],"^3C",["^Z",["^3H",null]],"^3D",["^Z",["^3H",null]],"^3E",["^Z",["^3H",null]],"^3F",["^Z",["^3H",null]]],"^10","^3I"]]]],"^29",null,"^3L",2,"^2:",["^Z",[null]],"^8",1,"^2;",true,"~:methods",[["^ ","^3L",2,"^2;",true]],"^7",155,"^2A","^2B","^9",155,"^2<",2,"^2=",true,"^25",["^Z",[["^3>","^3?","~$&",["^ ","^2I",["^2S","^3@","^2L","^3A","^3B","^3C","^3D","^3E","^3F"],"^3G",["^ ","^2S",true,"^3@",true,"^3A",["^Z",["^3H",null]],"^3B",["^Z",["^3H",null]],"^3C",["^Z",["^3H",null]],"^3D",["^Z",["^3H",null]],"^3E",["^Z",["^3H",null]],"^3F",["^Z",["^3H",null]]],"^10","^3I"]]]],"^3J","Takes a description of a graph, and returns a string describing a GraphViz dot file.\n\n   Requires two fields: `nodes`, which is a list of the nodes in the graph, and `adjacent`, which\n   is a function that takes a node and returns a list of adjacent nodes."],"~$escape-string",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",9,"^8",8,"^9",9,"^:",21,"^2?",true,"^25",["^Z",["^26",["^Z",[["~$s"]]]]],"^3J","Escape characters that are significant for the dot format."],"^2?",true,"^I","~$rhizome.dot/escape-string","^6","rhizome/dot.cljc","^:",21,"^28",["^Z",[["~$s"]]],"^29",null,"^2:",["^Z",[null,null]],"^8",1,"^2;",false,"^7",9,"^2A",["^H",[null,"^2B"]],"^9",9,"^2<",1,"^2=",true,"^25",["^Z",["^26",["^Z",[["~$s"]]]]],"^3J","Escape characters that are significant for the dot format."],"~$*node->id*",["^ ","^5",["^ ","^6","rhizome/dot.cljc","^7",135,"^8",26,"^9",135,"^:",36,"^3:",true,"^2?",true],"^2?",true,"^I","~$rhizome.dot/*node->id*","^6","rhizome/dot.cljc","^:",36,"^8",1,"^3:",true,"^7",135,"^9",135,"^2E","^3<"],"~$format-rank",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",129,"^8",8,"^9",129,"^:",19,"^2?",true,"^25",["^Z",["^26",["^Z",[["~$ids"]]]]]],"^2?",true,"^I","~$rhizome.dot/format-rank","^6","rhizome/dot.cljc","^:",19,"^28",["^Z",[["^3T"]]],"^29",null,"^2:",["^Z",[null,null]],"^8",1,"^2;",false,"^7",129,"^2A","^2B","^9",129,"^2<",1,"^2=",true,"^25",["^Z",["^26",["^Z",[["^3T"]]]]]],"~$format-options-value",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",61,"^8",8,"^9",61,"^:",28,"^2?",true,"^25",["^Z",["^26",["^Z",[["~$v"]]]]]],"^2?",true,"^I","~$rhizome.dot/format-options-value","^6","rhizome/dot.cljc","^:",28,"^28",["^Z",[["~$v"]]],"^29",null,"^2:",["^Z",[null,null]],"^8",1,"^2;",false,"^7",61,"^2A","^2O","^9",61,"^2<",1,"^2=",true,"^25",["^Z",["^26",["^Z",[["~$v"]]]]]],"~$literal?",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",49,"^8",7,"^9",49,"^:",15,"^25",["^Z",["^26",["^Z",[["~$x"]]]]]],"^I","~$rhizome.dot/literal?","^6","rhizome/dot.cljc","^:",15,"^28",["^Z",[["~$x"]]],"^29",null,"^2:",["^Z",[null,null]],"^8",1,"^2;",false,"^7",49,"^2A","^2B","^9",49,"^2<",1,"^2=",true,"^25",["^Z",["^26",["^Z",[["~$x"]]]]]],"~$format-options",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",97,"^8",8,"^9",97,"^:",22,"^2?",true,"^25",["^Z",["^26",["^Z",[["~$m","~$separator"]]]]]],"^2?",true,"^I","~$rhizome.dot/format-options","^6","rhizome/dot.cljc","^:",22,"^28",["^Z",[["~$m","^3["]]],"^29",null,"^2:",["^Z",[null,null]],"^8",1,"^2;",false,"^7",97,"^2A","^2B","^9",97,"^2<",2,"^2=",true,"^25",["^Z",["^26",["^Z",[["~$m","^3["]]]]]],"~$unwrap-literal",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",52,"^8",7,"^9",52,"^:",21,"^25",["^Z",["^26",["^Z",[["~$x"]]]]]],"^I","~$rhizome.dot/unwrap-literal","^6","rhizome/dot.cljc","^:",21,"^28",["^Z",[["~$x"]]],"^29",null,"^2:",["^Z",[null,null]],"^8",1,"^2;",false,"^7",52,"^2A",["^H",[null,"^2B","^3<"]],"^9",52,"^2<",1,"^2=",true,"^25",["^Z",["^26",["^Z",[["~$x"]]]]]],"~$clust->nds",["^ ","^24",null,"^5",["^ ","^6","rhizome/dot.cljc","^7",146,"^8",8,"^9",146,"^:",18,"^2?",true,"^25",["^Z",["^26",["^Z",[["~$f","^3>"]]]]]],"^2?",true,"^I","~$rhizome.dot/clust->nds","^6","rhizome/dot.cljc","^:",18,"^28",["^Z",[["~$f","^3>"]]],"^29",null,"^2:",["^Z",[null,null]],"^8",1,"^2;",false,"^7",146,"^2A",["^H",[null,"^2B"]],"^9",146,"^2<",2,"^2=",true,"^25",["^Z",["^26",["^Z",[["~$f","^3>"]]]]]]],"^X",["^ ","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^H",["~:TP","~:edge","~:rhizome.dot/cluster","~:cluster","~:else","~:LR","~:cluster->descriptor","~:cluster->ranks","~:fontname","~:node","~:edge->descriptor","~:dpi","~:cluster->parent","~:node->descriptor","~:rhizome.dot/literal","~:vertical?","~:label","~:record","~:node->clusters","~:shape","~:rankdir","~:options","~:directed?"]],"~:order",["^4A","^4E","^4J","^46","^4;","^4D","^4:","^4F","^4L","^4I","^4G","^4K","^4<","^4=","^4@","^4B","^4C","^4H","^48","^47","^4?","^4>","^49"]],"^11",["^ ","^V",["^H",[]]],"^12",["^ "],"^13",["^T","^S","^O","^Q"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1A",[["^4P","~:static-fns"],true,["^4P","~:elide-asserts"],false,["^4P","~:optimize-constants"],null,["^4P","^18"],null,["^4P","~:external-config"],null,["^4P","~:tooling-config"],null,["^4P","~:emit-constants"],null,["^4P","~:load-tests"],null,["^4P","~:infer-externs"],"~:auto",["^4P","^1:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4P","~:fn-invoke-direct"],null,["^4P","~:source-map"],"/dev/null"]]]