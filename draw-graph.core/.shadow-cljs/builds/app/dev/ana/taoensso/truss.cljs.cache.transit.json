["^ ","~:output",["^ ","~:js","goog.provide('taoensso.truss');\ngoog.require('cljs.core');\ngoog.require('taoensso.truss.impl');\n/**\n * Returns current value of dynamic assertion data\n */\ntaoensso.truss.get_dynamic_assertion_data = (function taoensso$truss$get_dynamic_assertion_data(){\nreturn taoensso.truss.impl._STAR__QMARK_data_STAR_;\n});\ntaoensso.truss._error_fn = (function taoensso$truss$_error_fn(f){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328))){\nreturn taoensso.truss.impl.default_error_fn;\n} else {\nreturn f;\n}\n});\n/**\n * Sets the root (fn [data-map-delay]) called on invariant violations.\n */\ntaoensso.truss.set_error_fn_BANG_ = (function taoensso$truss$set_error_fn_BANG_(f){\nreturn taoensso.truss.impl._STAR_error_fn_STAR_ = taoensso.truss._error_fn(f);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:author","Peter Taoussanis (@ptaoussanis)","~:doc","An opinionated assertions API for Clojure/Script","~:file","taoensso/truss.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",["^ ","~$-invariant","~$taoensso.truss.impl"],"~:excludes",["~#set",[]],"~:name","~$taoensso.truss","~:op","~:ns","~:imports",null,"~:requires",["^ ","^J","^J","~$impl","^J","~$cljs.core","^T","~$goog","^U"],"~:seen",["^L",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^J","^J","^S","^J","^T","^T"],"~:form",["~#list",["~$ns","^N","An opinionated assertions API for Clojure/Script",["^ ","^6","Peter Taoussanis (@ptaoussanis)"],["^[",["^W",["^J","~:as","^S","~:refer-macros",["^[",["^I"]]]]]]],"~:flags",["^ ","^W",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^U","^T","^J"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","taoensso/truss.cljs"],"~:compiled-at",1560836393123,"~:resource-name","taoensso/truss.cljs","~:warnings",[],"~:source","(ns taoensso.truss\n  \"An opinionated assertions API for Clojure/Script\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n                                                                             \n         (:require [taoensso.truss.impl :as impl :refer-macros (-invariant)]))\n\n(comment (require '[taoensso.encore :as enc :refer (qb)]))\n\n;;;; Core API\n\n              \n                                                                  \n                                                                             \n                                                                     \n\n                                                                         \n                \n\n                                                                          \n                        \n\n                                                                  \n                                              \n\n                                                               \n                                                               \n\n                             \n                                                        \n                                                                    \n\n               \n                                                                                \n                                      \n                                                                     \n                                                                                    \n                                                        \n                                                                        \n\n               \n                                                                              \n                                                             \n                                                        \n                                                              \n\n                \n                                                                           \n                                                                               \n                                   \n\n                                                                           \n                                                                              \n                   \n                                                        \n                                                                         \n\n(comment\n  (let [x 5]      (have    integer? x))\n  (let [x 5]      (have    string?  x))\n  (let [x 5]      (have :! string?  x))\n  (let [x 5 y  6] (have odd?  x x x y x))\n  (let [x 0 y :a] (have zero? x x x y x))\n  (have string? (do (println \"eval1\") \"foo\")\n                (do (println \"eval2\") \"bar\"))\n  (have number? (do (println \"eval1\") 5)\n                (do (println \"eval2\") \"bar\")\n                (do (println \"eval3\") 10))\n  (have nil? false)\n  (have nil)\n  (have false)\n  (have string? :in [\"a\" \"b\"])\n  (have string? :in (if true  [\"a\" \"b\"] [1 2]))\n  (have string? :in (if false [\"a\" \"b\"] [1 2]))\n  (have string? :in (mapv str (range 10)))\n  (have string? :in [\"a\" 1])\n  (have string? :in [\"a\" \"b\"] [\"a\" \"b\"])\n  (have string? :in [\"a\" \"b\"] [\"a\" \"b\" 1])\n  ((fn foo [x] {:pre [(have? integer? x)]} (* x x)) \"foo\")\n  (macroexpand '(have a))\n  (have? [:or nil? string?] \"hello\")\n  (macroexpand '(have? [:or nil? string?] \"hello\"))\n  (have? [:set>= #{:a :b}]    [:a :b :c])\n  (have? [:set<= [:a :b :c]] #{:a :b})\n  (qb 10000\n    (with-error-fn nil                  (have? string? 5))\n    (with-error-fn (fn [_] :truss/error) (have? string? 5))))\n\n(comment\n  ;; HotSpot is great with these:\n  (qb 10000\n    (string? \"a\")\n    (have?   \"a\")\n    (have            string?  \"a\" \"b\" \"c\")\n    (have? [:or nil? string?] \"a\" \"b\" \"c\")\n    (have? [:or nil? string?] \"a\" \"b\" \"c\" :data \"foo\"))\n  ;; [     5.59 26.48 45.82     ] ; 1st gen (macro form)\n  ;; [     3.31 13.48 36.22     ] ; 2nd gen (fn form)\n  ;; [0.82 1.75  7.57 27.05     ] ; 3rd gen (lean macro form)\n  ;; [0.4  0.47  1.3  1.77  1.53] ; 4th gen (macro preds)\n\n  (qb 10000\n    (have  string? :in [\"foo\" \"bar\" \"baz\"])\n    (have? string? :in [\"foo\" \"bar\" \"baz\"]))\n\n  (macroexpand '(have string? 5))\n  (macroexpand '(have string? 5 :data \"foo\"))\n  (macroexpand '(have string? 5 :data (enc/get-env)))\n  (let [x :x]   (have string? 5 :data (enc/get-env)))\n\n  (have string? 5)\n  (have string? 5 :data {:a \"a\"})\n  (have string? 5 :data {:a (/ 5 0)})\n\n  ((fn [x]\n     (let [a \"a\" b \"b\"]\n       (have string? x :data {:env (enc/get-env)}))) 5))\n\n;;;; Utils\n\n(defn get-dynamic-assertion-data\n  \"Returns current value of dynamic assertion data\"\n  [] impl/*?data*)\n\n                                     \n                                                                  \n                                                                     \n                                                       \n\n(comment (with-dynamic-assertion-data \"foo\" (have string? 5 :data \"bar\")))\n\n(defn-   -error-fn [f] (if (= f :default) impl/default-error-fn f))\n(defn set-error-fn!\n  \"Sets the root (fn [data-map-delay]) called on invariant violations.\"\n  [f]\n         (set!             impl/*error-fn*        (-error-fn f))\n                                                                  )\n\n                                  \n                                                     \n\n;;;;;;;;;;;; This file autogenerated from src/taoensso/truss.cljx\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;AAMA,AAkDA,AA+BA,AAgCA;;;AAAA,AAAMA;AAAN,AAEKC;;AAOL,AAEA,AAAA,AAASC,AAAWC;AAApB,AAAuB,AAAI,AAAA,AAACC,AAAED;AAAYE;;AAAsBF;;;AAChE;;;AAAA,AAAMG,AAEHH;AAFH,AAGS,AAAkBI,AAAuB,AAACL,AAAUC","names",["taoensso.truss/get-dynamic-assertion-data","taoensso.truss.impl/*?data*","taoensso.truss/-error-fn","f","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","taoensso.truss.impl/default-error-fn","taoensso.truss/set-error-fn!","taoensso.truss.impl/*error-fn*"]]],"~:cache-keys",["~#cmap",[["~:macro","^T"],[1559826623000],["^17","goog/math/math.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^U","~$goog.array","~$goog.asserts"]]],["^17","goog/array/array.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U","^1J"]]],["^17","goog/debug/error.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U"]]],["^17","goog/dom/nodetype.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U"]]],["^17","goog/object/object.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^17","goog/math/long.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U","^1J","~$goog.reflect"]]],["^17","taoensso/truss.cljs"],[1547383502000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U","^T","^J"]]],["^17","goog/string/internal.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U"]]],["^17","goog/functions/functions.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U"]]],["^17","taoensso/truss/impl.cljs"],[1547383502000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U","^T","~$clojure.set"]]],["^17","goog/structs/map.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^17","goog/asserts/asserts.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^17","goog/uri/uri.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U","^1I","^1J","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^17","goog/base.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",[]]],["^17","goog/structs/structs.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U","^1I","~$goog.object"]]],["^17","goog/string/string.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U","~$goog.string.internal"]]],["^17","goog/reflect/reflect.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U"]]],["^17","goog/string/stringbuffer.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U"]]],["^17","goog/iter/iter.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U","^1I","^1J","~$goog.functions","~$goog.math"]]],["^17","cljs/core.cljs"],[1559826623000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["~$goog.math.Long","~$goog.math.Integer","^1R","^1X","^1I","~$goog.Uri","~$goog.string.StringBuffer"]]],["^17","goog/math/integer.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U"]]],["^1D","^J"],[1547383502000],["^17","clojure/set.cljs"],[1559826623000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U","^T"]]],["^17","goog/uri/utils.js"],[1560546089000,"^1E",["^ ","^1F",null,"^1G",["^L",[]],"^1H",["^U","^1I","^1J","^1R"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Peter Taoussanis (@ptaoussanis)","^7","An opinionated assertions API for Clojure/Script","^8","taoensso/truss.cljs","^9",1,"^:",5,"^;",1,"^<",19],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",["^ ","^I","^J"],"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^J","^J","^S","^J","^T","^T","^U","^U"],"^V",["^L",["^W"]],"^X",null,"~:defs",["^ ","~$get-dynamic-assertion-data",["^ ","~:protocol-inline",null,"^5",["^ ","^8","taoensso/truss.cljs","^9",120,"^:",7,"^;",120,"^<",33,"~:arglists",["^[",["~$quote",["^[",[[]]]]],"^7","Returns current value of dynamic assertion data"],"^M","~$taoensso.truss/get-dynamic-assertion-data","^8","taoensso/truss.cljs","^<",33,"~:method-params",["^[",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^:",1,"~:variadic?",false,"^9",120,"~:ret-tag","~$clj-nil","^;",120,"~:max-fixed-arity",0,"~:fn-var",true,"^28",["^[",["^29",["^[",[[]]]]],"^7","Returns current value of dynamic assertion data"],"~$-error-fn",["^ ","^27",null,"^5",["^ ","^8","taoensso/truss.cljs","^9",131,"^:",10,"^;",131,"^<",19,"~:private",true,"^28",["^[",["^29",["^[",[["~$f"]]]]]],"^2D",true,"^M","~$taoensso.truss/-error-fn","^8","taoensso/truss.cljs","^<",19,"^2;",["^[",[["~$f"]]],"^2<",null,"^2=",["^[",[null,null]],"^:",1,"^2>",false,"^9",131,"^;",131,"^2A",1,"^2B",true,"^28",["^[",["^29",["^[",[["~$f"]]]]]],"~$set-error-fn!",["^ ","^27",null,"^5",["^ ","^8","taoensso/truss.cljs","^9",132,"^:",7,"^;",132,"^<",20,"^28",["^[",["^29",["^[",[["~$f"]]]]],"^7","Sets the root (fn [data-map-delay]) called on invariant violations."],"^M","~$taoensso.truss/set-error-fn!","^8","taoensso/truss.cljs","^<",20,"^2;",["^[",[["~$f"]]],"^2<",null,"^2=",["^[",[null,null]],"^:",1,"^2>",false,"^9",132,"^;",132,"^2A",1,"^2B",true,"^28",["^[",["^29",["^[",[["~$f"]]]]],"^7","Sets the root (fn [data-map-delay]) called on invariant violations."]],"^Y",["^ ","^J","^J","^S","^J","^T","^T"],"~:cljs.analyzer/constants",["^ ","^V",["^L",["~:default"]],"~:order",["^2I"]],"^13",["^ ","^W",["^L",[]]],"^14",["^ "],"^15",["^U","^T","^J"]],"^P","^N","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1C",[["^2M","~:static-fns"],true,["^2M","~:elide-asserts"],false,["^2M","~:optimize-constants"],null,["^2M","^1:"],null,["^2M","~:external-config"],null,["^2M","~:tooling-config"],null,["^2M","~:emit-constants"],null,["^2M","~:load-tests"],null,["^2M","~:infer-externs"],"~:auto",["^2M","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^2M","~:fn-invoke-direct"],null,["^2M","~:source-map"],"/dev/null"]]]