["^ ","~:output",["^ ","~:js","goog.provide('lib_draw_graph.clustered');\ngoog.require('cljs.core');\ngoog.require('loom.graph');\ngoog.require('loom.attr');\ngoog.require('loom.alg_generic');\ngoog.require('clojure.set');\n/**\n * Converts to keyword if needed\n */\nlib_draw_graph.clustered.__GT_keyword = (function lib_draw_graph$clustered$__GT_keyword(k){\nif((k instanceof cljs.core.Keyword)){\nreturn k;\n} else {\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k);\n}\n});\nlib_draw_graph.clustered.add_cluster_key = (function lib_draw_graph$clustered$add_cluster_key(g,cluster_on){\nreturn cljs.core.assoc_in(g,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275),new cljs.core.Keyword(null,\"key\",\"key\",-1516042587)], null),lib_draw_graph.clustered.__GT_keyword(cluster_on));\n});\nlib_draw_graph.clustered.cluster_key = (function lib_draw_graph$clustered$cluster_key(g){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(g,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275),new cljs.core.Keyword(null,\"key\",\"key\",-1516042587)], null));\n});\nlib_draw_graph.clustered.clustered_QMARK_ = (function lib_draw_graph$clustered$clustered_QMARK_(g){\nif(cljs.core.truth_(lib_draw_graph.clustered.cluster_key(g))){\nreturn true;\n} else {\nreturn false;\n}\n});\nlib_draw_graph.clustered.add_attr_to_cluster = (function lib_draw_graph$clustered$add_attr_to_cluster(g,cluster,attr_k,attr_v){\nreturn cljs.core.assoc_in(g,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275),new cljs.core.Keyword(null,\"attr\",\"attr\",-604132353),cluster,attr_k], null),attr_v);\n});\nlib_draw_graph.clustered.add_cluster_edge = (function lib_draw_graph$clustered$add_cluster_edge(g,src,tgt){\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(g,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275),new cljs.core.Keyword(null,\"edge-graph\",\"edge-graph\",936862687)], null),(function (old,tgt__$1){\nvar G__35627 = old;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(null,G__35627)){\nreturn loom.graph.digraph.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [src,tgt__$1], null)], 0));\n} else {\nreturn loom.graph.add_edges.cljs$core$IFn$_invoke$arity$variadic(old,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [src,tgt__$1], null)], 0));\n\n}\n}),tgt);\n});\nlib_draw_graph.clustered.remove_clusters_from_edge_graph = (function lib_draw_graph$clustered$remove_clusters_from_edge_graph(g,clstrs){\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(g,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275),new cljs.core.Keyword(null,\"edge-graph\",\"edge-graph\",936862687)], null),(function (old,clstrs__$1){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(loom.graph.remove_nodes,old,clstrs__$1);\n}),clstrs);\n});\nlib_draw_graph.clustered.delete_edge_graph = (function lib_draw_graph$clustered$delete_edge_graph(g){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(g,new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275).cljs$core$IFn$_invoke$arity$1(g),new cljs.core.Keyword(null,\"edge-graph\",\"edge-graph\",936862687)));\n});\nlib_draw_graph.clustered.edge_graph = (function lib_draw_graph$clustered$edge_graph(g){\nreturn new cljs.core.Keyword(null,\"edge-graph\",\"edge-graph\",936862687).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275).cljs$core$IFn$_invoke$arity$1(g));\n});\nlib_draw_graph.clustered.add_cluster_parent = (function lib_draw_graph$clustered$add_cluster_parent(g,cluster,parent){\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.assoc_in(g,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),new cljs.core.Keyword(null,\"->parent\",\"->parent\",1420662821),cluster], null),parent),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),new cljs.core.Keyword(null,\"->children\",\"->children\",-283207286),parent], null),(function (old){\nif((!((old == null)))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(old,cluster);\n} else {\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cluster);\n}\n}));\n});\nlib_draw_graph.clustered.cluster_parent = (function lib_draw_graph$clustered$cluster_parent(g,cluster){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(g,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),new cljs.core.Keyword(null,\"->parent\",\"->parent\",1420662821),cluster], null));\n});\nlib_draw_graph.clustered.cluster_children = (function lib_draw_graph$clustered$cluster_children(g,cluster){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(g,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),new cljs.core.Keyword(null,\"->children\",\"->children\",-283207286),cluster], null));\n});\nlib_draw_graph.clustered.cluster_graph = (function lib_draw_graph$clustered$cluster_graph(g){\nreturn new cljs.core.Keyword(null,\"->children\",\"->children\",-283207286).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275).cljs$core$IFn$_invoke$arity$1(g)));\n});\nlib_draw_graph.clustered.cluster_siblings = (function lib_draw_graph$clustered$cluster_siblings(g,cluster){\nvar parent = lib_draw_graph.clustered.cluster_parent(g,cluster);\nvar chdrn = lib_draw_graph.clustered.cluster_children(g,parent);\nreturn cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.createAsIfByAssoc([cluster]),chdrn);\n});\n/**\n * Returns all clusters inside the cluster recursively.\n */\nlib_draw_graph.clustered.cluster_descendants = (function lib_draw_graph$clustered$cluster_descendants(g,cluster){\nvar descend = (function lib_draw_graph$clustered$cluster_descendants_$_descend(clstr,acc){\nvar children = lib_draw_graph.clustered.cluster_children(g,clstr);\nif((children == null)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(acc,clstr);\n} else {\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (children){\nreturn (function (p1__35639_SHARP_){\nreturn lib_draw_graph$clustered$cluster_descendants_$_descend(p1__35639_SHARP_,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(acc,clstr));\n});})(children))\n,children);\n}\n});\nreturn cljs.core.flatten(descend(cluster,cljs.core.PersistentVector.EMPTY));\n});\n/**\n * Gets sub-key attrs for the cluster, or if none, it's parent's attrs\n * and so on.\n */\nlib_draw_graph.clustered.first_cluster_attr = (function lib_draw_graph$clustered$first_cluster_attr(g,cluster,sub_key){\nvar attr = (function (){var G__35649 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"attr\",\"attr\",-604132353).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275).cljs$core$IFn$_invoke$arity$1(g)),cluster);\nreturn (sub_key.cljs$core$IFn$_invoke$arity$1 ? sub_key.cljs$core$IFn$_invoke$arity$1(G__35649) : sub_key.call(null,G__35649));\n})();\nif(cljs.core.truth_(attr)){\nreturn attr;\n} else {\nvar temp__5718__auto__ = lib_draw_graph.clustered.cluster_parent(g,cluster);\nif(cljs.core.truth_(temp__5718__auto__)){\nvar parent = temp__5718__auto__;\nreturn (lib_draw_graph.clustered.first_cluster_attr.cljs$core$IFn$_invoke$arity$3 ? lib_draw_graph.clustered.first_cluster_attr.cljs$core$IFn$_invoke$arity$3(g,parent,sub_key) : lib_draw_graph.clustered.first_cluster_attr.call(null,g,parent,sub_key));\n} else {\nreturn null;\n}\n}\n});\n/**\n * Goes to the ultimate parent of the cluster and back down merging attributes\n *   such that the child's attributes overwrite the parent's.\n */\nlib_draw_graph.clustered.merged_cluster_attr = (function lib_draw_graph$clustered$merged_cluster_attr(g,cluster,sub_key){\nvar temp__5718__auto__ = lib_draw_graph.clustered.cluster_parent(g,cluster);\nif(cljs.core.truth_(temp__5718__auto__)){\nvar parent = temp__5718__auto__;\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(lib_draw_graph.clustered.merged_cluster_attr.cljs$core$IFn$_invoke$arity$3 ? lib_draw_graph.clustered.merged_cluster_attr.cljs$core$IFn$_invoke$arity$3(g,parent,sub_key) : lib_draw_graph.clustered.merged_cluster_attr.call(null,g,parent,sub_key)),(function (){var G__35652 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"attr\",\"attr\",-604132353).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275).cljs$core$IFn$_invoke$arity$1(g)),cluster);\nreturn (sub_key.cljs$core$IFn$_invoke$arity$1 ? sub_key.cljs$core$IFn$_invoke$arity$1(G__35652) : sub_key.call(null,G__35652));\n})()], 0));\n} else {\nvar G__35653 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"attr\",\"attr\",-604132353).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275).cljs$core$IFn$_invoke$arity$1(g)),cluster);\nreturn (sub_key.cljs$core$IFn$_invoke$arity$1 ? sub_key.cljs$core$IFn$_invoke$arity$1(G__35653) : sub_key.call(null,G__35653));\n}\n});\n/**\n * Returns the nodes in the current cluster but not in children\n * of the current cluster.\n */\nlib_draw_graph.clustered.cluster__GT_nodes = (function lib_draw_graph$clustered$cluster__GT_nodes(var_args){\nvar G__35660 = arguments.length;\nswitch (G__35660) {\ncase 2:\nreturn lib_draw_graph.clustered.cluster__GT_nodes.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn lib_draw_graph.clustered.cluster__GT_nodes.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nlib_draw_graph.clustered.cluster__GT_nodes.cljs$core$IFn$_invoke$arity$2 = (function (g,cluster){\nreturn lib_draw_graph.clustered.cluster__GT_nodes.cljs$core$IFn$_invoke$arity$3(g,lib_draw_graph.clustered.cluster_key(g),cluster);\n});\n\nlib_draw_graph.clustered.cluster__GT_nodes.cljs$core$IFn$_invoke$arity$3 = (function (g,cluster_on,cluster){\nreturn cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__35656_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cluster,cljs.core.get.cljs$core$IFn$_invoke$arity$2(p1__35656_SHARP_,lib_draw_graph.clustered.__GT_keyword(cluster_on)));\n}),loom.graph.nodes(g));\n});\n\nlib_draw_graph.clustered.cluster__GT_nodes.cljs$lang$maxFixedArity = 3;\n\n/**\n * Returns all nodes in a cluster, given the :cluster-on key\n */\nlib_draw_graph.clustered.cluster__GT_all_nodes = (function lib_draw_graph$clustered$cluster__GT_all_nodes(var_args){\nvar G__35667 = arguments.length;\nswitch (G__35667) {\ncase 2:\nreturn lib_draw_graph.clustered.cluster__GT_all_nodes.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn lib_draw_graph.clustered.cluster__GT_all_nodes.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nlib_draw_graph.clustered.cluster__GT_all_nodes.cljs$core$IFn$_invoke$arity$2 = (function (g,cluster){\nreturn lib_draw_graph.clustered.cluster__GT_all_nodes.cljs$core$IFn$_invoke$arity$2(g,lib_draw_graph.clustered.cluster_key(g));\n});\n\nlib_draw_graph.clustered.cluster__GT_all_nodes.cljs$core$IFn$_invoke$arity$3 = (function (g,cluster_on,cluster){\nvar k = lib_draw_graph.clustered.__GT_keyword(cluster_on);\nvar children = ((function (k){\nreturn (function lib_draw_graph$clustered$children(clstr,acc){\nvar chds = lib_draw_graph.clustered.cluster_children(g,clstr);\nvar cur_nodes = lib_draw_graph.clustered.cluster__GT_nodes.cljs$core$IFn$_invoke$arity$3(g,k,clstr);\nvar acc__$1 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(acc,cur_nodes);\nif((!((chds == null)))){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (chds,cur_nodes,acc__$1,k){\nreturn (function (p1__35663_SHARP_){\nreturn lib_draw_graph$clustered$children(p1__35663_SHARP_,acc__$1);\n});})(chds,cur_nodes,acc__$1,k))\n,chds);\n} else {\nreturn acc__$1;\n}\n});})(k))\n;\nvar res = cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.flatten(children(cluster,cljs.core.PersistentVector.EMPTY)));\nif(cljs.core.empty_QMARK_(res)){\nreturn null;\n} else {\nreturn res;\n}\n});\n\nlib_draw_graph.clustered.cluster__GT_all_nodes.cljs$lang$maxFixedArity = 3;\n\n/**\n * Returns nodes in the graph grouped by cluster.\n */\nlib_draw_graph.clustered.nodes_by_cluster = (function lib_draw_graph$clustered$nodes_by_cluster(var_args){\nvar G__35679 = arguments.length;\nswitch (G__35679) {\ncase 1:\nreturn lib_draw_graph.clustered.nodes_by_cluster.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn lib_draw_graph.clustered.nodes_by_cluster.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nlib_draw_graph.clustered.nodes_by_cluster.cljs$core$IFn$_invoke$arity$1 = (function (g){\nreturn lib_draw_graph.clustered.nodes_by_cluster.cljs$core$IFn$_invoke$arity$2(g,lib_draw_graph.clustered.cluster_key(g));\n});\n\nlib_draw_graph.clustered.nodes_by_cluster.cljs$core$IFn$_invoke$arity$2 = (function (g,cluster_on){\nreturn cljs.core.group_by(lib_draw_graph.clustered.__GT_keyword(cluster_on),loom.graph.nodes(g));\n});\n\nlib_draw_graph.clustered.nodes_by_cluster.cljs$lang$maxFixedArity = 2;\n\n/**\n * Returns the set of clusters that the node is in.\n */\nlib_draw_graph.clustered.node__GT_clusters = (function lib_draw_graph$clustered$node__GT_clusters(var_args){\nvar G__35686 = arguments.length;\nswitch (G__35686) {\ncase 2:\nreturn lib_draw_graph.clustered.node__GT_clusters.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn lib_draw_graph.clustered.node__GT_clusters.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nlib_draw_graph.clustered.node__GT_clusters.cljs$core$IFn$_invoke$arity$2 = (function (g,n){\nreturn lib_draw_graph.clustered.node__GT_clusters.cljs$core$IFn$_invoke$arity$3(g,lib_draw_graph.clustered.cluster_key(g),n);\n});\n\nlib_draw_graph.clustered.node__GT_clusters.cljs$core$IFn$_invoke$arity$3 = (function (g,cluster_on,n){\nvar ancestor = (function lib_draw_graph$clustered$ancestor(acc){\nvar temp__5718__auto__ = lib_draw_graph.clustered.cluster_parent(g,cljs.core.first(acc));\nif(cljs.core.truth_(temp__5718__auto__)){\nvar new_ancestor = temp__5718__auto__;\nreturn lib_draw_graph$clustered$ancestor(cljs.core.cons(new_ancestor,acc));\n} else {\nreturn acc;\n}\n});\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,ancestor(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.get.cljs$core$IFn$_invoke$arity$2(n,lib_draw_graph.clustered.__GT_keyword(cluster_on))], null)));\n});\n\nlib_draw_graph.clustered.node__GT_clusters.cljs$lang$maxFixedArity = 3;\n\n/**\n * Returns the set of clusters that the nodes are in.\n */\nlib_draw_graph.clustered.nodes__GT_clusters = (function lib_draw_graph$clustered$nodes__GT_clusters(g,nds){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(clojure.set.union,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__35700_SHARP_){\nreturn lib_draw_graph.clustered.node__GT_clusters.cljs$core$IFn$_invoke$arity$2(g,p1__35700_SHARP_);\n}),nds));\n});\n/**\n * Returns the set of all clusters in the graph.\n */\nlib_draw_graph.clustered.clusters = (function lib_draw_graph$clustered$clusters(g){\nreturn lib_draw_graph.clustered.nodes__GT_clusters(g,loom.graph.nodes(g));\n});\nlib_draw_graph.clustered.filter__GT_parent = (function lib_draw_graph$clustered$filter__GT_parent(m,set_to_remove){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (a,p__35702){\nvar vec__35704 = p__35702;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35704,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35704,(1),null);\nif(cljs.core.truth_(cljs.core.some(set_to_remove,cljs.core.PersistentHashSet.createAsIfByAssoc([v,k])))){\nreturn a;\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(a,k,v);\n}\n}),cljs.core.PersistentArrayMap.EMPTY,m);\n});\nlib_draw_graph.clustered.filter__GT_children = (function lib_draw_graph$clustered$filter__GT_children(m,set_to_remove){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (a,p__35708){\nvar vec__35709 = p__35708;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35709,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35709,(1),null);\nif(cljs.core.truth_(cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([k]),set_to_remove))){\nreturn a;\n} else {\nvar v_SINGLEQUOTE_ = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(v,set_to_remove);\nif(cljs.core.empty_QMARK_(v_SINGLEQUOTE_)){\nreturn a;\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(a,k,v_SINGLEQUOTE_);\n}\n}\n}),cljs.core.PersistentArrayMap.EMPTY,m);\n});\n/**\n * Removes clusters from the graph.\n * Doesn't touch cluster edgess, so that those can be filtered down (once)\n * after multiple filtering operations.\n */\nlib_draw_graph.clustered.remove_clusters = (function lib_draw_graph$clustered$remove_clusters(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___35725 = arguments.length;\nvar i__4731__auto___35726 = (0);\nwhile(true){\nif((i__4731__auto___35726 < len__4730__auto___35725)){\nargs__4736__auto__.push((arguments[i__4731__auto___35726]));\n\nvar G__35727 = (i__4731__auto___35726 + (1));\ni__4731__auto___35726 = G__35727;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn lib_draw_graph.clustered.remove_clusters.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nlib_draw_graph.clustered.remove_clusters.cljs$core$IFn$_invoke$arity$variadic = (function (g,clstrs){\nvar clstrs_set = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,clstrs);\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(g,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275),new cljs.core.Keyword(null,\"attr\",\"attr\",-604132353)], null),((function (clstrs_set){\nreturn (function (p1__35712_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,p1__35712_SHARP_,clstrs);\n});})(clstrs_set))\n),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),new cljs.core.Keyword(null,\"->parent\",\"->parent\",1420662821)], null),lib_draw_graph.clustered.filter__GT_parent,clstrs_set),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"clusters\",\"clusters\",273881275),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),new cljs.core.Keyword(null,\"->children\",\"->children\",-283207286)], null),lib_draw_graph.clustered.filter__GT_children,clstrs_set);\n});\n\nlib_draw_graph.clustered.remove_clusters.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nlib_draw_graph.clustered.remove_clusters.cljs$lang$applyTo = (function (seq35713){\nvar G__35714 = cljs.core.first(seq35713);\nvar seq35713__$1 = cljs.core.next(seq35713);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__35714,seq35713__$1);\n});\n\n/**\n * Removes nodes from a clustered graph. Returns a map of {:graph <graph>\n * :clusters <the clusters which remain>}\n */\nlib_draw_graph.clustered.remove_nodes = (function lib_draw_graph$clustered$remove_nodes(g,nodes){\nvar clstrs = lib_draw_graph.clustered.clusters(g);\nvar g_SINGLEQUOTE_ = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(loom.graph.remove_nodes,g,nodes);\nvar clstrs_to_remove = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(lib_draw_graph.clustered.clusters(g),lib_draw_graph.clustered.clusters(g_SINGLEQUOTE_));\nvar g_SINGLEQUOTE__SINGLEQUOTE_ = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(lib_draw_graph.clustered.remove_clusters,g_SINGLEQUOTE_,clstrs_to_remove);\nreturn g_SINGLEQUOTE__SINGLEQUOTE_;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","lib_draw_graph/clustered.cljc","~:line",3,"~:column",3,"~:end-line",3,"~:end-column",27,"~:doc","Extending Loom to handle clusters.","~:author","Jude Payne"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$lib-draw-graph.clustered","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$loom.graph","^Q","~$loom.attr","^R","~$loom.alg-generic","^S","~$loom.gen","^S","~$clojure.set","^U","~$set","^U","~$cljs.core","^W","~$goog","^X"],"~:seen",["^J",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^W","^W"],"~:form",["~#list",["~$ns","^L",["^12",["^Z",["^Q","~:as","^Q"],["^R","^14","^R"],["^S","^14","^T"],["^U","^14","^V"]]]]],"~:flags",["^ ","^Z",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^X","^W","^Q","^R","^S","^U"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","lib_draw_graph/clustered.cljc"],"~:compiled-at",1560972125732,"~:resource-name","lib_draw_graph/clustered.cljc","~:warnings",[],"~:source","(ns ^{:doc \"Extending Loom to handle clusters.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.clustered\n  (:require [loom.graph            :as loom.graph]\n            [loom.attr             :as loom.attr]\n            [loom.alg-generic      :as loom.gen]\n            [clojure.set           :as set]))\n\n\n;; Loom Digraph is a Clojure record\n;; I have gone with the option of assoc'ing into it\n;; rather than extending the type and defining new protocols, for now.\n(defn ->keyword\n  \"Converts to keyword if needed\"\n  [k]\n  (if (keyword? k) k (keyword k)))\n\n\n(defn add-cluster-key\n  [g cluster-on]\n  (assoc-in g [:clusters :key] (->keyword cluster-on)))\n\n\n(defn cluster-key\n  [g]\n  (get-in g [:clusters :key]))\n\n\n(defn clustered?\n  [g]\n  (if (cluster-key g)\n    true\n    false))\n\n\n(defn add-attr-to-cluster\n  [g cluster attr-k attr-v]\n  (assoc-in g [:clusters :attr cluster attr-k] attr-v))\n\n\n\n;; --- Cluster edge graph functionality ------\n\n(defn add-cluster-edge\n  [g src tgt]\n  (update-in g [:clusters :edge-graph]\n             (fn [old tgt]\n               (case old\n                 nil (loom.graph/digraph [src tgt])\n                 (loom.graph/add-edges old [src tgt])))\n             tgt))\n\n\n(defn remove-clusters-from-edge-graph\n  [g clstrs]\n  (update-in g [:clusters :edge-graph]\n             (fn [old clstrs]\n               (apply loom.graph/remove-nodes old clstrs))\n             clstrs))\n\n\n(defn delete-edge-graph\n  [g]\n  (assoc g\n         :clusters\n         (dissoc (-> g :clusters) :edge-graph)))\n\n\n(defn edge-graph\n  [g]\n  (-> g :clusters :edge-graph))\n\n\n;; --- Cluster parent graph functionality ------\n\n(defn add-cluster-parent\n  [g cluster parent]\n  (-> g\n      (assoc-in [:clusters :hierarchy :->parent cluster] parent)\n      (update-in [:clusters :hierarchy :->children parent]\n                 (fn [old]\n                   (if (some? old) (conj old cluster) (conj #{} cluster))))))\n\n\n(defn cluster-parent\n  [g cluster]\n  (get-in g [:clusters :hierarchy :->parent cluster]))\n\n\n(defn cluster-children\n  [g cluster]\n  (get-in g [:clusters :hierarchy :->children cluster]))\n\n\n(defn cluster-graph\n  [g]\n  (-> g :clusters :hierarchy :->children))\n\n\n(defn cluster-siblings\n  [g cluster]\n  (let [parent (cluster-parent g cluster)\n        chdrn (cluster-children g parent)]\n    (remove #{cluster} chdrn)))\n\n\n(defn cluster-descendants\n  \"Returns all clusters inside the cluster recursively.\"\n  [g cluster]\n  (letfn [(descend [clstr acc]\n            (let [children (cluster-children g clstr)]\n              (if (nil? children)\n                (conj acc clstr)\n                (map #(descend % (conj acc clstr)) children))))]\n    (flatten (descend cluster []))))\n\n\n(defn first-cluster-attr\n  \"Gets sub-key attrs for the cluster, or if none, it's parent's attrs\n   and so on.\"\n  [g cluster sub-key]\n  (let [attr (sub-key (get (-> g :clusters :attr) cluster))]\n    (if attr\n      attr\n      (if-let [parent (cluster-parent g cluster)]\n        (first-cluster-attr g parent sub-key)\n        nil))))\n\n\n(defn merged-cluster-attr\n  \"Goes to the ultimate parent of the cluster and back down merging attributes\n  such that the child's attributes overwrite the parent's.\"\n  [g cluster sub-key]\n  (if-let [parent (cluster-parent g cluster)]\n    (merge  (merged-cluster-attr g parent sub-key)\n            (sub-key (get (-> g :clusters :attr) cluster)))\n    (sub-key (get (-> g :clusters :attr) cluster))))\n\n\n(defn cluster->nodes\n  \"Returns the nodes in the current cluster but not in children\n   of the current cluster.\"\n  ([g cluster] (cluster->nodes g (cluster-key g) cluster))\n  ([g cluster-on cluster]\n   (filter\n    #(= cluster (get % (->keyword cluster-on)))\n    (loom.graph/nodes g))))\n\n\n(defn cluster->all-nodes\n  \"Returns all nodes in a cluster, given the :cluster-on key\"\n  ([g cluster] (cluster->all-nodes g (cluster-key g)))\n  ([g cluster-on cluster]\n   (let [k (->keyword cluster-on)]\n     (letfn [(children [clstr acc]\n               (let [chds (cluster-children g clstr)\n                     cur-nodes (cluster->nodes g k clstr)\n                     acc (conj acc cur-nodes)]\n                 (if (some? chds)\n                   (map #(children % acc) chds)\n                   acc)))]\n       (let [res (distinct (flatten (children cluster [])))]\n         (if (empty? res)\n           nil\n           res))))))\n\n\n(defn nodes-by-cluster\n  \"Returns nodes in the graph grouped by cluster.\"\n  ([g] (nodes-by-cluster g (cluster-key g)))\n  ([g cluster-on]\n   (group-by (->keyword cluster-on) (loom.graph/nodes g))))\n\n\n(defn node->clusters\n  \"Returns the set of clusters that the node is in.\"\n  ([g n] (node->clusters g (cluster-key g) n))\n  ([g cluster-on n]\n   (letfn [(ancestor [acc]\n             (if-let [new-ancestor (cluster-parent g (first acc))]\n               (ancestor (cons new-ancestor acc))\n               acc))]\n     (into #{} (ancestor [(get n (->keyword cluster-on))])))))\n\n\n(defn nodes->clusters\n  \"Returns the set of clusters that the nodes are in.\"\n  [g nds]\n  (apply set/union (map #(node->clusters g %) nds)))\n\n\n;; ------------------------------\n\n\n(defn clusters\n  \"Returns the set of all clusters in the graph.\"\n  [g]\n  (nodes->clusters g (loom.graph/nodes g)))\n\n\n(defn ^:private filter->parent\n  [m set-to-remove]\n  (reduce\n   (fn [a [k v]]\n     (if (some set-to-remove #{k v})\n       a\n       (assoc a k v)))\n   {}\n   m))\n\n\n(defn ^:private filter->children\n  [m set-to-remove]\n  (reduce\n   (fn [a [k v]]\n     (if (some #{k} set-to-remove)\n       a\n       (let [v' (set/difference v set-to-remove)]\n         (if (empty? v')\n           a\n           (assoc a k v')))))\n   {}\n   m))\n\n\n(defn remove-clusters\n  \"Removes clusters from the graph.\n   Doesn't touch cluster edgess, so that those can be filtered down (once)\n   after multiple filtering operations.\"\n  [g & clstrs]\n  (let [clstrs-set (into #{} clstrs)]\n    (-> g\n        (update-in [:clusters :attr] #(apply dissoc % clstrs))\n        (update-in [:clusters :hierarchy :->parent] filter->parent clstrs-set)\n        (update-in [:clusters :hierarchy :->children] filter->children clstrs-set))))\n\n\n(defn remove-nodes\n  \"Removes nodes from a clustered graph. Returns a map of {:graph <graph>\n   :clusters <the clusters which remain>}\"\n  [g nodes]\n  (let [clstrs (clusters g)\n        g' (apply loom.graph/remove-nodes g nodes)\n        clstrs-to-remove (set/difference (clusters g) (clusters g'))\n        g'' (apply remove-clusters g' clstrs-to-remove)]\n    g''))\n\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["lib-draw-graph.clustered/->keyword","k","cljs.core/Keyword","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","lib-draw-graph.clustered/add-cluster-key","g","cluster-on","cljs.core/assoc-in","lib-draw-graph.clustered/cluster-key","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.clustered/clustered?","lib-draw-graph.clustered/add-attr-to-cluster","cluster","attr-k","attr-v","lib-draw-graph.clustered/add-cluster-edge","src","tgt","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","old","G__35627","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","loom.graph.digraph.cljs$core$IFn$_invoke$arity$variadic","loom.graph.add_edges.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.clustered/remove-clusters-from-edge-graph","clstrs","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","loom.graph/remove-nodes","lib-draw-graph.clustered/delete-edge-graph","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.clustered/edge-graph","lib-draw-graph.clustered/add-cluster-parent","parent","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.clustered/cluster-parent","lib-draw-graph.clustered/cluster-children","lib-draw-graph.clustered/cluster-graph","lib-draw-graph.clustered/cluster-siblings","chdrn","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.clustered/cluster-descendants","clstr","acc","children","p1__35639#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","descend","cljs.core/flatten","lib-draw-graph.clustered/first-cluster-attr","sub-key","attr","G__35649","cljs.core.get.cljs$core$IFn$_invoke$arity$2","temp__5718__auto__","lib-draw-graph.clustered/merged-cluster-attr","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__35652","G__35653","var_args","G__35660","lib-draw-graph.clustered/cluster->nodes","js/Error","lib_draw_graph.clustered.cluster__GT_nodes.cljs$core$IFn$_invoke$arity$3","p1__35656#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","loom.graph/nodes","G__35667","lib-draw-graph.clustered/cluster->all-nodes","lib_draw_graph.clustered.cluster__GT_all_nodes.cljs$core$IFn$_invoke$arity$2","chds","cur-nodes","p1__35663#","res","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core/empty?","G__35679","lib-draw-graph.clustered/nodes-by-cluster","lib_draw_graph.clustered.nodes_by_cluster.cljs$core$IFn$_invoke$arity$2","cljs.core/group-by","G__35686","lib-draw-graph.clustered/node->clusters","n","lib_draw_graph.clustered.node__GT_clusters.cljs$core$IFn$_invoke$arity$3","new-ancestor","cljs.core/first","ancestor","cljs.core/cons","cljs.core.into.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.clustered/nodes->clusters","nds","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","clojure.set/union","p1__35700#","lib_draw_graph.clustered.node__GT_clusters.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.clustered/clusters","lib-draw-graph.clustered/filter->parent","m","set-to-remove","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__35702","vec__35704","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","a","v","cljs.core/some","lib-draw-graph.clustered/filter->children","p__35708","vec__35709","v'","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lib-draw-graph.clustered/remove-clusters","seq35713","G__35714","cljs.core/next","self__4717__auto__","clstrs-set","p1__35712#","cljs.core/dissoc","lib-draw-graph.clustered/remove-nodes","nodes","g'","clstrs-to-remove","g''"]]],"~:cache-keys",["~#cmap",[["~:macro","~$loom.cljs"],[1545217035000],["^1F","^W"],[1559826623000],["^19","goog/math/math.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^X","~$goog.array","~$goog.asserts"]]],["^19","goog/array/array.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","^1M"]]],["^19","goog/debug/error.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X"]]],["^19","loom/attr.cljc"],[1545217035000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","^W","^Q"]]],["^19","goog/dom/nodetype.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X"]]],["^19","loom/graph.cljc"],[1545217035000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","^W","^S"]]],["^19","goog/object/object.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^19","goog/math/long.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","^1M","~$goog.reflect"]]],["^19","goog/string/internal.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X"]]],["^19","goog/functions/functions.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X"]]],["^19","goog/structs/map.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^19","goog/asserts/asserts.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^19","goog/uri/uri.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","^1L","^1M","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^19","goog/base.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",[]]],["^19","goog/structs/structs.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","^1L","~$goog.object"]]],["^19","goog/string/string.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","~$goog.string.internal"]]],["^19","lib_draw_graph/clustered.cljc"],[1560891623000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","^W","^Q","^R","^S","^U"]]],["^19","goog/reflect/reflect.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X"]]],["^19","goog/string/stringbuffer.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X"]]],["^19","goog/iter/iter.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","^1L","^1M","~$goog.functions","~$goog.math"]]],["^19","loom/alg_generic.cljc"],[1545217035000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","^W"]]],["^19","cljs/core.cljs"],[1559826623000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["~$goog.math.Long","~$goog.math.Integer","^1T","^1Z","^1L","~$goog.Uri","~$goog.string.StringBuffer"]]],["^19","goog/math/integer.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X"]]],["^19","clojure/set.cljs"],[1559826623000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","^W"]]],["^19","goog/uri/utils.js"],[1560546089000,"^1H",["^ ","^1I",null,"^1J",["^J",[]],"^1K",["^X","^1L","^1M","^1T"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",3,"^8",3,"^9",3,"^:",27,"^;","Extending Loom to handle clusters.","^<","Jude Payne"],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^R","^S","^S","^T","^S","^U","^U","^V","^U","^W","^W","^X","^X"],"^Y",["^J",["^Z"]],"~:shadow/js-access-global",["^J",["Error"]],"^[",null,"~:defs",["^ ","~$cluster-children",["^ ","~:protocol-inline",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",90,"^8",7,"^9",90,"^:",23,"~:arglists",["^12",["~$quote",["^12",[["~$g","~$cluster"]]]]]],"^K","~$lib-draw-graph.clustered/cluster-children","^6","lib_draw_graph/clustered.cljc","^:",23,"~:method-params",["^12",[["~$g","^2="]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^8",1,"~:variadic?",false,"^7",90,"~:ret-tag",["^J",[null,"~$any"]],"^9",90,"~:max-fixed-arity",2,"~:fn-var",true,"^2;",["^12",["^2<",["^12",[["~$g","^2="]]]]]],"~$clusters",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",195,"^8",7,"^9",195,"^:",15,"^2;",["^12",["^2<",["^12",[["~$g"]]]]],"^;","Returns the set of all clusters in the graph."],"^K","~$lib-draw-graph.clustered/clusters","^6","lib_draw_graph/clustered.cljc","^:",15,"^2?",["^12",[["~$g"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",195,"^2C","^2D","^9",195,"^2E",1,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g"]]]]],"^;","Returns the set of all clusters in the graph."],"~$cluster-key",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",24,"^8",7,"^9",24,"^:",18,"^2;",["^12",["^2<",["^12",[["~$g"]]]]]],"^K","~$lib-draw-graph.clustered/cluster-key","^6","lib_draw_graph/clustered.cljc","^:",18,"^2?",["^12",[["~$g"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",24,"^2C",["^J",[null,"^2D"]],"^9",24,"^2E",1,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g"]]]]]],"~$cluster->all-nodes",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",150,"^8",7,"^9",150,"^:",25,"^2;",["^12",["^2<",["^12",[["~$g","^2="],["~$g","~$cluster-on","^2="]]]]],"^;","Returns all nodes in a cluster, given the :cluster-on key","~:top-fn",["^ ","^2B",false,"~:fixed-arity",3,"^2E",3,"^2?",["^12",[["~$g","^2="],["~$g","^2L","^2="]]],"^2;",["^12",[["~$g","^2="],["~$g","^2L","^2="]]],"^2A",["^12",[null,null]]]],"^K","~$lib-draw-graph.clustered/cluster->all-nodes","^6","lib_draw_graph/clustered.cljc","^:",25,"^2M",["^ ","^2B",false,"^2N",3,"^2E",3,"^2?",["^12",[["~$g","^2="],["~$g","^2L","^2="]]],"^2;",["^12",[["~$g","^2="],["~$g","^2L","^2="]]],"^2A",["^12",[null,null]]],"^2?",["^12",[["~$g","^2="],["~$g","^2L","^2="]]],"^2@",null,"^2N",3,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"~:methods",[["^ ","^2N",2,"^2B",false,"~:tag","^2D"],["^ ","^2N",3,"^2B",false]],"^7",150,"^9",150,"^2E",3,"^2F",true,"^2;",["^12",[["~$g","^2="],["~$g","^2L","^2="]]],"^;","Returns all nodes in a cluster, given the :cluster-on key"],"~$delete-edge-graph",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",62,"^8",7,"^9",62,"^:",24,"^2;",["^12",["^2<",["^12",[["~$g"]]]]]],"^K","~$lib-draw-graph.clustered/delete-edge-graph","^6","lib_draw_graph/clustered.cljc","^:",24,"^2?",["^12",[["~$g"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",62,"^2C",["^J",["~$clj","^2D"]],"^9",62,"^2E",1,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g"]]]]]],"~$filter->children",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",212,"^8",17,"^9",212,"^:",33,"~:private",true,"^2;",["^12",["^2<",["^12",[["~$m","~$set-to-remove"]]]]]],"^2V",true,"^K","~$lib-draw-graph.clustered/filter->children","^6","lib_draw_graph/clustered.cljc","^:",33,"^2?",["^12",[["~$m","^2W"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",212,"^2C",["^J",[null,"^2D"]],"^9",212,"^2E",2,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$m","^2W"]]]]]],"~$remove-nodes",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",238,"^8",7,"^9",238,"^:",19,"^2;",["^12",["^2<",["^12",[["~$g","~$nodes"]]]]],"^;","Removes nodes from a clustered graph. Returns a map of {:graph <graph>\n   :clusters <the clusters which remain>}"],"^K","~$lib-draw-graph.clustered/remove-nodes","^6","lib_draw_graph/clustered.cljc","^:",19,"^2?",["^12",[["~$g","^2Z"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",238,"^2C","^2D","^9",238,"^2E",2,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g","^2Z"]]]]],"^;","Removes nodes from a clustered graph. Returns a map of {:graph <graph>\n   :clusters <the clusters which remain>}"],"~$edge-graph",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",69,"^8",7,"^9",69,"^:",17,"^2;",["^12",["^2<",["^12",[["~$g"]]]]]],"^K","~$lib-draw-graph.clustered/edge-graph","^6","lib_draw_graph/clustered.cljc","^:",17,"^2?",["^12",[["~$g"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",69,"^2C","^2D","^9",69,"^2E",1,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g"]]]]]],"~$nodes-by-cluster",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",168,"^8",7,"^9",168,"^:",23,"^2;",["^12",["^2<",["^12",[["~$g"],["~$g","^2L"]]]]],"^;","Returns nodes in the graph grouped by cluster.","^2M",["^ ","^2B",false,"^2N",2,"^2E",2,"^2?",["^12",[["~$g"],["~$g","^2L"]]],"^2;",["^12",[["~$g"],["~$g","^2L"]]],"^2A",["^12",[null,null]]]],"^K","~$lib-draw-graph.clustered/nodes-by-cluster","^6","lib_draw_graph/clustered.cljc","^:",23,"^2M",["^ ","^2B",false,"^2N",2,"^2E",2,"^2?",["^12",[["~$g"],["~$g","^2L"]]],"^2;",["^12",[["~$g"],["~$g","^2L"]]],"^2A",["^12",[null,null]]],"^2?",["^12",[["~$g"],["~$g","^2L"]]],"^2@",null,"^2N",2,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^2P",[["^ ","^2N",1,"^2B",false,"^2Q","^2D"],["^ ","^2N",2,"^2B",false,"^2Q","^2T"]],"^7",168,"^9",168,"^2E",2,"^2F",true,"^2;",["^12",[["~$g"],["~$g","^2L"]]],"^;","Returns nodes in the graph grouped by cluster."],"~$merged-cluster-attr",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",130,"^8",7,"^9",130,"^:",26,"^2;",["^12",["^2<",["^12",[["~$g","^2=","~$sub-key"]]]]],"^;","Goes to the ultimate parent of the cluster and back down merging attributes\n  such that the child's attributes overwrite the parent's."],"^K","~$lib-draw-graph.clustered/merged-cluster-attr","^6","lib_draw_graph/clustered.cljc","^:",26,"^2?",["^12",[["~$g","^2=","^35"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",130,"^2C",["^J",["^2D","~$clj-nil"]],"^9",130,"^2E",3,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g","^2=","^35"]]]]],"^;","Goes to the ultimate parent of the cluster and back down merging attributes\n  such that the child's attributes overwrite the parent's."],"~$filter->parent",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",201,"^8",17,"^9",201,"^:",31,"^2V",true,"^2;",["^12",["^2<",["^12",[["~$m","^2W"]]]]]],"^2V",true,"^K","~$lib-draw-graph.clustered/filter->parent","^6","lib_draw_graph/clustered.cljc","^:",31,"^2?",["^12",[["~$m","^2W"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",201,"^2C",["^J",[null,"^2D"]],"^9",201,"^2E",2,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$m","^2W"]]]]]],"~$cluster-graph",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",95,"^8",7,"^9",95,"^:",20,"^2;",["^12",["^2<",["^12",[["~$g"]]]]]],"^K","~$lib-draw-graph.clustered/cluster-graph","^6","lib_draw_graph/clustered.cljc","^:",20,"^2?",["^12",[["~$g"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",95,"^2C","^2D","^9",95,"^2E",1,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g"]]]]]],"~$remove-clusters",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",226,"^8",7,"^9",226,"^:",22,"^2;",["^12",["^2<",["^12",[["~$g","~$&","~$clstrs"]]]]],"^;","Removes clusters from the graph.\n   Doesn't touch cluster edgess, so that those can be filtered down (once)\n   after multiple filtering operations.","^2M",["^ ","^2B",true,"^2N",1,"^2E",1,"^2?",[["^12",["~$g","^3="]]],"^2;",["^12",[["~$g","~$&","^3="]]],"^2A",["^12",[null]]]],"^K","~$lib-draw-graph.clustered/remove-clusters","^6","lib_draw_graph/clustered.cljc","^:",22,"^2M",["^ ","^2B",true,"^2N",1,"^2E",1,"^2?",[["^12",["~$g","^3="]]],"^2;",["^12",[["~$g","~$&","^3="]]],"^2A",["^12",[null]]],"^2?",[["^12",["~$g","^3="]]],"^2@",null,"^2N",1,"^2A",["^12",[null]],"^8",1,"^2B",true,"^2P",[["^ ","^2N",1,"^2B",true,"^2Q",["^J",["^2T","^2D"]]]],"^7",226,"^2C","^2D","^9",226,"^2E",1,"^2F",true,"^2;",["^12",[["~$g","~$&","^3="]]],"^;","Removes clusters from the graph.\n   Doesn't touch cluster edgess, so that those can be filtered down (once)\n   after multiple filtering operations."],"~$first-cluster-attr",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",118,"^8",7,"^9",118,"^:",25,"^2;",["^12",["^2<",["^12",[["~$g","^2=","^35"]]]]],"^;","Gets sub-key attrs for the cluster, or if none, it's parent's attrs\n   and so on."],"^K","~$lib-draw-graph.clustered/first-cluster-attr","^6","lib_draw_graph/clustered.cljc","^:",25,"^2?",["^12",[["~$g","^2=","^35"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",118,"^2C",["^J",["^2D","^37"]],"^9",118,"^2E",3,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g","^2=","^35"]]]]],"^;","Gets sub-key attrs for the cluster, or if none, it's parent's attrs\n   and so on."],"~$remove-clusters-from-edge-graph",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",54,"^8",7,"^9",54,"^:",38,"^2;",["^12",["^2<",["^12",[["~$g","^3="]]]]]],"^K","~$lib-draw-graph.clustered/remove-clusters-from-edge-graph","^6","lib_draw_graph/clustered.cljc","^:",38,"^2?",["^12",[["~$g","^3="]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",54,"^2C",["^J",["^2T","^2D"]],"^9",54,"^2E",2,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g","^3="]]]]]],"~$add-cluster-edge",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",44,"^8",7,"^9",44,"^:",23,"^2;",["^12",["^2<",["^12",[["~$g","~$src","~$tgt"]]]]]],"^K","~$lib-draw-graph.clustered/add-cluster-edge","^6","lib_draw_graph/clustered.cljc","^:",23,"^2?",["^12",[["~$g","^3D","^3E"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",44,"^2C",["^J",["^2T","^2D"]],"^9",44,"^2E",3,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g","^3D","^3E"]]]]]],"~$add-cluster-parent",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",76,"^8",7,"^9",76,"^:",25,"^2;",["^12",["^2<",["^12",[["~$g","^2=","~$parent"]]]]]],"^K","~$lib-draw-graph.clustered/add-cluster-parent","^6","lib_draw_graph/clustered.cljc","^:",25,"^2?",["^12",[["~$g","^2=","^3H"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",76,"^2C",["^J",["^2T","^2D"]],"^9",76,"^2E",3,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g","^2=","^3H"]]]]]],"~$cluster-siblings",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",100,"^8",7,"^9",100,"^:",23,"^2;",["^12",["^2<",["^12",[["~$g","^2="]]]]]],"^K","~$lib-draw-graph.clustered/cluster-siblings","^6","lib_draw_graph/clustered.cljc","^:",23,"^2?",["^12",[["~$g","^2="]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",100,"^2C","~$cljs.core/LazySeq","^9",100,"^2E",2,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g","^2="]]]]]],"~$clustered?",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",29,"^8",7,"^9",29,"^:",17,"^2;",["^12",["^2<",["^12",[["~$g"]]]]]],"^K","~$lib-draw-graph.clustered/clustered?","^6","lib_draw_graph/clustered.cljc","^:",17,"^2?",["^12",[["~$g"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",29,"^2C","~$boolean","^9",29,"^2E",1,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g"]]]]]],"~$add-cluster-key",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",19,"^8",7,"^9",19,"^:",22,"^2;",["^12",["^2<",["^12",[["~$g","^2L"]]]]]],"^K","~$lib-draw-graph.clustered/add-cluster-key","^6","lib_draw_graph/clustered.cljc","^:",22,"^2?",["^12",[["~$g","^2L"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",19,"^2C",["^J",["^2T","^2D"]],"^9",19,"^2E",2,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g","^2L"]]]]]],"~$cluster->nodes",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",140,"^8",7,"^9",140,"^:",21,"^2;",["^12",["^2<",["^12",[["~$g","^2="],["~$g","^2L","^2="]]]]],"^;","Returns the nodes in the current cluster but not in children\n   of the current cluster.","^2M",["^ ","^2B",false,"^2N",3,"^2E",3,"^2?",["^12",[["~$g","^2="],["~$g","^2L","^2="]]],"^2;",["^12",[["~$g","^2="],["~$g","^2L","^2="]]],"^2A",["^12",[null,null]]]],"^K","~$lib-draw-graph.clustered/cluster->nodes","^6","lib_draw_graph/clustered.cljc","^:",21,"^2M",["^ ","^2B",false,"^2N",3,"^2E",3,"^2?",["^12",[["~$g","^2="],["~$g","^2L","^2="]]],"^2;",["^12",[["~$g","^2="],["~$g","^2L","^2="]]],"^2A",["^12",[null,null]]],"^2?",["^12",[["~$g","^2="],["~$g","^2L","^2="]]],"^2@",null,"^2N",3,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^2P",[["^ ","^2N",2,"^2B",false,"^2Q","^2D"],["^ ","^2N",3,"^2B",false,"^2Q","^3L"]],"^7",140,"^9",140,"^2E",3,"^2F",true,"^2;",["^12",[["~$g","^2="],["~$g","^2L","^2="]]],"^;","Returns the nodes in the current cluster but not in children\n   of the current cluster."],"~$nodes->clusters",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",186,"^8",7,"^9",186,"^:",22,"^2;",["^12",["^2<",["^12",[["~$g","~$nds"]]]]],"^;","Returns the set of clusters that the nodes are in."],"^K","~$lib-draw-graph.clustered/nodes->clusters","^6","lib_draw_graph/clustered.cljc","^:",22,"^2?",["^12",[["~$g","^3U"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",186,"^2C","^2D","^9",186,"^2E",2,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g","^3U"]]]]],"^;","Returns the set of clusters that the nodes are in."],"~$node->clusters",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",175,"^8",7,"^9",175,"^:",21,"^2;",["^12",["^2<",["^12",[["~$g","~$n"],["~$g","^2L","~$n"]]]]],"^;","Returns the set of clusters that the node is in.","^2M",["^ ","^2B",false,"^2N",3,"^2E",3,"^2?",["^12",[["~$g","~$n"],["~$g","^2L","~$n"]]],"^2;",["^12",[["~$g","~$n"],["~$g","^2L","~$n"]]],"^2A",["^12",[null,null]]]],"^K","~$lib-draw-graph.clustered/node->clusters","^6","lib_draw_graph/clustered.cljc","^:",21,"^2M",["^ ","^2B",false,"^2N",3,"^2E",3,"^2?",["^12",[["~$g","~$n"],["~$g","^2L","~$n"]]],"^2;",["^12",[["~$g","~$n"],["~$g","^2L","~$n"]]],"^2A",["^12",[null,null]]],"^2?",["^12",[["~$g","~$n"],["~$g","^2L","~$n"]]],"^2@",null,"^2N",3,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^2P",[["^ ","^2N",2,"^2B",false,"^2Q","^2D"],["^ ","^2N",3,"^2B",false]],"^7",175,"^9",175,"^2E",3,"^2F",true,"^2;",["^12",[["~$g","~$n"],["~$g","^2L","~$n"]]],"^;","Returns the set of clusters that the node is in."],"~$add-attr-to-cluster",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",36,"^8",7,"^9",36,"^:",26,"^2;",["^12",["^2<",["^12",[["~$g","^2=","~$attr-k","~$attr-v"]]]]]],"^K","~$lib-draw-graph.clustered/add-attr-to-cluster","^6","lib_draw_graph/clustered.cljc","^:",26,"^2?",["^12",[["~$g","^2=","^3Z","^3["]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",36,"^2C",["^J",["^2T","^2D"]],"^9",36,"^2E",4,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g","^2=","^3Z","^3["]]]]]],"~$cluster-parent",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",85,"^8",7,"^9",85,"^:",21,"^2;",["^12",["^2<",["^12",[["~$g","^2="]]]]]],"^K","~$lib-draw-graph.clustered/cluster-parent","^6","lib_draw_graph/clustered.cljc","^:",21,"^2?",["^12",[["~$g","^2="]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",85,"^2C",["^J",[null,"^2D"]],"^9",85,"^2E",2,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g","^2="]]]]]],"~$cluster-descendants",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",107,"^8",7,"^9",107,"^:",26,"^2;",["^12",["^2<",["^12",[["~$g","^2="]]]]],"^;","Returns all clusters inside the cluster recursively."],"^K","~$lib-draw-graph.clustered/cluster-descendants","^6","lib_draw_graph/clustered.cljc","^:",26,"^2?",["^12",[["~$g","^2="]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",107,"^9",107,"^2E",2,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$g","^2="]]]]],"^;","Returns all clusters inside the cluster recursively."],"~$->keyword",["^ ","^2:",null,"^5",["^ ","^6","lib_draw_graph/clustered.cljc","^7",13,"^8",7,"^9",13,"^:",16,"^2;",["^12",["^2<",["^12",[["~$k"]]]]],"^;","Converts to keyword if needed"],"^K","~$lib-draw-graph.clustered/->keyword","^6","lib_draw_graph/clustered.cljc","^:",16,"^2?",["^12",[["~$k"]]],"^2@",null,"^2A",["^12",[null,null]],"^8",1,"^2B",false,"^7",13,"^2C",["^J",["~$cljs.core/Keyword","^37"]],"^9",13,"^2E",1,"^2F",true,"^2;",["^12",["^2<",["^12",[["~$k"]]]]],"^;","Converts to keyword if needed"]],"^10",["^ ","^W","^W"],"~:cljs.analyzer/constants",["^ ","^Y",["^J",["~:->parent","~:key","~:else","~:->children","~:clusters","~:hierarchy","~:edge-graph","~:attr"]],"~:order",["^4=","^4:","^4@","^4?","^4;","^4>","^49","^4<"]],"^15",["^ ","^Z",["^J",[]]],"^16",["^ "],"^17",["^X","^W","^Q","^R","^S","^U"]],"^N","^L","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1E",[["^4D","~:static-fns"],true,["^4D","~:elide-asserts"],false,["^4D","~:optimize-constants"],null,["^4D","^1<"],null,["^4D","~:external-config"],null,["^4D","~:tooling-config"],null,["^4D","~:emit-constants"],null,["^4D","~:load-tests"],null,["^4D","~:infer-externs"],"~:auto",["^4D","^1>"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4D","~:fn-invoke-direct"],null,["^4D","~:source-map"],"/dev/null"]]]