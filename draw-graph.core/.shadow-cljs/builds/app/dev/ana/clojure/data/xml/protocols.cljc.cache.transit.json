["^ ","~:output",["^ ","~:js","goog.provide('clojure.data.xml.protocols');\ngoog.require('cljs.core');\n\n/**\n * @interface\n */\nclojure.data.xml.protocols.AsQName = function(){};\n\n/**\n * Get the name for this qname\n */\nclojure.data.xml.protocols.qname_local = (function clojure$data$xml$protocols$qname_local(qname){\nif((((!((qname == null)))) && ((!((qname.clojure$data$xml$protocols$AsQName$qname_local$arity$1 == null)))))){\nreturn qname.clojure$data$xml$protocols$AsQName$qname_local$arity$1(qname);\n} else {\nvar x__4433__auto__ = (((qname == null))?null:qname);\nvar m__4434__auto__ = (clojure.data.xml.protocols.qname_local[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(qname) : m__4434__auto__.call(null,qname));\n} else {\nvar m__4431__auto__ = (clojure.data.xml.protocols.qname_local[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(qname) : m__4431__auto__.call(null,qname));\n} else {\nthrow cljs.core.missing_protocol(\"AsQName.qname-local\",qname);\n}\n}\n}\n});\n\n/**\n * Get the namespace uri for this qname\n */\nclojure.data.xml.protocols.qname_uri = (function clojure$data$xml$protocols$qname_uri(qname){\nif((((!((qname == null)))) && ((!((qname.clojure$data$xml$protocols$AsQName$qname_uri$arity$1 == null)))))){\nreturn qname.clojure$data$xml$protocols$AsQName$qname_uri$arity$1(qname);\n} else {\nvar x__4433__auto__ = (((qname == null))?null:qname);\nvar m__4434__auto__ = (clojure.data.xml.protocols.qname_uri[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(qname) : m__4434__auto__.call(null,qname));\n} else {\nvar m__4431__auto__ = (clojure.data.xml.protocols.qname_uri[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(qname) : m__4431__auto__.call(null,qname));\n} else {\nthrow cljs.core.missing_protocol(\"AsQName.qname-uri\",qname);\n}\n}\n}\n});\n\n\n/**\n * Protocol for generating new events based on element type\n * @interface\n */\nclojure.data.xml.protocols.EventGeneration = function(){};\n\n/**\n * Function to generate an event for e.\n */\nclojure.data.xml.protocols.gen_event = (function clojure$data$xml$protocols$gen_event(item){\nif((((!((item == null)))) && ((!((item.clojure$data$xml$protocols$EventGeneration$gen_event$arity$1 == null)))))){\nreturn item.clojure$data$xml$protocols$EventGeneration$gen_event$arity$1(item);\n} else {\nvar x__4433__auto__ = (((item == null))?null:item);\nvar m__4434__auto__ = (clojure.data.xml.protocols.gen_event[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(item) : m__4434__auto__.call(null,item));\n} else {\nvar m__4431__auto__ = (clojure.data.xml.protocols.gen_event[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(item) : m__4431__auto__.call(null,item));\n} else {\nthrow cljs.core.missing_protocol(\"EventGeneration.gen-event\",item);\n}\n}\n}\n});\n\n/**\n * Returns the next set of events that should occur after e.  next-events are the\n *   events that should be generated after this one is complete.\n */\nclojure.data.xml.protocols.next_events = (function clojure$data$xml$protocols$next_events(item,next_items){\nif((((!((item == null)))) && ((!((item.clojure$data$xml$protocols$EventGeneration$next_events$arity$2 == null)))))){\nreturn item.clojure$data$xml$protocols$EventGeneration$next_events$arity$2(item,next_items);\n} else {\nvar x__4433__auto__ = (((item == null))?null:item);\nvar m__4434__auto__ = (clojure.data.xml.protocols.next_events[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(item,next_items) : m__4434__auto__.call(null,item,next_items));\n} else {\nvar m__4431__auto__ = (clojure.data.xml.protocols.next_events[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$2(item,next_items) : m__4431__auto__.call(null,item,next_items));\n} else {\nthrow cljs.core.missing_protocol(\"EventGeneration.next-events\",item);\n}\n}\n}\n});\n\n\n/**\n * @interface\n */\nclojure.data.xml.protocols.AsElements = function(){};\n\n/**\n * Return a seq of elements represented by an expression.\n */\nclojure.data.xml.protocols.as_elements = (function clojure$data$xml$protocols$as_elements(expr){\nif((((!((expr == null)))) && ((!((expr.clojure$data$xml$protocols$AsElements$as_elements$arity$1 == null)))))){\nreturn expr.clojure$data$xml$protocols$AsElements$as_elements$arity$1(expr);\n} else {\nvar x__4433__auto__ = (((expr == null))?null:expr);\nvar m__4434__auto__ = (clojure.data.xml.protocols.as_elements[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(expr) : m__4434__auto__.call(null,expr));\n} else {\nvar m__4431__auto__ = (clojure.data.xml.protocols.as_elements[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(expr) : m__4431__auto__.call(null,expr));\n} else {\nthrow cljs.core.missing_protocol(\"AsElements.as-elements\",expr);\n}\n}\n}\n});\n\n\n/**\n * @interface\n */\nclojure.data.xml.protocols.AsXmlString = function(){};\n\n/**\n * Serialize atribute value or content node\n */\nclojure.data.xml.protocols.xml_str = (function clojure$data$xml$protocols$xml_str(node){\nif((((!((node == null)))) && ((!((node.clojure$data$xml$protocols$AsXmlString$xml_str$arity$1 == null)))))){\nreturn node.clojure$data$xml$protocols$AsXmlString$xml_str$arity$1(node);\n} else {\nvar x__4433__auto__ = (((node == null))?null:node);\nvar m__4434__auto__ = (clojure.data.xml.protocols.xml_str[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__4434__auto__.call(null,node));\n} else {\nvar m__4431__auto__ = (clojure.data.xml.protocols.xml_str[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(node) : m__4431__auto__.call(null,node));\n} else {\nthrow cljs.core.missing_protocol(\"AsXmlString.xml-str\",node);\n}\n}\n}\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/data/xml/protocols.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",31],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.data.xml.protocols","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^O","~$goog","^P"],"~:seen",["^H",[]],"~:uses",null,"~:require-macros",["^ ","^O","^O"],"~:form",["~#list",["~$ns","^J"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^P","^O"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","clojure/data/xml/protocols.cljc"],"~:compiled-at",1560836399703,"~:resource-name","clojure/data/xml/protocols.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.data.xml.protocols)\n\n;; XML names can be any data type that has at least a namespace uri and a name slot\n\n(defprotocol AsQName\n  (qname-local [qname] \"Get the name for this qname\")\n  (qname-uri   [qname] \"Get the namespace uri for this qname\"))\n\n(defprotocol EventGeneration\n  \"Protocol for generating new events based on element type\"\n  (gen-event [item]\n    \"Function to generate an event for e.\")\n  (next-events [item next-items]\n    \"Returns the next set of events that should occur after e.  next-events are the\n     events that should be generated after this one is complete.\"))\n\n(defprotocol AsElements\n  (as-elements [expr] \"Return a seq of elements represented by an expression.\"))\n\n(defprotocol AsXmlString\n  (xml-str [node] \"Serialize atribute value or content node\"))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["x__4433__auto__","m__4434__auto__","clojure.data.xml.protocols/qname-local","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","clojure.data.xml.protocols/qname-uri","clojure.data.xml.protocols/AsQName","qname","clojure.data.xml.protocols/gen-event","clojure.data.xml.protocols/next-events","clojure.data.xml.protocols/EventGeneration","item","next-items","clojure.data.xml.protocols/as-elements","clojure.data.xml.protocols/AsElements","expr","clojure.data.xml.protocols/xml-str","clojure.data.xml.protocols/AsXmlString","node"]]],"~:cache-keys",["~#cmap",[["~:macro","^O"],[1559826623000],["^[","goog/math/math.js"],[1560546089000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^P","~$goog.array","~$goog.asserts"]]],["^[","goog/array/array.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^1B"]]],["^[","goog/debug/error.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","goog/dom/nodetype.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","goog/object/object.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],"~:SHADOW-TIMESTAMP",[1560546091000,1559826623000],["^[","goog/math/long.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^1B","~$goog.reflect"]]],["^[","goog/string/internal.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","goog/functions/functions.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","goog/structs/map.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^[","goog/asserts/asserts.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^[","goog/uri/uri.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^1A","^1B","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^[","goog/base.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",[]]],["^[","goog/structs/structs.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^1A","~$goog.object"]]],["^[","clojure/data/xml/protocols.cljc"],[1551120970000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^O"]]],["^[","goog/string/string.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","~$goog.string.internal"]]],["^[","goog/reflect/reflect.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","goog/string/stringbuffer.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","goog/iter/iter.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^1A","^1B","~$goog.functions","~$goog.math"]]],["^[","cljs/core.cljs"],[1559826623000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["~$goog.math.Long","~$goog.math.Integer","^1I","^1O","^1A","~$goog.Uri","~$goog.string.StringBuffer"]]],["^[","goog/math/integer.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P"]]],["^[","goog/uri/utils.js"],[1560546089000,"^1=",["^ ","^1>",null,"^1?",["^H",[]],"^1@",["^P","^1A","^1B","^1I"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/data/xml/protocols.cljc","^7",9,"^8",5,"^9",9,"^:",31],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"~:shadow/protocol-prefixes",["^H",["clojure$data$xml$protocols$AsXmlString$","clojure$data$xml$protocols$EventGeneration$","clojure$data$xml$protocols$AsQName$","clojure$data$xml$protocols$AsElements$"]],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^P"],"^Q",["^H",[]],"^R",null,"~:defs",["^ ","~$as-elements",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/data/xml/protocols.cljc","^7",26,"^8",4,"^9",26,"^:",15,"~:protocol","~$clojure.data.xml.protocols/AsElements","~:doc","Return a seq of elements represented by an expression.","~:arglists",["^U",["~$quote",["^U",[["~$expr"]]]]]],"^20","^21","^I","~$clojure.data.xml.protocols/as-elements","^6","clojure/data/xml/protocols.cljc","^:",15,"~:method-params",["^U",[["^25"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^8",1,"~:variadic?",false,"^7",25,"~:ret-tag","~$any","^9",26,"~:max-fixed-arity",1,"~:fn-var",true,"^23",["^U",["^24",["^U",[["^25"]]]]],"^22","Return a seq of elements represented by an expression."],"~$EventGeneration",["^ ","^5",["^ ","~:protocol-symbol",true,"^6","clojure/data/xml/protocols.cljc","^:",29,"^8",14,"^7",17,"~:protocol-info",["^ ","~:methods",["^ ","~$gen-event",[["~$item"]],"~$next-events",[["^2D","~$next-items"]]]],"^9",17,"^22","Protocol for generating new events based on element type","~:jsdoc",["^U",["@interface"]]],"^2@",true,"^I","~$clojure.data.xml.protocols/EventGeneration","^6","clojure/data/xml/protocols.cljc","^:",29,"^8",1,"^7",17,"^2A",["^ ","^2B",["^ ","^2C",[["^2D"]],"^2E",[["^2D","^2F"]]]],"~:info",null,"^9",17,"~:tag","^2<","~:impls",["^H",[]],"^22","Protocol for generating new events based on element type","^2G",["^U",["@interface"]]],"~$AsElements",["^ ","^5",["^ ","^6","clojure/data/xml/protocols.cljc","^7",25,"^8",14,"^9",25,"^:",24,"^2@",true,"^2G",["^U",["@interface"]],"^2A",["^ ","^2B",["^ ","^1Z",[["^25"]]]]],"^2@",true,"^I","^21","^6","clojure/data/xml/protocols.cljc","^:",24,"^8",1,"^7",25,"^2A",["^ ","^2B",["^ ","^1Z",[["^25"]]]],"^2I",null,"^9",25,"^2J","^2<","^2K",["^H",[]],"^2G",["^U",["@interface"]]],"~$AsXmlString",["^ ","^5",["^ ","^6","clojure/data/xml/protocols.cljc","^7",28,"^8",14,"^9",28,"^:",25,"^2@",true,"^2G",["^U",["@interface"]],"^2A",["^ ","^2B",["^ ","~$xml-str",[["~$node"]]]]],"^2@",true,"^I","~$clojure.data.xml.protocols/AsXmlString","^6","clojure/data/xml/protocols.cljc","^:",25,"^8",1,"^7",28,"^2A",["^ ","^2B",["^ ","^2N",[["^2O"]]]],"^2I",null,"^9",28,"^2J","^2<","^2K",["^H",[]],"^2G",["^U",["@interface"]]],"~$AsQName",["^ ","^5",["^ ","^6","clojure/data/xml/protocols.cljc","^7",13,"^8",14,"^9",13,"^:",21,"^2@",true,"^2G",["^U",["@interface"]],"^2A",["^ ","^2B",["^ ","~$qname-local",[["~$qname"]],"~$qname-uri",[["^2S"]]]]],"^2@",true,"^I","~$clojure.data.xml.protocols/AsQName","^6","clojure/data/xml/protocols.cljc","^:",21,"^8",1,"^7",13,"^2A",["^ ","^2B",["^ ","^2R",[["^2S"]],"^2T",[["^2S"]]]],"^2I",null,"^9",13,"^2J","^2<","^2K",["^H",[]],"^2G",["^U",["@interface"]]],"^2N",["^ ","^1[",null,"^5",["^ ","^6","clojure/data/xml/protocols.cljc","^7",29,"^8",4,"^9",29,"^:",11,"^20","^2P","^22","Serialize atribute value or content node","^23",["^U",["^24",["^U",[["^2O"]]]]]],"^20","^2P","^I","~$clojure.data.xml.protocols/xml-str","^6","clojure/data/xml/protocols.cljc","^:",11,"^27",["^U",[["^2O"]]],"^28",null,"^29",["^U",[null,null]],"^8",1,"^2:",false,"^7",28,"^2;","^2<","^9",29,"^2=",1,"^2>",true,"^23",["^U",["^24",["^U",[["^2O"]]]]],"^22","Serialize atribute value or content node"],"^2E",["^ ","^1[",null,"^5",["^ ","^6","clojure/data/xml/protocols.cljc","^7",21,"^8",4,"^9",21,"^:",15,"^20","^2H","^22","Returns the next set of events that should occur after e.  next-events are the\n     events that should be generated after this one is complete.","^23",["^U",["^24",["^U",[["^2D","^2F"]]]]]],"^20","^2H","^I","~$clojure.data.xml.protocols/next-events","^6","clojure/data/xml/protocols.cljc","^:",15,"^27",["^U",[["^2D","^2F"]]],"^28",null,"^29",["^U",[null,null]],"^8",1,"^2:",false,"^7",17,"^2;","^2<","^9",21,"^2=",2,"^2>",true,"^23",["^U",["^24",["^U",[["^2D","^2F"]]]]],"^22","Returns the next set of events that should occur after e.  next-events are the\n     events that should be generated after this one is complete."],"^2T",["^ ","^1[",null,"^5",["^ ","^6","clojure/data/xml/protocols.cljc","^7",15,"^8",4,"^9",15,"^:",13,"^20","^2U","^22","Get the namespace uri for this qname","^23",["^U",["^24",["^U",[["^2S"]]]]]],"^20","^2U","^I","~$clojure.data.xml.protocols/qname-uri","^6","clojure/data/xml/protocols.cljc","^:",13,"^27",["^U",[["^2S"]]],"^28",null,"^29",["^U",[null,null]],"^8",1,"^2:",false,"^7",13,"^2;","^2<","^9",15,"^2=",1,"^2>",true,"^23",["^U",["^24",["^U",[["^2S"]]]]],"^22","Get the namespace uri for this qname"],"^2R",["^ ","^1[",null,"^5",["^ ","^6","clojure/data/xml/protocols.cljc","^7",14,"^8",4,"^9",14,"^:",15,"^20","^2U","^22","Get the name for this qname","^23",["^U",["^24",["^U",[["^2S"]]]]]],"^20","^2U","^I","~$clojure.data.xml.protocols/qname-local","^6","clojure/data/xml/protocols.cljc","^:",15,"^27",["^U",[["^2S"]]],"^28",null,"^29",["^U",[null,null]],"^8",1,"^2:",false,"^7",13,"^2;","^2<","^9",14,"^2=",1,"^2>",true,"^23",["^U",["^24",["^U",[["^2S"]]]]],"^22","Get the name for this qname"],"^2C",["^ ","^1[",null,"^5",["^ ","^6","clojure/data/xml/protocols.cljc","^7",19,"^8",4,"^9",19,"^:",13,"^20","^2H","^22","Function to generate an event for e.","^23",["^U",["^24",["^U",[["^2D"]]]]]],"^20","^2H","^I","~$clojure.data.xml.protocols/gen-event","^6","clojure/data/xml/protocols.cljc","^:",13,"^27",["^U",[["^2D"]]],"^28",null,"^29",["^U",[null,null]],"^8",1,"^2:",false,"^7",17,"^2;","^2<","^9",19,"^2=",1,"^2>",true,"^23",["^U",["^24",["^U",[["^2D"]]]]],"^22","Function to generate an event for e."]],"^S",["^ ","^O","^O"],"^W",["^ "],"^X",["^ "],"^Y",["^P","^O"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1;",[["^31","~:static-fns"],true,["^31","~:elide-asserts"],false,["^31","~:optimize-constants"],null,["^31","^12"],null,["^31","~:external-config"],null,["^31","~:tooling-config"],null,["^31","~:emit-constants"],null,["^31","~:load-tests"],null,["^31","~:infer-externs"],"~:auto",["^31","^14"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^31","~:fn-invoke-direct"],null,["^31","~:source-map"],"/dev/null"]]]