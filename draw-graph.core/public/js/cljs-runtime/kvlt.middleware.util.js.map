{"version":3,"sources":["kvlt/middleware/util.cljc"],"mappings":";;;;;;;;AAcA,AAAA,AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE;AADJ,AAEG,AAAI,AAAAC,AAAUD;AACZ,AAAME,AAAM,AAAAC,AAAI,AAACC,AAAUJ;AAAf,AAAA,AAAAG;AAAAA;;AAAA;;;AAAZ,AACE,AAAA,AAAK,AAACE,AAAKH,AAAW,AAACG,AAAKL;;AAC9BA;;;;AALL,AAAA,AAAA,AAAMF,AAMFE,AAAEM;AANN,AAOG,AAAAC,AAAQ,AAACC,AAAeR;AAAxB,AAAA,AAA2BM;AAAQ,AAAAC,AAAA,AAAkBD;;AAArDC;;;;AAPH,AAAA,AAAA,AAAMT;;AAAN,AASA,AAAA,AAAMW,AAAUC;AAAhB,AACE,AAAM,AAAA,AAAOA;AAAMC;;AAAnB,AACM,AAACC,AAAMF;AAAM,AAAAG,AAAYH;AAAZ,AAAAI,AAAAD,AAAA,AAAA,AAAOG;AAAP,AAAAF,AAAAD,AAAA,AAAA,AAASI;AAAT,AAAA;AAAAF;AAAA,AACG,AAAAA,AAACG,AAASF,AAAEC;;;;AAFlC,AAGYP;;;;;AAEd,AAAA,AAAOS,AAAWC;AAAlB,AACE,AAAA,AAAA,AAAA,AAACC,AAAOD;;AAKV,AAAA,AAAME,AAAaL;AAAnB,AACE,AAAAM,AAA6B,AAACO,AAAKb;AAAnCM,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAcK;AAAd,AAAAD,AAAAJ,AAAA,AAAkBM;AACZZ,AAAE,AAAIW,AACF;AAAAG;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAR,AAAA,AAAAQ,AAAA,AAAA,AAAA,AAAA,AAAAP,AAAAC,AAAAM,AAAAA;AAAAA,AAAgBE;AAAhB,AAAAP,AAAAK,AAAMC,AAAEL;AAAR,AACE,AAAAO,AAAQD;AAAR,AAAA,AACED;AADF,AAAAE,AAAAA,AACIlB,AAAAA,AAAAA;;AADJkB;;;AAEFlB;AALV,AAME,AAAIY;AACF;AAAKK;AAAL,AACE,AAACE,AAAO,AAACnB,AAAAA,AAAAA,AAAEiB,AAAAA,AAAKL;;;;AAClBZ;;;AAEN,AAAA,AAAA,AAAArB,AAAM8C;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAAMS,AAAaC;AAAzB,AAAA,AAAAR,AAAAD;AAAA,AAAA7B,AAAA8B,AAAA,AAAA,AAAmCS;AAAnC,AACE,AAAMA,AAAO,AAAC5C,AAAS4C;AACjBD,AAAO,AAAA,AAAIA,AAAO3C,AAASa;AADjC,AAEE;AAAKgC;AAAL,AACE;AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhC,AAAA,AAAAgC,AAAA,AAAA,AAAA,AAAA,AAAA/B,AAAAC,AAAA8B,AAAAA;AAAAA,AAA6BtB;AAA7B,AAAAP,AAAA6B,AAAA,AAAaC;AAAb,AACE,AAAMvB,AAAI,AAACkB,AAAAA,AAAAA,AAAOlB,AAAAA;AACZA,AAAI,AAAAwB,AAAQxB;AAAR,AAAA,AACEuB;AAAM,AAAAC,AAAA,AAAA,AAACC,AACO,AAAA,AAACC,AAAKC,AACLV,AAAa,AAAChC,AAAUe;;AAHzCwB;;;AADV,AAKE,AAACI,AACA,AAACR,AAAAA,AAAAA,AAAOpB,AAAAA,AACR,AAAC6B,AAAKC,AAASX,AACf,AAAA,AAACU,AAAKC;AAANC;AAAA,AACO,AAAAC,AAAAD;AAAA,AAAA,AACER;AACA,AAAAS,AAAA,AAAA,AAACP,AACO,AAAA,AAACC,AAAKC,AACLV,AAAa,AAAChC,AAAUe;;AAJnCgC;;;;;;;;;;AAdlB,AAAA,AAAA,AAAMxB;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAG,AAAAJ;;;AAAA,AA2BA,AAAA,AAAA,AAAAjD,AAAMuE;AAAN,AAAA,AAAA9B,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8B,AAAA,AAAA,AAAA,AAAA3B;;;AAAA,AAAA,AAAA,AAAA,AAAA4B,AAAMD,AAAYK;AAAlB,AAAA,AAAAH,AAAAD;AAAA,AAAAtD,AAAAuD,AAAA,AAAA,AAA6BI;AAA7B,AACE,AAAMA,AAAS,AAAAtE,AAAIsE;AAAJ,AAAA,AAAAtE;AAAAA;;AAAA;;;AAAf,AAIM,AACE,AAAM,AAAA,AAACuE,AAAaD;AAApB,AACE,AAAAE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAyCJ;;AAAzC,AAAA,AAAA;;AADF;;AAEA,AAACK,AAAsBN;;;AARjC,AAAA,AAAA,AAAML;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAxB,AAAAuB;AAAAA,AAAA,AAAAtB,AAAAsB;AAAA,AAAA,AAAApB,AAAA;AAAA,AAAA,AAAAA,AAAAqB,AAAAD;;;AAAA,AAUA,AAAA,AAAA,AAAA1E,AAAMmF;AAAN,AAAA,AAAA1C,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0C,AAAA,AAAA,AAAA,AAAAvC;;;AAAA,AAAA,AAAA,AAAA,AAAAwC,AAAMD,AAAYK;AAAlB,AAAA,AAAAH,AAAAD;AAAA,AAAAlE,AAAAmE,AAAA,AAAA,AAA+BR;AAA/B,AACE,AAAMA,AAAS,AAAAtE,AAAIsE;AAAJ,AAAA,AAAAtE;AAAAA;;AAAA;;;AAAf,AAIM,AACE,AAAM,AAAA,AAACuE,AAAaD;AAApB,AACE,AAAAE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAyCJ;;AAAzC,AAAA,AAAA;;AADF;;AAEA,AAACY,AAAsBD;;;AARjC,AAAA,AAAA,AAAML;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAApC,AAAAmC;AAAAA,AAAA,AAAAlC,AAAAkC;AAAA,AAAA,AAAAhC,AAAA;AAAA,AAAA,AAAAA,AAAAiC,AAAAD;;;AAAA,AAUA;;;;AAAA,AAAMI,AAGHC;AAHH,AAIE,AAAMA;AAAN,AACMA,AACA,AAAA,AAAA,AAACC,AACD,AAAA,AAACA,AACYT;;AAJnB;;;AAMF;;;AAAA,AAAMU,AAEHC;AAFH,AAGE,AAAAC,AAAW,AAAA,AAACE,AAAgD,AAAKH;AAAjE,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AAAA,AAAA,AAAA,AACiB,AAACE,AAAQ,AAAA,AAACC,AAAIH,AAMvB,AAACS,AAAO,AACR,AAAC5E,AAAMC;AADC4E;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAxF,AAAAyF,AAAA,AAAA,AAAMvF;AAAN,AAAAF,AAAAyF,AAAA,AAAA,AAAQtE;AAAR,AAAA,AAAa,AAAC6D,AAAQ,AAACU,AAAexF,AAAI,AAACyF,AAASxE;;AAD5D,AAAA,AAACmE;AAADD;AAAA,AAAM,AAAAA,AAAA,AAACH;;AAHP,AAAA,AAACA,AAAU,AAAK,AAAA,AAACD,AAAIH,AACrB,AAACjF,AACD,AAACsF,AAAOC;;AALhB;;;AAUF,AAAA,AAAMQ;AAAN,AACE,AAAA,AAAA,AAAMC;AAAN/G;AAAA,AAAA,AAAAyC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsE,AAAA,AAAA,AAAA,AAAAnE;;;;AAAA,AAAA,AAAA,AAAA,AAAMmE;AAANC,AACGK;AADH,AAAA,AAAAJ,AAAAD;AAAAE,AAAA,AAAAhG,AAAA+F,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtF,AAAA,AAAAsF,AAAA,AAAA,AAAA,AAAA,AAAArF,AAAAC,AAAAoF,AAAAA;AAAA,AAAAnF,AAAAmF,AAAA,AAC2BI;AAD3B,AAEE,AAAM5G,AAAQ,AAAA6G,AAASF;AAATE,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAsB9G;AAAtB8G,AAAA,AAAA,AAAAA,AAAA,AAAA,AAA2B,AAAAA,AAACC,AAAQV;AAApC,AAAA,AAAA,AAAAS,AAAA;AAAA;;AAAA,AAAAA,AAA6CE;;;AAA3D,AACE,AAAAlH,AAAIG;AAAJ,AAAA,AAAAH;AAAAA;;AAAA,AAAAA,AAAY+G;AAAZ,AAAA,AAAA/G;AAAAA;;AAAA;;;;;;AAHJ,AAAA,AAAA,AAAMwG;;AAAN;AAAA,AAAA,AAAA,AAAMA;AAANI;AAAA,AAAA,AAAAC,AAAA,AAAAjE,AAAAgE;AAAAA,AAAA,AAAA/D,AAAA+D;AAAA,AAAA,AAAA7D,AAAA;AAAA,AAAA,AAAAA,AAAA8D,AAAAD;;;;AAAA,AAKF,AAAA,AAAMO,AAAgBC;AAAtB,AAIM,AAACC,AAAoBD;;AAE3B,AAAA,AAAME,AAAYxF;AAAlB,AACE,AAAAyF,AACM,AAAA,AAAI,AAACG,AAAK5F,AACP,AAAA6F,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC7F,AAAAA,AAAAA;AAAa,AAAA8F,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC9F,AAAAA,AAAAA;AAChBA;AAHR,AAAAnB,AAAA4G,AAAA,AAAA,AAAOC;AAAP,AAAA7G,AAAA4G,AAAA,AAAA,AAAYE;AAAZ,AAIE,AAAA,AAAc,AAACN,AAAe,AAAA,AAAKK,AAASC;;AAEhD,AAAA,AAAeI,AAAWC;AAA1B,AACE,AAAMA,AAAuC,AAAAC,AAAWD;AAAxD,AAAA,AAAA,AAAA,AAAA,AACiB,AAAA,AAAIA,AAA4CnC,AAChD,AAAImC,AACJ,AAAAE,AAAgB,AAAUF;AAA1B,AAAA,AAAAE;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAM,AAAA,AAAMA;AAAZ,AAAkBA;;AAAlB;;;AADF;;AAHjB,AAKiB,AAAAC,AAAQJ;AAARI,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAA,AAAA;AAAA;;AAAA,AAAAA,AAAsB/C;;AALvC,AAMiB,AAAAgD,AAAQL;AAARK,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA;AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAsBC;AAAtB,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAAA,AAAAA,AAAgChD;;AANjD,AAOiB,AAAAkD,AAAQP;AAARO,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA;AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAyBD;AAAzB,AAAA,AAAA,AAAAC,AAAA;AAAA;;AAAA,AAAAA,AAAmCrE","names":["var_args","G__46888","kvlt.middleware.util/->content-type","js/Error","t","cljs.core/Keyword","major","or__4131__auto__","cljs.core/namespace","cljs.core/name","charset","G__46898","kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$1","kvlt.middleware.util/spec->fn","spec","cljs.core/identity","cljs.core/coll?","vec__46905","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","p1__46901#","k","f","cljs.core.update.cljs$core$IFn$_invoke$arity$3","kvlt.middleware.util/clean-req","r","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","kvlt.middleware.util/wrap-before","map__46931","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","has","removing","cljs.core/meta","p__46937","map__46940","v","req","G__46945","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","kvlt.middleware.util/->mw","p__46963","vec__46964","seq46956","G__46957","cljs.core/first","cljs.core/next","G__46958","self__4717__auto__","helpful-name","before","after","issue!","p__46968","map__46969","trace","G__46972","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","cats.core._GT__GT__EQ_.cljs$core$IFn$_invoke$arity$variadic","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cats.core/return","p1__46951#","G__46974","kvlt.middleware.util/url-decode","p__46983","vec__46984","seq46979","G__46980","encoded","encoding","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","js/decodeURIComponent","kvlt.middleware.util/url-encode","p__47007","vec__47008","seq46995","G__46996","unencoded","js/encodeURIComponent","kvlt.middleware.util/url-encode-illegal-characters","path-or-query","clojure.string/replace","kvlt.middleware.util/parse-content-type","s","temp__5718__auto__","m","cljs.core/re-matches","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","clojure.string/blank?","p1__47012#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","p__47014","vec__47015","clojure.string/lower-case","clojure.string/trim","pattern","kvlt.middleware.util/charset","p__47023","vec__47024","map__47027","seq47018","G__47019","content-type","fallback","G__47031","cljs.core/re-find","cljs.core/second","kvlt.middleware.util/string->base64","x","goog.crypt.base64/encodeString","kvlt.middleware.util/basic-auth","vec__47037","user","pass","cljs.core/map?","G__47040","G__47041","kvlt.middleware.util/parse-url","url","js/goog.Uri","temp__5720__auto__","port","G__47042","G__47043","cljs.core/not-empty","G__47046"],"sourcesContent":["(ns ^:no-doc kvlt.middleware.util\n  (:require [kvlt.platform.util :as platform.util]\n            [cats.labs.promise]\n            [clojure.string :as str]\n            [cats.core :as m]\n            [taoensso.timbre :as log]\n            #? (:cljs [goog.crypt.base64 :as base64]))\n  #? (:clj\n      (:import [java.net URL URLEncoder URLDecoder]\n               [org.apache.commons.codec.binary Base64])\n      :cljs\n      (:require-macros [kvlt.middleware.util]))\n  #? (:cljs (:import [goog.Uri])))\n\n(defn ->content-type\n  ([t]\n   (if (keyword? t)\n     (let [major (or (namespace t) :application)]\n       (str (name major) \"/\" (name t)))\n     t))\n  ([t charset]\n   (cond-> (->content-type t) charset (str \"; charset=\" charset))))\n\n(defn spec->fn [spec]\n  (cond (nil?  spec) identity\n        (coll? spec) (let [[k f] spec]\n                       #(update % k f))\n        :else spec))\n\n(defn- clean-req [r]\n  (dissoc r\n          :kvlt.middleware/request\n          :kvlt.middleware/response\n          :kvlt/trace))\n\n(defn wrap-before [f]\n  (let [{:keys [has removing]} (meta f)\n        f (if has\n            (fn [{v has :as req}]\n              (cond-> req\n                v f))\n            f)]\n    (if removing\n      (fn [req]\n        (dissoc (f req) removing))\n      f)))\n\n(defn ->mw [helpful-name before & [after]]\n  (let [after  (spec->fn after)\n        before (-> before spec->fn wrap-before)]\n    (fn [issue!]\n      (fn [{:keys [kvlt/trace] :as req}]\n        (let [req (before req)\n              req (cond-> req\n                    trace (update :kvlt.middleware/request\n                                  (fnil conj [])\n                                  [helpful-name (clean-req req)]))]\n          (m/>>=\n           (issue! req)\n           (comp m/return after)\n           (comp m/return\n                 #(cond-> %\n                    trace\n                    (update :kvlt.middleware/response\n                            (fnil conj [])\n                            [helpful-name (clean-req req)])))))))))\n\n#? (:clj\n    (defmacro defmw [varname doc before & [after]]\n      `(def ~varname ~doc\n         (->mw ~(keyword varname) ~before ~after))))\n\n;; More or less all from clj-http, with portability adjustments\n\n(defn url-decode [encoded & [encoding]]\n  (let [encoding (or encoding \"UTF-8\")]\n    #? (:clj\n        (URLDecoder/decode encoded encoding)\n        :cljs\n        (do\n          (when (not= \"UTF-8\" encoding)\n            (log/warn \"url-decode ignoring encoding\" encoding))\n          (js/decodeURIComponent encoded)))))\n\n(defn url-encode [unencoded & [encoding]]\n  (let [encoding (or encoding \"UTF-8\")]\n    #? (:clj\n        (URLEncoder/encode unencoded encoding)\n        :cljs\n        (do\n          (when (not= \"UTF-8\" encoding)\n            (log/warn \"url-encode ignoring encoding\" encoding))\n          (js/encodeURIComponent unencoded)))))\n\n(defn url-encode-illegal-characters\n  \"Takes a raw url path or query and url-encodes any illegal characters.\n  Minimizes ambiguity by encoding space to %20.\"\n  [path-or-query]\n  (when path-or-query\n    (-> path-or-query\n        (str/replace \" \" \"%20\")\n        (str/replace #\"[^a-zA-Z0-9\\.\\-\\_\\~\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\:\\@\\/\\%\\?]\"\n                     url-encode))))\n\n(defn parse-content-type\n  \"Parse `s` as an RFC 2616 media type.\"\n  [s]\n  (if-let [m (re-matches #\"\\s*(([^/]+)/([^ ;]+))\\s*(\\s*;.*)?\" (str s))]\n    {:content-type (keyword (nth m 1))\n     :content-type-params\n     (->> (str/split (str (nth m 4)) #\"\\s*;\\s*\")\n          (identity)\n          (remove str/blank?)\n          (map #(str/split % #\"=\"))\n          (mapcat (fn [[k v]] [(keyword (str/lower-case k)) (str/trim v)]))\n          (apply hash-map))}))\n\n(let [pattern #\"(?i)charset\\s*=\\s*([^\\s]+)\"]\n  (defn charset\n    [content-type & [{:keys [fallback]}]]\n    (let [charset (some->> content-type name (re-find pattern) second)]\n      (or charset fallback \"UTF-8\"))))\n\n(defn string->base64 [x]\n  #? (:clj\n      (-> x (.getBytes \"UTF-8\") Base64/encodeBase64 (String. \"UTF-8\"))\n      :cljs\n      (base64/encodeString x)))\n\n(defn basic-auth [v]\n  (let [[user pass]\n        (if (map? v)\n          [(v :username) (v :password)]\n          v)]\n    (str \"Basic \" (string->base64 (str user \":\" pass)))))\n\n(defn ^:no-doc parse-url [url]\n  (let [url #? (:clj (java.net.URL. url) :cljs (goog.Uri. url))]\n    {:scheme       (-> url #? (:clj .getProtocol :cljs .getScheme) keyword)\n     :server-name  (.. url #? (:clj getHost :cljs getDomain))\n     :server-port  (when-let [port (.getPort url)]\n                     (when (pos? port) port))\n     :uri          (some-> url .getPath  url-encode-illegal-characters)\n     :query-string (some-> url .getQuery not-empty url-encode-illegal-characters)\n     :user-info    (some-> url .getUserInfo not-empty url-decode)}))\n"]}