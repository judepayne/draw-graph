{"version":3,"sources":["kvlt/platform/websocket.cljs"],"mappings":"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","names":["kvlt.platform.websocket/WebSocket","js/WebSocket","js/require","kvlt.platform.websocket/ws->chan!","ws","chan","format","p1__46891#","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","G__46898","G__46899","kvlt.websocket/format-incoming","kvlt.platform.websocket/chan->ws!","c__30662__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__30663__auto__","switch__30351__auto__","state_46916","state_val_46917","statearr-46928","cljs.core.async.impl.ioc-helpers/take!","inst_46913","cljs.core.async.impl.ioc-helpers/return-chan","inst_46904","statearr-46935","statearr-46938","statearr-46939","inst_46906","inst_46907","statearr-46940","statearr-46943","statearr-46945","inst_46911","statearr-46948","statearr-46949","state-machine__30352__auto__","ret-value__30353__auto__","result__30354__auto__","cljs.core/keyword-identical?","e46951","js/Object","ex__30355__auto__","statearr-46952","cljs.core.async.impl.ioc-helpers/process-exception","state__30664__auto__","statearr-46956","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","kvlt.websocket/format-outgoing","kvlt.platform.websocket/close-event->maybe-error","ev","reason","code","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","kvlt.platform.websocket/request!","p__46974","vec__46975","map__46979","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq46964","G__46965","cljs.core/first","cljs.core/next","self__4717__auto__","url","read-chan","write-chan","close?","in","or__4131__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","out","kvlt.util.bidirectional_chan.cljs$core$IFn$_invoke$arity$variadic","resolved?","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","promesa.core/promise","resolve","reject","cljs.core/reset!","event","temp__5720__auto__","error","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","cljs.core/deref","cljs.core.async/close!"],"sourcesContent":["(ns ^:no-doc kvlt.platform.websocket\n  (:require [cljs.core.async :as async]\n            [kvlt.util :as util]\n            [kvlt.websocket :refer [format-outgoing format-incoming]]\n            [taoensso.timbre :as log]\n            [promesa.core :as p])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(def WebSocket\n  (if (exists? js/WebSocket)\n    js/WebSocket\n    (.. (js/require \"websocket\") -w3cwebsocket)))\n\n(defn- ws->chan! [ws chan format]\n  (set! (.. ws -onmessage) #(async/put! chan (format-incoming format (.. % -data)))))\n\n(defn- chan->ws! [chan ws format]\n  (go\n    (loop []\n      (when-let [msg (<! chan)]\n        (.send ws (format-outgoing format msg))\n        (recur)))))\n\n(defn- close-event->maybe-error [ev]\n  (when-not (.. ev -wasClean)\n    (let [reason (.. ev -reason)\n          code   (.. ev -code)]\n      (ex-info reason {:message reason :error code :type code :status 0}))))\n\n(defn request! [url & [{:keys [read-chan format write-chan close?] :or {close? true}}]]\n  (let [ws   (WebSocket. url)\n        in   (or read-chan  (async/chan))\n        out  (or write-chan (async/chan))\n        chan (util/bidirectional-chan in out {:on-close #(.close ws) :close? close?})\n        resolved? (atom false)]\n    (p/promise\n     (fn [resolve reject]\n       (ws->chan!  ws in format)\n       (chan->ws! out ws format)\n\n       (set! (.. ws -onopen)\n             (fn []\n               (reset! resolved? true)\n               (resolve chan)))\n\n       (set! (.. ws -onclose)\n             (fn [event]\n               (when-let [error (close-event->maybe-error event)]\n                 (log/error \"Websocket onclose error\" error)\n                 (when-not @resolved?\n                   (reject error))\n                 (async/close! chan))))))))\n"]}