{"version":3,"sources":["kvlt/platform/websocket.cljs"],"mappings":"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","names":["kvlt.platform.websocket/WebSocket","js/WebSocket","js/require","kvlt.platform.websocket/ws->chan!","ws","chan","format","p1__30261#","cljs.core.async.put_BANG_","kvlt.websocket/format-incoming","kvlt.platform.websocket/chan->ws!","c__26250__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__26251__auto__","switch__26190__auto__","state_30320","state_val_30321","statearr-30322","cljs.core.async.impl.ioc-helpers/take!","inst_30299","cljs.core.async.impl.ioc-helpers/return-chan","inst_30283","statearr-30324","statearr-30325","statearr-30326","inst_30289","inst_30290","statearr-30329","statearr-30332","statearr-30337","inst_30297","statearr-30340","statearr-30342","state-machine__26191__auto__","ret-value__26192__auto__","result__26193__auto__","cljs.core/keyword-identical?","e30344","js/Object","ex__26194__auto__","statearr-30345","cljs.core.async.impl.ioc-helpers/process-exception","state__26252__auto__","statearr-30348","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","kvlt.websocket/format-outgoing","kvlt.platform.websocket/close-event->maybe-error","ev","reason","code","cljs.core.ex_info","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","kvlt.platform.websocket/request!","p__30361","vec__30362","map__30365","cljs.core.nth","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq30352","G__30353","cljs.core/first","cljs.core/next","self__4776__auto__","url","read-chan","write-chan","close?","in","or__4185__auto__","out","kvlt.util.bidirectional_chan","resolved?","cljs.core.atom","promesa.core/promise","resolve","reject","cljs.core/reset!","event","temp__5735__auto__","error","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core/deref","cljs.core.async/close!"],"sourcesContent":["(ns ^:no-doc kvlt.platform.websocket\n  (:require [cljs.core.async :as async]\n            [kvlt.util :as util]\n            [kvlt.websocket :refer [format-outgoing format-incoming]]\n            [taoensso.timbre :as log]\n            [promesa.core :as p])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n(def WebSocket\n  (if (exists? js/WebSocket)\n    js/WebSocket\n    (.. (js/require \"websocket\") -w3cwebsocket)))\n\n(defn- ws->chan! [ws chan format]\n  (set! (.. ws -onmessage) #(async/put! chan (format-incoming format (.. % -data)))))\n\n(defn- chan->ws! [chan ws format]\n  (go\n    (loop []\n      (when-let [msg (<! chan)]\n        (.send ws (format-outgoing format msg))\n        (recur)))))\n\n(defn- close-event->maybe-error [ev]\n  (when-not (.. ev -wasClean)\n    (let [reason (.. ev -reason)\n          code   (.. ev -code)]\n      (ex-info reason {:message reason :error code :type code :status 0}))))\n\n(defn request! [url & [{:keys [read-chan format write-chan close?] :or {close? true}}]]\n  (let [ws   (WebSocket. url)\n        in   (or read-chan  (async/chan))\n        out  (or write-chan (async/chan))\n        chan (util/bidirectional-chan in out {:on-close #(.close ws) :close? close?})\n        resolved? (atom false)]\n    (p/promise\n     (fn [resolve reject]\n       (ws->chan!  ws in format)\n       (chan->ws! out ws format)\n\n       (set! (.. ws -onopen)\n             (fn []\n               (reset! resolved? true)\n               (resolve chan)))\n\n       (set! (.. ws -onclose)\n             (fn [event]\n               (when-let [error (close-event->maybe-error event)]\n                 (log/error \"Websocket onclose error\" error)\n                 (when-not @resolved?\n                   (reject error))\n                 (async/close! chan))))))))\n"]}