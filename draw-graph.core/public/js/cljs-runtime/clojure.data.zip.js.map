{"version":3,"sources":["clojure/data/zip.cljs"],"mappings":"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","names":["clojure.data.zip/auto","v","x","cljs.core/with-meta","G__54496","G__54497","G__54498","fexpr__54495","cljs.core/dissoc","cljs.core/assoc","cljs.core/meta","clojure.data.zip/auto?","cljs.core/not","clojure.data.zip/right-locs","loc","cljs.core/LazySeq","cljs.core/cons","G__54499","clojure.zip/right","clojure.data.zip/left-locs","G__54505","clojure.zip/left","clojure.data.zip/leftmost?","clojure.data.zip/rightmost?","clojure.data.zip/children","clojure.zip/branch?","p1__54507#","cljs.core.map","clojure.zip/down","clojure.data.zip/children-auto","p1__54508#","clojure.data.zip/descendants","cljs.core.mapcat","clojure.data.zip/ancestors","G__54513","clojure.zip/up","clojure.data.zip/fixup-apply","pred","rtn","cljs.core/map?","cljs.core/List","cljs.core._EQ_","cljs.core/sequential?","clojure.data.zip/mapcat-chain","preds","mkpred","cljs.core.reduce","prevseq","expr","p1__54514#","or__4185__auto__","cljs.core.assoc"],"sourcesContent":["; Copyright (c) Chris Houser, April 2008. All rights reserved.\n; The use and distribution terms for this software are covered by the\n; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n; which can be found in the file epl-v10.html at the root of this distribution.\n; By using this software in any fashion, you are agreeing to be bound by\n; the terms of this license.\n; You must not remove this notice, or any other, from this software.\n; System for filtering trees and nodes generated by zip.clj in\n; general, and xml trees in particular.\n\n(ns ^{:author \"Chris Houser\",\n      :doc \"System for filtering trees and nodes generated by zip.clj in\n           general, and xml trees in particular.\"}\n  clojure.data.zip\n  (:refer-clojure :exclude (descendants ancestors))\n  (:require [clojure.zip :as zip]))\n\n; This uses the negative form (no-auto) so that the result from any\n; naive function, including user functions, defaults to \"auto\".\n(defn auto\n  [v x] (with-meta x ((if v dissoc assoc) (meta x) :zip-filter/no-auto? true)))\n\n(defn auto?\n  [x] (not (:zip-filter/no-auto? (meta x))))\n\n(defn right-locs\n  \"Returns a lazy sequence of locations to the right of loc, starting with loc.\"\n  [loc] (lazy-seq (when loc (cons (auto false loc) (right-locs (zip/right loc))))))\n\n(defn left-locs\n  \"Returns a lazy sequence of locations to the left of loc, starting with loc.\"\n  [loc] (lazy-seq (when loc (cons (auto false loc) (left-locs (zip/left loc))))))\n\n(defn leftmost?\n  \"Returns true if there are no more nodes to the left of location loc.\"\n  [loc] (nil? (zip/left loc)))\n\n(defn rightmost?\n  \"Returns true if there are no more nodes to the right of location loc.\"\n  [loc] (nil? (zip/right loc)))\n\n(defn children\n  \"Returns a lazy sequence of all immediate children of location loc,\n  left-to-right.\"\n  [loc]\n  (when (zip/branch? loc)\n    (map #(auto false %) (right-locs (zip/down loc)))))\n\n(defn children-auto\n  \"Returns a lazy sequence of all immediate children of location loc,\n  left-to-right, marked so that a following tag= predicate will auto-descend.\"\n  ^{:private true}\n  [loc]\n  (when (zip/branch? loc)\n    (map #(auto true %) (right-locs (zip/down loc)))))\n\n(defn descendants\n  \"Returns a lazy sequence of all descendants of location loc, in\n  depth-first order, left-to-right, starting with loc.\"\n  [loc] (lazy-seq (cons (auto false loc) (mapcat descendants (children loc)))))\n\n(defn ancestors\n  \"Returns a lazy sequence of all ancestors of location loc, starting\n  with loc and proceeding to loc's parent node and on through to the\n  root of the tree.\"\n  [loc] (lazy-seq (when loc (cons (auto false loc) (ancestors (zip/up loc))))))\n\n(defn- fixup-apply\n  \"Calls (pred loc), and then converts the result to the 'appropriate'\n  sequence.\"\n  ^{:private true}\n  [pred loc]\n  (let [rtn (pred loc)]\n    (cond (and (map? (meta rtn)) (:zip-filter/is-node? (meta rtn))) (list rtn)\n          (= rtn true)                (list loc)\n          (= rtn false)               nil\n          (nil? rtn)                  nil\n          (sequential? rtn)           rtn\n          :else                       (list rtn))))\n\n(defn mapcat-chain\n  ^{:private true}\n  [loc preds mkpred]\n  (reduce (fn [prevseq expr]\n            (mapcat #(fixup-apply (or (mkpred expr) expr) %) prevseq))\n          (list (with-meta loc (assoc (meta loc) :zip-filter/is-node? true)))\n          preds))\n"]}