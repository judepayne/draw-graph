{"version":3,"sources":["lib_draw_graph/anneal.cljc"],"mappings":"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","names":["lib-draw-graph.anneal/max-move-default","lib-draw-graph.anneal/PEN","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lib-draw-graph.anneal/annealing","p__36212","map__36214","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq36196","G__36197","cljs.core/first","cljs.core/next","G__36198","G__36199","G__36200","G__36201","G__36202","G__36203","G__36204","self__4717__auto__","initial","max-iter","min-cost","constraints","neighbor-fn","cost-fn","p-fn","temp-fn","dims","terminate-early?","x-retard","y-retard","max-move","cost","last-cost","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","state","k","and__4120__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/rem","cljs.core/deref","lc","del-cost","cljs.core/reset!","t","G__36220","next-state","next-cost","cljs.core.rand.cljs$core$IFn$_invoke$arity$0","lib-draw-graph.anneal/random-move","small-move-prob","small-move","mm","cljs.core/rand-int","lib-draw-graph.anneal/vary-rect","rect","dim","cljs.core/rand-nth","delta","G__36235","cljs.core/Keyword","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/quot","lib-draw-graph.anneal/state->boundary","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","item","lib-draw-graph.anneal/state->objects","cljs.core/not","lib-draw-graph.anneal/neighbor-fn","state'","next","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","p1__36249#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.anneal/find-first","pred","coll","p1__36262#","cljs.core/some","lib-draw-graph.anneal/->varied","m","temp__5718__auto__","nm","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","n","lib-draw-graph.anneal/passes-constraints?","prev-item","p1__36275#","sep","bdry","others","p1__36276#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__36291","vec__36292","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","a","v","G__36295","js/Error","lib-draw-graph.geometry/bigger?","lib-draw-graph.geometry/inside?","p1__36279#","cljs.core/not-any?","lib-draw-graph.geometry/overlaps?","p1__36280#","cljs.core/vals","G__36312","lib-draw-graph.anneal/cost-fn","boundary","cljs.core/empty?","lib-draw-graph.util/err","bounded-area","lib-draw-graph.geometry/area","c","valid-move?","penalty","lib-draw-graph.anneal/temp-fn","r","lib-draw-graph.anneal/p-fn","c0","c1","diff","G__36323","Math/exp"],"sourcesContent":["(ns ^{:doc \"Simulated annealing for cluster layout.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.anneal\n  (:require [lib-draw-graph.geometry :refer [overlaps? inside? bigger? area]]\n            [lib-draw-graph.util     :as util]))\n\n\n#?(:clj (import [java.lang Math]))\n\n\n;; Annealing constants\n\n(def ^:const max-move-default 14)         ;; default move amount +/- dim can be changed by\n(def ^:const PEN 1000000)                ;; Penalty cost amount\n\n\n;; From Clojure data analysis cookbook\n(defn annealing\n\n  ([initial          ;; the initial state of the system\n    max-iter         ;; maximum numbers of iterations\n    min-cost         ;; the target minimum cost of the system\n    constraints      ;; constraints that a new state must satisfy\n    neighbor-fn      ;; the 'next-step' function\n    cost-fn          ;; the cost function\n    p-fn             ;; the probability of a move function\n    temp-fn          ;; the temperature of the system\n    & {:keys [dims terminate-early? x-retard y-retard max-move]\n       :or {dims [:x :y :w :h] terminate-early? false\n            x-retard nil y-retard nil\n            max-move max-move-default}}]\n   (let [cost (cost-fn constraints initial)\n         last-cost (atom cost)]\n     (loop [state initial\n            cost cost\n            k 1]\n       ;; check every 500 reps that cost has changed more than 0.01%\n       (if (and (= 0 (rem k 500))\n                terminate-early?\n                (> 0.0001 (let [lc @last-cost\n                              del-cost (/ (- lc cost) cost)]\n                            (reset! last-cost cost)\n                            del-cost)))\n         state\n\n         ;; if it hasn't, loop the annealing function\n         (if (and (< k max-iter)\n                  (> cost min-cost))\n           (let [t (temp-fn (/ k max-iter))\n                 next-state (neighbor-fn state dims x-retard y-retard max-move)\n                 next-cost (cost-fn constraints state next-state)]\n             (if (> (p-fn cost next-cost t) (rand))\n               (recur (:next-state next-state) next-cost (inc k))\n               (recur state cost (inc k))))\n           state))))))\n\n\n(defn random-move\n  [max-move]\n  \"Returns a random +/- amount less than max-move. Every so often, we\n   throw in small amounts to help fine tuning at the end of annealing.\"\n  (let [small-move-prob 3      ;; i.e. 1 in n chance\n        small-move 5\n        mm (if (> (inc (rand-int small-move-prob)) (dec small-move-prob))\n             small-move\n             max-move)]\n    (- (rand-int (* 2 mm)) mm)))\n\n\n(defn- vary-rect\n  \"When a rectangle/ polygon is defined with a point, width and height\n  (as opposed to two points), when varying the x or y of the point, it\n  is necessary to adjust the width or height as well to be consistent\n  with a rectangle/ polygon specified as two x,y points.\"\n  [rect dims x-retard y-retard max-move]\n  (let [dim (rand-nth dims)\n        delta (random-move max-move)]\n    (case dim\n      :x (if (and x-retard (not (zero? x-retard)))\n           (-> rect\n               (assoc :x (+ (:x rect) (quot delta x-retard))) \n               (assoc :w (- (:w rect) (quot delta x-retard))))\n           (-> rect\n               (assoc :x (+ (:x rect) delta)) \n               (assoc :w (- (:w rect) delta))))\n      :y (if (and y-retard (not (zero? y-retard)))\n           (-> rect\n               (assoc :y (+ (:y rect) (quot delta y-retard)))\n               (assoc :h (- (:h rect) (quot delta y-retard))))\n           (-> rect\n               (assoc :y (+ (:y rect) delta))\n               (assoc :h (- (:h rect) delta))))\n      :w (if (and x-retard (not (zero? x-retard)))\n           (-> rect\n               (assoc :w (+ (:w rect) (quot delta x-retard))))\n           (-> rect\n               (assoc :w (+ (:w rect) delta))))\n      (if (and y-retard (not (zero? y-retard)))\n        (-> rect (assoc :h (+ (:h rect) (quot delta y-retard))))\n        (-> rect (assoc :h (+ (:h rect) delta)))))))\n\n\n(defn state->boundary [state]\n  (first (filter (fn [item] (:boundary item)) state)))\n\n\n(defn state->objects [state]\n  (filter (fn [item] (not (:boundary item))) state))\n\n\n(defn neighbor-fn\n;; this function will change when boundaries can move it\n  \"Varies a random item from state and returns the new state\n  after checking that the new state passes constraints.\"\n  [state dims x-retard y-retard max-move]\n  (let [state' (:objects state)\n        item (rand-nth state')\n        next (vary-rect item dims x-retard y-retard max-move)\n        next-state (assoc state :objects (conj (remove #(= item %) state') next))]\n    {:path [:next-state :objects]\n     :name (:name next)\n     :next-state next-state}))\n\n\n(defn find-first\n  [pred coll]\n  (some #(when (pred %) %) coll))\n\n\n(defn ->varied\n  \"returns the varied item when passed a neighbor-fn output map\"\n  [m]\n  (if-let [nm (:name m)]\n    (->> (get-in m (:path m))\n         (find-first (fn [n] (= nm (:name n)))))\n    (get-in m (:path m))))\n\n\n(defn- passes-constraints?\n  \"Checks that the new (proposed) state item satisfies constraints.\"\n  [constraints state next-state]\n  (let [nm (:name next-state)\n        item (->varied next-state)\n        prev-item (find-first #(= nm (:name %)) (:objects state))\n        sep (:collision constraints)\n        bdry (get-in next-state [:next-state :boundary])\n        others (remove #(= (:name %) nm) (:objects state))]\n    (reduce\n     (fn [a [k v]]\n       (and a\n            (case k\n              :grow      (if v (bigger? prev-item item) true)\n              :boundary  (if v (inside? bdry item) true)\n              :collision (if sep (not-any? #(overlaps? sep item %) others) true)\n              :obstacles (if (and v sep) (not-any? #(overlaps? sep item %) (vals v)) true))))\n     true\n     constraints)))\n\n\n(defn cost-fn\n  \"Calculates cost, which is total bounded area minus sum of current areas.\n  For the initial call to calculate the system's cost, requires only constraints and state.\n  Subsequent calls require the state, next-state and k, the key of the entry that has\n  changed between them.\"\n  ([constraints state]\n   (let [boundary (:boundary state)]\n     (if (empty? boundary)\n       (throw (util/err \"no boundary condition!\"))\n       (let [bounded-area (area boundary)]\n         (- bounded-area (reduce (fn [a c] (+ a (area c))) 0 (:objects state)))))))\n\n  ([constraints state next-state]\n   (let [bounded-area (area (-> next-state :next-state :boundary))\n         cost (- bounded-area (reduce (fn [a c] (+ a (area c))) 0 (-> next-state :next-state :objects)))\n         valid-move? (passes-constraints? constraints state next-state)\n         penalty (if valid-move? 0 PEN)\n;         z (println (-> next-state :next-state :boundary :name) (:name next-state) \" \" valid-move? penalty)\n         ]\n     (+ cost penalty))))\n\n\n(defn temp-fn\n  \"the temperature. r should be between 0 and 1\"\n  [r]\n  (- 1.0 (float r)))\n\n\n(defn p-fn  \"the probability of a move function, using Boltzmann\"\n  [c0 c1 t]\n  (let [diff (- c1 c0)]\n    (if (< c1 c0)\n      1\n      (Math/exp (* -1 (/ diff t))))))\n"]}