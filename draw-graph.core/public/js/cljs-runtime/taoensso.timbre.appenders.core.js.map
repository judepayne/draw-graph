{"version":3,"sources":["taoensso/timbre/appenders/core.cljs"],"mappings":"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","names":["var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","taoensso.timbre.appenders.core/println-appender","p__40445","vec__40446","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq40443","self__4718__auto__","cljs.core/seq","_opts","data","map__40449","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","output_","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core/force","taoensso.timbre.appenders.core/console-appender","p__40453","vec__40454","seq40451","opts","js/console","level->logger","level","or__4131__auto__","G__40458","cljs.core/Keyword","js/Error","js/console.trace","js/console.debug","js/console.info","js/console.warn","js/console.error","js/console.log","temp__5720__auto__","logger","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","output","G__40460","fexpr__40459","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","args","cljs.core/cons","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","taoensso.timbre.appenders.core/console-?appender"],"sourcesContent":["(ns taoensso.timbre.appenders.core\n  \"Core Timbre appenders without any special dependency requirements.\n  These can be aliased into the main Timbre ns for convenience.\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n       \n           \n                            \n                                                    \n\n        \n  (:require\n   [clojure.string  :as str]\n   [taoensso.encore :as enc :refer-macros (have have?)]))\n\n;; TODO Add a simple official rolling spit appender?\n\n;;;; Println appender (clj & cljs)\n\n                                                     \n                                                      \n                                      \n\n     \n                                     \n                                        \n\n                                                                       \n\n(defn println-appender\n  \"Returns a simple `println` appender for Clojure/Script.\n  Use with ClojureScript requires that `cljs.core/*print-fn*` be set.\n\n  :stream (clj only) - e/o #{:auto :*out* :*err* :std-err :std-out <io-stream>}.\"\n\n  ;; Unfortunately no easy way to check if *print-fn* is set. Metadata on the\n  ;; default throwing fn would be nice...\n\n  [&                                                    [_opts]]\n  (let [            \n                          \n                                           \n                                           \n                       ]\n\n    {:enabled?   true\n     :async?     false\n     :min-level  nil\n     :rate-limit nil\n     :output-fn  :inherit\n     :fn\n     (fn [data]\n       (let [{:keys [output_]} data]\n                (println (force output_))\n              \n                     \n                           \n                                                       \n                             \n                             \n                         \n\n                                  \n                                                    \n                                                      ))}))\n\n(comment (println-appender))\n\n;;;; Spit appender (clj only)\n\n     \n                   \n                                                      \n                                                       \n                   \n                    \n                  \n                  \n                       \n      \n                  \n                                  \n           \n                                                             \n                                     \n                                             \n                                         \n                                                     \n                                                     \n                                                                  \n\n                                                     \n                                                                       \n\n(comment\n  (spit-appender)\n  (let [f (:fn (spit-appender))]\n    (enc/qb 1000 (f {:output_ \"boo\"}))))\n\n;;;; js/console appender (cljs only)\n\n      \n(defn console-appender\n  \"Returns a simple js/console appender for ClojureScript.\n\n  For accurate line numbers in Chrome, add these Blackbox[1] patterns:\n    `/taoensso/timbre/appenders/core\\\\.js$`\n    `/taoensso/timbre\\\\.js$`\n    `/cljs/core\\\\.js$`\n\n  [1] Ref. https://goo.gl/ZejSvR\"\n\n  ;; TODO Any way of using something like `Function.prototype.bind`\n  ;; (Ref. https://goo.gl/IZzkQB) to get accurate line numbers in all\n  ;; browsers w/o the need for Blackboxing?\n\n  [& [opts]]\n  {:enabled?   true\n   :async?     false\n   :min-level  nil\n   :rate-limit nil\n   :output-fn  :inherit\n   :fn\n   (if (exists? js/console)\n     (let [;; Don't cache this; some libs dynamically replace js/console\n           level->logger\n           (fn [level]\n             (or\n               (case level\n                 :trace  js/console.trace\n                 :debug  js/console.debug\n                 :info   js/console.info\n                 :warn   js/console.warn\n                 :error  js/console.error\n                 :fatal  js/console.error\n                 :report js/console.info)\n               js/console.log))]\n\n       (fn [data]\n         (when-let [logger (level->logger (:level data))]\n\n           (if (or (:raw-console? data)\n                   (get-in data [:?meta :raw-console?])) ; Undocumented\n             (let [output\n                   ((:output-fn data)\n                    (assoc data\n                      :msg_  \"\"\n                      :?err nil))\n                   ;; (<output> <raw-error> <raw-arg1> <raw-arg2> ...):\n                   args (->> (:vargs data) (cons (:?err data)) (cons output))]\n\n               (.apply logger js/console (into-array args)))\n             (.call    logger js/console (force (:output_ data)))))))\n\n     (fn [data] nil))})\n\n(comment (console-appender))\n\n;;;; Deprecated\n\n       (def console-?appender \"DEPRECATED\" console-appender)\n\n;;;;;;;;;;;; This file autogenerated from src/taoensso/timbre/appenders/core.cljx\n"]}