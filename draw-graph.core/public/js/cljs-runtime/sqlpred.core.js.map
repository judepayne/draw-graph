{"version":3,"sources":["sqlpred/core.cljc"],"mappings":"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","names":["sqlpred.core/err","error-string","js/Error","sqlpred.core/whitespace","instaparse.core/parser","sqlpred.core/filter-grammar","instaparse.core.parser.cljs$core$IFn$_invoke$arity$variadic","sqlpred.core/filter-parser","sqlpred.core/drop-first-last","s","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core/rest","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1","sqlpred.core/filter-transform","parsed","keywordize-keys?","G__35964","G__35965","instaparse.core/transform","args","clojure.string/trim","arg","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/second","cljs.core.into.cljs$core$IFn$_invoke$arity$2","sqlpred.core/filter-group","transformed","t1","p1__35973#","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p1__35974#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","p1__35976#","sqlpred.core/submap?","sub","m","cljs.core/select-keys","cljs.core/keys","sqlpred.core/not-submap?","cljs.core/complement","sqlpred.core/parse-num","e36008","n","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","e","sqlpred.core/equality-match?","k","v","not?","skip?","item","and__4120__auto__","cljs.core/contains?","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__36011","G__36012","sqlpred.core/inequality-match?","op","v-item","G__36017","sqlpred.core/multi-equality?","vs","cljs.core/every?","cljs.core/true?","p1__36019#","cljs.core/some","p1__36020#","sqlpred.core/match-anything?","clause","p1__36021#","sqlpred.core/clause-matches?","term","val","sqlpred.core/and-statements?","ands","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","a","c","cljs.core/not","cljs.core/reduced","sqlpred.core/or-statements?","ors","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","sqlpred.core/sql-pred","p__36028","map__36029","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq36025","G__36026","cljs.core/first","cljs.core/next","self__4717__auto__","statement","skip-missing?","terms","cljs.core.partial.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns sqlpred.core\n  (:require [clojure.string                       :as str]\n            [loom.graph                           :as loom]\n            #?(:clj [instaparse.core :as insta :refer [defparser]]\n               :cljs [instaparse.core :as insta :refer-macros [defparser]])))\n\n\n(defn- err\n  \"Creates an exception object with error-string.\"\n  [error-string]\n  #?(:clj (Exception. ^String error-string)\n     :cljs (js/Error. error-string)))\n\n\n(def ^{:private true} whitespace\n  (insta/parser\n    \"whitespace = #'\\\\s+'\"))\n\n\n(def ^{:private true} filter-grammar\n  (str\n   \"S = Clause (Conjunction Clause)*\n   Conjunction = ' and ' | ' or '\n   Clause = term Op-S value | term Op-M list\n   term = Word\n   Op-S = '='|'not ='|'>'|'>='|'<'|'<='\n   Op-M = ' in ' | ' not in '\n   value = Word | QuotedWord\n   list = <'('> value (<','> value)* <')'>\n   <Word> = #'([a-zA-Z0-9]*)'\n   QuotedWord = #\\\"'([^']*?)'\\\"\"))  ;; fix this\n\n\n(defparser ^{:private true} filter-parser\n  filter-grammar\n  :auto-whitespace whitespace)\n\n\n(defn drop-first-last [s]\n  (apply str (rest (drop-last s))))\n\n\n(defn- filter-transform [parsed keywordize-keys?]\n  (insta/transform\n   {:S (fn [& args] args)\n    :Conjunction str/trim\n    :Op-S (fn [arg] [:op (str/trim arg)])\n    :Op-M (fn [arg] [:op (str/trim arg)])\n    :term (fn [arg] [:term (if keywordize-keys? (keyword arg) arg)])\n    :list (fn [& args] [:value (map second args)])\n    :QuotedWord (fn [arg] (drop-first-last arg))\n    :value (fn [arg] [:value (str/trim arg)])\n    :Clause (fn [& args] (into {} args))}\n   parsed))\n\n\n(defn- filter-group [transformed]\n  (let [t1 (->> transformed\n                (partition-by #(= \"or\" %))\n                (filter #(not= '(\"or\") %)))]\n    (map (fn [s] (filter #(not= \"and\" %) s)) t1)))\n\n\n(defn- submap?\n  \"Checks whether m contains all entries in sub.\"\n  [sub m]\n  (= sub (select-keys m (keys sub))))\n\n\n(def ^{:private true} not-submap? (complement submap?))\n\n\n(defn- parse-num [s]\n  (if (number? s) s\n      (try\n        (let [n #?(:clj (clojure.edn/read-string s)\n                   :cljs (cljs.reader/read-string s))]\n          (if (number? n) n (throw (err (str \"Could not convert \" s \" to a number.\")))))\n        #? (:clj (catch\n                     Exception\n                     e\n                   (throw (err (str \"Could not convert \" s \" to a number.\"))))\n            :cljs (catch\n                      js/Error\n                      e\n                    (throw (err (str \"Could not convert \" s \" to a number.\"))))))))\n\n\n(defn- equality-match?\n  \"takes a term key and term value and assesses whether the key and value\n   is a submap of item.\"\n  [k v not? skip? item]\n  (if (and skip? (not (contains? item k)))\n    true              ;; return true is item doesn't contain key and skip is on\n    (let [v (if (number? (get item k)) (parse-num v) v)]  ;; convert to number if necessary\n      (if not?\n        (not-submap? {k v} item)\n        (submap? {k v} item)))))\n\n\n(defn- inequality-match?\n  \"takes a term key, an op and term value and assessing whether the value of the\n   key in the item matches the condition.\"\n  [k op v skip? item]\n  (if (and skip? (not (contains? item k)))\n    true              ;; skip. return true\n    (let [v (parse-num v)\n          v-item (parse-num (get item k))]\n      (when (not (number? v-item)) (throw (err \"internal oops!\")))\n      (case op\n        \">\" (> v-item v)\n        \"<\" (< v-item v)\n        \">=\" (>= v-item v)\n        \"<=\" (<= v-item v)\n        (throw (err (str op \" is not a valid comparison operator.\")))))))\n\n\n(defn- multi-equality?\n  [k vs not? skip? item]\n  (if (and skip? (not (contains? item k)))\n    true               ;; skip. return true\n    (if not?\n      (every? true? (map #(equality-match? k % true skip? item) vs))\n      (some? (some true? (map #(equality-match? k % false skip? item) vs))))))\n\n\n(defn- match-anything? [clause item]\n  \"If the value of the item is the special char then matching always succeeds.\"\n  (some #(= (get item (:term clause)) %)\n        [\"<all>\"]))\n\n\n(defn- clause-matches?\n  [clause skip? item]\n  (let [op   (:op clause)\n        term (:term clause)\n        val  (:value clause)]\n    (cond\n      (match-anything? clause item)    true\n      (= \"=\" op)       (equality-match? term val false skip? item)\n      (= \"not =\" op)   (equality-match? term val true skip? item)\n      (or (= \">\" op)\n          (= \"<\" op)\n          (= \">=\" op)\n          (= \"<=\" op)) (inequality-match? term op val skip? item)\n      (= \"in\" op)      (multi-equality? term val false skip? item)\n      (= \"not in\" op)  (multi-equality? term val true skip? item)\n      :else (throw (err (str op \" is not a valid comparison operator.\"))))))\n\n\n(defn- and-statements?\n  [ands skip? item]\n  (reduce\n   (fn [a c]\n     (if (not a)\n       (reduced false)\n       (clause-matches? c skip? item)))\n   true\n   ands))\n\n\n(defn- or-statements?\n  [ors skip? item]\n  (reduce\n   (fn [a c]\n     (if a\n       (reduced true)\n       (and-statements? c skip? item)))\n   false\n   ors))\n\n\n(defn sql-pred\n  [statement & {:keys [keywordize-keys? skip-missing?]\n                :or {keywordize-keys? false skip-missing? false}}]\n  (let [terms (-> statement\n                  filter-parser\n                  (filter-transform keywordize-keys?)\n                  filter-group)]\n    (partial or-statements? terms skip-missing?)))\n"]}