{"version":3,"sources":["draw_graph/core.cljs"],"mappings":";;;;;;;;;AAcA,AAAKA,AAAc,AAACC,AAAKC;AAEzB,AAAA,AAAME;AAAN,AAAA,AAAA,AAAAD,AACIH;;AAGJ,AAAA,AAAMK;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAGwB,AAAA,AAACC;AAHzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAIqB,AAAA,AAACA;AAJtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAKqB,AAAA,AAACA;AALtB,AAAA,AAMIF,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAAK,AAAA,AAAAD,AAACI,AAAGP,AAAcE;;AAUhC,AAAAM,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AACE,AAACO,AAAOlB,AAAcE;;AADxB,AAAA,AAAAa,AAAAN;AAAA,AAAAO,AAAAP;AAAA,AACE,AAACS,AAAOlB,AAAcE;;AADxB;;;;AAAA,AAAA,AAAAe,AAAA,AAAAT;;AAAA,AAGA,AAAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAU,AAAAV;AAAAU,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAP,AAAA,AAAAO,AAAA,AAAA,AAAA,AAAA,AAAAN,AAAAC,AAAAK,AAAAA;AAAA,AACE,AAACD,AAAOlB,AAAcqB;;AADxB,AAAA,AAAAN,AAAAN;AAAA,AAAAW,AAAAX;AAAA,AACE,AAACS,AAAOlB,AAAcqB;;AADxB;;;;AAAA,AAAA,AAAAJ,AAAA,AAAAT;;AAAA,AAGA,AAAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAa,AAAAb;AAAAa,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAV,AAAA,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAAT,AAAAC,AAAAQ,AAAAA;AAAA,AACE,AAACJ,AAAOlB,AAAcwB;;AADxB,AAAA,AAAAT,AAAAN;AAAA,AAAAc,AAAAd;AAAA,AACE,AAACS,AAAOlB,AAAcwB;;AADxB;;;;AAAA,AAAA,AAAAP,AAAA,AAAAT;;AAAA,AAIA,AAAA,AAAMiB;AAAN,AACE,AAAA,AAACC;;AAGH,AAAA,AAAMC,AAAOC;AAAb,AACE,AAAAC,AAAA,AAA2BxB;AAA3ByB,AAAyCF;AAAzC,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAEH,AAAA,AAAMC;AAAN,AACE,AAAAC,AAAc,AAACR;AAAf,AAAA,AAAAQ;AAAA,AAAA,AAAAA,AAAWL;AAAX,AACE,AAACD,AAAMC;;AADT;;;AAKF,AAAA,AAAMM;AAAN,AACI,AAAA,AAAA,AAACC,AAEC,AAAKC;AAAL,AACE,AAACC,AAAoBD;AAHzB,AAKE,AAAKA;AAAL,AACE,AAACE,AAAuBF;;;AAC5B,AAACG;;AACD,AAACP;;AAGL,AAACE;AAID,AAAA,AAAmBM;AAAnB,AACE,AAACR","names":["draw-graph.core/selected-page","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","draw-graph.home/home-page","cljs.core/deref","draw-graph.core/page","draw-graph.core/current-page","accountant.core.navigate_BANG_.cljs$core$IFn$_invoke$arity$1","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","action__36037__auto__","params__36038__auto__","cljs.core/map?","map__38401","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core/vector?","vec__38403","secretary.core/add-route!","cljs.core/reset!","map__38406","vec__38409","draw-graph.about/about-page","map__38412","vec__38414","draw-graph.help/help-page","draw-graph.core/get-app-element","goog.dom/getElement","draw-graph.core/mount","el","G__38417","G__38418","reagent.core/render-component","draw-graph.core/mount-app-element","temp__5720__auto__","draw-graph.core/init!","accountant.core/configure-navigation!","path","secretary.core/dispatch!","secretary.core/locate-route","accountant.core/dispatch-current!","draw-graph.core/on-reload"],"sourcesContent":["(ns ^:figwheel-hooks draw-graph.core\n  (:require\n   [goog.dom :as gdom]\n   [reagent.core :as reagent :refer [atom]]\n   [draw-graph.about :refer [about-page]]\n   [draw-graph.home :refer [home-page]]\n   [draw-graph.help :refer [help-page]]\n   [secretary.core :as secretary :include-macros true]\n   [accountant.core :as accountant]))\n\n\n;; -------------------------\n;; Current page\n\n(def selected-page (atom home-page))\n\n(defn page []\n  [@selected-page])\n\n\n(defn current-page []\n  [:div.core\n   [:header\n    [:p [:a {:on-click #(accountant/navigate! \"/\")} \"Home\"] \" | \"\n     [:a {:on-click #(accountant/navigate! \"/help\")} \"help\"] \" | \"\n     [:a {:on-click #(accountant/navigate! \"/about\")} \"about\"]]]\n   [page]\n   (when (not (= @selected-page home-page))\n     [:footer\n      [:p\n       [:span.site \"draw-graph\"] \" is a free utility by \"\n       [:a {:href \"https://github.com/judepayne\" :tabIndex \"0\"}\n        \"Jude Payne\"] \".\"]])])\n\n;; -------------------------\n;; Routes\n\n(secretary/defroute \"/\" []\n  (reset! selected-page home-page))\n\n(secretary/defroute \"/about\" []\n  (reset! selected-page about-page))\n\n(secretary/defroute \"/help\" []\n  (reset! selected-page help-page))\n\n\n(defn get-app-element []\n  (gdom/getElement \"app\"))\n\n\n(defn mount [el]\n  (reagent/render-component [current-page] el))\n\n(defn mount-app-element []\n  (when-let [el (get-app-element)]\n    (mount el)))\n\n;; conditionally start your application based on the presence of an \"app\" element\n;; this is particularly helpful for testing this ns without launching the app\n(defn init! []\n    (accountant/configure-navigation!\n     {:nav-handler\n      (fn [path]\n        (secretary/dispatch! path))\n      :path-exists?\n      (fn [path]\n        (secretary/locate-route path))})\n    (accountant/dispatch-current!)\n    (mount-app-element))\n\n\n(init!)\n\n\n;; specify reload hook with ^;after-load metadata\n(defn ^:after-load on-reload []\n  (mount-app-element)\n  ;; optionally touch your app-state to force rerendering depending on\n  ;; your application\n  ;; (swap! app-state update-in [:__figwheel_counter] inc)\n)\n"]}