{"version":3,"sources":["draw_graph/file.cljs"],"mappings":"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","names":["draw-graph.file/log","js/console","draw-graph.file/first-file","cljs.core.map","e","target","file","draw-graph.file/extract-result","n","contents","cljs.core.assoc","cljs.core.js__GT_clj","draw-graph.file/upload-reqs","cljs.core.async.chan","draw-graph.file/file-reads","draw-graph.file/file-reader-put","cljs.core.async.put_BANG_","draw-graph.file/file-reader-listen","callback","c__33891__auto__","cljs.core.async.impl.dispatch/run","f__33892__auto__","switch__33701__auto__","state_55707","state_val_55708","statearr-55709","inst_55693","js/FileReader","statearr-55710","cljs.core.async.impl.ioc-helpers/take!","inst_55703","cljs.core.async.impl.ioc-helpers/return-chan","inst_55695","inst_55697","p1__55686#","inst_55698","inst_55699","statearr-55718","statearr-55719","statearr-55720","state-machine__33702__auto__","ret-value__33703__auto__","result__33704__auto__","cljs.core/keyword-identical?","e55721","js/Object","ex__33705__auto__","statearr-55722","cljs.core.async.impl.ioc-helpers/process-exception","state__33893__auto__","statearr-55723","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","reader","state_55732","state_val_55733","statearr-55736","inst_55730","inst_55726","inst_55727","statearr-55737","statearr-55738","statearr-55740","e55741","statearr-55742","statearr-55744","draw-graph.file/save-file","filename","t","s","js/Blob","b","js/window.navigator.msSaveBlob","link","js/document.createElement","js/window.webkitURL","js/window.webkitURL.createObjectURL","js/window.URL.createObjectURL","js/document","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","draw-graph.file/part-filename","seq55767","self__4777__auto__","cljs.core/seq","prefixes","cljs.core.reduce","acc","cur","cljs.core._EQ_","draw-graph.file/svg-filename","seq55779","G__55780","cljs.core/first","cljs.core/next","self__4776__auto__","cljs.core.apply","cljs.core.subs","cljs.core/random-uuid","l","draw-graph.file/save-svg","seq55818","G__55819","G__55820","fs","cljs.core/deref"],"sourcesContent":["(ns draw-graph.file\n  (:require\n   [cljs.core.async :refer [put! chan <! >!]])\n  (:require-macros [cljs.core.async.macros :refer [go go-loop]]))\n\n\n(def log (.-log js/console))\n\n;; -------------------------\n;; File reader\n\n;; thanks: https://gist.github.com/paultopia/6fc396884c223b619f2e2ef199866fdd\n\n(def ^:private first-file\n  (map (fn [e]\n         (let [target (.-currentTarget e)\n               file (-> target .-files (aget 0))]\n           (set! (.-value target) \"\")\n           file))))\n\n\n(def ^:private extract-result\n  (map (fn [n]\n         (let [contents (:data n)]\n           (assoc n :data (-> contents .-target .-result js->clj))))))\n\n\n(def ^:private upload-reqs (chan 1 first-file))\n(def ^:private file-reads (chan 1 extract-result))\n\n\n;; Public interface to file reader\n\n(defn file-reader-put [e]\n  (put! upload-reqs e))\n\n\n(defn file-reader-listen [callback]\n\n  (go-loop []\n    (let [reader (js/FileReader.)\n          file (<! upload-reqs)]\n      (set! (.-onload reader) #(put! file-reads {:data % :data-filename (.-name file)}))\n      (.readAsText reader file)\n      (recur)))\n\n  (go-loop []\n    (callback (<! file-reads))\n    (recur)))\n\n\n;; -------------------------\n;; SVG File writer \n\n\n(defn ^:private save-file [filename t s]\n  (if js/Blob\n    (let [b (js/Blob. #js [s] #js {:type t})]\n      (if js/window.navigator.msSaveBlob\n        (js/window.navigator.msSaveBlob b filename)\n        (let [link (js/document.createElement  \"a\")]\n          (aset link \"download\" filename)\n          (if js/window.webkitURL\n            (aset link \"href\" (js/window.webkitURL.createObjectURL b))\n            (do\n              (aset link \"href\" (js/window.URL.createObjectURL b))\n              (aset link \"onclick\" (fn destroy-clicked [e]\n                                     (.removeChild (.-body js/document) (.-target e))))\n              (aset link \"style\" \"display\" \"none\")\n              (.appendChild (.-body js/document) link)))\n          (.click link))))\n    (log \"Browser does not support Blob\")))\n\n\n(defn ^:private part-filename [& prefixes]\n  (reduce\n   (fn [acc cur]\n     (if (= \"\" cur)\n       acc\n       (if (= acc \"\")\n         cur\n         (str acc \"-\" cur))))\n   \"\"\n   prefixes))\n\n(defn ^:private svg-filename [filename & prefixes]\n  (if (or (nil? filename) (= \"\" filename))\n    (str (apply part-filename prefixes) \"-\" (subs (str (random-uuid)) 0 4))\n    (let [l (.-length filename)]\n      (str (apply part-filename prefixes) \"-\" (subs filename 0 (- l 4))))))\n\n\n(defn save-svg [contents filename & prefixes]\n  (let [fs (apply svg-filename filename prefixes)]\n    (save-file fs \"image/svg+xml\" @contents)))\n"]}