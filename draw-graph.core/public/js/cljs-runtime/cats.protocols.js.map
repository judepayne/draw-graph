{"version":3,"sources":["cats/protocols.cljc"],"mappings":"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","names":["cats.protocols/Context","x__4487__auto__","m__4488__auto__","cats.protocols/-get-context","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","cats.protocols/Contextual","_","cats.protocols/-repr","cats.protocols/Printable","cats.protocols/-mappend","cats.protocols/Semigroup","s","sv","sv'","cats.protocols/-mempty","cats.protocols/Monoid","cats.protocols/-extract","cats.protocols/Extract","mv","cats.protocols/-fmap","cats.protocols/Functor","ftor","f","fv","cats.protocols/-bimap","cats.protocols/Bifunctor","btor","g","bv","cats.protocols/-fapply","cats.protocols/-pure","cats.protocols/Applicative","app","af","av","v","cats.protocols/-foldl","cats.protocols/-foldr","cats.protocols/Foldable","fctx","z","xs","cats.protocols/-traverse","cats.protocols/Traversable","tctx","tv","cats.protocols/-mreturn","cats.protocols/-mbind","cats.protocols/Monad","m","cats.protocols/-mzero","cats.protocols/MonadZero","cats.protocols/-mplus","cats.protocols/MonadPlus","mv'"],"sourcesContent":[";; Copyright (c) 2014-2016 Andrey Antukh <niwi@niwi.nz>\n;; Copyright (c) 2014-2016 Alejandro G\u00f3mez <alejandro@dialelo.com>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns cats.protocols\n  \"A collection of protocols upon which the cats abstractions are built.\n\n  NOTE: Functions of this namespace are not intended to be used directly.\n  It is considered internal api.\")\n\n(defprotocol Context\n  \"A marker protocol for identifying the valid context types.\")\n\n(defprotocol Contextual\n  \"Abstraction that establishes a concrete type as a member of a context.\n\n  A great example is the Maybe monad type Just. It implements\n  this abstraction to establish that Just is part of\n  the Maybe monad.\"\n  (-get-context [_] \"Get the context associated with the type.\"))\n\n(defprotocol Printable\n  \"An abstraction to make a type printable in a platform\n  independent manner.\"\n  (-repr ^String [_] \"Get the repl ready representation of the object.\"))\n\n(defprotocol Semigroup\n  \"A structure with an associative binary operation.\"\n  (-mappend [s sv sv'] \"An associative addition operation.\"))\n\n(defprotocol Monoid\n  \"A Semigroup which has an identity element with respect to an associative binary operation.\"\n  (-mempty [s] \"The identity element for the given monoid.\"))\n\n(defprotocol Extract\n  \"A type class to extract the\n  value from a monad context.\"\n  (-extract [mv] \"Extract the value from monad context.\"))\n\n(defprotocol Functor\n  \"A data type that can be mapped over without altering its context.\"\n  (-fmap [ftor f fv] \"Applies function f to the value(s) inside the context of the functor fv.\"))\n\n(defprotocol Bifunctor\n  \"A 'Functor' of two arguments.\"\n  (-bimap  [btor f g bv] \"Map over both arguments at the same time.\"))\n\n(defprotocol Applicative\n  \"The Applicative abstraction.\"\n  (-fapply [app af av]\n    \"Applies the function(s) inside af's context to the value(s)\n     inside av's context while preserving the context.\")\n  (-pure [app v]\n    \"Takes any context or monadic value `app` and any value `v`, and puts\n     the value `v` in the most minimal context (normally `mempty`) of same type of `app`\"))\n\n(defprotocol Foldable\n  \"Abstraction of data structures that can be folded to a summary value.\"\n  (-foldl [fctx f z xs] \"Left-associative fold of a structure.\")\n  (-foldr [fctx f z xs] \"Right-associative fold of a structure.\"))\n\n(defprotocol Traversable\n  \"Abstraction of data structures that can be traversed from left to right\n  performing an action on every element.\"\n  (-traverse [tctx f tv]\n    \"Map each element to an Applicative, evaluate the applicatives from left\n     to right and collect the results.\"))\n\n(defprotocol Monad\n  \"The Monad abstraction.\"\n  (-mreturn [m v])\n  (-mbind [m mv f]))\n\n(defprotocol MonadZero\n  \"A complement abstraction for monad that\n  supports the notion of an identity element.\"\n  (-mzero [m] \"The identity element for the given monadzero.\"))\n\n(defprotocol MonadPlus\n  \"A complement abstraction for Monad that\n  supports the notion of addition.\"\n  (-mplus [m mv mv'] \"An associative addition operation.\"))\n"]}