{"version":3,"sources":["clojure/data/xml/name.cljc"],"mappings":"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","names":["clojure.data.xml.name/parse-qname","cljs.core/alter-meta!","cljs.core/constantly","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/meta","clojure.data.xml.js.name/parse-qname","clojure.data.xml.name/encode-uri","clojure.data.xml.js.name/encode-uri","clojure.data.xml.name/decode-uri","clojure.data.xml.js.name/decode-uri","clojure.data.xml.name/uri-symbol","uri","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","G__50515","clojure.data.xml.name/symbol-uri","ss","du","G__50516","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.name/qname-uri","v","clojure.data.xml.protocols/qname-uri","clojure.data.xml.name/qname-local","clojure.data.xml.protocols/qname-local","var_args","G__50527","clojure.data.xml.name/qname","js/Error","local","clojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","clojure.string/blank?","G__50529","prefix","clojure.data.xml.name/namespaced?","qn","clojure.data.xml.name/clj-ns-name","ns","cljs.core/Namespace","cljs.core/ns-name","cljs.core/Keyword","cljs.core/name","clojure.data.xml.name/xmlns-uri","clojure.data.xml.name/xml-uri","cljs.core/PROTOCOL_SENTINEL","kw","temp__5718__auto__","cljs.core/namespace","G__50534","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.name/as-qname","n","clojure.data.xml.name/uri-file","clojure.string/replace","clojure.data.xml.name/print-uri-file-command!","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","clojure.data.xml.name/xmlns-attr?","clojure.data.xml.name/xmlns-attr-prefix","clojure.data.xml.name/legal-xmlns-binding!","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.name/separate-xmlns","attrs","cont","G__50549","vec__50550","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__50559","attrs*","cljs.core/transient","xmlns*","attrs'","cljs.core/keys","cljs.core/seq","val","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/next","G__50562","G__50563","cljs.core/persistent!","clojure.data.xml.name/prefix-alphabet","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.map.cljs$core$IFn$_invoke$arity$2","js/String.fromCharCode","cljs.core.range.cljs$core$IFn$_invoke$arity$2","G__50574","clojure.data.xml.name/gen-prefix","c","clojure.data.xml.name/*gen-prefix-counter*","clojure.data.xml.name.gen_prefix.cljs$core$IFn$_invoke$arity$1","cnt","sb","js/goog.string.StringBuffer","n*","ch","cljs.core/mod","n**","cljs.core/quot"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.data.xml.name\n  #?@(:clj [(:require [clojure.string :as str]\n                      [clojure.data.xml.jvm.name :as jvm]\n                      (clojure.data.xml\n                       [impl :refer [export-api]]\n                       [protocols :as protocols :refer [AsQName]]))\n            (:import (clojure.lang Namespace Keyword))]\n      :cljs [(:require-macros\n              [clojure.data.xml.impl :refer [export-api]])\n             (:require [clojure.string :as str]\n                       [clojure.data.xml.js.name :as jsn]\n                       [clojure.data.xml.protocols :as protocols :refer [AsQName]])\n             (:import (goog.string StringBuffer))]))\n\n(export-api\n #?@(:clj  [jvm/parse-qname jvm/encode-uri jvm/decode-uri]\n     :cljs [jsn/parse-qname jsn/encode-uri jsn/decode-uri]))\n\n;; protocol functions can be redefined by extend-*, so we wrap\n;; protocols/qname-uri protocols/qname-local within regular fns\n\n(defn uri-symbol [uri]\n  (symbol (encode-uri (str \"xmlns.\" uri))))\n\n(defn symbol-uri [ss]\n  (let [du (decode-uri (str ss))]\n    (if (.startsWith du \"xmlns.\")\n      (subs du 6)\n      (throw (ex-info \"Uri symbol not valid\" {:sym ss})))))\n\n(defn qname-uri\n  \"Get the namespace uri for this qname\"\n  [v]\n  (protocols/qname-uri v))\n\n(defn qname-local\n  \"Get the name for this qname\"\n  [v]\n  (protocols/qname-local v))\n\n(defn qname\n  ([local] (qname \"\" local))\n  ([uri local] (keyword (when-not (str/blank? uri)\n                          (encode-uri (str \"xmlns.\" uri)))\n                        local))\n  ([uri local prefix] (qname uri local)))\n\n;; The empty string shall be equal to nil for xml names\n(defn namespaced? [qn]\n  (not (str/blank? (qname-uri qn))))\n\n(defn- clj-ns-name [ns]\n  (cond (instance? Namespace ns) (ns-name ns)\n        (keyword? ns) (name ns)\n        :else (str ns)))\n\n;; xmlns attributes get special treatment. they go into metadata, don't contribute to equality\n(def xmlns-uri \"http://www.w3.org/2000/xmlns/\")\n;; TODO find out if xml prefixed names need any special treatment too\n(def xml-uri \"http://www.w3.org/XML/1998/namespace\")\n\n(extend-protocol AsQName\n  Keyword\n  (qname-local [kw] (name kw))\n  (qname-uri [kw]\n    (if-let [ns (namespace kw)]\n      (if (.startsWith ns \"xmlns.\")\n        (decode-uri (subs ns 6))\n        (if (= \"xmlns\" ns)\n          xmlns-uri\n          (throw (ex-info \"Keyword ns is not an xmlns. Needs to be in the form :xmlns.<encoded-uri>/<local>\"\n                          {:kw kw}))))\n      \"\")))\n\n(defn as-qname [n]\n  (qname (qname-uri n) (qname-local n)))\n\n(defn uri-file\n  \"Dummy file name for :require'ing xmlns uri\"\n  [uri]\n  (str (str/replace (name (uri-symbol uri))\n                    \".\" \"/\")\n       \".cljc\"))\n\n(defn print-uri-file-command!\n  \"Shell command to create a dummy file for xmlns. Execute from a source root.\"\n  [uri]\n  (println  \"echo \\\"(ns\" (str (uri-symbol uri) \")\\\" >\") (uri-file uri)))\n\n#?(:clj\n   (defn alias-uri\n     \"Define a Clojure namespace aliases for xmlns uris.\n\n  This sets up the current namespace for reading qnames denoted with\n  Clojure's ::alias/keywords reader feature.\n  \n\n  ## Example\n  (alias-uri :D \\\"DAV:\\\")\n                           ; similar in effect to\n  ;; (require '[xmlns.DAV%3A :as D])\n                           ; but required namespace is auto-created\n                           ; henceforth, shorthand keywords can be used\n  {:tag ::D/propfind}\n                           ; ::D/propfind will be expanded to :xmlns.DAV%3A/propfind\n                           ; in the current namespace by the reader\n\n  ## Clojurescript support\n  Currently, namespaces can't be auto-created in Clojurescript.\n  Dummy files for aliased uris have to exist. Have a look at `uri-file` and `print-uri-file-command!` to create those.\"\n     {:arglists '([& {:as alias-nss}])}\n     [& ans]\n     (loop [[a n & rst :as ans] ans]\n       (when (seq ans)\n         (assert (<= (count ans)) (pr-str ans))\n         (let [xn (uri-symbol n)\n               al (symbol (clj-ns-name a))]\n           (create-ns xn)\n           (alias al xn)\n           (recur rst))))))\n\n(defn xmlns-attr?\n  \"Is this qname an xmlns declaration?\"\n  [qn]\n  (let [uri (qname-uri qn)]\n    (or (= xmlns-uri uri)\n        (and (str/blank? uri)\n             (= \"xmlns\" (qname-local qn))))))\n\n(defn xmlns-attr-prefix [qn]\n  (let [uri (qname-uri qn)]\n    (if (str/blank? uri)\n      (do (when-not (= \"xmlns\" (qname-local qn))\n            (throw (ex-info \"Not an xmlns-attr name\" {:qname qn})))\n          \"\")\n      (do (when-not (= xmlns-uri uri)\n            (throw (ex-info \"Not an xmlns-attr name\" {:qname qn})))\n          (qname-local qn)))))\n\n(defn legal-xmlns-binding! [prefix uri]\n  (when (not= (= \"xml\" prefix)\n              (= xml-uri uri))\n    (throw (ex-info (str \"The xmlns binding for prefix `xml` is fixed to `\" xml-uri \"`\")\n                    {:attempted-mapping {:prefix prefix :uri uri}})))\n  (when (not= (= \"xmlns\" prefix)\n              (= xmlns-uri uri))\n    (throw (ex-info (str \"The xmlns binding for prefix `xmlns` is fixed to `\" xmlns-uri \"`\")\n                    {:attempted-mapping {:prefix prefix :uri uri}}))))\n\n(defn separate-xmlns\n  \"Call cont with two args: attributes and xmlns attributes\"\n  [attrs cont]\n  (loop [attrs* (transient {})\n         xmlns* (transient {})\n         [qn :as attrs'] (keys attrs)]\n    (if (seq attrs')\n      (let [val (get attrs qn)]\n        (if (xmlns-attr? qn)\n          (let [prefix (xmlns-attr-prefix qn)]\n            (legal-xmlns-binding! prefix val)\n            (recur attrs*\n                   (assoc! xmlns* prefix val)\n                   (next attrs')))\n          (recur (assoc! attrs* qn val)\n                 xmlns*\n                 (next attrs'))))\n      (cont (persistent! attrs*) (persistent! xmlns*)))))\n\n;(set! *warn-on-reflection* true)\n\n#?(:clj (def ^:private ^\"[C\" prefix-alphabet\n          (char-array\n           (map char\n                (range (int \\a) (inc (int \\z))))))\n   :cljs (def ^:private prefix-alphabet\n           (apply str (map js/String.fromCharCode\n                           (range (.charCodeAt \"a\" 0)\n                                  (inc (.charCodeAt \"z\" 0)))))))\n\n(def ^{:dynamic true\n       :doc \"Thread local counter for a single document\"}\n  *gen-prefix-counter*)\n\n(defn gen-prefix\n  \"Generates an xml prefix.\n   Zero-arity can only be called, when *gen-prefix-counter* is bound and will increment it.\"\n  ([] (let [c *gen-prefix-counter*]\n        #?(:cljs (when (undefined? c)\n                   (throw (ex-info \"Not bound: *gen-prefix-counter*\" {:v #'*gen-prefix-counter*}))))\n        (set! *gen-prefix-counter* (inc c))\n        (gen-prefix c)))\n  ([n]\n   (let [cnt (alength prefix-alphabet)\n         sb #?(:clj (StringBuilder.) :cljs (StringBuffer.))]\n     (loop [n* n]\n       (let [ch (mod n* cnt)\n             n** (quot n* cnt)]\n         (.append sb (aget prefix-alphabet ch))\n         (if (pos? n**)\n           (recur n**)\n           (str sb)))))))\n\n"]}