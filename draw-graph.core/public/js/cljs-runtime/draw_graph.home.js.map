{"version":3,"sources":["draw_graph/home.cljs"],"mappings":"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","names":["draw-graph.home/log","js/console","draw-graph.home/default-svg-text","draw-graph.home/local-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","draw-graph.examples/default-options","draw-graph.home/options","reagent.core/cursor","draw-graph.home/svg","draw-graph.home/processing","draw-graph.home/error","draw-graph.home/warn","draw-graph.home/local-dot","draw-graph.home/region","draw-graph.home/pan-zoom","draw-graph.file/file-reader-listen","e","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","draw-graph.home/update-ace","draw-graph.home/*produce-dot-locally*","draw-graph.home/find-region","cljs.core/deref","draw-graph.ip/region","x","cljs.core/reset!","err","js/console.log","draw-graph.home/url-Europe","draw-graph.home/url-US","draw-graph.home/lambda-url","G__41100","draw-graph.home/remove-empty-strings","m","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/complement","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/last","draw-graph.home/->csv1","draw-graph.home/->dot","draw-graph.home/dot->svg","data","draw-graph.home/post","url","json-data","promesa.core/bind","p__41103","map__41104","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","promesa.core/promise","status","body","promesa.core.catch$.cljs$core$IFn$_invoke$arity$2","kvlt.core/request!","G__41102","fexpr__41101","cljs.core/ex-data","draw-graph.home/->svg","fexpr__41106","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","draw-graph.home/get-svg-dom","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","js/document","draw-graph.home/reset-pan-zoom","js/svgPanZoom","draw-graph.home/put-svg","data*","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","draw-graph.home/put-error","message","draw-graph.home/put-warn","draw-graph.home/put-result","result","draw-graph.home/process-remotely","draw-graph.utils/clj->json","promesa.core/map","draw-graph.utils/json->clj","promesa.core.error.cljs$core$IFn$_invoke$arity$2","error","draw-graph.home/prom-viz","dot","js/Viz","G__41108","fexpr__41107","draw-graph.home/local-dot->svg","g","opts","dot'","clojure.string/replace","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","lib-draw-graph.processor/postprocess-svg","draw-graph.home/lambda-dot->svg","draw-graph.home/process-locally","in","e41109","lib-draw-graph.processor/csv->g","js/Error","g'","e41110","lib-draw-graph.processor/preprocess-graph","e41111","lib-draw-graph.processor/g->dot","draw-graph.home/get-svg","draw-graph.home/->js","var-name","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","draw-graph.home/invoke","seq41112","G__41113","cljs.core/first","cljs.core/next","self__4717__auto__","function-name","args","fun","js/eval","draw-graph.home/set-value","id","val","draw-graph.home/fixed-select","p1__41114#","seq41115","G__41116","G__41117","G__41118","path","a","tabIndex","options","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update-in","iter__4523__auto__","s__41120","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__41122","cljs.core/chunk-buffer","i__41121","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__41119","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","p1__41123#","draw-graph.home/text-input","p1__41124#","draw-graph.home/wide-text-input","draw-graph.home/myace","draw-graph.home/initialize-ace","value","ace-instance","js/ace","cljs.core/assoc","draw-graph.home/ace-update","draw-graph.home/ace-editor","reagent.core/create-class","this","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","draw-graph.home/load-example-data","ex-fn","example","p1__41125#","draw-graph.home/example-dropdown","draw-graph.home/get-position","geo","js/navigator","cljs.core/identity","draw-graph.home/click-upload-csv-hidden","draw-graph.home/load-button","draw-graph.file/file-reader-put","p1__41126#","draw-graph.home/data-input","draw-graph.home/first-line","s","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","draw-graph.home/headers","reagent.ratom/make-reaction","draw-graph.home/node-label","p1__41127#","draw-graph.home/cluster-on","s__41129","b__41131","i__41130","iter__41128","p1__41132#","draw-graph.home/color-on","s__41134","b__41136","i__41135","iter__41133","draw-graph.home/tooltip","p1__41137#","draw-graph.home/url","s__41139","b__41141","i__41140","iter__41138","draw-graph.home/edgelabels","draw-graph.home/filtergraph","draw-graph.home/paths","draw-graph.home/elide-levels","draw_graph.home.fixed_select.cljs$core$IFn$_invoke$arity$variadic","draw-graph.home/show-roots","cljs.core/not","draw-graph.home/show-constraints","draw-graph.home/pp?","draw-graph.home/pp-clusters","draw-graph.home/anneal-bias","draw-graph.home/pp-cluster-sep","draw-graph.home/pp-font","draw-graph.home/cluster-edges-num","draw-graph.home/layout","draw-graph.home/rankdir","draw-graph.home/shape","draw-graph.home/fixedsize","draw-graph.home/splines","draw-graph.home/nodesep","draw-graph.home/ranksep","draw-graph.home/concentrate","draw-graph.home/overlap","draw-graph.home/scale","draw-graph.home/constraint","draw-graph.home/row","label","ctrl","tooltip","draw-graph.home/label-row","draw-graph.home/empty-row","draw-graph.home/toggle","k","v1","v2","fexpr__41142","draw-graph.home/disp-opts-state","draw-graph.home/disp-opts-hdr","state","draw-graph.home/left-disp-opts1","draw-graph.home/middle-disp-opts1","draw-graph.home/right-disp-opts1","draw-graph.home/left-disp-opts2","draw-graph.home/middle-disp-opts2","draw-graph.home/right-disp-opts2","draw-graph.home/go-button","draw-graph.home/go-button-loading","draw-graph.home/process-button","draw-graph.home/save-button","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","draw_graph.file.save_svg.cljs$core$IFn$_invoke$arity$variadic","draw-graph.home/controls","draw-graph.home/local-remote-state","draw-graph.home/local-remote","draw-graph.home/home-page","cljs.core/chunk-first"],"sourcesContent":["(ns draw-graph.home\n  (:require\n   [reagent.core             :refer [atom cursor create-class dom-node force-update]]\n   [reagent.ratom            :refer [reaction make-reaction]]\n   [cljs.core.async          :refer [put! chan <! >!]]\n   [accountant.core          :as accountant]\n   [kvlt.core                :as kvlt]\n   [promesa.core             :as p]\n   [promesa.async-cljs       :refer-macros [async]]\n   [clojure.string           :as string]\n   [draw-graph.utils         :as utils]\n   [draw-graph.examples      :as examples]\n   [lib-draw-graph.processor :as processor]\n   [lib-draw-graph.parser    :as parser]\n   [lib-draw-graph.clustered :as clstr]\n   [draw-graph.file          :as file]\n   [clojure.data.xml         :as xml]\n   [lib-draw-graph.svg       :as svg]\n   [draw-graph.ip            :as ip])\n  (:require-macros [cljs.core.async.macros :refer [go go-loop]]))\n\n\n\n(def log (.-log js/console))\n\n;; -------------------------\n;; State\n\n(def default-svg-text \"<div/>\")   ;; html to inject when svg is empty\n\n;; atom to store the page's state\n(def local-state (atom {:options examples/default-options\n                        :processing false\n                        :local-dot true\n                        :error \"\"\n                        :warn \"\"\n                        :svg default-svg-text\n                        :data \"\"\n                        :region nil}))\n;; various cursors over the atom\n(def options (cursor local-state [:options]))\n(def svg (cursor local-state [:svg]))\n(def processing (cursor local-state [:processing]))\n(def error (cursor local-state [:error]))\n(def warn (cursor local-state [:warn]))\n(def local-dot (cursor local-state [:local-dot]))\n(def region (cursor local-state [:region]))\n\n;; -------------------------\n;; Initialise the file reader\n\n(declare update-ace)\n(def pan-zoom (atom nil))\n\n\n(file/file-reader-listen (fn [e] \n                           (do (swap! local-state merge e)\n                               (update-ace))))\n\n\n;; -------------------------\n;; Processing\n\n;; determines whether dot is produced locally or in the lambda\n(def ^:dynamic *produce-dot-locally* true)\n\n\n(defn find-region []\n  (when (nil? @region)\n    (ip/region (fn [x] (reset! region x))\n               (fn [err] (js/console.log err)))))\n\n\n(def url-Europe \"https://0j6kjsk388.execute-api.eu-west-2.amazonaws.com/beta\")\n(def url-US \"https://u4jlt3tmhe.execute-api.us-east-1.amazonaws.com/beta\")\n\n\n(defn lambda-url []\n  (case @region\n    \"Europe\"  url-Europe\n    url-US))\n\n\n(defn remove-empty-strings\n  \"removes items from map where Value is an empty string\"\n  [m]\n  (into {} (filter (complement (comp #{\"\"} last)) m)))\n\n\n(defn ->csv1 []\n  {:display-options (remove-empty-strings (:options @local-state))\n   :data (:data @local-state)\n   :format-in \"csv\"\n   :format-out \"svg\"})\n\n\n(defn ->dot []\n  {:display-options (remove-empty-strings (:options @local-state))\n   :data (:data @local-state)})\n\n\n(defn dot->svg [data]\n  {:data data\n   :format-in \"dot\"\n   :format-out \"svg\"})\n\n\n(defn post [url json-data]\n  (p/alet [{:keys [status body]}\n           (p/await (p/catch (kvlt/request! {:url url\n                                             :method :post\n                                             :body json-data\n                                             :content-type :json\n                                             :accept :json})\n                        (fn [e] ((ex-data e) :type))))]\n          body))\n\n\n(defn ->svg [json-data]\n  ((partial post (lambda-url)) json-data))\n\n\n(defn get-svg-dom []\n  (nth (into [] (-> js/document (.getElementById \"svg\") (.-childNodes))) 6))\n\n\n(defn reset-pan-zoom [] \n  (reset! pan-zoom nil)\n  (reset! pan-zoom (js/svgPanZoom. (get-svg-dom))))\n\n\n(defn put-svg [data]\n  (let [data* (if (= data \"null\") default-svg-text data)])\n  (reset! processing false)\n  (reset! svg data))\n\n\n(defn put-error [message]\n  (reset! processing false)\n  (reset! svg \"\")\n  (reset! error message))\n\n\n(defn put-warn [message]\n  (reset! processing false)\n  (reset! warn message))\n\n\n(defn put-result [result]  \n  (when (:svg result) (reset! svg (:svg result)))\n  (when (:error result) (reset! error (:error result)))\n  (when (:warn result) (reset! warn (:warn result)))\n  (reset! processing false))\n\n\n(defn process-remotely []\n  (->> \n   (->svg (utils/clj->json (->csv1)))\n   (p/map utils/json->clj)\n   (p/map put-result)\n   (p/error (fn [error] (put-error (.-message error))))))\n\n\n(defn prom-viz [dot]\n  (p/alet [result (p/await (p/catch\n                              (js/Viz dot)\n                               (fn [e] ((ex-data e) :type))))]\n    result))\n\n\n(defn local-dot->svg [g opts dot]\n  ;; use viz.js\n  (let [dot' (string/replace dot #\"\\\\\\\\n\" \"\\n\")]\n    (->>\n     (prom-viz dot')\n     (p/map (partial processor/postprocess-svg g opts))\n     (p/map put-svg)\n     (p/error (fn [error] (put-error (.-message error)))))))\n\n\n(defn lambda-dot->svg [g opts dot]\n  ;; use AWS lambda\n  (->> (->svg (utils/clj->json (dot->svg dot)))\n           (p/map utils/json->clj)\n           (p/map :svg)\n           (p/map (partial processor/postprocess-svg g opts))\n           (p/map put-svg)\n           (p/error (fn [error] (put-error (.-message error))))))\n\n\n(defn process-locally []\n  (do\n    (reset! processing true)\n    (reset! error \"\")\n    (reset! warn \"\")\n    (let [in (->csv1)\n          opts (:display-options in)\n          g (try\n              (processor/csv->g in)\n              (catch js/Error e\n                (do\n                  (reset! svg \"\")\n                  (put-error (str  e)))))\n          g' (try\n               (processor/preprocess-graph g opts)\n               (catch js/Error e\n                (do\n                  (reset! svg \"\")\n                  (put-error (str  e)))))\n          dot (try\n                (processor/g->dot in g')\n                (catch js/Error e\n                (do\n                  (reset! svg \"\")\n                  (put-error (str  e)))))]\n      (if @local-dot\n        (local-dot->svg g' opts dot)\n        (lambda-dot->svg g' opts dot)))))\n\n\n(defn get-svg []\n  (if *produce-dot-locally*\n    (process-locally)\n    (process-remotely)))\n\n\n;; -------------------------\n;; Controls input\n\n;; ---- Utility functions\n\n;; thanks: https://stackoverflow.com/questions/23345663/call-a-clojurescript-function-by-string-name/30892955#30892955\n(defn ->js [var-name]\n      (-> var-name\n          (string/replace #\"/\" \".\")\n          (string/replace #\"-\" \"_\")))\n\n\n(defn invoke [function-name & args]\n      (let [fun (js/eval (->js function-name))]\n           (apply fun args)))\n\n\n(defn set-value [id val]\n  (if (some? val)\n    (set! (-> js/document (.getElementById id) (.-value)) val)))\n\n\n(defn fixed-select [path a tabIndex & options]\n  [:select\n   {:field :list :id (last path)\n    :values (get-in @a path)\n    :value (get-in @local-state path)\n    :tabIndex tabIndex\n    :on-change #(swap! local-state update-in path\n                       (fn [e] (-> % .-target .-value)))}\n   (for [x options] [:option {:key x} x])])\n\n\n(defn text-input [path a tabIndex]\n [:input\n   {:type :text :id (last path)\n    :value (get-in @a path)\n    :tabIndex tabIndex\n    :on-change #(swap! local-state update-in path\n                       (fn [e] (-> % .-target .-value)))}])\n\n\n(defn wide-text-input [path a tabIndex]\n [:input.wide\n   {:type :text :id (last path)\n    :value (get-in @a path)\n    :tabIndex tabIndex\n    :on-change #(swap! local-state update-in path\n                       (fn [e] (-> % .-target .-value)))}])\n\n\n;; ---- Main inputs\n\n(def myace (atom nil))\n\n\n(defn initialize-ace [value]\n  (let [ace-instance\n        (.edit js/ace \"editor\"\n               #js {:theme \"ace/theme/textmate\"\n                    :showGutter true\n                    :mode \"ace/mode/tcl\"\n                    :autoScrollEditorIntoView true\n                    :vScrollBarAlwaysVisible true\n                    :hScrollBarAlwaysVisible true})]\n        (reset! myace ace-instance)\n        (.. ace-instance\n            (on \"change\" #(swap! value assoc :data (.getValue ace-instance))))\n        (.setValue ace-instance (:data @local-state) 1)))\n\n\n(def ace-update (atom 0))\n\n\n(defn ace-editor [value]\n  (create-class\n   {:display-name \"ace editor\"\n\n    :component-did-mount\n    (fn [this]\n      (initialize-ace local-state))\n\n    :component-did-update\n    (fn [this]\n;      @ace-update\n      )\n\n    :reagent-render\n    (fn [this]\n      @ace-update\n      [:div {:id \"editor\"}])}))\n\n\n(defn update-ace []\n  (let [ace-instance @myace]\n    (.setValue ace-instance (:data @local-state) 1)\n    (swap! ace-update inc)))\n\n\n(defn load-example-data [ex-fn]\n  (let [example (invoke ex-fn)]\n    (swap! local-state assoc :options (:options example))\n    (swap! local-state merge {:data (:data example) :data-filename \"\"})))\n\n\n(defn example-dropdown []\n  [:select {:tabIndex 1\n            :on-change #(do (load-example-data (.. % -target -value))\n                            (update-ace))}  \n   [:option {:value nil} \"-\"]  \n   [:option {:value \"draw-graph.examples/example1\"} \"Friendship graph\"]\n   [:option {:value \"draw-graph.examples/example2\"} \"Two facing trees\"]\n   [:option {:value \"draw-graph.examples/example3\"} \"Two trees\"]\n   [:option {:value \"draw-graph.examples/example4\"} \"CERN email connections\"]\n   [:option {:value \"draw-graph.examples/example5\"} \"Circular tree\"]\n   [:option {:value \"draw-graph.examples/example6\"} \"cluster layout\"]\n   [:option {:value \"draw-graph.examples/example7\"} \"complex cluster layout\"]\n   [:option {:value \"draw-graph.examples/example8\"} \"Architecture diagram\"]\n   [:option {:value \"draw-graph.examples/example9\"} \"Complex architecture diagram\"]]) \n\n\n(defn get-position []\n  (let [geo (.-geolocation js/navigator)]\n    (.getCurrentPosition geo identity)))\n\n\n(defn click-upload-csv-hidden [e]\n  ;;click the hidden file input button\n  ;; need for the two buttons with input[type=\"file'] because you\n  ;; can't satisfactorily style an input[type=\"file\"] button\n  (.click (.getElementById js/document \"upload-csv-hidden\")))\n\n\n(defn load-button []\n  [:div\n   [:button {:id \"upload-csv\"\n             :tabIndex 2\n             :on-click click-upload-csv-hidden\n             :title \"Upload a csv in 'csv1' format. see help\"}\n    \"Load csv\"]\n   [:input {:id \"upload-csv-hidden\"\n            :type \"file\"\n            :accept \".csv\"\n            :on-change file/file-reader-put}]])\n\n\n(defn data-input [value]\n  [:div\n   [:textarea {\n               :id \"tweak-box\"\n               :tabIndex 3\n               :rows 20\n  ;            :cols 42\n               :wrap \"soft\"\n               :spellCheck \"false\"\n               :autoComplete \"on\"\n               :autoCapitalize \"off\"\n               :autoCorrect \"off\"\n               :value (:data @value)\n               :on-change #(swap! value\n                                  assoc\n                                  :data\n                                  (-> % .-target .-value))}]])\n\n\n;; For the dynamic dropdowns\n\n;; -- Cluster-on dropdown needs to be more dynamic--\n(defn first-line [s]\n  (js->clj (.split (subs (aget (.split s \"\\n\") 0) 2) \":\")))\n\n\n;; a reaction to capture the headers in the data file\n(def headers\n  (reaction (first-line (:data @local-state))))\n\n\n;; ----end----- For the dynamic dropdowns\n\n\n;; Controls: MUST be laid out in TAB ORDER\n\n(defn node-label [] (text-input [:options :label] local-state 4))\n\n\n(defn cluster-on []\n  [:select.form-control\n   {:field :list :id :cluster-on\n    :value (:cluster-on @options)\n    :tabIndex 5\n    :on-change #(swap! local-state update-in [:options :cluster-on]\n                       (fn [e] (-> % .-target .-value)))}\n   (if (= \"\" (first @headers))\n     [:option {:key \"none\" :value \"\"} \"-\"]\n     (cons [:option {:key \"none\" :value \"\"} \"-\"]\n           (for [x @headers] [:option {:key x} x])))])\n\n\n(defn color-on []\n  [:select.form-control\n   {:field :list :id :color-on\n    :value (:color-on @options)\n    :tabIndex 6\n    :on-change #(swap! local-state update-in [:options :color-on]\n                       (fn [e] (-> % .-target .-value)))}\n   (if (= \"\" (first @headers))\n     [:option {:key \"none\" :value \"\"} \"-\"]\n     (cons [:option {:key \"none\" :value \"\"} \"-\"]\n           (for [x @headers] [:option {:key x} x])))])\n\n\n(defn tooltip [] (text-input [:options :tooltip] local-state 7))\n\n\n(defn url []\n  [:select.form-control\n   {:field :list :id :url\n    :value (:url @options)\n    :tabIndex 8\n    :on-change #(swap! local-state update-in [:options :url]\n                       (fn [e] (-> % .-target .-value)))}\n   (if (= \"\" (first @headers))\n     [:option {:key \"none\" :value \"\"} \"-\"]\n     (cons [:option {:key \"none\" :value \"\"} \"-\"]\n           (for [x @headers] [:option {:key x} x])))])\n\n\n(defn edgelabels [] (text-input [:options :edge-label] local-state 9))\n\n\n(defn filtergraph [] (text-input [:options :filter-graph] local-state 10))\n\n\n(defn paths [] (wide-text-input [:options :paths] local-state 11))\n\n\n(defn elide-levels [] (fixed-select [:options :elide] local-state 12 \"0\" \"1\" \"2\" \"3\" \"4\") )\n\n\n(defn show-roots []\n  [:input {:type :checkbox :id :show-roots?\n           :checked (:show-roots? @options)\n           :tabIndex 13\n           :on-change #(swap! local-state update-in [:options :show-roots?] not)}])\n\n\n(defn show-constraints []\n  [:input {:type :checkbox :id :show-constraints?\n           :checked (:show-constraints? @options)\n           :tabIndex 14\n           :on-change #(swap! local-state update-in [:options :show-constraints?] not)}])\n\n\n(defn pp? []\n  [:input {:type :checkbox :id :pp?\n           :checked (-> @options :post-process?)\n           :tabIndex 15\n           :on-change #(swap! local-state update-in\n                              [:options :post-process?] not)}])\n\n\n(defn pp-clusters []\n  [:div\n   [:a.lbl (str \\u2191)]\n   [:input {:type :checkbox :id :pp-clusters-top?\n            :checked (-> @options :pp-clusters :y)\n            :tab-index 16\n            :on-change #(swap! local-state update-in\n                               [:options :pp-clusters :y] not)}]\n   [:a.lbl (str \\u00A0 \\u00A0 \\u00A0 \\u00A0 \\u2193)]\n   [:input {:type :checkbox :id :pp-clusters-bottom?\n            :checked (-> @options :pp-clusters :h)\n            :tabIndex 17\n            :on-change #(swap! local-state update-in\n                               [:options :pp-clusters :h] not)}]\n   [:a.lbl (str \\u00A0 \\u00A0 \\u2190)]\n   [:input {:type :checkbox :id :pp-clusters-left?\n            :checked (-> @options :pp-clusters :x)\n            :tabIndex 18\n            :on-change #(swap! local-state update-in\n                               [:options :pp-clusters :x] not)}]\n   [:a.lbl (str \\u00A0 \\u00A0 \\u2192)]\n   [:input {:type :checkbox :id :pp-clusters-right?\n            :checked (-> @options :pp-clusters :w)\n            :tabIndex 19\n            :on-change #(swap! local-state update-in\n                               [:options :pp-clusters :w] not)}]])\n\n\n(defn anneal-bias [] (fixed-select [:options :pp-anneal-bias] local-state 20\n                                   \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"10\" \"11\" \"12\"))\n\n\n(defn pp-cluster-sep [] (text-input [:options :pp-cluster-sep] local-state 21))\n\n\n(defn pp-font [] (text-input [:options :pp-font] local-state 22))\n\n\n(defn cluster-edges-num []\n  (fixed-select [:options :num-cluster-edges] local-state 23\n                                   \"1\" \"2\" \"4\" \"5\" \"6\" \"9\" \"12\" \"16\"))\n\n\n(defn layout [] (fixed-select [:options :layout] local-state 24\n                              \"dot\" \"neato\" \"fdp\" \"circo\" \"twopi\"))\n\n(defn rankdir [] (fixed-select [:options :rankdir] local-state 25 \"LR\" \"TB\" \"RL\" \"BT\"))\n\n\n(defn shape [] (fixed-select [:options :shape] local-state 26\n                             \"ellipse\" \"rect\" \"circle\" \"egg\" \"diamond\" \"octagon\" \"square\"\n                             \"folder\" \"cylinder\" \"plaintext\"))\n\n\n(defn fixedsize [] (fixed-select [:options :fixedsize] local-state 27\n                                  \"true\" \"false\" \"shape\"))\n\n\n(defn splines [] (fixed-select [:options :splines] local-state 28\n                               \"line\" \"spline\" \"none\" \"polyline\" \"ortho\" \"curved\"))\n\n\n(defn nodesep [] (text-input [:options :nodesep] local-state 29))\n\n\n(defn ranksep [] (text-input [:options :ranksep] local-state 30))\n\n\n(defn concentrate [] (fixed-select [:options :concentrate] local-state 31\n                                   \"false\" \"true\"))\n\n\n(defn overlap [] (fixed-select [:options :overlap] local-state 32\n                               \"true\" \"false\" \"scale\" \"scalexy\" \"compress\" \"vpsc\"\n                               \"orthoxy\" \"ipsep\"))\n\n\n(defn scale [] (text-input [:options :scale] local-state 33))\n\n\n(defn constraint [] (fixed-select [:options :constraint] local-state 34 \"true\" \"false\"))\n\n\n\n;; ---- Options layout\n\n(defn row [label ctrl tooltip]\n  [:div [:div.lbl label]\n        [:div {:class \"tooltip\"} ctrl\n         [:span {:class \"tooltiptext\"} tooltip]]])\n\n\n(defn label-row [label]\n  [:div [:a.lbl.row-sep label]])\n\n\n(defn empty-row []\n  [:div [:a.lbl.row-label (str \\u00A0)]])  ;; \\00A0 = &nbsp\n\n\n(defn toggle [a k v1 v2]\n    (if (= (@a k) v1)\n      (swap! a assoc k v2)\n      (swap! a assoc k v1)))\n\n\n(def disp-opts-state\n  (atom {:local-class \"hidden\"\n         :wrapper-class \"wrapper controls wrapper-collapsed\"\n         :lbl \"show\"}))\n\n\n(defn disp-opts-hdr [state]\n  (fn []\n    [:div.item6\n     [:div.opts-hdr\n      {:on-click #(do\n                    (toggle state :lbl \"show\" \"hide\")\n                    (toggle state :local-class \"hidden\" \"visible\")\n                    (toggle state :wrapper-class \"wrapper controls wrapper-collapsed\"\n                            \"wrapper controls\")\n                    (swap! ace-update inc)\n                    )}\n      \"Options\" [:a.lbl.show-hide (:lbl @state)]]]))\n\n\n(defn left-disp-opts1 [state]\n  (fn []\n    [:div.controls1l {:class (:local-class @state)}\n     (label-row \"draw-graph\")\n     (row \"node labels\" [node-label] \"The header key to use for the node label\")\n     (row \"node tooltips\" [tooltip] \"The header key to use for tooltips embedded in the final svg\")\n     (row \"filter graph\" [filtergraph] \"Filters the graph - good for zooming in\")\n     (row \"elide lower levels\" [elide-levels] \"Hide <n> lowest levels in the graph\")\n     (row \"post process\" [pp?] \"Post Procees the svg: anneal clusters and font replacement\")\n     (row \"anneal cluster separation\" [pp-cluster-sep] \"How close clusters are allowed to get in pixels during annealing\")\n]))\n\n\n(defn middle-disp-opts1 [state]\n  (fn []\n    [:div.controls1m {:class (:local-class @state)} \n     (empty-row)\n     (row \"cluster on\" [cluster-on] \"The header key to cluster the graph on\")\n     (row \"node URL\" [url] \"The header key to use as an embedded link in the final svg\")\n     (row \"paths\" [paths] \"Filter the graph by paths through it. see help page.\")\n     (row \"highlight roots\" [show-roots] \"Highlights the roots of the graph\")\n     (row \"anneal expand clusters\" [pp-clusters] \"Controls which dimensions of clusters are expanded in post processing\")\n     (row \"font\" [pp-font] \"The name of the replacement font to use in post processing\")    \n     (empty-row) (empty-row)\n]))\n\n\n(defn right-disp-opts1 [state]\n  (fn []\n    [:div.controls1r {:class (:local-class @state)} \n     (empty-row)\n     (row \"color on\" [color-on] \"The header key to vary node coloration by\")\n     (row \"edges labels\" [edgelabels] \"Edge meta key to use as an edge label\")\n     (empty-row) (empty-row)\n     (row \"highlight constraints\" [show-constraints] \"Highlights all (rank) constraining edges, including ordinarily invisible generated cluster edges. For debugging layouts\")\n     (row \"anneal bias\" [anneal-bias] \"Favors left-right cluster expansion by this factor in TB/ BT layouts, ditto for top bottom in LR/ RL layouts\")\n     (row \"cluster edges num\" [cluster-edges-num] \"number of invisible edges to create between nodes in two clusters that have a cluster edge. See Help page for further information.\")\n]))\n\n(defn left-disp-opts2 [state]\n  (fn []\n    [:div.controls2l {:class (:local-class @state)} \n     (label-row \"graphviz\")     \n     (row \"layout\" [layout] \"The Graphviz layout algorithm\")\n     (row \"(node) fixedsize\" [fixedsize] \"Nodes fixed in size or varied according to contents\")\n     (row \"nodesep\" [nodesep] \"Separation between nodes in inches\")     \n     (row \"overlap\" [overlap] \"Determines how Graphviz removes overlapping edges\")\n     \n]))\n\n(defn middle-disp-opts2 [state]\n  (fn []\n    [:div.controls2m {:class (:local-class @state)} \n     (empty-row)\n     (row \"rankdir\" [rankdir] \"The layout direction e.g. TB mean Top Bottom etc\")\n     (row \"splines\" [splines] \"Controls the form of the edges in the graph\")\n     (row \"ranksep\" [ranksep] \"Separation between ranks in inches\")\n     (row \"scale\" [scale] \"Scales the graph up by this factor\")   \n     \n]))\n\n(defn right-disp-opts2 [state]\n  (fn []\n    [:div.controls2r {:class (:local-class @state)} \n     (empty-row)\n     (row \"node shape\" [shape] \"The shape used for nodes\")\n     (empty-row) (empty-row)\n     (row \"concentrate (edges)\" [concentrate] \"Merge edges with a common end point\")\n     (row \"edge constraints\" [constraint] \"Sets whether edges influence rank in dot layouts\")\n\n]))\n\n\n\n\n;; ---- Control buttons\n;; Define two different go button states\n;; For normal state before a request is sent off\n(defn go-button []\n  [:button {:id \"go-button\" :on-click get-svg}\n   \"draw-graph\"])\n\n;; and while the request is being processed\n(defn go-button-loading []\n  [:button {:id \"go-button\"}\n   [:i.fa.fa-circle-o-notch.fa-spin] \" processing\"])\n\n;; process button flips between the 2 states\n(defn process-button []\n  (fn []\n    (if @processing\n        [go-button-loading] [go-button])))\n\n(defn save-button []\n  (fn []\n    (if (not= @svg default-svg-text)\n      [:button {:id \"save-button\"\n                :on-click #(if (not= @svg default-svg-text)\n                             (file/save-svg svg (:data-filename @local-state)\n                                            (:layout @options)) (:cluster-on @options))}\n       \"Save image\"]\n      [:button {:id \"save-button-disabled\"} \"Save image\"])))\n\n;; -------------------------\n;; Controls\n\n(defn controls [state]\n  (fn []\n    [:div {:class (:wrapper-class @state)}\n     [:div.item3\n      [:div [load-button]]\n      [:div \"or enter the data\"]]\n     [:div.item4 [:label {:id \"file-name\"} (:data-filename @local-state)]]\n     [:div.item5 {:id \"editor\"}\n      [ace-editor local-state]\n      ] ;;need to get id editor in earlier .getDomNode current node perhaps\n     [disp-opts-hdr state]\n     [left-disp-opts1 state]\n     [middle-disp-opts1 state]\n     [right-disp-opts1 state]\n     [left-disp-opts2 state]\n     [middle-disp-opts2 state]\n     [right-disp-opts2 state]\n     [:div.item9 [process-button]]\n     [:div.item10 [save-button]]\n     [:div#svg {:dangerouslySetInnerHTML {:__html @svg}}]]))\n\n\n;; -------------------------\n;; Local remote\n\n(def local-remote-state\n  (atom {:lbl \"  local\"\n         :class \"local\"}))\n\n(defn local-remote [state]\n  (fn []\n    [:a.local-remote\n     {:on-click #(do\n                   (toggle state :lbl \"  local\" \"  remote\")\n                   (toggle state :class \"local\" \"remote\")\n                   (toggle local-state :local-dot true false))}\n     [:span {:class (:class @state)} (:lbl @state)]]))\n\n;; -------------------------\n;; Page\n\n\n\n(defn home-page []\n  (find-region)\n  [:div.page\n   [:link {:href \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" :rel \"stylesheet\"}]\n   [:div.wrapper-banner\n    [:div.site-banner.banner1 \"draw-graph\" [local-remote local-remote-state]]\n    [:div.banner2.controls \"Examples  \" [example-dropdown]]]\n   ;[:p {:font-size \"0.9em;\"} \"Network diagrams from csv files\"]\n   [:div.main [controls disp-opts-state]]\n;   @local-state\n   [:div.warn @warn]\n   [:div.error @error]])\n"]}