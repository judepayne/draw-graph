{"version":3,"sources":["draw_graph/home.cljs"],"mappings":"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","names":["draw-graph.home/log","js/console","draw-graph.home/default-svg-text","draw-graph.home/local-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","draw-graph.examples/default-options","draw-graph.home/options","reagent.core/cursor","draw-graph.home/svg","draw-graph.home/processing","draw-graph.home/error","draw-graph.home/warn","draw-graph.home/local-dot","draw-graph.home/region","draw-graph.home/data","draw-graph.home/pan-zoom","draw-graph.file/file-reader-listen","e","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","draw-graph.home/*produce-dot-locally*","draw-graph.home/find-region","cljs.core/deref","draw-graph.ip/region","x","cljs.core/reset!","err","js/console.log","draw-graph.home/url-Europe","draw-graph.home/url-US","draw-graph.home/lambda-url","G__36594","draw-graph.home/remove-empty-strings","m","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/complement","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/last","draw-graph.home/->csv1","cljs.core/name","lib-draw-graph.processor/detect-format","draw-graph.home/->dot","draw-graph.home/dot->svg","data","draw-graph.home/post","url","json-data","promesa.core/bind","p__36597","map__36598","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","promesa.core/promise","status","body","promesa.core.catch$.cljs$core$IFn$_invoke$arity$2","kvlt.core/request!","G__36596","fexpr__36595","cljs.core/ex-data","draw-graph.home/->svg","fexpr__36600","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","draw-graph.home/get-svg-element","svg","p1__36601#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/document","cljs.core/count","cljs.core/first","draw-graph.home/reset-pan-zoom","svg-element","js/svgPanZoom","draw-graph.home/put-svg","data*","draw-graph.home/put-error","message","draw-graph.home/put-warn","draw-graph.home/put-result","result","draw-graph.home/process-remotely","draw-graph.utils/clj->json","promesa.core/map","draw-graph.utils/json->clj","promesa.core.error.cljs$core$IFn$_invoke$arity$2","error","draw-graph.home/prom-viz","dot","js/Viz","G__36603","fexpr__36602","draw-graph.home/local-dot->svg","g","opts","dot'","clojure.string/replace","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","lib-draw-graph.processor/postprocess-svg","draw-graph.home/lambda-dot->svg","draw-graph.home/process-locally","e36604","in","lib-draw-graph.processor/in->g","g'","lib-draw-graph.processor/preprocess-graph","lib-draw-graph.processor/g->dot","js/Error","draw-graph.home/get-svg","draw-graph.home/->js","var-name","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","draw-graph.home/invoke","seq36605","G__36606","cljs.core/next","self__4717__auto__","function-name","args","fun","js/eval","draw-graph.home/set-value","id","val","draw-graph.home/fixed-select","p1__36607#","seq36608","G__36609","G__36610","G__36611","path","a","tabIndex","options","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update-in","iter__4523__auto__","s__36613","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__36615","cljs.core/chunk-buffer","i__36614","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36612","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","p1__36616#","draw-graph.home/text-input","p1__36617#","draw-graph.home/wide-text-input","p__36618","map__36619","draw-graph.home/code-mirror","value-atom","style","js-cm-opts","on-cm-init","cm","reagent.core/create-class","this","el","reagent.core/dom-node","inst","js/CodeMirror","cljs.core/clj->js","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","js/Infinity","value","old-argv","_","draw-graph.home/load-example-data","ex-fn","example","cljs.core/assoc","p1__36621#","draw-graph.home/example-dropdown","draw-graph.home/get-position","geo","js/navigator","cljs.core/identity","draw-graph.home/click-upload-csv-hidden","draw-graph.home/load-button","draw-graph.file/file-reader-put","p1__36622#","draw-graph.home/data-input","draw-graph.home/format","e36623","draw-graph.home/first-line","s","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","draw-graph.home/get-headers","fmt","G__36624","cljs.core/Keyword","e36625","lib-draw-graph.parser/parse-csv-or-json","draw-graph.home/headers","reagent.ratom/make-reaction","draw-graph.home/node-label","p1__36626#","draw-graph.home/cluster-on","s__36628","b__36630","i__36629","iter__36627","p1__36631#","draw-graph.home/color-on","s__36633","b__36635","i__36634","iter__36632","draw-graph.home/tooltip","p1__36636#","draw-graph.home/url","s__36638","b__36640","i__36639","iter__36637","draw-graph.home/edgelabels","draw-graph.home/filtergraph","draw-graph.home/paths","draw-graph.home/elide-levels","draw_graph.home.fixed_select.cljs$core$IFn$_invoke$arity$variadic","draw-graph.home/show-roots","cljs.core/not","draw-graph.home/show-constraints","draw-graph.home/pp?","draw-graph.home/pp-clusters","draw-graph.home/anneal-bias","draw-graph.home/pp-cluster-sep","draw-graph.home/pp-font","draw-graph.home/cluster-edges-num","draw-graph.home/layout","draw-graph.home/rankdir","draw-graph.home/shape","draw-graph.home/fixedsize","draw-graph.home/splines","draw-graph.home/nodesep","draw-graph.home/ranksep","draw-graph.home/concentrate","draw-graph.home/overlap","draw-graph.home/scale","draw-graph.home/constraint","draw-graph.home/row","label","ctrl","tooltip","draw-graph.home/label-row","draw-graph.home/empty-row","draw-graph.home/toggle","k","v1","v2","fexpr__36641","draw-graph.home/disp-opts-state","draw-graph.home/disp-opts-hdr","state","draw-graph.home/left-disp-opts1","draw-graph.home/middle-disp-opts1","draw-graph.home/right-disp-opts1","draw-graph.home/left-disp-opts2","draw-graph.home/middle-disp-opts2","draw-graph.home/right-disp-opts2","draw-graph.home/go-button","draw-graph.home/go-button-loading","draw-graph.home/process-button","draw-graph.home/save-button","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","draw_graph.file.save_svg.cljs$core$IFn$_invoke$arity$variadic","draw-graph.home/svg-div","draw-graph.home/local-remote-state","draw-graph.home/local-remote","draw-graph.home/controls","draw-graph.home/home-page","cljs.core/chunk-first"],"sourcesContent":["(ns draw-graph.home\n  (:require\n   [reagent.core             :refer [atom cursor create-class dom-node force-update]]\n   [reagent.ratom            :refer [reaction make-reaction]]\n   [cljs.core.async          :refer [put! chan <! >!]]\n   [accountant.core          :as accountant]\n   [kvlt.core                :as kvlt]\n   [promesa.core             :as p]\n   [promesa.async-cljs       :refer-macros [async]]\n   [clojure.string           :as string]\n   [draw-graph.utils         :as utils]\n   [draw-graph.examples      :as examples]\n   [lib-draw-graph.processor :as processor]\n   [lib-draw-graph.parser    :as parser]\n   [lib-draw-graph.clustered :as clstr]\n   [draw-graph.file          :as file]\n   [clojure.data.xml         :as xml]\n   [lib-draw-graph.svg       :as svg]\n   [draw-graph.ip            :as ip]\n   [goog.dom                 :as dom])\n  (:require-macros [cljs.core.async.macros :refer [go go-loop]]))\n\n\n\n(def log (.-log js/console))\n\n;; -------------------------\n;; State\n\n(def default-svg-text \"<div/>\")   ;; html to inject when svg is empty\n\n;; atom to store the page's state\n(def local-state (atom {:options examples/default-options\n                        :processing false\n                        :local-dot true\n                        :error \"\"\n                        :warn \"\"\n                        :svg default-svg-text\n                        :data \"\"\n                        :region nil}))\n;; various cursors over the atom\n(def options (cursor local-state [:options]))\n(def svg (cursor local-state [:svg]))\n(def processing (cursor local-state [:processing]))\n(def error (cursor local-state [:error]))\n(def warn (cursor local-state [:warn]))\n(def local-dot (cursor local-state [:local-dot]))\n(def region (cursor local-state [:region]))\n(def data (cursor local-state [:data]))\n\n;; -------------------------\n;; Initialise the file reader\n\n(declare update-ace)\n(def pan-zoom (atom nil))\n\n\n(file/file-reader-listen (fn [e] \n                           (do (swap! local-state merge e)\n                               ;(update-ace)\n                               )))\n\n\n\n;; -------------------------\n;; Processing\n\n;; determines whether dot is produced locally or in the lambda\n(def ^:dynamic *produce-dot-locally* true)\n\n\n(defn find-region []\n  (when (nil? @region)\n    (ip/region (fn [x] (reset! region x))\n               (fn [err] (js/console.log err)))))\n\n\n(def url-Europe \"https://0j6kjsk388.execute-api.eu-west-2.amazonaws.com/beta\")\n(def url-US \"https://u4jlt3tmhe.execute-api.us-east-1.amazonaws.com/beta\")\n\n\n(defn lambda-url []\n  (case @region\n    \"Europe\"  url-Europe\n    url-US))\n\n\n(defn remove-empty-strings\n  \"removes items from map where Value is an empty string\"\n  [m]\n  (into {} (filter (complement (comp #{\"\"} last)) m)))\n\n\n(defn ->csv1 []\n  {:display-options (remove-empty-strings (:options @local-state))\n   :data (:data @local-state)\n   :format-in (name (processor/detect-format (:data @local-state)))\n   :format-out \"svg\"})\n\n\n(defn ->dot []\n  {:display-options (remove-empty-strings (:options @local-state))\n   :data (:data @local-state)})\n\n\n(defn dot->svg [data]\n  {:data data\n   :format-in \"dot\"\n   :format-out \"svg\"})\n\n\n(defn post [url json-data]\n  (p/alet [{:keys [status body]}\n           (p/await (p/catch (kvlt/request! {:url url\n                                             :method :post\n                                             :body json-data\n                                             :content-type :json\n                                             :accept :json})\n                        (fn [e] ((ex-data e) :type))))]\n          body))\n\n\n(defn ->svg [json-data]\n  ((partial post (lambda-url)) json-data))\n\n\n(defn get-svg-element []\n  (let [svg (filter #(= \"svg\" (.-tagName %)) \n             (-> js/document (.getElementById \"svg\") (.-childNodes)))]\n    (if (> (count svg) 0) (first svg) nil)))\n\n\n(defn reset-pan-zoom [] \n  (reset! pan-zoom nil)\n  (let [svg-element (get-svg-element)]\n    (when (not (nil? svg-element))\n      (js/svgPanZoom.\n       (get-svg-element)\n       #js {:controlIconsEnabled true}))))\n\n\n(defn put-svg [data]\n  (let [data* (if (= data \"null\") default-svg-text data)])\n  (reset! processing false)\n  (reset! svg data)\n  (reset-pan-zoom))\n\n\n(defn put-error [message]\n  (reset! processing false)\n  (reset! svg \"\")\n  (reset! error message))\n\n\n(defn put-warn [message]\n  (reset! processing false)\n  (reset! warn message))\n\n\n(defn put-result [result]  \n  (when (:svg result) (reset! svg (:svg result)))\n  (when (:error result) (reset! error (:error result)))\n  (when (:warn result) (reset! warn (:warn result)))\n  (reset! processing false))\n\n\n(defn process-remotely []\n  (->> \n   (->svg (utils/clj->json (->csv1)))\n   (p/map utils/json->clj)\n   (p/map put-result)\n   (p/error (fn [error] (put-error (.-message error))))))\n\n\n(defn prom-viz [dot]\n  (p/alet [result (p/await (p/catch\n                              (js/Viz dot)\n                               (fn [e] ((ex-data e) :type))))]\n    result))\n\n\n(defn local-dot->svg [g opts dot]\n  ;; use viz.js\n  (let [dot' (string/replace dot #\"\\\\\\\\n\" \"\\n\")]\n    (->>\n     (prom-viz dot')\n     (p/map (partial processor/postprocess-svg g opts))\n     (p/map put-svg)\n     (p/error (fn [error] (put-error (.-message error)))))))\n\n\n(defn lambda-dot->svg [g opts dot]\n  ;; use AWS lambda\n  (->> (->svg (utils/clj->json (dot->svg dot)))\n           (p/map utils/json->clj)\n           (p/map :svg)\n           (p/map (partial processor/postprocess-svg g opts))\n           (p/map put-svg)\n           (p/error (fn [error] (put-error (.-message error))))))\n\n\n(defn process-locally []\n  (do\n    (reset! processing true)\n    (reset! error \"\")\n    (reset! warn \"\")\n    (try\n      (let [in (->csv1)\n            opts (:display-options in)\n            g (processor/in->g in)\n            g' (processor/preprocess-graph g opts)\n            dot (processor/g->dot in g')]       \n        (if @local-dot\n          (local-dot->svg g' opts dot)\n          (lambda-dot->svg g' opts dot)))\n      (catch js/Error e\n        (reset! svg default-svg-text)\n        (put-error (str e))))))\n\n\n(defn get-svg []\n  (if *produce-dot-locally*\n    (process-locally)\n    (process-remotely)))\n\n\n;; -------------------------\n;; Controls input\n\n;; ---- Utility functions\n;; thanks:\n;; https://stackoverflow.com/questions/23345663/call-a-clojurescript-function-by-string-name/30892955#30892955\n\n(defn ->js [var-name]\n      (-> var-name\n          (string/replace #\"/\" \".\")\n          (string/replace #\"-\" \"_\")))\n\n\n(defn invoke [function-name & args]\n      (let [fun (js/eval (->js function-name))]\n           (apply fun args)))\n\n\n(defn set-value [id val]\n  (if (some? val)\n    (set! (-> js/document (.getElementById id) (.-value)) val)))\n\n\n(defn fixed-select [path a tabIndex & options]\n  [:select\n   {:field :list :id (last path)\n    :values (get-in @a path)\n    :value (get-in @local-state path)\n    :tabIndex tabIndex\n    :on-change #(swap! local-state update-in path\n                       (fn [e] (-> % .-target .-value)))}\n   (for [x options] [:option {:key x} x])])\n\n\n(defn text-input [path a tabIndex]\n [:input\n   {:type :text :id (last path)\n    :value (get-in @a path)\n    :tabIndex tabIndex\n    :on-change #(swap! local-state update-in path\n                       (fn [e] (-> % .-target .-value)))}])\n\n\n(defn wide-text-input [path a tabIndex]\n [:input.wide\n   {:type :text :id (last path)\n    :value (get-in @a path)\n    :tabIndex tabIndex\n    :on-change #(swap! local-state update-in path\n                       (fn [e] (-> % .-target .-value)))}])\n\n\n;; ---- Main inputs\n\n(defn code-mirror\n  \"Create a code-mirror editor. The parameters:\n  value-atom (reagent atom)\n    when this changes, the editor will update to reflect it.\n  options\n  :style (reagent style map)\n    will be applied to the container element\n  :js-cm-opts\n    options passed into the CodeMirror constructor\n  :on-cm-init (fn [cm] -> nil)\n    called with the CodeMirror instance, for whatever extra fiddling you want to do.\"\n  [value-atom {:keys [style\n                      js-cm-opts\n                      on-cm-init]}]\n\n  (let [cm (atom nil)]\n    (create-class\n     {:component-did-mount\n      (fn [this]\n        (let [el (dom-node this)\n              inst (js/CodeMirror.\n                    el\n                    (clj->js\n                     (merge\n                      {:lineNumbers true\n                       :viewportMargin js/Infinity\n                       :matchBrackets true\n                       :autofocus true\n                       :value @value-atom\n                       :autoCloseBrackets false\n                       :mode \"drawgraph\"}\n                      js-cm-opts)))]\n\n          (reset! cm inst)\n          (.on inst \"change\"\n               (fn []\n                 (let [value (.getValue inst)]\n                   (when-not (= value @value-atom)\n                     (reset! value-atom value)))))\n          (when on-cm-init\n            (on-cm-init inst))\n          ))\n\n      :component-did-update\n      (fn [this old-argv]\n        (when-not (= @value-atom (.getValue @cm))\n          (.setValue @cm @value-atom)))\n\n      :reagent-render\n      (fn [_ _ _]\n        @value-atom\n        [:div.item5 {:id \"editor\" :style style}])})))\n\n\n(defn load-example-data [ex-fn]\n  (let [example (invoke ex-fn)]\n    (swap! local-state assoc :options (:options example))\n    (swap! local-state merge {:data (:data example) :data-filename \"\"})))\n\n\n(defn example-dropdown []\n  [:select {:tabIndex 1\n            :on-change #(do (load-example-data (.. % -target -value)))}  \n   [:option {:value nil} \"-\"]  \n   [:option {:value \"draw-graph.examples/example1\"} \"Friendship graph\"]\n   [:option {:value \"draw-graph.examples/example1b\"} \"Friendship graph with synonyms\"]\n   [:option {:value \"draw-graph.examples/example1c\"} \"Friendship graph with synonyms json\"]\n   [:option {:value \"draw-graph.examples/example2\"} \"Two facing trees\"]\n   [:option {:value \"draw-graph.examples/example3\"} \"Two trees\"]\n   [:option {:value \"draw-graph.examples/example4\"} \"CERN email connections\"]\n   [:option {:value \"draw-graph.examples/example5\"} \"Circular tree\"]\n   [:option {:value \"draw-graph.examples/example6\"} \"cluster layout\"]\n   [:option {:value \"draw-graph.examples/example7\"} \"complex cluster layout\"]\n   [:option {:value \"draw-graph.examples/example8\"} \"Architecture diagram\"]\n   [:option {:value \"draw-graph.examples/example9\"} \"Complex architecture diagram\"]\n   [:option {:value \"draw-graph.examples/example9b\"} \"Complex architecture diagram json\"]]) \n\n\n(defn get-position []\n  (let [geo (.-geolocation js/navigator)]\n    (.getCurrentPosition geo identity)))\n\n\n(defn click-upload-csv-hidden [e]\n  ;;click the hidden file input button\n  ;; need for the two buttons with input[type=\"file'] because you\n  ;; can't satisfactorily style an input[type=\"file\"] button\n  (.click (.getElementById js/document \"upload-csv-hidden\")))\n\n\n(defn load-button []\n  [:div\n   [:button {:id \"upload-csv\"\n             :tabIndex 2\n             :on-click click-upload-csv-hidden\n             :title \"Upload a csv in 'csv1' format. see help\"}\n    \"Load csv\"]\n   [:input {:id \"upload-csv-hidden\"\n            :type \"file\"\n            :accept \".csv\"\n            :on-change file/file-reader-put}]])\n\n\n(defn data-input [value]\n  [:div\n   [:textarea {\n               :id \"tweak-box\"\n               :tabIndex 3\n               :rows 20\n  ;            :cols 42\n               :wrap \"soft\"\n               :spellCheck \"false\"\n               :autoComplete \"on\"\n               :autoCapitalize \"off\"\n               :autoCorrect \"off\"\n               :value (:data @value)\n               :on-change #(swap! value\n                                  assoc\n                                  :data\n                                  (-> % .-target .-value))}]])\n\n\n;; For the dynamic dropdowns\n\n;; -- Cluster-on dropdown needs to be more dynamic--\n\n(defn format\n  \"detects the format of :data in the state atom.\"\n  [data]\n  (try\n    (processor/detect-format data)\n    (catch js/Error e nil)))\n\n\n(defn first-line [s]\n  (js->clj (.split (subs (aget (.split s \"\\n\") 0) 2) \":\")))\n\n\n(defn get-headers [data]\n  (let [fmt (format data)]\n    (case fmt\n      :json (try ;; we might not be able to parse the json\n              (:header (parser/parse-csv-or-json data :json))\n              (catch js/Error e nil))\n      :csv  (first-line data)\n      nil)))\n\n\n;; a reaction to capture the headers in the data file\n(def headers\n  (reaction (get-headers (:data @local-state))))\n\n\n;; ----end----- For the dynamic dropdowns\n\n\n;; Controls: MUST be laid out in TAB ORDER\n\n(defn node-label [] (text-input [:options :label] local-state 4))\n\n\n(defn cluster-on []\n  [:select.form-control\n   {:field :list :id :cluster-on\n    :value (:cluster-on @options)\n    :tabIndex 5\n    :on-change #(swap! local-state update-in [:options :cluster-on]\n                       (fn [e] (-> % .-target .-value)))}\n\n   (if (= \"\" (first @headers))\n     [:option {:key \"none\" :value \"\"} \"-\"]\n     (cons [:option {:key \"none\" :value \"\"} \"-\"]\n           (for [x @headers] [:option {:key x} x])))])\n\n\n(defn color-on []\n  [:select.form-control\n   {:field :list :id :color-on\n    :value (:color-on @options)\n    :tabIndex 6\n    :on-change #(swap! local-state update-in [:options :color-on]\n                       (fn [e] (-> % .-target .-value)))}\n   (if (= \"\" (first @headers))\n     [:option {:key \"none\" :value \"\"} \"-\"]\n     (cons [:option {:key \"none\" :value \"\"} \"-\"]\n           (for [x @headers] [:option {:key x} x])))])\n\n\n(defn tooltip [] (text-input [:options :tooltip] local-state 7))\n\n\n(defn url []\n  [:select.form-control\n   {:field :list :id :url\n    :value (:url @options)\n    :tabIndex 8\n    :on-change #(swap! local-state update-in [:options :url]\n                       (fn [e] (-> % .-target .-value)))}\n   (if (= \"\" (first @headers))\n     [:option {:key \"none\" :value \"\"} \"-\"]\n     (cons [:option {:key \"none\" :value \"\"} \"-\"]\n           (for [x @headers] [:option {:key x} x])))])\n\n\n(defn edgelabels [] (text-input [:options :edge-label] local-state 9))\n\n\n(defn filtergraph [] (text-input [:options :filter-graph] local-state 10))\n\n\n(defn paths [] (wide-text-input [:options :paths] local-state 11))\n\n\n(defn elide-levels [] (fixed-select [:options :elide] local-state 12 \"0\" \"1\" \"2\" \"3\" \"4\") )\n\n\n(defn show-roots []\n  [:input {:type :checkbox :id :show-roots?\n           :checked (:show-roots? @options)\n           :tabIndex 13\n           :on-change #(swap! local-state update-in [:options :show-roots?] not)}])\n\n\n(defn show-constraints []\n  [:input {:type :checkbox :id :show-constraints?\n           :checked (:show-constraints? @options)\n           :tabIndex 14\n           :on-change #(swap! local-state update-in [:options :show-constraints?] not)}])\n\n\n(defn pp? []\n  [:input {:type :checkbox :id :pp?\n           :checked (-> @options :post-process?)\n           :tabIndex 15\n           :on-change #(swap! local-state update-in\n                              [:options :post-process?] not)}])\n\n\n(defn pp-clusters []\n  [:div\n   [:a.lbl (str \\u2191)]\n   [:input {:type :checkbox :id :pp-clusters-top?\n            :checked (-> @options :pp-clusters :y)\n            :tab-index 16\n            :on-change #(swap! local-state update-in\n                               [:options :pp-clusters :y] not)}]\n   [:a.lbl (str \\u00A0 \\u00A0 \\u00A0 \\u00A0 \\u2193)]\n   [:input {:type :checkbox :id :pp-clusters-bottom?\n            :checked (-> @options :pp-clusters :h)\n            :tabIndex 17\n            :on-change #(swap! local-state update-in\n                               [:options :pp-clusters :h] not)}]\n   [:a.lbl (str \\u00A0 \\u00A0 \\u2190)]\n   [:input {:type :checkbox :id :pp-clusters-left?\n            :checked (-> @options :pp-clusters :x)\n            :tabIndex 18\n            :on-change #(swap! local-state update-in\n                               [:options :pp-clusters :x] not)}]\n   [:a.lbl (str \\u00A0 \\u00A0 \\u2192)]\n   [:input {:type :checkbox :id :pp-clusters-right?\n            :checked (-> @options :pp-clusters :w)\n            :tabIndex 19\n            :on-change #(swap! local-state update-in\n                               [:options :pp-clusters :w] not)}]])\n\n\n(defn anneal-bias [] (fixed-select [:options :pp-anneal-bias] local-state 20\n                                   \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"10\" \"11\" \"12\"))\n\n\n(defn pp-cluster-sep [] (text-input [:options :pp-cluster-sep] local-state 21))\n\n\n(defn pp-font [] (text-input [:options :pp-font] local-state 22))\n\n\n(defn cluster-edges-num []\n  (fixed-select [:options :num-cluster-edges] local-state 23\n                                   \"1\" \"2\" \"4\" \"5\" \"6\" \"9\" \"12\" \"16\"))\n\n\n(defn layout [] (fixed-select [:options :layout] local-state 24\n                              \"dot\" \"neato\" \"fdp\" \"circo\" \"twopi\" \"patchwork\"))\n\n(defn rankdir [] (fixed-select [:options :rankdir] local-state 25 \"LR\" \"TB\" \"RL\" \"BT\"))\n\n\n(defn shape [] (fixed-select [:options :shape] local-state 26\n                             \"ellipse\" \"rect\" \"circle\" \"egg\" \"diamond\" \"octagon\" \"square\"\n                             \"folder\" \"cylinder\" \"plaintext\"))\n\n\n(defn fixedsize [] (fixed-select [:options :fixedsize] local-state 27\n                                  \"true\" \"false\" \"shape\"))\n\n\n(defn splines [] (fixed-select [:options :splines] local-state 28\n                               \"line\" \"spline\" \"none\" \"polyline\" \"ortho\" \"curved\"))\n\n\n(defn nodesep [] (text-input [:options :nodesep] local-state 29))\n\n\n(defn ranksep [] (text-input [:options :ranksep] local-state 30))\n\n\n(defn concentrate []\n  [:input {:type :checkbox :id :concentrate\n           :checked (:concentrate @options)\n           :tabIndex 31\n           :on-change #(swap! local-state update-in [:options :concentrate] not)}])\n\n;(defn concentrate [] (fixed-select [:options :concentrate] local-state 31 \"false\" \"true\"))\n\n\n(defn overlap [] (fixed-select [:options :overlap] local-state 32\n                               \"true\" \"false\" \"scale\" \"scalexy\" \"compress\" \"vpsc\"\n                               \"orthoxy\" \"ipsep\"))\n\n\n(defn scale [] (text-input [:options :scale] local-state 33))\n\n\n(defn constraint []\n  [:input {:type :checkbox :id :constraint?\n           :checked (:constraint @options)\n           :tabIndex 34\n           :on-change #(swap! local-state update-in [:options :constraint] not)}])\n;(defn constraint [] (fixed-select [:options :constraint] local-state 34 \"true\" \"false\"))\n\n\n\n;; ---- Options layout\n\n(defn row [label ctrl tooltip]\n  [:div [:div.lbl label]\n        [:div {:class \"tooltip\"} ctrl\n         [:span {:class \"tooltiptext\"} tooltip]]])\n\n\n(defn label-row [label]\n  [:div [:a.lbl.row-sep label]])\n\n\n(defn empty-row []\n  [:div [:a.lbl.row-label (str \\u00A0)]])  ;; \\00A0 = &nbsp\n\n\n(defn toggle [a k v1 v2]\n    (if (= (@a k) v1)\n      (swap! a assoc k v2)\n      (swap! a assoc k v1)))\n\n\n(def disp-opts-state\n  (atom {:local-class \"hidden\"\n         :wrapper-class \"wrapper controls wrapper-collapsed\"\n         :lbl \"show\"}))\n\n\n(defn disp-opts-hdr [state]\n  (fn []\n    [:div.item6\n     [:div.opts-hdr\n      {:on-click #(do\n                    (toggle state :lbl \"show\" \"hide\")\n                    (toggle state :local-class \"hidden\" \"visible\")\n                    (toggle state :wrapper-class \"wrapper controls wrapper-collapsed\"\n                            \"wrapper controls\"))}\n      \"Options\" [:a.lbl.show-hide (:lbl @state)]]]))\n\n\n(defn left-disp-opts1 [state]\n  (fn []\n    [:div.controls1l {:class (:local-class @state)}\n     (label-row \"draw-graph\")\n     (row \"node labels\" [node-label] \"The header key to use for the node label\")\n     (row \"node tooltips\" [tooltip] \"The header key to use for tooltips embedded in the final svg\")\n     (row \"filter graph\" [filtergraph] \"Filters the graph - good for zooming in\")\n     (row \"elide lower levels\" [elide-levels] \"Hide <n> lowest levels in the graph\")\n     (row \"post process\" [pp?] \"Post Procees the svg: anneal clusters and font replacement\")\n     (row \"anneal cluster separation\" [pp-cluster-sep] \"How close clusters are allowed to get in pixels during annealing\")\n]))\n\n\n(defn middle-disp-opts1 [state]\n  (fn []\n    [:div.controls1m {:class (:local-class @state)} \n     (empty-row)\n     (row \"cluster on\" [cluster-on] \"The header key to cluster the graph on\")\n     (row \"node URL\" [url] \"The header key to use as an embedded link in the final svg\")\n     (row \"paths\" [paths] \"Filter the graph by paths through it. see help page.\")\n     (row \"highlight roots\" [show-roots] \"Highlights the roots of the graph\")\n     (row \"anneal expand clusters\" [pp-clusters] \"Controls which dimensions of clusters are expanded in post processing\")\n     (row \"font\" [pp-font] \"The name of the replacement font to use in post processing\")    \n     (empty-row) (empty-row)\n]))\n\n\n(defn right-disp-opts1 [state]\n  (fn []\n    [:div.controls1r {:class (:local-class @state)} \n     (empty-row)\n     (row \"color on\" [color-on] \"The header key to vary node coloration by\")\n     (row \"edges labels\" [edgelabels] \"Edge meta key to use as an edge label\")\n     (empty-row) (empty-row)\n     (row \"highlight constraints\" [show-constraints] \"Highlights all (rank) constraining edges, including ordinarily invisible generated cluster edges. For debugging layouts\")\n     (row \"anneal bias\" [anneal-bias] \"Favors left-right cluster expansion by this factor in TB/ BT layouts, ditto for top bottom in LR/ RL layouts\")\n     (row \"cluster edges num\" [cluster-edges-num] \"number of invisible edges to create between nodes in two clusters that have a cluster edge. See Help page for further information.\")\n]))\n\n(defn left-disp-opts2 [state]\n  (fn []\n    [:div.controls2l {:class (:local-class @state)} \n     (label-row \"graphviz\")     \n     (row \"layout\" [layout] \"The Graphviz layout algorithm\")\n     (row \"(node) fixedsize\" [fixedsize] \"Nodes fixed in size or varied according to contents\")\n     (row \"nodesep\" [nodesep] \"Separation between nodes in inches\")     \n     (row \"overlap\" [overlap] \"Determines how Graphviz removes overlapping edges\")\n     \n]))\n\n(defn middle-disp-opts2 [state]\n  (fn []\n    [:div.controls2m {:class (:local-class @state)} \n     (empty-row)\n     (row \"rankdir\" [rankdir] \"The layout direction e.g. TB mean Top Bottom etc\")\n     (row \"splines\" [splines] \"Controls the form of the edges in the graph\")\n     (row \"ranksep\" [ranksep] \"Separation between ranks in inches\")\n     (row \"scale\" [scale] \"Scales the graph up by this factor\")   \n     \n]))\n\n(defn right-disp-opts2 [state]\n  (fn []\n    [:div.controls2r {:class (:local-class @state)} \n     (empty-row)\n     (row \"node shape\" [shape] \"The shape used for nodes\")\n     (empty-row) (empty-row)\n     (row \"concentrate (edges)\" [concentrate] \"Merge edges with a common end point\")\n     (row \"edge constraints\" [constraint] \"Sets whether edges influence rank in dot layouts\")\n\n]))\n\n\n\n\n;; ---- Control buttons\n;; Define two different go button states\n;; For normal state before a request is sent off\n(defn go-button []\n  [:button {:id \"go-button\" :on-click get-svg}\n   \"draw-graph\"])\n\n;; and while the request is being processed\n(defn go-button-loading []\n  [:button {:id \"go-button\"}\n   [:i.fa.fa-circle-o-notch.fa-spin] \" processing\"])\n\n;; process button flips between the 2 states\n(defn process-button []\n  (fn []\n    (if @processing\n        [go-button-loading] [go-button])))\n\n(defn save-button []\n  (fn []\n    (if (not= @svg default-svg-text)\n      [:button {:id \"save-button\"\n                :on-click #(if (not= @svg default-svg-text)\n                             (file/save-svg svg (:data-filename @local-state)\n                                            (:layout @options)) (:cluster-on @options))}\n       \"Save image\"]\n      [:button {:id \"save-button-disabled\"} \"Save image\"])))\n\n\n\n;; atom to hold the dimensions of the svg div\n;(def svg-div-rect (atom nil))\n\n\n(defn svg-div\n  \"\"\n  [value-atom]\n\n  (create-class\n\n   {:component-did-mount\n    (fn [this]\n       )\n\n    :component-did-update\n    (fn [this old-argv]\n      (let [el (get-svg-element)]\n        (when el (.setAttribute el \"id\" \"the-svg\"))\n        (reset-pan-zoom)))\n\n\n    :reagent-render\n    (fn [_ _ _]\n      [:div#svg \n       {:dangerouslySetInnerHTML {:__html @svg}}])}))\n\n\n;; -------------------------\n;; Local remote\n\n(def local-remote-state\n  (atom {:lbl \"  local\"\n         :class \"local\"}))\n\n(defn local-remote [state]\n  (fn []\n    [:a.local-remote\n     {:on-click #(do\n                   (toggle state :lbl \"  local\" \"  remote\")\n                   (toggle state :class \"local\" \"remote\")\n                   (toggle local-state :local-dot true false))}\n     [:span {:class (:class @state)} (:lbl @state)]]))\n\n\n;; -------------------------\n;; Controls\n\n(defn controls [state]\n  (fn []\n    [:div {:class (:wrapper-class @state)}\n     [:div.site-banner.banner1 \"draw-graph\" [local-remote local-remote-state]]\n     [:div.banner2.controls \"Examples  \" [example-dropdown]]\n     [:div.item3\n      [:div [load-button]]\n      [:div \"or enter the data\"]]\n     [:div.item4 [:label {:id \"file-name\"} (:data-filename @local-state)]]\n     [code-mirror data]\n     [disp-opts-hdr state]\n     [left-disp-opts1 state]\n     [middle-disp-opts1 state]\n     [right-disp-opts1 state]\n     [left-disp-opts2 state]\n     [middle-disp-opts2 state]\n     [right-disp-opts2 state]\n     [:div.item9 [process-button]]\n     [:div.item10 [save-button]]\n     [svg-div]\n     [:div.warn @warn]\n     [:div.error @error]]))\n\n;; -------------------------\n;; Page\n\n\n\n(defn home-page []\n  (find-region)\n  [:div.page\n   [:link {:href \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" :rel \"stylesheet\"}]\n;   @options\n   [:div.main [controls disp-opts-state]]])\n"]}