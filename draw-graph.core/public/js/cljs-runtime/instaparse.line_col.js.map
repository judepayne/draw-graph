{"version":3,"sources":["instaparse/line_col.cljc"],"mappings":";;;;AAMA,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAC,AAAWoE;;AAAX,AAAA,AAAArE,AAAA;AAAA,AAAA,AAAAA,AAAAC,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAWiE;;AAAX,AAAA,AAAAnE,AAAA;AAAA,AAAA,AAAAG,AAAAF;AAAAE,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAAE;;;AAAA;AAAAC;;;AAAA;AAAAC;;;;AAAA,AAAAC,AAAAC,AAAAR,AAAAC;;;;;AAAA,AAAA,AAAA,AAAA,AAAAQ,AAAAC,AAAAC,AAAWuD;;AAAX,AAAA,AAAAzD,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAC,AAAAF,AAAA,AAAA;AAAAG,AAAA,AAAAD,AAAAF,AAAA,AAAA;AAAA,AAAA,AAAAL,AAAAA,AAAAG,AAAAG,AAAAE,AAAAR,AAAAG,AAAAG,AAAAE;AAAAP,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAU,AAAAC,AAAAC,AAAW6C;;AAAX,AAAA,AAAA/C,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAE;;AAAA,AAAA,AAAAC,AAAAJ,AAAAE,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAI,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAA,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApB,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAAmB,AAAWuC;;AAAX,AAAA,AAAAvC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAqB,AAAArB,AAAA,AAAAsB;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWmC;;AAAX,AAAA,AAAAnC,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWiC;;AAAX,AAAA,AAAAjC,AAAA;AAAA,AAAA,AAAA7B,AAAAC,AAAAC,AAAA0B,AAAAxB,AAAA0B,AAAWgC;;;AAAX,AAAA,AAAA,AAAA,AAAA/B,AAAW+B;;AAAX,AAAA,AAAA/B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA5B;;;AAAA,AAAA,AAAA,AAAA,AAAA6B,AAAW6B;;AAAX,AAAA,AAAA7B,AAAA;AAAA,AAAA,AAAAC,AAAAJ;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;AAAAA;;AAAA,AAAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAAF;AAAA,AAAA,AAAAH,AAAAI;;AAAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAWwB;;AAAX,AAAA,AAAAzB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAWqB;;AAAX,AAAA,AAAAtB,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAL,AAAAZ,AAAAa;;AAAA,AAAAzC,AAAAC,AAAAC,AAAA0B,AAAA,AAAAkB,AAAA,AAAAH,AAAAvC,AAAAqC,AAAA,AAAWqB;;;;AAAX,AAAA,AAAA,AAAA,AAAAf,AAAAC,AAAAzB,AAAWuC;;AAAX,AAAA,AAAAf,AAAA;AAAA,AAAA,AAAAE,AAAAC;AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAAC,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAA5B,AAAAtB,AAAAC,AAAA0B,AAAAxB,AAAA,AAAW0D;;AAAX,AAAA,AAAAb,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAAnD,AAAAuB,AAAArB,AAAA0B,AAAAxB,AAAA,AAAW0D;;AAAX,AAAA,AAAAb,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAAnD,AAAAC,AAAAsB,AAAAK,AAAAxB,AAAA,AAAW0D;;AAAX,AAAA9D,AAAAC,AAAAC,AAAA0B,AAAA,AAAAwB,AAAAhD,AAAA4C,AAAAzB,AAAA,AAAWuC;;;;;;AAAX,AAAA,AAAA,AAAA,AAAAT,AAAWS;;AAAX,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA,AAAA,AAAAkC,AAAA,AAAAvD,AAAA,AAAA,AAAAuD,AAAA,AAAAtD,AAAA,AAAA,AAAAsD,AAAA,AAAArD,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAAoD,AAAAjC,AAAWuC;;AAAX,AAAA,AAAAN,AAAA;AAAA,AAAA,AAAAxD,AAAAC,AAAAC,AAAAqB,AAAAnB,AAAA0B,AAAWgC;;;AAAX,AAAA,AAAA,AAAA,AAAAL,AAAAC,AAAWI;;AAAX,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAAD;AAAA,AAAAD,AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;;AAAA,AAAAlD,AAAAqD,AAAAJ,AAAAC;;;;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAF,AAAA,AAAAC,AAAAE;AAAA,AAAA,AAAAC,AAAAD,AAAA;;;AAAA;;;AAAA,AAAWM,AAAavE,AAAYC,AAAWC;AAA/C,AAAA,AAAA4D,AAAA,AAAA,AAAA,AAAwB9D,AAAYC,AAAWC;;;AAA/C;;;AAAA,AAAAiE,AAAWK;AAAX,AAAA,AAAAJ,AAAA,AAAAC,AAAA,AAAA1B,AAAAwB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAG,AAAAH;AAAA,AAAAtB,AAAA,AAAAwB;;AAAAA;;;AAAA,AAAA,AAAAP,AAAA,AAAA,AAAAK,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAAsB,AAAA;;;AAAAN,AAEA,AAAA,AAAOW,AAAwBC,AAAeC,AAAKC;AAAnD,AACE,AAAMA,AAAU,AAAA,AAAKA;AAArB,AACE,AAAQ,AAAI,AAASF,AAAQE;AAA7B;AAAA,AAAA,AAAA,AAAAC,AAAA;;;AACA,AAAI,AAACtC,AAAE,AAASmC,AAAQE;AAAWF;;AACjC,AAAO1E,AAAM,AAAS0E;AAASzE,AAAK,AAAQyE;AAASxE,AAAO,AAAUwE;;AAAtE,AACE,AACE,AAACnC,AAAEvC,AAAM4E;AAAW,AAAAd,AAAA,AAAA,AAAA,AAAS9D,AAAMC,AAAKC;;AAD1C,AAEE,AAAA,AAACqC,AAAE,AAASoC,AAAK3E;AAAiB,AAAO,AAAA,AAAKA;AAAO,AAAA,AAAKC;AAAxB;;;;;;AAFpC,AAGQ,AAAO,AAAA,AAAKD;AAAOC;AAAK,AAAA,AAAKC;;;;;;;;;;;;AAE7C;;;;;AAAA,AAAO4E,AAIIH;AAJX,AAKE,AAAMI,AAAa,AAACC,AAAK,AAAAlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAzB,AACE,AAAcoB;AAAd,AACE,AAACC,AAAMJ,AAAaN,AAAeE,AAAKO;;AAD1C,AAAAD,AAEGF;;;AAEP,AAAA,AAAOK,AACJC,AAAYC;AADf,AAEE,AAAMC,AAAE,AAACC,AAAKF;AACRG,AAAY,AAAA,AAA6BF;AACzCG,AAAU,AAAA,AAA2BH;AAF3C,AAGE,AAAI,AAAAI,AAAKF;AAAL,AAAA,AAAAE;AAAiBD;;AAAjBC;;;AACF,AAAMC,AAAa,AAACP,AAAAA,AAAAA,AAAYI,AAAAA;AAC1BI,AAAS,AAACC,AAAM,AAACC,AAAI,AAACC,AAAQZ,AAA0BC,AAAa,AAACY,AAAKX;AAC3EY,AAAW,AAACb,AAAAA,AAAAA,AAAYK,AAAAA;AAF9B,AAGE,AAACS,AACC,AAAA,AAACtD,AAAM,AAACuD,AAAMd,AAAaO,AAC3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAACQ,AAAM,AAACb,AAAKF,AACsB,AAAA,AAAOM,AACL,AAAA,AAASA,AACb,AAAA,AAAOM,AACL,AAAA,AAASA;;AAChDZ;;;AAEN,AAAA,AAAOgB,AACJjB,AAAYC;AADf,AAEE,AAAMC,AAAE,AAACC,AAAKF;AACRG,AAAY,AAAA,AAA6BF;AACzCG,AAAU,AAAA,AAA2BH;AAF3C,AAGE,AAAI,AAAAI,AAAKF;AAAL,AAAA,AAAAE;AAAiBD;;AAAjBC;;;AACF,AAAMC,AAAa,AAACP,AAAAA,AAAAA,AAAYI,AAAAA;AAC1BI,AAAS,AAACC,AAAM,AAACC,AAAI,AAACC,AAAQM,AAA0BjB,AAAa,AAAA,AAAUC;AAC/EY,AAAW,AAACb,AAAAA,AAAAA,AAAYK,AAAAA;AAF9B,AAGE,AAACS,AACC,AAAA,AAAC/C,AAAMkC,AAAoBO,AAC3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAACQ,AAAM,AAACb,AAAKF,AACsB,AAAA,AAAOM,AACL,AAAA,AAASA,AACb,AAAA,AAAOM,AACL,AAAA,AAASA;;AAChDZ;;;AAEN;;;;;;;;;;AAAA,AAAMiB,AASH5B,AAAKW;AATR,AAUE,AAAMD,AAAY,AAACP,AAAiBH;AAApC,AACE,AACE,AAAA,AAAMW;AADR;;AAAA,AAGE,AAAA,AAAK,AAACkB,AAAKlB,AAAY,AAAA,AAAMA;AAE7B,AAACgB,AAA0BjB,AAAYC;;AALzC,AAOE,AAAK,AAAC3B,AAAQ2B,AAAY,AAAAvF,AAAU,AAACqG,AAAMd;AAE3C,AAACF,AAA0BC,AAAYC;;AATzC,AAWE,AAAA,AAAA,AAAA,AAAK,AAACmB,AAAYnB,AAAY,AAACkB,AAAK,AAACJ,AAAMd,AAAa,AAAA,AAAM,AAACc,AAAMd;AAErE,AAACoB,AACC,AAACV,AAAQM,AAA0BjB,AAAaC;;AAdpD,AAgBE,AAAK,AAACmB,AAAYnB,AAAY,AAAC3B,AAAQ,AAACyC,AAAMd,AAAa,AAAAvF,AAAU,AAACqG,AAAM,AAACA,AAAMd;AAEnF,AAACoB,AACC,AAACV,AAAQZ,AAA0BC,AAAaC;;AAnBpD,AAqBE,AAAWqB,AAAuBrB;AAElCA;;AAvBF,AA0BE,AAAA,AAACsB","names":["this__4439__auto__","k__4440__auto__","this__4441__auto__","k53961","else__4442__auto__","G__53967","cljs.core/Keyword","index","line","column","cljs.core.get","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce","ret__4461__auto__","p__53972","vec__53977","k__4462__auto__","cljs.core.nth","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__53960","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","coll__4436__auto__","cljs.core/hash-unordered-coll","this53962","other53963","cljs.core._EQ_","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__54017","cljs.core/keyword-identical?","expr__54018","cljs.core.assoc","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","instaparse.line-col/Cursor","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__53964","extmap__4478__auto__","G__54029","cljs.core/record?","instaparse.line-col/->Cursor","instaparse.line-col/map->Cursor","instaparse.line-col/advance-cursor","cursor","text","new-index","js/Error","instaparse.line-col/make-line-col-fn","cursor-state","cljs.core.atom","cljs.core/deref","i","cljs.core.swap_BANG_","instaparse.line-col/hiccup-add-line-col-spans","line-col-fn","parse-tree","m","cljs.core/meta","start-index","end-index","and__4174__auto__","start-cursor","children","cljs.core.doall","cljs.core.map","cljs.core.partial","cljs.core/next","end-cursor","cljs.core/with-meta","cljs.core/first","cljs.core.merge","instaparse.line-col/enlive-add-line-col-spans","instaparse.line-col/add-line-col-spans","cljs.core/map?","cljs.core/sequential?","instaparse.transform/map-preserving-meta","instaparse.gll/Failure","instaparse.util.throw_illegal_argument_exception"],"sourcesContent":["(ns instaparse.line-col\r\n  (:require [instaparse.transform]\r\n            [instaparse.util :refer [throw-illegal-argument-exception]]))\r\n\r\n; Function to annotate parse-tree with line and column metadata.\r\n\r\n(defrecord Cursor [^int index ^long line ^long column])\r\n\r\n(defn- advance-cursor [^Cursor cursor ^String text new-index]\r\n  (let [new-index (int new-index)]\r\n    (assert (<= (.-index cursor) new-index))\r\n    (if (= (.-index cursor) new-index) cursor\r\n      (loop [index (.-index cursor), line (.-line cursor), column (.-column cursor)]\r\n        (cond \r\n          (= index new-index) (Cursor. index line column)\r\n          (= (.charAt text index) \\newline) (recur (inc index) (inc line) 1)\r\n          :else (recur (inc index) line (inc column)))))))\r\n         \r\n(defn- make-line-col-fn\r\n  \"Given a string `text`, returns a function that takes an index into the string,\r\nand returns a cursor, including line and column information.  For efficiency,\r\ninputs must be fed into the function in increasing order.\"\r\n  [^String text]\r\n  (let [cursor-state (atom (Cursor. 0 1 1))]\r\n    (fn line-col [i]\r\n      (swap! cursor-state advance-cursor text i)\r\n      @cursor-state)))                        \r\n\r\n(defn- hiccup-add-line-col-spans\r\n  [line-col-fn parse-tree]\r\n  (let [m (meta parse-tree), \r\n        start-index (:instaparse.gll/start-index m), \r\n        end-index (:instaparse.gll/end-index m)]\r\n    (if (and start-index end-index)\r\n      (let [start-cursor (line-col-fn start-index),\r\n            children (doall (map (partial hiccup-add-line-col-spans line-col-fn) (next parse-tree))),\r\n            end-cursor (line-col-fn end-index)]\r\n        (with-meta\r\n          (into [(first parse-tree)] children)\r\n          (merge (meta parse-tree) \r\n                 {:instaparse.gll/start-line (:line start-cursor)\r\n                  :instaparse.gll/start-column (:column start-cursor)\r\n                  :instaparse.gll/end-line (:line end-cursor)\r\n                  :instaparse.gll/end-column (:column end-cursor)})))\r\n      parse-tree)))\r\n\r\n(defn- enlive-add-line-col-spans\r\n  [line-col-fn parse-tree]\r\n  (let [m (meta parse-tree), \r\n        start-index (:instaparse.gll/start-index m), \r\n        end-index (:instaparse.gll/end-index m)]\r\n    (if (and start-index end-index)\r\n      (let [start-cursor (line-col-fn start-index),\r\n            children (doall (map (partial enlive-add-line-col-spans line-col-fn) (:content parse-tree))),\r\n            end-cursor (line-col-fn end-index)]\r\n        (with-meta\r\n          (assoc parse-tree :content children)\r\n          (merge (meta parse-tree) \r\n                 {:instaparse.gll/start-line (:line start-cursor)\r\n                  :instaparse.gll/start-column (:column start-cursor)\r\n                  :instaparse.gll/end-line (:line end-cursor)\r\n                  :instaparse.gll/end-column (:column end-cursor)})))\r\n      parse-tree)))\r\n  \r\n(defn add-line-col-spans\r\n  \"Given a string `text` and a `parse-tree` for text, return parse tree\r\nwith its metadata annotated with line and column info. The info can\r\nthen be found in the metadata map under the keywords:\r\n \r\n:instaparse.gll/start-line, :instaparse.gll/start-column,\r\n:instaparse.gll/end-line, :instaparse.gll/end-column\r\n\r\nThe start is inclusive, the end is exclusive. Lines and columns are 1-based.\"\r\n  [text parse-tree]\r\n  (let [line-col-fn (make-line-col-fn text)]\r\n    (cond\r\n      (nil? parse-tree) nil\r\n      \r\n      (and (map? parse-tree) (:tag parse-tree))\r\n      ; This is an enlive tree-seq\r\n      (enlive-add-line-col-spans line-col-fn parse-tree)     \r\n      \r\n      (and (vector? parse-tree) (keyword? (first parse-tree)))\r\n      ; This is a hiccup tree-seq\r\n      (hiccup-add-line-col-spans line-col-fn parse-tree)\r\n      \r\n      (and (sequential? parse-tree) (map? (first parse-tree)) (:tag (first parse-tree)))\r\n      ; This is an enlive tree with hidden root tag\r\n      (instaparse.transform/map-preserving-meta \r\n        (partial enlive-add-line-col-spans line-col-fn) parse-tree)\r\n      \r\n      (and (sequential? parse-tree) (vector? (first parse-tree)) (keyword? (first (first parse-tree))))\r\n      ; This is a hiccup tree with hidden root tag\r\n      (instaparse.transform/map-preserving-meta \r\n        (partial hiccup-add-line-col-spans line-col-fn) parse-tree)\r\n\r\n      (instance? instaparse.gll.Failure parse-tree)\r\n      ; pass failures through unchanged\r\n      parse-tree\r\n    \r\n      :else\r\n      (throw-illegal-argument-exception\r\n        \"Invalid parse-tree, not recognized as either enlive or hiccup format.\"))))\r\n"]}