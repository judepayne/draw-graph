{"version":3,"sources":["instaparse/line_col.cljc"],"mappings":";;;;AAMA,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAC,AAAW2E;;AAAX,AAAA,AAAA5E,AAAA;AAAA,AAAA,AAAAA,AAAAC,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAWwE;;AAAX,AAAA,AAAA1E,AAAA;AAAA,AAAA,AAAAG,AAAAF;AAAAE,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAAE;;;AAAA;AAAAC;;;AAAA;AAAAC;;;;AAAA,AAAAC,AAAAC,AAAAR,AAAAC;;;;;AAAA,AAAA,AAAA,AAAA,AAAAQ,AAAAC,AAAAC,AAAW8D;;AAAX,AAAA,AAAAhE,AAAA;AAAA,AAAA,AAAAG,AAAA;AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAC,AAAAF,AAAA,AAAA;AAAAG,AAAA,AAAAD,AAAAF,AAAA,AAAA;AAAA,AAAA,AAAAL,AAAAA,AAAAG,AAAAG,AAAAE,AAAAR,AAAAG,AAAAG,AAAAE;;AAAAP,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAU,AAAAC,AAAAC,AAAWoD;;AAAX,AAAA,AAAAtD,AAAA;AAAA,AAAA,AAAAG,AAAA;AAAAC;AAAA,AAAA,AAAAC,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAE;;;AAAA,AAAA,AAAAC,AAAAJ,AAAAE,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAI,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAA,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApB,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAAmB,AAAW8C;;AAAX,AAAA,AAAA9C,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAqB,AAAArB,AAAA,AAAAsB;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAW0C;;AAAX,AAAA,AAAA1C,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWwC;;AAAX,AAAA,AAAAxC,AAAA;AAAA,AAAA,AAAA7B,AAAAC,AAAAC,AAAA0B,AAAAxB,AAAA0B,AAAWuC;;;AAAX,AAAA,AAAA,AAAA,AAAAtC,AAAWsC;;AAAX,AAAA,AAAAtC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA5B;;;AAAA,AAAA,AAAA,AAAA,AAAA6B,AAAWoC;;AAAX,AAAA,AAAApC,AAAA;AAAA,AAAA,AAAAC,AAAAJ;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;AAAAA;;AAAA,AAAAA,AAAA,AAAAC,AAAA;AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAD;;;AAAA,AAAA,AAAAD,AAAAF;;AAAA,AAAA,AAAAH,AAAAI;;AAAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAAC,AAAW8B;;AAAX,AAAA,AAAA/B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAW2B;;AAAX,AAAA,AAAA5B,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAL,AAAAb,AAAAc;;AAAA,AAAA1C,AAAAC,AAAAC,AAAA0B,AAAA,AAAAmB,AAAA,AAAAH,AAAAxC,AAAAsC,AAAA,AAAW2B;;;;AAAX,AAAA,AAAA,AAAA,AAAArB,AAAAC,AAAA1B,AAAW8C;;AAAX,AAAA,AAAArB,AAAA;AAAA,AAAA,AAAAE,AAAAC;AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAAI,AAAA;AAAAC,AAAAF;AAAA,AAAA,AAAAF,AAAAA,AAAAG,AAAAC,AAAAJ,AAAAG,AAAAC;;AAAA,AAAA/B,AAAAtB,AAAAC,AAAA0B,AAAAxB,AAAA,AAAWiE;;AAAX,AAAA,AAAAd,AAAA;AAAAC,AAAAJ;AAAA,AAAA,AAAAF,AAAAA,AAAAK,AAAAC,AAAAN,AAAAK,AAAAC;;AAAA,AAAAxD,AAAAuB,AAAArB,AAAA0B,AAAAxB,AAAA,AAAWiE;;AAAX,AAAA,AAAAZ,AAAA;AAAAC,AAAAN;AAAA,AAAA,AAAAF,AAAAA,AAAAO,AAAAC,AAAAR,AAAAO,AAAAC;;AAAA,AAAA1D,AAAAC,AAAAsB,AAAAK,AAAAxB,AAAA,AAAWiE;;AAAX,AAAArE,AAAAC,AAAAC,AAAA0B,AAAA,AAAA+B,AAAAvD,AAAA6C,AAAA1B,AAAA,AAAW8C;;;;;;AAAX,AAAA,AAAA,AAAA,AAAAT,AAAWS;;AAAX,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAxC,AAAA,AAAA,AAAAyC,AAAA,AAAA9D,AAAA,AAAA,AAAA8D,AAAA,AAAA7D,AAAA,AAAA,AAAA6D,AAAA,AAAA5D,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAA2D,AAAAxC,AAAW8C;;AAAX,AAAA,AAAAN,AAAA;AAAA,AAAA,AAAA/D,AAAAC,AAAAC,AAAAqB,AAAAnB,AAAA0B,AAAWuC;;;AAAX,AAAA,AAAA,AAAA,AAAAL,AAAAC,AAAWI;;AAAX,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAAD;AAAA,AAAAD,AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;;AAAA,AAAAzD,AAAA4D,AAAAJ,AAAAC;;;;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAF,AAAA,AAAAC,AAAAE;AAAA,AAAA,AAAAC,AAAAD,AAAA;;;AAAA;;;AAAA,AAAWO,AAAa/E,AAAYC,AAAWC;AAA/C,AAAA,AAAAmE,AAAA,AAAA,AAAA,AAAwBrE,AAAYC,AAAWC;;;AAA/C;;;AAAA,AAAAwE,AAAWM;AAAX,AAAA,AAAAL,AAAA,AAAAC,AAAA,AAAAC,AAAAH,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAI,AAAAJ;AAAA,AAAA5B,AAAA,AAAA8B;;AAAAA;;;AAAA,AAAA,AAAAP,AAAA,AAAA,AAAAK,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3B,AAAA4B,AAAA;;;AAAAN,AAEA,AAAA,AAAOY,AAAwBC,AAAeC,AAAKC;AAAnD,AACE,AAAMA,AAAU,AAAA,AAAKA;AAArB,AACE,AAAQ,AAAI,AAASF,AAAQE;AAA7B;AAAA,AAAA,AAAA,AAAAC,AAAA;;;AACA,AAAI,AAAC7C,AAAE,AAAS0C,AAAQE;AAAWF;;AACjC,AAAOlF,AAAM,AAASkF;AAASjF,AAAK,AAAQiF;AAAShF,AAAO,AAAUgF;;AAAtE,AACE,AACE,AAAC1C,AAAExC,AAAMoF;AAAW,AAAAf,AAAA,AAAA,AAAA,AAASrE,AAAMC,AAAKC;;AAD1C,AAEE,AAAA,AAACsC,AAAE,AAAS2C,AAAKnF;AAAiB,AAAO,AAAA,AAAKA;AAAO,AAAA,AAAKC;AAAxB;;;;;;AAFpC,AAGQ,AAAO,AAAA,AAAKD;AAAOC;AAAK,AAAA,AAAKC;;;;;;;;;;;;AAE7C;;;;;AAAA,AAAOoF,AAIIH;AAJX,AAKE,AAAMI,AAAa,AAACC,AAAK,AAAAnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAzB,AACE;AAAcqB;AAAd,AACE,AAACC,AAAMJ,AAAaN,AAAeE,AAAKO;;AAD1C,AAAAD,AAEGF;;;;AAEP,AAAA,AAAOK,AACJC,AAAYC;AADf,AAEE,AAAMC,AAAE,AAACC,AAAKF;AACRG,AAAY,AAAA,AAA6BF;AACzCG,AAAU,AAAA,AAA2BH;AAF3C,AAGE,AAAI,AAAAI,AAAKF;AAAL,AAAA,AAAAE;AAAiBD;;AAAjBC;;;AACF,AAAMC,AAAa,AAACP,AAAAA,AAAAA,AAAYI,AAAAA;AAC1BI,AAAS,AAACC,AAAM,AAACC,AAAI,AAACC,AAAQZ,AAA0BC,AAAa,AAACY,AAAKX;AAC3EY,AAAW,AAACb,AAAAA,AAAAA,AAAYK,AAAAA;AAF9B,AAGE,AAACS,AACC,AAAA,AAAC7D,AAAM,AAAC8D,AAAMd,AAAaO,AAC3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAACQ,AAAM,AAACb,AAAKF,AACsB,AAAA,AAAOM,AACL,AAAA,AAASA,AACb,AAAA,AAAOM,AACL,AAAA,AAASA;;AAChDZ;;;AAEN,AAAA,AAAOgB,AACJjB,AAAYC;AADf,AAEE,AAAMC,AAAE,AAACC,AAAKF;AACRG,AAAY,AAAA,AAA6BF;AACzCG,AAAU,AAAA,AAA2BH;AAF3C,AAGE,AAAI,AAAAI,AAAKF;AAAL,AAAA,AAAAE;AAAiBD;;AAAjBC;;;AACF,AAAMC,AAAa,AAACP,AAAAA,AAAAA,AAAYI,AAAAA;AAC1BI,AAAS,AAACC,AAAM,AAACC,AAAI,AAACC,AAAQM,AAA0BjB,AAAa,AAAA,AAAUC;AAC/EY,AAAW,AAACb,AAAAA,AAAAA,AAAYK,AAAAA;AAF9B,AAGE,AAACS,AACC,AAAA,AAAChD,AAAMmC,AAAoBO,AAC3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAACQ,AAAM,AAACb,AAAKF,AACsB,AAAA,AAAOM,AACL,AAAA,AAASA,AACb,AAAA,AAAOM,AACL,AAAA,AAASA;;AAChDZ;;;AAEN;;;;;;;;;;AAAA,AAAMiB,AASH5B,AAAKW;AATR,AAUE,AAAMD,AAAY,AAACP,AAAiBH;AAApC,AACE,AACE,AAAA,AAAMW;AADR;;AAAA,AAGE,AAAAK,AAAK,AAACa,AAAKlB;AAAX,AAAA,AAAAK;AAAuB,AAAA,AAAML;;AAA7BK;;;AAEA,AAACW,AAA0BjB,AAAYC;;AALzC,AAOE,AAAK,AAAC5B,AAAQ4B,AAAY,AAAA/F,AAAU,AAAC6G,AAAMd;AAE3C,AAACF,AAA0BC,AAAYC;;AATzC,AAWE,AAAAK,AAAK,AAACc,AAAYnB;AAAlB,AAAA,AAAAK;AAAA,AAAAA,AAA8B,AAACa,AAAK,AAACJ,AAAMd;AAA3C,AAAA,AAAAK;AAAwD,AAAA,AAAM,AAACS,AAAMd;;AAArEK;;;AAAAA;;;AAEA,AAACe,AACC,AAACV,AAAQM,AAA0BjB,AAAaC;;AAdpD,AAgBE,AAAK,AAACmB,AAAYnB,AAAY,AAAC5B,AAAQ,AAAC0C,AAAMd,AAAa,AAAA/F,AAAU,AAAC6G,AAAM,AAACA,AAAMd;AAEnF,AAACoB,AACC,AAACV,AAAQZ,AAA0BC,AAAaC;;AAnBpD,AAqBE,AAAWqB,AAAuBrB;AAElCA;;AAvBF,AA0BE,AAAA,AAACsB","names":["this__4385__auto__","k__4386__auto__","this__4387__auto__","k49578","else__4388__auto__","G__49596","cljs.core/Keyword","index","line","column","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__49597","vec__49599","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__49577","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__49621","coll__4382__auto__","cljs.core/hash-unordered-coll","this49579","other49580","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__49635","cljs.core/keyword-identical?","expr__49636","G__49638","G__49639","G__49640","G__49641","G__49649","G__49650","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","instaparse.line-col/Cursor","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__49588","extmap__4424__auto__","G__49669","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","instaparse.line-col/->Cursor","instaparse.line-col/map->Cursor","instaparse.line-col/advance-cursor","cursor","text","new-index","js/Error","instaparse.line-col/make-line-col-fn","cursor-state","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","i","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","instaparse.line-col/hiccup-add-line-col-spans","line-col-fn","parse-tree","m","cljs.core/meta","start-index","end-index","and__4120__auto__","start-cursor","children","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/next","end-cursor","cljs.core/with-meta","cljs.core/first","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","instaparse.line-col/enlive-add-line-col-spans","instaparse.line-col/add-line-col-spans","cljs.core/map?","cljs.core/sequential?","instaparse.transform/map-preserving-meta","instaparse.gll/Failure","instaparse.util.throw_illegal_argument_exception.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns instaparse.line-col\r\n  (:require [instaparse.transform]\r\n            [instaparse.util :refer [throw-illegal-argument-exception]]))\r\n\r\n; Function to annotate parse-tree with line and column metadata.\r\n\r\n(defrecord Cursor [^int index ^long line ^long column])\r\n\r\n(defn- advance-cursor [^Cursor cursor ^String text new-index]\r\n  (let [new-index (int new-index)]\r\n    (assert (<= (.-index cursor) new-index))\r\n    (if (= (.-index cursor) new-index) cursor\r\n      (loop [index (.-index cursor), line (.-line cursor), column (.-column cursor)]\r\n        (cond \r\n          (= index new-index) (Cursor. index line column)\r\n          (= (.charAt text index) \\newline) (recur (inc index) (inc line) 1)\r\n          :else (recur (inc index) line (inc column)))))))\r\n         \r\n(defn- make-line-col-fn\r\n  \"Given a string `text`, returns a function that takes an index into the string,\r\nand returns a cursor, including line and column information.  For efficiency,\r\ninputs must be fed into the function in increasing order.\"\r\n  [^String text]\r\n  (let [cursor-state (atom (Cursor. 0 1 1))]\r\n    (fn line-col [i]\r\n      (swap! cursor-state advance-cursor text i)\r\n      @cursor-state)))                        \r\n\r\n(defn- hiccup-add-line-col-spans\r\n  [line-col-fn parse-tree]\r\n  (let [m (meta parse-tree), \r\n        start-index (:instaparse.gll/start-index m), \r\n        end-index (:instaparse.gll/end-index m)]\r\n    (if (and start-index end-index)\r\n      (let [start-cursor (line-col-fn start-index),\r\n            children (doall (map (partial hiccup-add-line-col-spans line-col-fn) (next parse-tree))),\r\n            end-cursor (line-col-fn end-index)]\r\n        (with-meta\r\n          (into [(first parse-tree)] children)\r\n          (merge (meta parse-tree) \r\n                 {:instaparse.gll/start-line (:line start-cursor)\r\n                  :instaparse.gll/start-column (:column start-cursor)\r\n                  :instaparse.gll/end-line (:line end-cursor)\r\n                  :instaparse.gll/end-column (:column end-cursor)})))\r\n      parse-tree)))\r\n\r\n(defn- enlive-add-line-col-spans\r\n  [line-col-fn parse-tree]\r\n  (let [m (meta parse-tree), \r\n        start-index (:instaparse.gll/start-index m), \r\n        end-index (:instaparse.gll/end-index m)]\r\n    (if (and start-index end-index)\r\n      (let [start-cursor (line-col-fn start-index),\r\n            children (doall (map (partial enlive-add-line-col-spans line-col-fn) (:content parse-tree))),\r\n            end-cursor (line-col-fn end-index)]\r\n        (with-meta\r\n          (assoc parse-tree :content children)\r\n          (merge (meta parse-tree) \r\n                 {:instaparse.gll/start-line (:line start-cursor)\r\n                  :instaparse.gll/start-column (:column start-cursor)\r\n                  :instaparse.gll/end-line (:line end-cursor)\r\n                  :instaparse.gll/end-column (:column end-cursor)})))\r\n      parse-tree)))\r\n  \r\n(defn add-line-col-spans\r\n  \"Given a string `text` and a `parse-tree` for text, return parse tree\r\nwith its metadata annotated with line and column info. The info can\r\nthen be found in the metadata map under the keywords:\r\n \r\n:instaparse.gll/start-line, :instaparse.gll/start-column,\r\n:instaparse.gll/end-line, :instaparse.gll/end-column\r\n\r\nThe start is inclusive, the end is exclusive. Lines and columns are 1-based.\"\r\n  [text parse-tree]\r\n  (let [line-col-fn (make-line-col-fn text)]\r\n    (cond\r\n      (nil? parse-tree) nil\r\n      \r\n      (and (map? parse-tree) (:tag parse-tree))\r\n      ; This is an enlive tree-seq\r\n      (enlive-add-line-col-spans line-col-fn parse-tree)     \r\n      \r\n      (and (vector? parse-tree) (keyword? (first parse-tree)))\r\n      ; This is a hiccup tree-seq\r\n      (hiccup-add-line-col-spans line-col-fn parse-tree)\r\n      \r\n      (and (sequential? parse-tree) (map? (first parse-tree)) (:tag (first parse-tree)))\r\n      ; This is an enlive tree with hidden root tag\r\n      (instaparse.transform/map-preserving-meta \r\n        (partial enlive-add-line-col-spans line-col-fn) parse-tree)\r\n      \r\n      (and (sequential? parse-tree) (vector? (first parse-tree)) (keyword? (first (first parse-tree))))\r\n      ; This is a hiccup tree with hidden root tag\r\n      (instaparse.transform/map-preserving-meta \r\n        (partial hiccup-add-line-col-spans line-col-fn) parse-tree)\r\n\r\n      (instance? instaparse.gll.Failure parse-tree)\r\n      ; pass failures through unchanged\r\n      parse-tree\r\n    \r\n      :else\r\n      (throw-illegal-argument-exception\r\n        \"Invalid parse-tree, not recognized as either enlive or hiccup format.\"))))\r\n"]}