{"version":3,"sources":["lib_draw_graph/parser.cljc"],"mappings":"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","names":["lib-draw-graph.parser/third","coll","e36075","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","js/Error","e","lib-draw-graph.parser/*part-sep*","lib-draw-graph.parser/*part-sep-meta*","lib-draw-graph.parser/exp","lib-draw-graph.parser/split-parts","s","clojure.string.split.cljs$core$IFn$_invoke$arity$3","lib-draw-graph.parser/split-parts-meta","lib-draw-graph.parser/regex-number","lib-draw-graph.parser/whitespace","instaparse.core/parser","lib-draw-graph.parser/regex-text","lib-draw-graph.parser/regex-kvs","lib-draw-graph.parser/regex-kvs-esc","lib-draw-graph.parser/regex-all","lib-draw-graph.parser/unescapes","lib-draw-graph.parser/csv-grammar","instaparse.core.parser.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.parser/csv-line-parser","lib-draw-graph.parser/parse-header","state","G__36078","G__36079","instaparse.core/transform","args","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/keyword","arg","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lib-draw-graph.parser/attribute-map","p__36082","map__36083","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq36080","G__36081","cljs.core/first","cljs.core/next","self__4717__auto__","meta?","s'","clojure.string/trim","n","cljs.core/count","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/even?","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__36085","vec__36086","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","acc","k","v","k'","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","temp__5718__auto__","old","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.util/err","lib-draw-graph.parser/pairs","lib-draw-graph.parser/conjcat","coll1","coll2","cljs.core/empty?","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.parser/extract","cur","cljs.core.get.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.parser/map-vals","m","f","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__36110","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__36112","cljs.core/chunk-buffer","i__36111","vec__36114","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36109","cljs.core/chunk-rest","vec__36120","cljs.core/cons","cljs.core/rest","lib-draw-graph.parser/unescape","smap","p__36127","vec__36128","clojure.string/replace","lib-draw-graph.parser/unesc","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.parser/unescape-edge","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","lib-draw-graph.parser/synonym?","and__4120__auto__","cljs.core/re-matches","lib-draw-graph.parser/parse-node","nd","G__36131","G__36132","cljs.core/zipmap","G__36135","cljs.core/second","node","G__36137","lib_draw_graph.util.deep_merge.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.parser/parse-edge","nk","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","sk","edge","G__36146","G__36147","G__36153","lib_draw_graph.parser.attribute_map.cljs$core$IFn$_invoke$arity$variadic","edge'","G__36158","G__36160","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","with-styles","styles","a","c","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","s1","cljs.core/assoc-in","cljs.core/List","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","cljs.core/merge","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","lib-draw-graph.parser/parse-cluster-style","cluster","G__36179","G__36180","lib-draw-graph.parser/parse-cluster-parent","relns","G__36188","G__36189","lib-draw-graph.parser/parse-cluster-edge","G__36193","G__36194","lib-draw-graph.parser/parse-comments","lib-draw-graph.parser/parse-lines","lines","line-num","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","p","instaparse.core/failure?","cljs.core/deref","line","G__36202","cljs.core/Keyword","lib-draw-graph.parser/parse-csv","clojure.string/split-lines","lib-draw-graph.parser/parse-json","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","lib-draw-graph.parser/replace-synonyms-edges","parsed","synonyms","syn->node","syn","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","edges","p1__36215#","src","edge''","dst","lib-draw-graph.parser/replace-synonyms-nodes","nodes","p__36230","vec__36231","lib-draw-graph.parser/parse-csv-or-json","fmt","parsed0","G__36234","parsed1","cljs.core/chunk-first"],"sourcesContent":["(ns ^{:doc \"Parsers for input data.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.parser\n  (:require [clojure.string          :as str]\n            [lib-draw-graph.util     :as util]\n            #?(:clj [clojure.data.json        :as json])\n            #?(:clj [instaparse.core :as insta :refer [defparser]]\n               :cljs [instaparse.core :as insta :refer-macros [defparser]])))\n\n\n;; ----------------------\n;; CSV format parsser\n\n\n(defn- third\n  \"Returns third element of coll, or nil.\"\n  [coll]\n  (try (nth coll 2)\n       #?(:clj (catch Exception e nil)\n          :cljs (catch js/Error e nil))))\n\n\n(def ^:dynamic *part-sep* #\":\")   ;; separator for keys/ values in CSV\n\n;(def ^:dynamic *part-sep-meta* #\"(?<!\\\\):(?!//)\")  ;; lookbehind no-worky in js\n(def ^:dynamic *part-sep-meta* #\":(?!//)\")  ;; exception for links\n\n(def exp #\"[^\\\\\\\\]:\")\n\n(defn split-parts [s] (str/split s *part-sep* -1)) ;; -1 to catch trailing empties\n(defn split-parts-meta [s] (str/split s *part-sep-meta* -1))\n\n\n(def regex-number \"#'-?[0-9]\\\\d*(\\\\.\\\\d+)?'\")\n\n\n(def whitespace\n  (insta/parser\n    \"whitespace = #'\\\\s+'\"))\n\n\n(def regex-text \"#'[\\\\+\\\\w\\\\d\\\\s\\\\n\\\\.\\\\(\\\\)@&<>\\\\'#=/-]+'\")\n\n ;; no support for escaping\n(def regex-kvs \"#'[\\\\+\\\\w\\\\d\\\\s\\\\n\\\\.\\\\(\\\\)@&:<>\\\\'#=/-]+'\")\n\n;; support for escaped , \\n : and  |\n;; escaped | doesn't work\n(def regex-kvs-esc\n  \"#'([/\\\\+\\\\?\\\\w\\\\d\\\\s\\\\n\\\\.\\\\(\\\\)!@&:\\\\[\\\\]\\\\(\\\\)<>\\\\'#=/-]|(\\\\\\\\,)|(\\\\\\\\n))*'\")\n\n\n(def regex-all \"#'(.*)'\")\n\n\n(def unescapes\n  {\"\\\\,\" \",\"\n   \"\\\\:\" \":\"})\n\n\n(def csv-grammar\n  (str\n   \"S = <';'>  Cmt |\n        <'h,'> H   |\n        <'n,'> N   |\n        <'e,'> E   |\n        <'ce,'> Ce |\n        <'cp,'> Cp |\n        <'cs,'> Cs \n    <KVs-esc> = \" regex-kvs-esc \"\n    <KVs> = \" regex-kvs  \"  \n    E = Node <','> Node (<','> Edge-meta? (<'|'> Edge-style)?)?\n    Edge-style = KVs\n    Edge-meta = KVs-esc\n    N = (Synonym <','>)? KVs-esc <'|'> Node-style\n    Synonym = #'node[0-9a-zA-Z]*'\n    Node = Synonym | KVs-esc (<'|'> Node-style)?\n    Node-style = KVs\n    H = \" regex-kvs \"\n    Ce = KVs\n    Cp = KVs\n    Cs = \" regex-text \"<'|'>\" regex-kvs \"\n    Cmt = \" regex-all))\n\n\n(defparser csv-line-parser\n  csv-grammar\n  :auto-whitespace whitespace)\n\n\n(defn parse-header [state s]\n  {:header\n   (insta/transform\n    {:H (fn [args] (map keyword (split-parts args)))\n     :S (fn [arg] arg)}\n    s)})\n\n\n(defn attribute-map [s & {:keys [meta?] :or {meta? false}}]\n  (let [s' (str/trim s)\n        args (if meta? (split-parts-meta s') (split-parts s'))\n        n (count args)]\n    (cond\n      (= \"\" (first args)) nil\n      (even? n) (reduce\n                 (fn [acc [k v]]\n                   ;; make comma separated list if key exists already\n                   (let [k' (keyword k)]\n                     (if-let [old (k' acc)]\n                       (assoc acc k' (str old \",\" v))\n                       (assoc acc k' v))))\n                 {}\n                 (partition 2 args))\n      :else (throw (util/err (str \"Error parsing: \" s \" > Must be an even number of parts\"))))))\n\n\n(defn pairs [s]\n  (let [args (split-parts s)]\n    (if (even? (count args))\n      (partition 2 args)\n      (throw (util/err (str \"Error parsing: \" s \" > Must be an even number of parts\"))))))\n\n\n(defn conjcat [coll1 coll2]\n  (if (empty? coll1) coll1\n      (concat coll1 coll2)))\n\n\n(defn extract [k coll]\n  (reduce (fn [acc cur]\n            (if (get cur k) (get cur k) acc))\n          nil\n          coll))\n\n\n(defn map-vals [m f]\n  (into {} (for [[k v] m] [k (f v)])))\n\n\n(defn unescape [smap s]\n  (reduce\n   (fn [acc [k v]]\n     (str/replace acc k v))\n   s\n   smap))\n\n(def unesc (partial unescape unescapes))\n\n\n(defn unescape-edge [e]\n  (reduce\n   (fn [acc cur]\n     (if (nil? cur) nil\n         (update-in acc [:edges cur] map-vals (partial unescape unescapes))))\n   e\n   [:src :dst :meta]))\n\n\n(defn synonym?\n  [s]\n  (if\n      (and\n       (string? s)\n       (re-matches #\"node[0-9a-zA-Z]*\" s))\n    true\n    false))\n\n\n(defn parse-node [state s]\n  (let [nd (insta/transform\n            {:Node-style attribute-map\n             :Synonym (fn [arg] arg)\n             :N (fn [& args]\n                  (cond\n                    (= 2 (count args))\n                    {:nodes {:node (zipmap (:header state) (split-parts-meta (unesc (first args))))\n                             :style (second args)}}\n                    (= 3 (count args))\n                    (let [node (zipmap (:header state) (split-parts-meta (unesc (second args))))]\n                      {:synonyms {(first args) node}\n                       :nodes {node (nth args 2)}})\n                    ))}\n            s)]\n    (util/deep-merge state nd)))\n\n\n(defn parse-edge [state s]\n  (let [nk (keyword (gensym \"node\"))\n        sk (keyword (gensym \"style\"))\n        edge (insta/transform\n              {:Node-style attribute-map\n               :Node (fn [& args]\n                       (if (synonym? (first args))\n                         {nk (first args)\n                          sk (if (some? (second args)) (second args))}\n                         {nk (zipmap (:header state) (split-parts-meta (unesc (first args))))\n                          sk (if (some? (second args)) (second args))}))\n               :Edge-meta (fn [& args]\n                            {:edge-meta (attribute-map (first args) :meta? true)})\n               :Edge-style (fn [& args]\n                             {:edge-style (attribute-map (first args) :meta? true)})\n               :E (fn [& args] args)}\n              s)\n        edge' edge\n        edge {:edges\n              {:src (nk (first edge'))\n               :dst (nk (second edge'))\n               :meta (extract :edge-meta (drop 2 edge'))\n               :style (extract :edge-style (drop 2 edge'))}}\n      ;  edge (unescape-edge edge)\n        with-styles (let [styles \n                          (reduce (fn [a c]\n                                    (if (sk c)\n                                      (assoc a (nk c) (sk c)) a))\n                                  nil edge')]\n                      (if styles (merge edge {:nodes styles}) edge))]\n    (if (nil? (:edges state))\n      (let [s1 (assoc-in state [:edges] (list (:edges with-styles)))]\n        (if (:nodes with-styles)\n          (merge-with merge s1 (dissoc with-styles :edges))\n          s1))\n      (let [s1 (merge-with conj state {:edges (:edges edge)})]\n        (if (:nodes with-styles)\n          (util/deep-merge s1 (dissoc with-styles :edges))\n          s1)))))\n\n\n(defn parse-cluster-style [state s]\n  (let [cluster (insta/transform\n                 {:Cs (fn [& args]\n                        {(first args)\n                         (attribute-map (second args))})}\n                 s)]\n    (merge-with merge state {:cluster-styles cluster})))\n\n\n(defn parse-cluster-parent [state s]\n  (let [relns (insta/transform\n               {:Cp pairs}\n               s)]\n    (merge-with conjcat state {:cluster-parents relns})))\n\n\n(defn parse-cluster-edge [state s]\n  (let [relns (insta/transform\n               {:Ce pairs}\n               s)]\n    (merge-with conjcat state {:cluster-edges relns})))\n\n\n(defn parse-comments [state s]\n  (merge-with conjcat state {:commented-out s}))\n\n\n\n(defn parse-lines [lines]\n  (let [line-num (atom 0)\n        m (reduce\n           (fn [acc cur]\n             (swap! line-num inc)\n             (let [p (csv-line-parser cur)]\n               (if (insta/failure? p)\n                 (throw (util/err (str \"Parsing error with line number \" @line-num \" >> \" cur)))\n                 (let [line (second p)]\n                   (case (first line)\n                     :H  (parse-header acc line)\n                     :N  (parse-node acc line)\n                     :E  (parse-edge acc line)\n                     :Cs (parse-cluster-style acc line)\n                     :Cp (parse-cluster-parent acc line)\n                     :Ce (parse-cluster-edge acc line)\n                     :Cmt (parse-comments acc line)\n                     (throw (util/err (str \"No parser for line \" @line-num \" >> \" cur))))))))\n           {}\n           lines)]\n    m))\n\n\n(defn parse-csv\n  \"Parses a csv format string\"\n  [s]\n  (parse-lines (str/split-lines s)))\n\n\n;; ----------------------\n;; JSON format parser\n\n(defn parse-json\n  \"parses a json format string\"\n  [s]\n  #?(:clj (json/read-str s)\n     :cljs (js->clj s)))\n\n\n;; ----------------------\n;; Main api\n\n(defn- replace-synonyms-edges\n  \"Replaces nodes synonyms in edges.\"\n  [parsed]\n  (let [synonyms (:synonyms parsed)\n        syn->node (fn [syn]\n                    (if-let [node (get synonyms syn)]\n                      node\n                      (throw (util/err (str \"synonym \" syn \" in edge can't be found.\") ))))]\n    (update-in parsed [:edges]\n               (fn [edges]\n                 (map\n                  #(let [edge %\n                         edge'  (let [src (:src edge)]\n                                  (if (synonym? src)\n                                    (assoc edge :src (syn->node src))\n                                    edge))\n                         edge'' (let [dst (:dst edge')]\n                                  (if (synonym? dst)\n                                    (assoc edge' :dst (syn->node dst))\n                                    edge'))]\n                     edge'')\n                  edges)))))\n\n\n(defn- replace-synonyms-nodes\n  [parsed]\n  (let [synonyms (:synonyms parsed)\n        syn->node (fn [syn]\n                    (if-let [node (get synonyms syn)]\n                      node\n                      (throw (util/err (str \"synonym \" syn \" in edge can't be found.\") ))))]\n    (update-in parsed [:nodes]\n               (fn [nodes]\n                 (reduce\n                  (fn [m [k v]]\n                    (if (synonym? k)\n                      (merge-with merge\n                                  (dissoc m k)\n                                  {(syn->node k) v})\n                      m))\n                  nodes\n                  nodes)))))\n\n\n\n(defn parse-csv-or-json\n  [s fmt]\n  (let [parsed0\n        (case fmt\n          :json (parse-json s)\n          :csv  (parse-csv s)\n          (throw (util/err \"format should be either :json or :csv\")))\n         parsed1 (replace-synonyms-edges parsed0)                   \n         parsed (dissoc (replace-synonyms-nodes parsed1) :synonyms)]\n    (comment #?(:clj (spit \"test/ex/tmp.json\" (json/write-str parsed))\n                :cljs (js/console.log (clj->js parsed))))\n    parsed))\n\n\n"]}