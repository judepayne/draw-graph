{"version":3,"sources":["lib_draw_graph/parser.cljc"],"mappings":"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","names":["lib-draw-graph.parser/third","coll","e36085","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","js/Error","e","lib-draw-graph.parser/*part-sep*","lib-draw-graph.parser/*part-sep-meta*","lib-draw-graph.parser/exp","lib-draw-graph.parser/split-parts","s","clojure.string.split.cljs$core$IFn$_invoke$arity$3","lib-draw-graph.parser/split-parts-meta","lib-draw-graph.parser/regex-number","lib-draw-graph.parser/whitespace","instaparse.core/parser","lib-draw-graph.parser/regex-text","lib-draw-graph.parser/regex-kvs","lib-draw-graph.parser/regex-kvs-esc","lib-draw-graph.parser/regex-all","lib-draw-graph.parser/unescapes","lib-draw-graph.parser/csv-grammar","instaparse.core.parser.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.parser/csv-line-parser","lib-draw-graph.parser/parse-header","state","G__36096","G__36097","instaparse.core/transform","args","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/keyword","arg","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lib-draw-graph.parser/attribute-map","p__36101","map__36102","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq36098","G__36099","cljs.core/first","cljs.core/next","self__4717__auto__","meta?","n","cljs.core/count","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/even?","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__36106","vec__36107","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","acc","k","v","k'","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","temp__5718__auto__","old","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.util/err","lib-draw-graph.parser/pairs","lib-draw-graph.parser/conjcat","coll1","coll2","cljs.core/empty?","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.parser/extract","cur","cljs.core.get.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.parser/map-vals","m","f","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__36120","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__36122","cljs.core/chunk-buffer","i__36121","vec__36127","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36119","cljs.core/chunk-rest","vec__36134","cljs.core/cons","cljs.core/rest","lib-draw-graph.parser/unescape","smap","p__36139","vec__36142","clojure.string/replace","lib-draw-graph.parser/unesc","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.parser/unescape-edge","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","lib-draw-graph.parser/parse-edge","nk","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","sk","edge","G__36153","G__36154","cljs.core/zipmap","G__36158","cljs.core/second","lib_draw_graph.parser.attribute_map.cljs$core$IFn$_invoke$arity$variadic","edge'","G__36178","G__36182","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","with-styles","styles","a","c","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","s1","cljs.core/assoc-in","cljs.core/List","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","cljs.core/merge","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","lib_draw_graph.util.deep_merge.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.parser/parse-cluster-style","cluster","G__36200","G__36201","lib-draw-graph.parser/parse-cluster-parent","relns","G__36208","G__36209","lib-draw-graph.parser/parse-cluster-edge","G__36216","G__36217","lib-draw-graph.parser/parse-comments","lib-draw-graph.parser/parse-lines","lines","line-num","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","p","instaparse.core/failure?","cljs.core/deref","line","G__36222","cljs.core/Keyword","cljs.core/chunk-first"],"sourcesContent":["(ns ^{:doc \"Parsers for input data.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.parser\n  (:require [clojure.string          :as str]\n            [lib-draw-graph.util     :as util]\n            #?(:clj [instaparse.core :as insta :refer [defparser]]\n               :cljs [instaparse.core :as insta :refer-macros [defparser]])))\n\n(defn- third\n  \"Returns third element of coll, or nil.\"\n  [coll]\n  (try (nth coll 2)\n       #?(:clj (catch Exception e nil)\n          :cljs (catch js/Error e nil))))\n\n\n(def ^:dynamic *part-sep* #\":\")   ;; separator for keys/ values in CSV\n\n;(def ^:dynamic *part-sep-meta* #\"(?<!\\\\):(?!//)\")  ;; lookbehind no-worky in js\n(def ^:dynamic *part-sep-meta* #\":(?!//)\")  ;; exception for links\n\n(def exp #\"[^\\\\\\\\]:\")\n\n(defn split-parts [s] (str/split s *part-sep* -1)) ;; -1 to catch trailing empties\n(defn split-parts-meta [s] (str/split s *part-sep-meta* -1))\n\n\n(def regex-number \"#'-?[0-9]\\\\d*(\\\\.\\\\d+)?'\")\n\n\n(def whitespace\n  (insta/parser\n    \"whitespace = #'\\\\s+'\"))\n\n\n(def regex-text \"#'[\\\\+\\\\w\\\\d\\\\s\\\\n\\\\.\\\\(\\\\)@&<>\\\\'#=/-]+'\")\n\n ;; no support for escaping\n(def regex-kvs \"#'[\\\\+\\\\w\\\\d\\\\s\\\\n\\\\.\\\\(\\\\)@&:<>\\\\'#=/-]+'\")\n\n;; support for escaped , \\n : and  |\n;; escaped | doesn't work\n(def regex-kvs-esc\n  \"#'([/\\\\+\\\\?\\\\w\\\\d\\\\s\\\\n\\\\.\\\\(\\\\)!@&:\\\\[\\\\]\\\\(\\\\)<>\\\\'#=/-]|(\\\\\\\\,)|(\\\\\\\\n))*'\")\n\n\n(def regex-all \"#'(.*)'\")\n\n\n(def unescapes\n  {\"\\\\,\" \",\"\n   \"\\\\:\" \":\"})\n\n\n(def csv-grammar\n  (str\n   \"S = <';'>  Cmt |\n        <'h,'> H   |\n        <'e,'> E   |\n        <'ce,'> Ce |\n        <'cp,'> Cp |\n        <'cs,'> Cs \n    <KVs-esc> = \" regex-kvs-esc \"\n    <KVs> = \" regex-kvs  \"  \n    E = Node <','> Node (<','> Edge-meta? (<'|'> Edge-style)?)?\n    Edge-style = KVs\n    Edge-meta = KVs-esc\n    Node = KVs-esc (<'|'> Node-style)?\n    Node-style = KVs\n    H = \" regex-kvs \"\n    Ce = KVs\n    Cp = KVs\n    Cs = \" regex-text \"<'|'>\" regex-kvs \"\n    Cmt = \" regex-all))\n\n\n(defparser csv-line-parser\n  csv-grammar\n  :auto-whitespace whitespace)\n\n\n(defn parse-header [state s]\n  {:header\n   (insta/transform\n    {:H (fn [args] (map keyword (split-parts args)))\n     :S (fn [arg] arg)}\n    s)})\n\n\n(defn attribute-map [s & {:keys [meta?] :or {meta? false}}]\n  (let [args (if meta? (split-parts-meta s) (split-parts s))\n        n (count args)]\n    (cond\n      (= \"\" (first args)) nil\n      (even? n) (reduce\n                 (fn [acc [k v]]\n                   ;; make comma separated list if key exists already\n                   (let [k' (keyword k)]\n                     (if-let [old (k' acc)]\n                       (assoc acc k' (str old \",\" v))\n                       (assoc acc k' v))))\n                 {}\n                 (partition 2 args))\n      :else (throw (util/err (str \"Error parsing: \" s \" > Must be an even number of parts\"))))))\n\n\n(defn pairs [s]\n  (let [args (split-parts s)]\n    (if (even? (count args))\n      (partition 2 args)\n      (throw (util/err (str \"Error parsing: \" s \" > Must be an even number of parts\"))))))\n\n\n(defn conjcat [coll1 coll2]\n  (if (empty? coll1) coll1\n      (concat coll1 coll2)))\n\n\n(defn extract [k coll]\n  (reduce (fn [acc cur]\n            (if (get cur k) (get cur k) acc))\n          nil\n          coll))\n\n\n(defn map-vals [m f]\n  (into {} (for [[k v] m] [k (f v)])))\n\n\n(defn unescape [smap s]\n  (reduce\n   (fn [acc [k v]]\n     (str/replace acc k v))\n   s\n   smap))\n\n(def unesc (partial unescape unescapes))\n\n\n(defn unescape-edge [e]\n  (reduce\n   (fn [acc cur]\n     (if (nil? cur) nil\n         (update-in acc [:edges cur] map-vals (partial unescape unescapes))))\n   e\n   [:src :dst :meta]))\n\n\n(defn parse-edge [state s]\n  (let [nk (keyword (gensym \"node\"))\n        sk (keyword (gensym \"style\"))\n        edge (insta/transform\n              {:Node-style attribute-map\n               :Node (fn [& args]\n                       {nk (zipmap (:header state) (split-parts-meta (unesc (first args))))\n                        sk (if (some? (second args)) (second args))})\n               :Edge-meta (fn [& args]\n                            {:edge-meta (attribute-map (first args) :meta? true)})\n               :Edge-style (fn [& args]\n                             {:edge-style (attribute-map (first args) :meta? true)})\n               :E (fn [& args] args)}\n              s)\n        edge' edge\n        edge {:edges\n              {:src (nk (first edge'))\n               :dst (nk (second edge'))\n               :meta (extract :edge-meta (drop 2 edge'))\n               :style (extract :edge-style (drop 2 edge'))}}\n      ;  edge (unescape-edge edge)\n        with-styles (let [styles \n                          (reduce (fn [a c]\n                                    (if (sk c)\n                                      (assoc a (nk c) (sk c)) a))\n                                  nil edge')]\n                      (if styles (merge edge {:node-styles styles}) edge))]\n    (if (nil? (:edges state))\n      (let [s1 (assoc-in state [:edges] (list (:edges with-styles)))]\n        (if (:node-styles with-styles)\n          (merge-with merge s1 (dissoc with-styles :edges))\n          s1))\n      (let [s1 (merge-with conj state {:edges (:edges edge)})]\n        (if (:node-styles with-styles)\n          (util/deep-merge s1 (dissoc with-styles :edges))\n          s1)))))\n\n\n(defn parse-cluster-style [state s]\n  (let [cluster (insta/transform\n                 {:Cs (fn [& args]\n                        {(first args)\n                         (attribute-map (second args))})}\n                 s)]\n    (merge-with merge state {:cluster-styles cluster})))\n\n\n(defn parse-cluster-parent [state s]\n  (let [relns (insta/transform\n               {:Cp pairs}\n               s)]\n    (merge-with conjcat state {:cluster-parents relns})))\n\n\n(defn parse-cluster-edge [state s]\n  (let [relns (insta/transform\n               {:Ce pairs}\n               s)]\n    (merge-with conjcat state {:cluster-edges relns})))\n\n\n(defn parse-comments [state s]\n  (merge-with conjcat state {:commented-out s}))\n\n\n\n(defn parse-lines [lines]\n  (let [line-num (atom 0)]\n    (reduce\n     (fn [acc cur]\n       (swap! line-num inc)\n       (let [p (csv-line-parser cur)]\n         (if (insta/failure? p)\n           (throw (util/err (str \"Parsing error with line number \" @line-num \" >> \" cur)))\n           (let [line (second p)]\n             (case (first line)\n               :H  (parse-header acc line)\n               :E  (parse-edge acc line)\n               :Cs (parse-cluster-style acc line)\n               :Cp (parse-cluster-parent acc line)\n               :Ce (parse-cluster-edge acc line)\n               :Cmt (parse-comments acc line)\n               (throw (util/err (str \"No parser for line \" @line-num \" >> \" cur))))))))\n     {}\n     lines)))\n"]}