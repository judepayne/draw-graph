{"version":3,"sources":["instaparse/failure.cljc"],"mappings":";;;AAKA;;;AAAA,AAAMA,AAEHC,AAAMC;AAFT,AAGE,AAAA,AAAOC;AAAP,AAAeC;AAAf,AAAsBC;;AAAtB,AACE,AACE,AAACC,AAAEL,AAAMI;AADX,AAAA,AAAA,AAC2BF,AAAaC;;AADxC,AAEE,AAAA,AAACE,AAAW,AAACC,AAAIL,AAAKG;AAAU,AAAO,AAAA,AAAKF;AAAZ;AAAoB,AAAA,AAAKE;;;;;;AAF3D,AAGQ,AAAOF;AAAK,AAAA,AAAKC;AAAK,AAAA,AAAKC;;;;;;;;;;;AASpC,AAAA,AAAMG,AACHC,AAAEP;AADL,AAEE,AAAOQ,AAAM,AAACC,AAAI,AAAA,AAAA,AAACC,AAAuBV;AACnCO,AAAEA;;AADT,AAEE,AACE,AAACI,AAAOH;AADV;;AAAA,AAEE,AAAA,AAACJ,AAAEG;AAAK,AAACK,AAAMC,AAAI,AAACC,AAAW,AAAA,AAAA,AAACC,AAAwBP;;AAF1D,AAGE,AAAA,AAACJ,AAAW,AAACY,AAAMR;AAAQ,AAAO,AAACS,AAAKT;AAAO,AAAA,AAAKD;;;;;AAHtD,AAIQ,AAAO,AAACU,AAAKT;AAAOD;;;;;;;;;;;AAEnC;;;AAAA,AAAMW,AAEHX;AAFH,AAGE,AAAM,AAACY,AAASZ;AAAhB,AACE,AAAI,AAAA,AAAIA;AAAR;;AACE,AAACK,AAAMC,AAAI,AAAA,AAAA,AAACO,AAAO,AAAA,AAACC,AAAO,AAAA,AAAKd;;;AAFpC;;;AAIF;;;AAAA,AAAMe,AAEHC,AAAQvB;AAFX,AAGE,AAAMwB,AAAG,AAAC1B,AAAmB,AAAA,AAAQyB,AAASvB;AAA9C,AACE,AAAA,AAAA,AAACyB,AAAMF,AACAC,AACO,AAAClB,AAAS,AAAA,AAAOkB,AAAIxB;;AAEvC;;;AAAA,AAAM0B,AAEHC;AAFH,AAGE,AACE,AAAA,AAAMA;AACN,AAAI,AAAA,AAACC;;AACD,AAACA,AAAM,AAAA,AAAMD;;AAHnB,AAIE,AAAA,AAAaA;AACb,AAACC,AAAM,AAACC,AAAsBF;;AALhC,AAME,AACoBG,AACTH;AACX,AAACC,AAAM,AAACG,AAAkBJ;;AAT5B,AAWE,AAACK,AAAGL;;;;;;AAER;;;AAAA,AAAAM,AAAMI;AAAN,AAAA,AAAAH,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAtB,AAAAwB,AAAAF,AAAAA;AAAA,AAAA7B,AAAA6B,AAAA,AAEWjC;AAFX,AAAAI,AAAA6B,AAAA,AAEgBI;AAFhB,AAAAjC,AAAA6B,AAAA,AAEuBlC;AAFvB,AAAAK,AAAA6B,AAAA,AAE4BK;AAF5B,AAGE,AAACC,AAAQ,AAAA,AAAA,AAAA,AAA4BvC,AAAiBqC;;AACtD,AAACE,AAAQxC;;AACT,AAACwC,AAAQ,AAACtB,AAAOoB;;AACjB,AAAMG,AAAa,AAACC,AAAS,AAAA,AAACC,AACI,AAAA,AAACC,AAAaL;AAC1CM,AAAgB,AAACH,AAAS,AAAA,AAACC,AACI,AAACC,AAAO,AAAA,AAAC7B,AAAkBwB;AAC1DO,AAAM,AAAG,AAACC,AAAMN,AAAc,AAACM,AAAMF;AAJ3C,AAKE,AAAM,AAAA,AAAOC;AAAb;AAAA,AACM,AAAA,AAAC1C,AAAI0C;AAAO,AAAA,AAACN;;AADnB,AAEY,AAAA,AAACA;;;;;AACb,AAAAQ,AAAA,AAAAvC,AAAUgC;AAAVQ,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQxB;AAAR,AAAA,AACE,AAACD,AAAaC;;AACd,AAAA,AAACa;;AAFH;AAAA,AAAAQ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAA3C,AAAAuC;AAAA,AAAA,AAAAI;AAAA,AAAA,AAAAJ,AAAAI;AAAA,AAAA,AAAA,AAAAC,AAAAL;AAAA,AAAAM,AAAA,AAAAC,AAAAP;AAAA,AAAA,AAAA,AAAAQ,AAAAR;AAAAM;AAAA,AAAAP,AAAAO;AAAA;;;;;;;AAAA,AAAA,AAAAtC,AAAAgC,AAAQrB;AAAR,AAAA,AACE,AAACD,AAAaC;;AACd,AAAA,AAACa;;AAFH;AAAA,AAAA,AAAAvB,AAAA+B;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAGA,AAAAS,AAAA,AAAAhD,AAAUoC;AAAVa,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQjC;AAAR,AAAA,AACE,AAACD,AAAaC;;AACd,AAACkC;;AAFH;AAAA,AAAAJ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAR,AAAA,AAAA3C,AAAAgD;AAAA,AAAA,AAAAL;AAAA,AAAA,AAAAK,AAAAL;AAAA,AAAA,AAAA,AAAAC,AAAAI;AAAA,AAAAH,AAAA,AAAAC,AAAAE;AAAA,AAAA,AAAA,AAAAD,AAAAC;AAAAH;AAAA,AAAAP,AAAAO;AAAA;;;;;;;AAAA,AAAA,AAAAtC,AAAAyC,AAAQ9B;AAAR,AAAA,AACE,AAACD,AAAaC;;AACd,AAACkC;;AAFH;AAAA,AAAA,AAAA5C,AAAAwC;AAAA;AAAA;AAAA;;;;;;;;AAAA","names":["instaparse.failure/index->line-column","index","text","line","col","counter","cljs.core._EQ_","cljs.core.get","instaparse.failure/get-line","n","chars","cljs.core/seq","clojure.string/replace","cljs.core/empty?","cljs.core.apply","cljs.core/str","cljs.core.take_while","cljs.core/complement","cljs.core/first","cljs.core/next","instaparse.failure/marker","cljs.core/integer?","cljs.core.concat","cljs.core.repeat","instaparse.failure/augment-failure","failure","lc","cljs.core.merge","instaparse.failure/print-reason","r","cljs.core.print","instaparse.print/char-range->str","js/RegExp","instaparse.print/regexp->str","cljs.core.pr","p__52234","map__52235","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","instaparse.failure/pprint-failure","column","reason","cljs.core.println","full-reasons","cljs.core.distinct","cljs.core.map","cljs.core.filter","partial-reasons","total","cljs.core/count","seq__52237","chunk__52238","count__52239","i__52240","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","seq__52243","chunk__52244","count__52245","i__52246","cljs.core/println"],"sourcesContent":["(ns instaparse.failure\r\n  \"Facilities for printing and manipulating error messages.\"\r\n  #?(:clj (:import java.io.BufferedReader java.io.StringReader))\r\n  (:require [instaparse.print :as print]))\r\n\r\n(defn index->line-column\r\n  \"Takes an index into text, and determines the line and column info\"\r\n  [index text]\r\n  (loop [line 1, col 1, counter 0]\r\n    (cond\r\n      (= index counter) {:line line :column col}\r\n      (= \\newline (get text counter)) (recur (inc line) 1 (inc counter))\r\n      :else (recur line (inc col) (inc counter)))))\r\n\r\n#?(:clj\r\n   (defn get-line\r\n     \"Returns nth line of text, 1-based\"\r\n     [n text]\r\n     (try (nth (line-seq (BufferedReader. (StringReader. (str text)))) (dec n))\r\n          (catch Exception e \"\")))\r\n   :cljs\r\n   (defn get-line\r\n     [n text]\r\n     (loop [chars (seq (clojure.string/replace text \"\\r\\n\" \"\\n\"))\r\n            n n]\r\n       (cond\r\n         (empty? chars) \"\"\r\n         (= n 1) (apply str (take-while (complement #{\\newline}) chars))\r\n         (= \\newline (first chars)) (recur (next chars) (dec n))\r\n         :else (recur (next chars) n)))))\r\n\r\n(defn marker\r\n  \"Creates string with caret at nth position, 1-based\"\r\n  [n]\r\n  (when (integer? n)\r\n    (if (<= n 1) \"^\"\r\n      (apply str (concat (repeat (dec n) \\space) [\\^]))))) \r\n      \r\n(defn augment-failure\r\n  \"Adds text, line, and column info to failure object.\"\r\n  [failure text]  \r\n  (let [lc (index->line-column (:index failure) text)]\r\n    (merge failure \r\n           lc\r\n           {:text (get-line (:line lc) text)})))\r\n\r\n(defn print-reason\r\n  \"Provides special case for printing negative lookahead reasons\"\r\n  [r]\r\n  (cond\r\n    (:NOT r)\r\n    (do (print \"NOT \")\r\n        (print (:NOT r))),\r\n    (:char-range r)\r\n    (print (print/char-range->str r))\r\n    (instance? #?(:clj java.util.regex.Pattern\r\n                  :cljs js/RegExp)\r\n               r)\r\n    (print (print/regexp->str r))\r\n    :else\r\n    (pr r)))\r\n\r\n(defn pprint-failure\r\n  \"Takes an augmented failure object and prints the error message\"\r\n  [{:keys [line column text reason]}]\r\n  (println (str \"Parse error at line \" line \", column \" column \":\"))\r\n  (println text)\r\n  (println (marker column))\r\n  (let [full-reasons (distinct (map :expecting\r\n                                    (filter :full reason)))\r\n        partial-reasons (distinct (map :expecting\r\n                                       (filter (complement :full) reason)))\r\n        total (+ (count full-reasons) (count partial-reasons))]        \r\n    (cond (zero? total) nil\r\n          (= 1 total) (println \"Expected:\")\r\n          :else (println \"Expected one of:\"))\r\n    (doseq [r full-reasons]\r\n      (print-reason r)\r\n      (println \" (followed by end-of-string)\"))\r\n    (doseq [r partial-reasons]\r\n      (print-reason r)\r\n      (println))))\r\n  \r\n"]}