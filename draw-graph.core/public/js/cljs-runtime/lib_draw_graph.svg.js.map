{"version":3,"sources":["lib_draw_graph/svg.cljc"],"mappings":"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","names":["this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","lib-draw-graph.svg/xy","lib-draw-graph.svg/->xy","x","y","this","x__4433__auto__","m__4434__auto__","lib-draw-graph.svg/add","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","lib-draw-graph.svg/Geom","that","cljs.core/PROTOCOL_SENTINEL","x-sum","y-sum","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lib-draw-graph.svg/xs","seq36206","self__4718__auto__","cljs.core/seq","xys","p1__36205#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.svg/ys","seq36246","p1__36245#","lib-draw-graph.svg/str-pair->xy","pair","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","cljs.core/first","cljs.core/second","lib-draw-graph.svg/regex-number","lib-draw-graph.svg/whitespace","instaparse.core/parser","instaparse.core.parser.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.svg/path-parser","lib-draw-graph.svg/parse-path","s","G__36273","G__36274","instaparse.core/transform","args","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","c","cljs.core/flatten","lib-draw-graph.svg/points-parser","lib-draw-graph.svg/parse-polygon","G__36290","G__36291","lib-draw-graph.svg/polygon->bounding-box","pts","xs","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","ys","min-x","cljs.core/min","min-y","max-x","cljs.core/max","max-y","lib-draw-graph.svg/path->bounding-box","path","collected","item","cljs.core/map?","p1__36302#","points","cljs.core/vals","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/sequential?","p1__36303#","n","x__4219__auto__","y__4220__auto__","bdg","radius","abs","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","lib-draw-graph.svg/g","lib-draw-graph.svg/title","lib-draw-graph.svg/polygon","lib-draw-graph.svg/path","lib-draw-graph.svg/text","lib-draw-graph.svg/ellipse","lib-draw-graph.svg/circle","js/lib-draw-graph","js/lib-draw-graph.svg","js/lib-draw-graph.svg.bounding-box","method-table__4613__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__36317","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.svg/bounding-box","svg","attrs","flo","js/parseFloat","cx","cy","rx","ry","r","lib-draw-graph.svg/box->rect","m","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.svg/all-clusters","loc","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clojure.zip/node","lib-draw-graph.svg/cluster","cluster","content","cljs.core/List","lib-draw-graph.svg/all-nodes","lib-draw-graph.svg/jump","num-locs","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/iterate","clojure.zip/next","clojure.zip/prev","lib-draw-graph.svg/node","node","parts","clojure.string.split.cljs$core$IFn$_invoke$arity$2","raw-node","clojure.string/replace","num-parts","cljs.core/count","jumps","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/+","get-part","first-part","contents","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core/cons","iter__4523__auto__","s__36349","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__36351","cljs.core/chunk-buffer","i__36350","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36348","cljs.core/chunk-rest","cljs.core/rest","lib-draw-graph.svg/parse-svg","clojure.data.xml/parse-str","lib-draw-graph.svg/->zipper","xml","clojure.zip/xml-zip","lib-draw-graph.svg/wrong-svg-header","lib-draw-graph.svg/right-svg-header","lib-draw-graph.svg/wrong-xlink","lib-draw-graph.svg/relic-ns","lib-draw-graph.svg/->xml","parsed","raw","clojure.data.xml/emit-str","fixed","fixed2","fixed3","G__36363","lib-draw-graph.svg/tree-find","js/Error","zipper","match-pred","lib_draw_graph.svg.tree_find.cljs$core$IFn$_invoke$arity$3","cljs.core/identity","shift","nodes","clojure.zip/end?","temp__5718__auto__","matcher-result","lib-draw-graph.svg/cluster->rect","clstr","e36377","G__36378","e","lib-draw-graph.util/err","lib-draw-graph.svg/node->rect","nd","e36383","G__36384","lib-draw-graph.svg/c","turn","-radius","half-r","-half-r","curve","G__36388","cljs.core/Keyword","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/str","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.svg/l","lib-draw-graph.svg/rect-poly","start","width","height","-height","lib-draw-graph.svg/rect->poly","lib-draw-graph.svg/rounded-rect","h","w","-h","-w","js/lib-draw-graph.svg.rect->svg","fexpr__36400","lib-draw-graph.svg/rect->svg","G__36411","lib-draw-graph.svg/tree-edit","matcher","editor","lib_draw_graph.svg.tree_edit.cljs$core$IFn$_invoke$arity$6","k-shift","get-k","d-shift","clojure.zip/root","k","G__36417","new-loc","clojure.zip/edit","lib-draw-graph.svg/->root","p","clojure.zip/up","lib-draw-graph.svg/->node","cljs.core/chunk-first"],"sourcesContent":["(ns ^{:doc \"Svg processing.\"\n      :author \"Jude Payne\"}\n    lib-draw-graph.svg\n  (:require [clojure.zip           :as zip]\n            [clojure.data.zip.xml  :refer [xml-> xml1-> attr attr= text= tag=]]\n            [clojure.data.xml      :as xml]\n            [lib-draw-graph.util   :as util]\n            #?(:clj [instaparse.core :as insta :refer [defparser]]\n               :cljs [instaparse.core :as insta :refer-macros [defparser]])))\n\n\n;; -----------------\n;; Simple type to express either an x,y point or translation\n(deftype xy [^Long x ^Long y]\n  Object\n  (toString [this]\n    (str #?(:clj (.x this) :cljs (.-x this))\n         \",\"\n         #?(:clj (.y this) :cljs (.-y this)))))\n\n\n(defprotocol Geom\n  (add [^xy this ^xy that]))\n\n\n(extend-type xy\n  Geom\n  (add [this that]\n    (let [x-sum (+ #?(:clj (.x this) :cljs (.-x this))\n                   #?(:clj (.x that) :cljs (.-x that)))\n          y-sum (+ #?(:clj (.y this) :cljs (.-y this))\n                   #?(:clj (.y that) :cljs (.-y that)))]\n      (xy. x-sum y-sum))))\n\n\n(defn xs\n  \"Returns the x components of the xys\"\n  [& xys]\n  #?(:clj (map #(.x %) xys)\n     :cljs (map #(.-x %) xys)))\n\n\n(defn ys\n  \"Returns the y components of the xys\"\n  [& xys]\n  #?(:clj (map #(.y %) xys)\n     :cljs (map #(.-y %) xys)))\n\n\n(defn str-pair->xy [pair]\n  #?(:clj (xy. (read-string (first pair))\n               (read-string (second pair)))\n     :cljs (xy. (cljs.reader/read-string (first pair))\n                (cljs.reader/read-string (second pair)))))\n\n\n;; -----------------\n;; READING SVG\n\n(def regex-number \"#'-?[0-9]\\\\d*(\\\\.\\\\d+)?'\")\n\n\n(def whitespace\n  (insta/parser\n    \"whitespace = #'\\\\s+'\"))\n\n\n(defparser path-parser\n  (str\n   \"S = M? C?\n    M = <'M'>P\n    C = <'C'>Ns+\n    <Ns> = P P P\n    <P> = N Comma N\n    <Comma> = <','>\n    <N> = \" regex-number)\n  :auto-whitespace whitespace)\n\n\n(defn parse-path [s]\n  (insta/transform\n   {:M (fn [& args] {:M (str-pair->xy args)})\n    :C (fn [& args] \n         (->> args\n              (partition 2)\n              (mapv str-pair->xy)\n              (partition 3)\n              (map (fn [c] {:C c}))))\n    :S (fn [& args] (flatten args))}\n   (path-parser s)))\n\n\n(defparser points-parser\n  (str\n   \"S = P+\n    <P> = N Comma N\n    <Comma> = <','>\n    <N> = \" regex-number)\n  :auto-whitespace whitespace)\n\n\n(defn parse-polygon [s]\n  (insta/transform\n   {:S (fn [& args]\n         (->> args\n              (partition 2)\n              (mapv str-pair->xy)))}\n   (points-parser s)))\n\n\n(defn polygon->bounding-box\n  \"Returns the bounding box of the points.\n  pts should be a collection of xy's\"\n  [pts]\n  (let [xs  (apply xs pts)\n        ys  (apply ys pts)\n        min-x (apply min xs)\n        min-y (apply min ys)\n        max-x (apply max xs)\n        max-y (apply max ys)]\n    {:left min-x :bottom max-y :right max-x :top min-y}))\n\n\n(defn path->bounding-box [path]\n    (letfn [(points [collected item]\n              (cond\n                (map? item)          (map #(points collected %) (vals item))\n                (instance? xy item)  (conj collected item)\n                (sequential? item)   (map #(points collected %) item)))\n            (abs [n] (max n (- n)))]\n      (let [pts (flatten (points [] path))\n            xs (apply xs pts)\n            ys (apply ys pts)\n            bdg (polygon->bounding-box pts)\n            radius (abs (- (:left bdg)\n                           #?(:clj (.x (first pts))\n                              :cljs (.-x (first pts)))))]\n        (assoc bdg :radius radius))))\n\n\n;; 11 nexts between two subsequent cluster g's\n(def g :xmlns.http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg/g)\n;; 2 previous\n(def title :xmlns.http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg/title)\n;; 3 previous\n(def polygon :xmlns.http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg/polygon)\n;; *or*\n(def path :xmlns.http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg/path)\n;; 2 previous\n(def text :xmlns.http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg/text) ;<- where we find\n; content (\"squirrels\") or whatever\n(def ellipse :xmlns.http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg/ellipse)\n\n(def circle :xmlns.http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg/circle)\n\n\n(defmulti bounding-box\n  \"Takes in a chunk of svg and returns a map specifying the bounding rectangle.\"\n  (fn [svg] (:tag svg)))\n\n\n(defmethod bounding-box polygon [svg]\n  (-> svg\n      :attrs\n      :points\n      parse-polygon\n      polygon->bounding-box))\n\n\n(defmethod bounding-box path [svg]\n  (-> svg\n      :attrs\n      :d\n      parse-path\n      path->bounding-box))\n\n\n(defmethod bounding-box ellipse [svg]\n  (let [attrs (-> svg :attrs)\n        flo (fn [s] #?(:clj (Float/parseFloat s) :cljs (js/parseFloat s)))\n        cx (flo (:cx attrs))\n        cy (flo (:cy attrs))\n        rx (flo (:rx attrs))\n        ry (flo (:ry attrs))]\n    {:left (- cx rx)\n     :right (+ cx rx)\n     :top (- cy ry)\n     :bottom (+ cy ry)}))\n\n\n(defmethod bounding-box circle [svg]\n  (let [attrs (-> svg :attrs)\n        flo (fn [s] #?(:clj (Float/parseFloat s) :cljs (js/parseFloat s)))\n        cx (flo (:cx attrs))\n        cy (flo (:cy attrs))\n        r (flo (:r attrs))]\n    {:left (- cx r)\n     :right (+ cx r)\n     :top (- cy r)\n     :bottom (+ cy r)}))\n\n\n(defn box->rect\n  \"Converts a bounding box map produced into :x :y :w :h form.\"\n  [m]\n  (-> m\n      (dissoc :bottom :top :right :left)\n      (assoc :x (int (:left m)))\n      (assoc :y (int (:top m)))\n      (assoc :w (int (- (:right m) (:left m))))\n      (assoc :h (int (- (:bottom m) (:top m))))))\n\n\n(defn all-clusters [loc]\n  (= \"cluster\" (:class (:attrs (zip/node loc)))))\n\n\n(defn cluster [cluster loc]\n  (let [content (:content (zip/node loc))]\n    (= content (list cluster))))\n\n\n(defn all-nodes [loc]\n  (= \"node\" (:class (:attrs (zip/node loc)))))\n\n\n(defn jump \n  \"For moving to prev for next locations in a zipper. num-locs\n   should be positive for next and negative for previous.\"\n  [num-locs loc]\n  (cond\n    (> num-locs 0) (nth (iterate zip/next loc) num-locs)\n    (< num-locs 0) (nth (iterate zip/prev loc) (- num-locs))\n    0 loc))\n\n\n(defn node\n  \"Matches the text of a node, including accomodating text split\n   with the special '+' characters.\"\n  [node loc]\n  (let [parts (clojure.string/split node #\"\\+\")\n        raw-node (clojure.string/replace node #\"\\+\" \"\")\n        num-parts (count parts)\n        jumps (take (dec num-parts) (iterate (partial + 3) 3))\n        get-part (fn [loc] (first (:content (zip/node loc))))\n        first-part (get-part loc)\n        contents (clojure.string/join\n                  (cons first-part\n                        (for [x jumps\n                              :let [y (get-part (jump x loc))]]\n                          y)))]\n    (= raw-node contents)))\n\n\n;; Zippers for parsing the main svg tree.\n\n(defn parse-svg [svg]\n  (-> svg\n      xml/parse-str))\n\n\n(defn ->zipper [xml]\n  (zip/xml-zip xml))\n\n\n;; set up regexes and replacement strings to fix clojurescript's emit-str\n(def wrong-svg-header #\"xmlns=\\\"http://www.w3.org/2000/svg\\\"\")\n(def right-svg-header \"xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\")\n(def wrong-xlink #\"xmlns:ns\\d+=\\\"http://www.w3.org/1999/xlink\\\" ns\\d+\")\n(def relic-ns #\"ns\\d+:\")\n\n\n(defn ->xml [parsed]\n  #?(:clj (xml/emit-str parsed)\n     :cljs (let [raw (xml/emit-str parsed)\n                 fixed (clojure.string/replace raw wrong-xlink \"xlink\")\n                 fixed2 (clojure.string/replace fixed relic-ns \"xlink:\")\n                 fixed3 (clojure.string/replace fixed2 wrong-svg-header right-svg-header)]\n             fixed3)))\n\n\n(defn tree-find\n  \"Returns a vector of all matching nodes in the zipper.\n   match-pred is a predicate used to match each node. jump is\n   a function that takes a loc and returns another loc in the zipper.\n   i.e. a certain 'jump' away from each of the matched nodes.\n\n   Example usage:\n     (tree-find z (partial cluster \\\"pandas\\\") -2)\n   will return all nodes in the zipper z which are two locs previous\n   to the nodes matched by the function (partial cluster \\\"pandas\\\")\"\n  ([zipper match-pred]\n   (tree-find zipper match-pred identity))\n  ([zipper match-pred shift]\n   (loop [loc zipper nodes []]\n     (if (zip/end? loc)\n       nodes\n       (if-let [matcher-result (match-pred loc)]\n         (recur (zip/next loc) (conj nodes (zip/node (jump shift loc))))\n         (recur (zip/next loc) nodes))))))\n\n\n(defn cluster->rect [zipper clstr]\n  (try\n    (-> (tree-find zipper (partial cluster clstr) -2)\n        first\n        bounding-box\n        (assoc :name clstr)\n        box->rect)\n    #?(:clj (catch Exception e\n              (throw (util/err\n                      (str \"Post-processing error: Could not find cluster \" clstr\n                           \" in the initial svg\"))))\n         :cljs (catch js/Error e\n                 (throw (util/err\n                         (str \"Post-processing error: Could not find cluster \" clstr\n                              \" in the initial svg\")))))))\n\n\n(defn node->rect [zipper nd]\n  (try\n    (-> (tree-find zipper (partial node nd) -2)\n        first\n        bounding-box\n        (assoc :name nd)\n        box->rect)\n    #?(:clj (catch Exception e\n              (throw (util/err\n                      (str \"Post-processing error: Could not find node \" nd\n                           \" in the initial svg\"))))\n         :cljs (catch js/Error e\n                 (throw (util/err\n                         (str \"Post-processing error: Could not find node \" nd\n                              \" in the initial svg\")))))))\n\n\n;; -----------------\n;; WRITING SVG\n\n;; Generate various svg strings for shapes - to be used in replacing\n;; parts of the svg tree below\n\n;; Note - I've chosen to use svg relative commands, c & l (not C&L) as easier to\n;; handle but the trade-off is that rounded-rect won't be identically\n;; specified in svg to the way Graphviz does it, meaning no double passes.\n;; Better get it right first time then!\n\n(defn c\n  \"Generates a bezier. assumes we are moving anti-clockwise.\n   This replicates the way Grpahviz generate a 90 deg bezier.\"\n  [radius turn]\n  (let [-radius (* -1 radius)\n        half-r  (/ radius 2)\n        -half-r (* -1 half-r)\n        curve\n        (case turn\n          :down  [-half-r 0 -radius half-r -radius radius]\n          :left  [0 -half-r -half-r -radius -radius -radius]\n          :up    [half-r 0 radius -half-r radius -radius]\n          :right [0 half-r half-r radius radius radius])]\n    (apply str \"c \"\n           (->> curve\n                (interpose \" \")))))\n\n\n(defn l [x y]\n  (str \"l \" (xy. x y)))\n\n\n(defn rect-poly\n  \"Generate the svg points string for a rectangular polygon.\n  start is an xy (point) at the bottom left of the rectangle.\"\n  [start width height]\n  (let [-height (* -1 height)]\n    (apply str\n           (interpose \" \"\n                      [start\n                       (add start (xy. 0 height))\n                       (add start (xy. width height))\n                       (add start (xy. width 0))\n                       start]))))\n\n(defn rect->poly [r]\n  (rect-poly (xy. (:x r) (:y r)) (:w r) (:h r)))\n\n\n(defn rounded-rect\n  \"Start point is bottom left (right of the curve). We move anti-\n  clockwise around the polygon.\"\n  [start width height radius]\n  (let [h (- height (* 2 radius))\n        w (- width (* 2 radius))\n        -h (* -1 h)\n        -w (* -1 w)]\n    (apply str\n           (interpose \" \"\n                      [\"M\" (add start (xy. radius height))\n                       (l w 0)\n                       (c radius :up)\n                       (l 0 -h)\n                       (c radius :left)\n                       (l -w 0)\n                       (c radius :down)\n                       (l 0 h)\n                       (c radius :right)]))))\n\n\n(defmulti rect->svg (fn [r] (some? (:radius r))))\n\n\n(defmethod rect->svg false [r]\n  (let [points (rect-poly (xy. (:x r) (:y r)) (:w r) (:h r))]\n    [:points points]))\n\n\n(defmethod rect->svg true [r]\n  (let [points (rounded-rect (xy. (:x r) (:y r)) (:w r) (:h r) (:radius r))]\n    [:d points]))\n\n\n(defn tree-edit\n  \"Take a zipper, a function that matches a pattern in the tree,\n   and a function that edits the current location in the tree.  Examine the tree\n   nodes in depth-first order, determine whether the matcher matches, and if so\n   apply the editor.\n   k-shift is the jump (from match) to get to the loc where get-k is applied to\n   extract the key.\n   d-shift is the jump (from match) to get to the loc where the data to be edited sits.\"\n  ([zipper matcher editor]\n   (tree-edit zipper matcher 0 identity 0 editor))\n  ([zipper matcher k-shift get-k d-shift editor]\n   (loop [loc zipper]\n     (if (zip/end? loc)\n       (zip/root loc)\n       (if (matcher loc)\n         (let [k (get-k (zip/node (jump k-shift loc)))\n               new-loc  (zip/edit (jump d-shift loc) (partial editor k))]\n           (recur (zip/next (jump (- d-shift) new-loc))))\n         (recur (zip/next loc)))))))\n\n;; notes  jumps are 7 to content then -2 to get attr then (obviously -5)\n\n\n(defn ->root\n  \"zips all the way up and returns the root node, reflecting any\n changes.\"\n  {:added \"1.0\"}\n  [loc]\n    (if (zip/end? loc)\n      loc\n      (let [p (zip/up loc)]\n        (if p\n          (recur p)\n          loc))))\n\n\n(defn ->node\n  [loc]\n  (zip/node loc))\n\n"]}