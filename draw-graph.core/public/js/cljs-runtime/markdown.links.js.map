{"version":3,"sources":["markdown/links.cljc"],"mappings":";;;;AAYA,AAAA,AAAMA,AAAMC,AAAKC,AAAKC;AAAtB,AACE,AAAAC,AAAmB,AAACG,AAAW,AAAA,AAACC,AAAQC,AAAaP;AAArD,AAAAG,AAAAD,AAAA,AAAA,AAAOF;AAAP,AAAAG,AAAAD,AAAA,AAAA,AAAYE;AAAZ,AACE,AAACI,AACA,AAAA,AAACC,AAAiBT,AAAK,AAAA,AAACS,AACxB,AAAI,AAACC,AAAUN,AACb,AAACK,AAAI,AAAA,AAAA,AAACE,AAAMC,AAAc,AAACC,AAAY,AAACC,AAAKV,AAC7C,AAAA,AAACK,AACHV,AAAK,AAAA,AAACU,AAAYR;;AAEvB,AAAA,AAAA,AAAAc,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAAKU,AAAIC,AAAI/B;AAAnB,AAAA,AAAAsB,AAAAD;AAAA,AAAAnB,AAAAoB,AAAA,AAAA,AAA4BnB;AAA5B,AACE,AAACI,AACC,AAAA,AAACC,AAAmBuB,AAAI,AAAA,AAACvB,AAAiBsB,AAC1C,AAAI,AAACrB,AAAUN,AACb,AAACK,AAAI,AAAA,AAAA,AAACE,AAAMC,AAAgB,AAACC,AAAYT,AACzC,AAAA,AAACK,AACHR;;;AANJ,AAAA,AAAA,AAAMoB;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAK,AAAA,AAAAH,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAM,AAAA;AAAA,AAAA,AAAAA,AAAAL,AAAAG,AAAAC,AAAAL;;;AAAA,AAQA,AAAA,AAAMS,AAAiBC,AAAGjC;AAA1B,AACE,AAAI,AAAA,AAAA,AAAA,AAAA,AAACkC,AAAa,AAAA,AAACC,AAAOF;AACxB,AAAMA,AAAG,AAAA,AAACO,AAAOP;AAAjBG,AACe,AAAChC,AAAW,AAAA,AAACC,AAAQC,AAAS2B;AAD7C,AAAA/B,AAAAkC,AAAA,AAAA,AACON;AADP,AAAA5B,AAAAkC,AAAA,AAAA,AACWK;AADXJ,AAE0BI,AAAG,AAAA,AAACD,AAAQ,AAACpC,AAAW,AAAA,AAACC,AAAQC;AAF3D,AAAAJ,AAAAmC,AAAA,AAAA,AAEOK;AAFP,AAAAxC,AAAAmC,AAAA,AAAA,AAEiBM;AAFjBL,AAGkB,AAAClC,AAAW,AAAA,AAACC,AAAQC,AAAaoC;AAHpD,AAAAxC,AAAAoC,AAAA,AAAA,AAGOP;AAHP,AAAA7B,AAAAoC,AAAA,AAAA,AAGWnC;AAHXoC,AAI2B,AAACO,AAAIhB,AAAIC,AAAI/B,AAAM,AAACS,AAAUN;AAJzD,AAAAD,AAAAqC,AAAA,AAAA,AAIOK;AAJP,AAAA1C,AAAAqC,AAAA,AAAA,AAIgBM;AAJhB,AAAA,AAKG,AAAA,AAACE,AAAWH,AAAS,AAAC/B,AAAK8B,AAAKE;;AANrC,AAOGZ,AAAGjC;;;AAER,AAAA,AAAMgD,AAAoB7C,AAAMH;AAAhC,AACE,AAACyB,AACC,AAAA,AAAAwB,AAAAC,AAACC;AAAD,AACG,AAAAD,AAAAD,AAACvC;AADJ,AAAA,AAEGP,AAAMH,AACNoD,AAAQC,AAAGC,AAAOC,AAAKC;;AAE9B,AAAA,AAAMC,AACHC;AADH,AAEE,AAAAC,AAAU7D;AAAV,AAAA,AAAA8D,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAlD,AAAAoD,AAAAF,AAAAA;AAAAA,AAA2C5D;AAA3C,AAAA+D,AAAAH,AAAA,AAAuBI;AAAvB,AAAAD,AAAAH,AAAA,AAA4BK;AAA5B,AACE,AAAI,AAAAC,AAAIF;AAAJ,AAAA,AAAAE;AAAAA;;AAASD;;;AAAb,AACGnE,AAAKE;;AACN,AAAA,AAAOmE;AACAC,AAAO,AAAC5D,AAAIV;AACZuE,AAAWrE;;AAFlB,AAGE,AAAI,AAACsE,AAAOF;AAAZ,AACG,AAACxD,AAAYuD,AAAKE;;AACnB,AAAAE,AAAgB,AAACnE,AAAW,AAAA,AAACC,AAAQC,AAAS8D;AAA9C,AAAAlE,AAAAqE,AAAA,AAAA,AAAOK;AAAP,AAAA1E,AAAAqE,AAAA,AAAA,AAAYtC;AAAZuC,AAEsB,AAACxC,AAAgBC,AAAGoC;AAF1C,AAAAnE,AAAAsE,AAAA,AAAA,AAEOvC;AAFP,AAAA/B,AAAAsE,AAAA,AAAA,AAEUH;AAFVI,AAGiB,AAACrE,AAAW,AAAA,AAACC,AAAQC,AAAS2B;AAH/C,AAAA/B,AAAAuE,AAAA,AAAA,AAGOtE;AAHP,AAAAD,AAAAuE,AAAA,AAAA,AAGaI;AAHbH,AAIe,AAACtE,AAAW,AAAA,AAACC,AAAQC,AAASuE;AAJ7C,AAAA3E,AAAAwE,AAAA,AAAA,AAIOI;AAJP,AAAA5E,AAAAwE,AAAA,AAAA,AAIWK;AAJXJ,AAKkB,AAACvE,AAAW,AAAA,AAACC,AAAQC,AAASyE;AALhD,AAAA7E,AAAAyE,AAAA,AAAA,AAKO5E;AALP,AAAAG,AAAAyE,AAAA,AAAA,AAKYK;AALZ,AAOE,AAAI,AAAI,AAAA,AAAG,AAACC,AAAMlF,AACV,AAAA,AAAG,AAACkF,AAAMD,AACV,AAAA,AAAG,AAACC,AAAMH;AAChB,AAAO,AAAC/B,AAAOoB,AAAIS,AAAK,AAAC5B,AAAmB7C,AAAMH,AAAO8E,AAAI/E;AAAMiF;AAAKX;;;;;;AAExE,AACE,AAAK,AAACa,AAAIxB,AAAM,AAAA,AAACyB,AAAK,AAACC,AAAKR;AAC5B,AAAAS,AAAiC,AAACxF,AAAK,AAACgB,AAAK,AAACmC,AAAmB7C,AAAMH,AAAQ,AAACa,AAAKd,AAAMsE;AAA3F,AAAAnE,AAAAmF,AAAA,AAAA,AAAOC;AAAP,AAAApF,AAAAmF,AAAA,AAAA,AAAiBE;AAAjB,AACE,AAAO,AAACxC,AAAOoB,AAAIS,AAAKU;AAAW,AAACzE,AAAKmE;AAAMO;;;;;;AAHnD,AAIE,AAAAC,AAAK9B;AAAL,AAAA,AAAA8B;AAAU,AAAA,AAACtD,AAAE,AAACkD,AAAKR;;AAAnBY;;;AACA,AAAM1D,AAAI,AAACjB,AAAKV;AAAhBsF,AACkB,AAACrF,AAAW,AAAA,AAACC,AAAQC,AAAa,AAACO,AAAKd;AAD1D,AAAAG,AAAAuF,AAAA,AAAA,AACO1D;AADP,AAAA7B,AAAAuF,AAAA,AAAA,AACWtF;AACLA,AAAM,AAAC6C,AAAmB,AAACpC,AAAY,AAACC,AAAKV,AAAQkE;AAF3DqB,AAIgC,AAAC5C,AAAIhB,AAAIC,AAAIsC,AAAWlE;AAJxD,AAAAD,AAAAwF,AAAA,AAAA,AAIOC;AAJP,AAAAzF,AAAAwF,AAAA,AAAA,AAIgBH;AAJhB,AAKE,AAAO,AAACxC,AAAOoB,AAAI,AAACyB,AAAQhB,AAAMe;AAAU,AAAC9E,AAAKmE;AAAMO;;;;;;AAV5D,AAAA,AAWS,AAAC3E,AAAY,AAACmC,AAAOoB,AAAIC,AAASC;;;;;;;;;;;AAEzD,AAAKwB,AAAK,AAAA,AAACpC;AACX,AAAKqC,AAAM,AAAA,AAACrC;AAEZ,AAAA,AAAMsC,AAAWjG;AAAjB,AACE,AAAA,AAACkG,AAAoClG;;AAEvC,AAAA,AAAMmG,AAAiBC,AAAUC;AAAjC,AACMD,AACA,AAACE,AAAKD,AACN,AAACE,AACD,AAAA,AAAA,AAACC;;AAEP,AAAA,AAAMC,AAAsBC,AAAKC;AAAjC,AACE,AAAMC,AAAQ,AAACL,AAAYG;AAA3B,AACE,AAAAG,AAAgB,AAACZ,AAAUW;AAA3B,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAAW5G;AAAX,AACE,AAAC6G,AAAMH,AAAWI,AAAM,AAAA,AAACT,AAAKrG,AAAO,AAAA,AAAK,AAACkF,AAAMlF,AAC1C,AAACkG,AAAgBS,AAAQ,AAAA,AAAK,AAACzB,AAAMlF;;AAF9C;;;AAIJ,AAAA,AAAM+G,AAAwBL,AAAWP;AAAzC,AACE,AAAAa,AAAiB,AAAA,AAAA,AAACT,AAAaJ;AAA/B,AAAAhG,AAAA6G,AAAA,AAAA,AAAO5G;AAAP,AAAAD,AAAA6G,AAAA,AAAA,AAAaE;AAAbD,AACiB,AAACjD,AAAI0C,AAAWQ;AADjC,AAAA/G,AAAA8G,AAAA,AAAA,AACOjH;AADP,AAAAG,AAAA8G,AAAA,AAAA,AACYlF;AADZ,AAEE,AAAA,AAAA,AAAA,AAAA,AAAiB/B,AAAS,AAAA,AAAA,AAAM+B,AAAI,AAAA,AAAA,AAAgB,AAAA,AAACsE,AAAKtE,AAAM,AAAA,AAAK,AAACmD,AAAMnD,AAAiB,AAAA,AAACsE,AAAKjG;;AAEvG,AAAA,AAAM+G,AAAcC,AAAMC;AAA1B,AACE,AAACC,AACC,AAAClE,AACC,AAAAmE,AAAiBvH;AAAjB,AAAA,AAAAwH,AAAAD;AAAA,AAAApH,AAAAqH,AAAA,AAAA,AAAMH;AAAN,AAAAlH,AAAAqH,AAAA,AAAA,AAAQC;AAAR,AAAA,AACG,AAAA,AAAKJ,AAAG,AAACK,AAAMD,AAAQ,AAACE,AAAUN,AAAGrH;AAF1C,AAAA,AAGGqH,AACDD;;AAEN,AAAA,AAAMQ,AAAalB,AAAWU;AAA9B,AACE,AAAA,AAACS,AAAQ,AAACC,AACC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA5H,AAAA6H,AAAA,AAAA,AAAMC;AAAN,AAAA9H,AAAA6H,AAAA,AAAA,AAAQE;AAAR,AAAA,AACGD,AAAE,AAAClB,AAAuBL,AAAWwB;AACxCd;;AAEb,AAAA,AAAMe,AAAczB,AAAW3G,AAAKE;AAApC,AACE,AAAMmH,AACA,AAAA,AAACgB,AAECrI;AACFsI,AACA,AAAClB,AAAaC,AAAM,AAAC,AAAA,AAACkB,AAAKpD,AAAU,AAAA,AAAiBjF;AAL5D,AAAA,AAMG,AAACmD,AACC,AAAAmF,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAApI,AAAAqI,AAAA,AAAA,AAAQtB;AAAR,AAAA/G,AAAAqI,AAAA,AAAA,AAAWxI;AAAX,AACE,AAAC0I,AAAeD,AAAEzI,AAAKkH;AACzBnH,AAAKsI,AACP,AAAA,AAACM,AAAO1I,AAAsB2I,AAAM,AAAChB,AAAYlB,AAAW2B;;AAEjE,AAAA,AAAAQ,AAAME,AAAgBhJ;AAAtB,AAAA,AAAA+I,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhF,AAAA,AAAAgF,AAAA,AAAA,AAAA,AAAA,AAAAnI,AAAAoD,AAAA+E,AAAAA;AAAAA,AAAkE7I;AAAlE,AAAA+D,AAAA8E,AAAA,AAAmC7E;AAAnC,AAAAD,AAAA8E,AAAA,AAAwC5E;AAAxC,AAAAF,AAAA8E,AAAA,AAAkDpC;AAAlD,AACE,AACE,AAAAvC,AAAI,AAAA,AAAMuC;AAAV,AAAA,AAAAvC;AAAAA;;AAAA,AAAAA,AAAsBF;AAAtB,AAAA,AAAAE;AAAAA;;AAA2BD;;;;AAD7B,AAEGnE,AAAKE;;AAFR,AAIE,AAAC+F,AAAU,AAACM,AAAYvG;AAJ1B,AAAA,AAKME;;AALN,AAQE,AAACkI,AAAazB,AAAW3G,AAAKE;;;;;AAElC,AAAA,AAAM+I,AAAyBjJ,AAAKE;AAApC,AACE,AAAMgJ,AAAiB,AAAA,AAAA,AAACP,AAAe3I;AAAvC,AAAA,AACGkJ,AAAiBhJ;;AAEtB,AAAA,AAAMiJ,AAAUnJ;AAAhB,AACE,AAAA,AAACkG,AAAkClG;;AAErC,AAAA,AAAMoJ,AAAqB1C,AAAK2C;AAAhC,AACE,AAAMzC,AAAQ,AAACL,AAAYG;AAA3B,AACE,AAAAG,AAAgB,AAACsC,AAASvC;AAA1B,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAAW5G;AAAX,AACE,AAAA,AAAA,AAAC6G,AAAMuC,AAAUC,AAAuB,AAAA,AAAChD,AAAKrG,AAAO,AAAA,AAAK,AAACkF,AAAMlF,AAC1D,AAACkG,AAAgBS,AAAQ,AAAA,AAAK,AAACzB,AAAMlF;;AAF9C;;;AAIJ,AAAA,AAAMsJ,AAAuBF,AAAUG;AAAvC,AACE,AAAMC,AAAW,AAAA,AAAaJ;AACxBpJ,AAAK,AAAA,AAAYwJ;AADvB,AAEE,AAAA,AAAA,AAAA,AAAA,AAAiBxJ,AAAmBwJ,AAAqBA;;AAE7D,AAAA,AAAAC,AAAME,AAA4B5J;;AAAlC,AAAA,AAAA2J,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5F,AAAA,AAAA4F,AAAA,AAAA,AAAA,AAAA,AAAA/I,AAAAoD,AAAA2F,AAAAA;AAAAA,AAA8DzJ;AAA9D,AAAA+D,AAAA0F,AAAA,AAA+CN;AAA/C,AACE,AAAA,AAAMQ;AACAC,AAAM,AAAC5D,AAAQ2D,AAAQ7J;AAD7B,AAEE,AAAI,AAAA,AAAM8J;AAAV,AACG9J,AAAKE;;AACN,AAAM6J,AAAU,AAACC,AAAqBhK,AAAK6J,AAAQ,AAACtJ,AAAQgJ,AAAsBF;AAC5EY,AAAe/J,AACA,AAAA,AAAA,AAAA,AAACgK,AAAmCC,AACpC,AAAA,AAAA,AAAA,AAACb,AAAgC,AAAA,AAAA,AAAA,AAACc,AAAOlK,AAC/B,AAAA,AAAA,AAAA,AAACkK,AAAOlK,AAA+B4J;AAJtE,AAKE,AAAOC;AAAUE;;;;;;;;AAEzB,AAAA,AAAAI,AAAME,AAAevK;AAArB,AAAA,AAAAsK,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvG,AAAA,AAAAuG,AAAA,AAAA,AAAA,AAAA,AAAA1J,AAAAoD,AAAAsG,AAAAA;AAAAA,AAAgEpK;AAAhE,AAAA+D,AAAAqG,AAAA,AAAkCpG;AAAlC,AAAAD,AAAAqG,AAAA,AAAuCnG;AAAvC,AAAAF,AAAAqG,AAAA,AAAiDjB;AAAjD,AACE,AACE,AAAAjF,AAAI,AAAA,AAAM,AAAA,AAAciF;AAAxB,AAAA,AAAAjF;AAAAA;;AAAA,AAAAA,AAAoCF;AAApC,AAAA,AAAAE;AAAAA;;AAAyCD;;;;AAD3C,AAEGnE,AAAKE;;AAFR,AAIE,AAACiJ,AAAS,AAAC5C,AAAYvG;AAJzB,AAAA,AAKME;;AALN,AAQE,AAAAsK,AAAmB,AAACZ,AAA2B5J,AAAKE;AAApD,AAAAE,AAAAoK,AAAA,AAAA,AAAOxK;AAAP,AAAAI,AAAAoK,AAAA,AAAA,AAAYtK;AAAZ,AAAA,AACGF,AAAKE;;;;;AAEZ,AAAA,AAAMuK,AAAsBC,AAAI1I,AAAI3B;AAApC,AACE,AAAMsK,AAAgB,AAAA,AAAItK,AAAM,AAAA,AAAA,AAAiB,AAACS,AAAYT;AAA9D,AACE,AAAA,AAAA,AAAA,AAAmBqK,AAAgB1I,AAAI2I;;AAE3C,AAAA,AAAAC,AAAME,AAAsB9K;AAA5B,AAAA,AAAA6K,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9G,AAAA,AAAA8G,AAAA,AAAA,AAAA,AAAA,AAAAjK,AAAAoD,AAAA6G,AAAAA;AAAAA,AAAyD3K;AAAzD,AAAA+D,AAAA4G,AAAA,AAAyClE;AAAzC,AACE,AAAI,AAAI,AAACvB,AAAI,AAAA,AAAmBlF,AAAQ,AAACsE,AAAOmC;AAAhD,AACG3G,AAAKE;;AACN,AAAA,AAAM2J;AACAkB,AAAQ,AAACC,AAAS,AAAC3C,AAAOwB,AAAQ7J;AADxC,AAEE,AAAOiL,AAAGF;AACHjI,AAAS9C;;AADhB,AAEE,AAAI,AAACU,AAAIuK;AACP,AAAAC,AAAkB,AAACvJ,AAAMsJ;AAAzB,AAAA7K,AAAA8K,AAAA,AAAA,AAAOC;AAAP,AAAA/K,AAAA8K,AAAA,AAAA,AAASlJ;AAAT,AAAA5B,AAAA8K,AAAA,AAAA,AAAaE;AACPC,AAAO,AAACpH,AAAI0C,AAAWyE;AACvBE,AAAG,AAACb,AAAqB,AAAC9I,AAAM0J,AAAQrJ,AAAI,AAACuF,AAAO8D;AAF1D,AAGE,AAAO,AAACtK,AAAKkK;AAAI,AAACtC,AAAe7F,AAASqI,AAAEG;;;;;AAJhD,AAKGxI,AAAS5C","names":["markdown.links/href","text","link","state","vec__40654","cljs.core.nth","title","cljs.core/split-with","cljs.core.partial","cljs.core/not=","markdown.common.freeze_string","cljs.core/seq","cljs.core/not-empty","cljs.core.apply","cljs.core/str","clojure.string.join","cljs.core/rest","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","markdown.links/img","p__40668","vec__40670","seq40662","G__40663","cljs.core/first","cljs.core/next","G__40664","G__40665","self__4776__auto__","alt","url","markdown.links/handle-img-link","xs","cljs.core._EQ_","cljs.core.take","vec__40689","vec__40692","vec__40695","vec__40698","cljs.core.drop","xy","url-title","zy","new-text","new-state","markdown.links.img","cljs.core.concat","markdown.links/process-link-title","p1__40703#","p2__40702#","cljs.core.reduce","markdown.common/italics","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.links/make-link","img?","p__40709","map__40710","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","code","codeblock","or__4185__auto__","out","tokens","loop-state","cljs.core/empty?","vec__40784","vec__40787","vec__40790","vec__40793","vec__40796","head","ys","dud","zs","tail","cljs.core/count","cljs.core/not","cljs.core.not_EQ_","cljs.core/last","vec__40850","link-text","new-loop-state","and__4174__auto__","vec__40866","vec__40869","img-text","cljs.core/butlast","markdown.links/link","markdown.links/image","markdown.links/reference","cljs.core/re-find","markdown.links/parse-reference","reference","start","cljs.core.subs","clojure.string/trim","clojure.string.split","markdown.links/parse-reference-link","line","references","trimmed","temp__5735__auto__","cljs.core.swap_BANG_","cljs.core/assoc","markdown.links/replace-reference-link","vec__40894","vec__40897","id","markdown.links/encode-links","links","i","cljs.core/second","p__40925","vec__40926","encoded","cljs.core.assoc","markdown.common/gen-token","markdown.links/parse-links","cljs.core.into","cljs.core.map","p__40933","vec__40934","k","v","markdown.links/freeze-links","cljs.core/re-seq","encoded-links","cljs.core.fnil","p__40944","vec__40945","s","clojure.string/replace","cljs.core.update","cljs.core/merge","p__40986","map__40987","markdown.links/reference-link","markdown.links/implicit-reference-link","replacement-text","markdown.links/footnote","markdown.links/parse-footnote-link","footnotes","cljs.core/assoc-in","markdown.links/replace-footnote-link","footnote","next-fn-id","p__41003","map__41008","markdown.links/replace-all-footnote-links","matcher","match","next-text","clojure.string/replace-first","next-state","cljs.core.update_in","cljs.core/inc","cljs.core.get_in","p__41025","map__41026","markdown.links/footnote-link","vec__41029","markdown.links/make-image-reference","src","title-text","p__41033","map__41034","markdown.links/image-reference-link","matches","cljs.core.distinct","ms","vec__41041","m","ref","refval","im"],"sourcesContent":["(ns markdown.links\n  (:require [clojure.string :as string]\n            [markdown.common\n             :refer\n             [freeze-string\n              gen-token\n              strong\n              bold\n              em\n              italics\n              strikethrough]]))\n\n(defn href [text link state]\n  (let [[link title] (split-with (partial not= \\space) link)]\n    (freeze-string\n     (seq \"<a href='\") link (seq \"'\")\n     (if (not-empty title)\n       (seq (apply str \" title=\" (string/join (rest title)) \">\"))\n       (seq \">\"))\n     text (seq \"</a>\") state)))\n\n(defn img [alt url state & [title]]\n  (freeze-string\n    (seq \"<img src=\\\"\") url (seq \"\\\" alt=\\\"\") alt\n    (if (not-empty title)\n      (seq (apply str \"\\\" title=\" (string/join title) \" />\"))\n      (seq \"\\\" />\"))\n    state))\n\n(defn handle-img-link [xs state]\n  (if (= [\\[ \\! \\[] (take 3 xs))\n    (let [xs (drop 3 xs)\n          [alt xy] (split-with (partial not= \\]) xs)\n          [url-title zy] (->> xy (drop 2) (split-with (partial not= \\))))\n          [url title] (split-with (partial not= \\space) url-title)\n          [new-text new-state] (img alt url state (not-empty title))]\n      [(concat \"[\" new-text (rest zy)) new-state])\n    [xs state]))\n\n(defn process-link-title [title state]\n  (first\n    (reduce\n      #(apply %2 %1)\n      [title state]\n      [italics em strong bold strikethrough])))\n\n(defn make-link\n  [img?]\n  (fn link [text {:keys [code codeblock] :as state}]\n    (if (or code codeblock)\n      [text state]\n      (loop [out []\n             tokens (seq text)\n             loop-state state]\n        (if (empty? tokens)\n          [(string/join out) loop-state]\n          (let [[head xs] (split-with (partial not= \\[) tokens)\n                ;; Overwriting the loop-state here\n                [xs loop-state] (handle-img-link xs loop-state)\n                [title ys] (split-with (partial not= \\]) xs)\n                [dud zs] (split-with (partial not= \\() ys)\n                [link tail] (split-with (partial not= \\)) zs)]\n\n            (if (or (< (count link) 2)\n                    (< (count tail) 1)\n                    (> (count dud) 1))\n              (recur (concat out head (process-link-title title state) dud link) tail loop-state)\n              ;; Process a normal A anchor\n              (cond\n                (and (not img?) (not= (last head) \\!))\n                (let [[link-text new-loop-state] (href (rest (process-link-title title state)) (rest link) loop-state)]\n                  (recur (concat out head link-text) (rest tail) new-loop-state))\n                (and img? (= (last head) \\!))\n                (let [alt (rest title)\n                      [url title] (split-with (partial not= \\space) (rest link))\n                      title (process-link-title (string/join (rest title)) loop-state)\n                      ;; Now process / generate the img data\n                      [img-text new-loop-state] (img alt url loop-state title)]\n                  (recur (concat out (butlast head) img-text) (rest tail) new-loop-state))\n                :else [(string/join (concat out tokens)) loop-state]))))))))\n\n(def link (make-link false))\n(def image (make-link true))\n\n(defn reference [text]\n  (re-find #\"^\\[[a-zA-Z0-9 \\-_\\.]+\\]:\" text))\n\n(defn parse-reference [reference start]\n  (-> reference\n      (subs start)\n      (string/trim)\n      (string/split #\"\\s+\" 2)))\n\n(defn parse-reference-link [line references]\n  (let [trimmed (string/trim line)]\n    (when-let [link (reference trimmed)]\n      (swap! references assoc (subs link 0 (dec (count link)))\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-reference-link [references reference]\n  (let [[title id] (string/split reference #\"\\]\\s*\" 2)\n        [link alt] (get references id)]\n    (str \"<a href='\" link \"'\" (when alt (str \" title='\" (subs alt 1 (dec (count alt))) \"'\")) \">\" (subs title 1) \"</a>\")))\n\n(defn encode-links [links i]\n  (second\n    (reduce\n      (fn [[i encoded] link]\n        [(inc i) (assoc encoded (gen-token i) link)])\n      [i {}]\n      links)))\n\n(defn parse-links [references links]\n  (into {} (map\n             (fn [[k v]]\n               [k (replace-reference-link references v)])\n             links)))\n\n(defn freeze-links [references text state]\n  (let [links\n        (re-seq\n          #\"\\[[^\\]]+\\]\\s*\\[[a-zA-Z0-9 \\-_\\.]+\\]\"\n          text)\n        encoded-links\n        (encode-links links ((fnil count []) (:frozen-strings state)))]\n    [(reduce\n       (fn [s [id link]]\n         (string/replace s link id))\n       text encoded-links)\n     (update state :frozen-strings merge (parse-links references encoded-links))]))\n\n(defn reference-link [text {:keys [code codeblock references] :as state}]\n  (cond\n    (or (nil? references) code codeblock)\n    [text state]\n\n    (reference (string/trim text))\n    [\"\" state]\n\n    :else\n    (freeze-links references text state)))\n\n(defn implicit-reference-link [text state]\n  (let [replacement-text (string/replace text #\"\\[([^\\]]+)\\]\\[\\]\" \"[$1][$1]\")]\n    [replacement-text state]))\n\n(defn footnote [text]\n  (re-find #\"^\\[\\^[a-zA-Z0-9_-]+\\]:\" text))\n\n(defn parse-footnote-link [line footnotes]\n  (let [trimmed (string/trim line)]\n    (when-let [link (footnote trimmed)]\n      (swap! footnotes assoc-in [:unprocessed (subs link 0 (dec (count link)))]\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-footnote-link [footnotes footnote]\n  (let [next-fn-id (:next-fn-id footnotes)\n        link (str \"#fn-\" next-fn-id)]\n    (str \"<a href='\" link \"' id='fnref\" next-fn-id \"'><sup>\" next-fn-id \"</sup></a>\")))\n\n(defn replace-all-footnote-links [text {:keys [footnotes] :as state}]\n  (let [matcher #\"\\[\\^[a-zA-Z0-9_-]+\\]\"\n        match (re-find matcher text)]\n    (if (nil? match)\n      [text state]\n      (let [next-text (string/replace-first text matcher (partial replace-footnote-link footnotes))\n            next-state (-> state\n                           (update-in [:footnotes :next-fn-id] inc)\n                           (assoc-in [:footnotes :processed (get-in state [:footnotes :next-fn-id])]\n                                     (get-in state [:footnotes :unprocessed match])))]\n        (recur next-text next-state)))))\n\n(defn footnote-link [text {:keys [code codeblock footnotes] :as state}]\n  (cond\n    (or (nil? (:unprocessed footnotes)) code codeblock)\n    [text state]\n\n    (footnote (string/trim text))\n    [\"\" state]\n\n    :else\n    (let [[text state] (replace-all-footnote-links text state)]\n      [text state])))\n\n(defn make-image-reference [src alt title]\n  (let [title-text (str (if title (str \"\\\" title=\" (string/join title) \"\") \"\\\"\"))]\n    (str \"<img src=\\\"\" src \"\\\" alt=\\\"\" alt title-text \" />\")))\n\n(defn image-reference-link [text {:keys [references] :as state}]\n  (if (or (not (:reference-links? state)) (empty? references))\n    [text state]\n    (let [matcher #\"!\\[([^\\]]+)\\]\\s*(\\[[a-zA-Z0-9 ]+\\])\"\n          matches (distinct (re-seq matcher text))]\n      (loop [ms matches\n             new-text text]\n        (if (seq ms)\n          (let [[m alt ref] (first ms)\n                refval (get references ref)\n                im (make-image-reference (first refval) alt (second refval))]\n            (recur (rest ms) (string/replace new-text m im)))\n          [new-text state])))))\n"]}