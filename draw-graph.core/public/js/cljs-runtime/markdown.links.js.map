{"version":3,"sources":["markdown/links.cljc"],"mappings":"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","names":["markdown.links/href","text","link","state","vec__36070","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","title","cljs.core/split-with","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/not=","markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic","cljs.core/seq","cljs.core/not-empty","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/str","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core/rest","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","markdown.links/img","p__36077","vec__36078","seq36073","G__36074","cljs.core/first","cljs.core/next","G__36075","G__36076","self__4717__auto__","alt","url","markdown.links/handle-img-link","xs","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.take.cljs$core$IFn$_invoke$arity$2","vec__36083","vec__36086","vec__36089","vec__36092","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","xy","url-title","zy","new-text","new-state","markdown.links.img.cljs$core$IFn$_invoke$arity$variadic","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","markdown.links/process-link-title","p1__36171#","p2__36170#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","markdown.common/italics","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.links/make-link","img?","p__36183","map__36185","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","code","codeblock","or__4131__auto__","out","tokens","loop-state","cljs.core/empty?","vec__36235","vec__36238","vec__36241","vec__36244","vec__36247","head","ys","dud","zs","tail","cljs.core/count","cljs.core/not","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/last","vec__36250","link-text","new-loop-state","and__4120__auto__","vec__36262","vec__36265","img-text","cljs.core/butlast","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","markdown.links/link","markdown.links/image","markdown.links/reference","cljs.core/re-find","markdown.links/parse-reference","reference","start","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","clojure.string/trim","clojure.string.split.cljs$core$IFn$_invoke$arity$3","markdown.links/parse-reference-link","line","references","trimmed","temp__5720__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","markdown.links/replace-reference-link","vec__36274","vec__36277","id","markdown.links/encode-links","links","i","cljs.core/second","p__36280","vec__36281","encoded","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","markdown.common/gen-token","markdown.links/parse-links","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__36292","vec__36293","k","v","markdown.links/freeze-links","cljs.core/re-seq","encoded-links","G__36297","fexpr__36296","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","p__36298","vec__36299","s","clojure.string/replace","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","p__36304","map__36305","markdown.links/reference-link","markdown.links/implicit-reference-link","replacement-text","markdown.links/footnote","markdown.links/parse-footnote-link","footnotes","cljs.core/assoc-in","markdown.links/replace-footnote-link","footnote","next-fn-id","p__36316","map__36317","markdown.links/replace-all-footnote-links","matcher","match","next-text","clojure.string/replace-first","next-state","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/inc","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__36321","map__36322","markdown.links/footnote-link","vec__36328","markdown.links/make-image-reference","src","title-text","p__36332","map__36333","markdown.links/image-reference-link","matches","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","ms","vec__36339","m","ref","refval","im"],"sourcesContent":["(ns markdown.links\n  (:require [clojure.string :as string]\n            [markdown.common\n             :refer\n             [freeze-string\n              gen-token\n              strong\n              bold\n              em\n              italics\n              strikethrough]]))\n\n(defn href [text link state]\n  (let [[link title] (split-with (partial not= \\space) link)]\n    (freeze-string\n     (seq \"<a href='\") link (seq \"'\")\n     (if (not-empty title)\n       (seq (apply str \" title=\" (string/join (rest title)) \">\"))\n       (seq \">\"))\n     text (seq \"</a>\") state)))\n\n(defn img [alt url state & [title]]\n  (freeze-string\n    (seq \"<img src=\\\"\") url (seq \"\\\" alt=\\\"\") alt\n    (if (not-empty title)\n      (seq (apply str \"\\\" title=\" (string/join title) \" />\"))\n      (seq \"\\\" />\"))\n    state))\n\n(defn handle-img-link [xs state]\n  (if (= [\\[ \\! \\[] (take 3 xs))\n    (let [xs (drop 3 xs)\n          [alt xy] (split-with (partial not= \\]) xs)\n          [url-title zy] (->> xy (drop 2) (split-with (partial not= \\))))\n          [url title] (split-with (partial not= \\space) url-title)\n          [new-text new-state] (img alt url state (not-empty title))]\n      [(concat \"[\" new-text (rest zy)) new-state])\n    [xs state]))\n\n(defn process-link-title [title state]\n  (first\n    (reduce\n      #(apply %2 %1)\n      [title state]\n      [italics em strong bold strikethrough])))\n\n(defn make-link\n  [img?]\n  (fn link [text {:keys [code codeblock] :as state}]\n    (if (or code codeblock)\n      [text state]\n      (loop [out []\n             tokens (seq text)\n             loop-state state]\n        (if (empty? tokens)\n          [(string/join out) loop-state]\n          (let [[head xs] (split-with (partial not= \\[) tokens)\n                ;; Overwriting the loop-state here\n                [xs loop-state] (handle-img-link xs loop-state)\n                [title ys] (split-with (partial not= \\]) xs)\n                [dud zs] (split-with (partial not= \\() ys)\n                [link tail] (split-with (partial not= \\)) zs)]\n\n            (if (or (< (count link) 2)\n                    (< (count tail) 1)\n                    (> (count dud) 1))\n              (recur (concat out head (process-link-title title state) dud link) tail loop-state)\n              ;; Process a normal A anchor\n              (cond\n                (and (not img?) (not= (last head) \\!))\n                (let [[link-text new-loop-state] (href (rest (process-link-title title state)) (rest link) loop-state)]\n                  (recur (concat out head link-text) (rest tail) new-loop-state))\n                (and img? (= (last head) \\!))\n                (let [alt (rest title)\n                      [url title] (split-with (partial not= \\space) (rest link))\n                      title (process-link-title (string/join (rest title)) loop-state)\n                      ;; Now process / generate the img data\n                      [img-text new-loop-state] (img alt url loop-state title)]\n                  (recur (concat out (butlast head) img-text) (rest tail) new-loop-state))\n                :else [(string/join (concat out tokens)) loop-state]))))))))\n\n(def link (make-link false))\n(def image (make-link true))\n\n(defn reference [text]\n  (re-find #\"^\\[[a-zA-Z0-9 \\-_\\.]+\\]:\" text))\n\n(defn parse-reference [reference start]\n  (-> reference\n      (subs start)\n      (string/trim)\n      (string/split #\"\\s+\" 2)))\n\n(defn parse-reference-link [line references]\n  (let [trimmed (string/trim line)]\n    (when-let [link (reference trimmed)]\n      (swap! references assoc (subs link 0 (dec (count link)))\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-reference-link [references reference]\n  (let [[title id] (string/split reference #\"\\]\\s*\" 2)\n        [link alt] (get references id)]\n    (str \"<a href='\" link \"'\" (when alt (str \" title='\" (subs alt 1 (dec (count alt))) \"'\")) \">\" (subs title 1) \"</a>\")))\n\n(defn encode-links [links i]\n  (second\n    (reduce\n      (fn [[i encoded] link]\n        [(inc i) (assoc encoded (gen-token i) link)])\n      [i {}]\n      links)))\n\n(defn parse-links [references links]\n  (into {} (map\n             (fn [[k v]]\n               [k (replace-reference-link references v)])\n             links)))\n\n(defn freeze-links [references text state]\n  (let [links\n        (re-seq\n          #\"\\[[^\\]]+\\]\\s*\\[[a-zA-Z0-9 \\-_\\.]+\\]\"\n          text)\n        encoded-links\n        (encode-links links ((fnil count []) (:frozen-strings state)))]\n    [(reduce\n       (fn [s [id link]]\n         (string/replace s link id))\n       text encoded-links)\n     (update state :frozen-strings merge (parse-links references encoded-links))]))\n\n(defn reference-link [text {:keys [code codeblock references] :as state}]\n  (cond\n    (or (nil? references) code codeblock)\n    [text state]\n\n    (reference (string/trim text))\n    [\"\" state]\n\n    :else\n    (freeze-links references text state)))\n\n(defn implicit-reference-link [text state]\n  (let [replacement-text (string/replace text #\"\\[([^\\]]+)\\]\\[\\]\" \"[$1][$1]\")]\n    [replacement-text state]))\n\n(defn footnote [text]\n  (re-find #\"^\\[\\^[a-zA-Z0-9_-]+\\]:\" text))\n\n(defn parse-footnote-link [line footnotes]\n  (let [trimmed (string/trim line)]\n    (when-let [link (footnote trimmed)]\n      (swap! footnotes assoc-in [:unprocessed (subs link 0 (dec (count link)))]\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-footnote-link [footnotes footnote]\n  (let [next-fn-id (:next-fn-id footnotes)\n        link (str \"#fn-\" next-fn-id)]\n    (str \"<a href='\" link \"' id='fnref\" next-fn-id \"'><sup>\" next-fn-id \"</sup></a>\")))\n\n(defn replace-all-footnote-links [text {:keys [footnotes] :as state}]\n  (let [matcher #\"\\[\\^[a-zA-Z0-9_-]+\\]\"\n        match (re-find matcher text)]\n    (if (nil? match)\n      [text state]\n      (let [next-text (string/replace-first text matcher (partial replace-footnote-link footnotes))\n            next-state (-> state\n                           (update-in [:footnotes :next-fn-id] inc)\n                           (assoc-in [:footnotes :processed (get-in state [:footnotes :next-fn-id])]\n                                     (get-in state [:footnotes :unprocessed match])))]\n        (recur next-text next-state)))))\n\n(defn footnote-link [text {:keys [code codeblock footnotes] :as state}]\n  (cond\n    (or (nil? (:unprocessed footnotes)) code codeblock)\n    [text state]\n\n    (footnote (string/trim text))\n    [\"\" state]\n\n    :else\n    (let [[text state] (replace-all-footnote-links text state)]\n      [text state])))\n\n(defn make-image-reference [src alt title]\n  (let [title-text (str (if title (str \"\\\" title=\" (string/join title) \"\") \"\\\"\"))]\n    (str \"<img src=\\\"\" src \"\\\" alt=\\\"\" alt title-text \" />\")))\n\n(defn image-reference-link [text {:keys [references] :as state}]\n  (if (or (not (:reference-links? state)) (empty? references))\n    [text state]\n    (let [matcher #\"!\\[([^\\]]+)\\]\\s*(\\[[a-zA-Z0-9 ]+\\])\"\n          matches (distinct (re-seq matcher text))]\n      (loop [ms matches\n             new-text text]\n        (if (seq ms)\n          (let [[m alt ref] (first ms)\n                refval (get references ref)\n                im (make-image-reference (first refval) alt (second refval))]\n            (recur (rest ms) (string/replace new-text m im)))\n          [new-text state])))))\n"]}