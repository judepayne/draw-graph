{
"version":3,
"file":"goog.math.integer.js",
"lineCount":578,
"mappings":"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",
"sources":["goog/math/integer.js"],
"sourcesContent":["// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines an Integer class for representing (potentially)\n * infinite length two's-complement integer values.\n *\n * For the specific case of 64-bit integers, use goog.math.Long, which is more\n * efficient.\n *\n */\n\ngoog.provide('goog.math.Integer');\n\n\n\n/**\n * Constructs a two's-complement integer an array containing bits of the\n * integer in 32-bit (signed) pieces, given in little-endian order (i.e.,\n * lowest-order bits in the first piece), and the sign of -1 or 0.\n *\n * See the from* functions below for other convenient ways of constructing\n * Integers.\n *\n * The internal representation of an integer is an array of 32-bit signed\n * pieces, along with a sign (0 or -1) that indicates the contents of all the\n * other 32-bit pieces out to infinity.  We use 32-bit pieces because these are\n * the size of integers on which JavaScript performs bit-operations.  For\n * operations like addition and multiplication, we split each number into 16-bit\n * pieces, which can easily be multiplied within JavaScript's floating-point\n * representation without overflow or change in sign.\n *\n * @struct\n * @constructor\n * @param {Array<number>} bits Array containing the bits of the number.\n * @param {number} sign The sign of the number: -1 for negative and 0 positive.\n * @final\n */\ngoog.math.Integer = function(bits, sign) {\n  /**\n   * @type {!Array<number>}\n   * @private\n   */\n  this.bits_ = [];\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.sign_ = sign;\n\n  // Copy the 32-bit signed integer values passed in.  We prune out those at the\n  // top that equal the sign since they are redundant.\n  var top = true;\n  for (var i = bits.length - 1; i >= 0; i--) {\n    var val = bits[i] | 0;\n    if (!top || val != sign) {\n      this.bits_[i] = val;\n      top = false;\n    }\n  }\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Integer representations of small integer values.\n * @type {!Object}\n * @private\n */\ngoog.math.Integer.IntCache_ = {};\n\n\n/**\n * Returns an Integer representing the given (32-bit) integer value.\n * @param {number} value A 32-bit integer value.\n * @return {!goog.math.Integer} The corresponding Integer value.\n */\ngoog.math.Integer.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = goog.math.Integer.IntCache_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new goog.math.Integer([value | 0], value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    goog.math.Integer.IntCache_[value] = obj;\n  }\n  return obj;\n};\n\n\n/**\n * Returns an Integer representing the given value, provided that it is a finite\n * number.  Otherwise, zero is returned.\n * @param {number} value The value in question.\n * @return {!goog.math.Integer} The corresponding Integer value.\n */\ngoog.math.Integer.fromNumber = function(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return goog.math.Integer.ZERO;\n  } else if (value < 0) {\n    return goog.math.Integer.fromNumber(-value).negate();\n  } else {\n    var bits = [];\n    var pow = 1;\n    for (var i = 0; value >= pow; i++) {\n      bits[i] = (value / pow) | 0;\n      pow *= goog.math.Integer.TWO_PWR_32_DBL_;\n    }\n    return new goog.math.Integer(bits, 0);\n  }\n};\n\n\n/**\n * Returns a Integer representing the value that comes by concatenating the\n * given entries, each is assumed to be 32 signed bits, given in little-endian\n * order (lowest order bits in the lowest index), and sign-extending the highest\n * order 32-bit value.\n * @param {Array<number>} bits The bits of the number, in 32-bit signed pieces,\n *     in little-endian order.\n * @return {!goog.math.Integer} The corresponding Integer value.\n */\ngoog.math.Integer.fromBits = function(bits) {\n  var high = bits[bits.length - 1];\n  return new goog.math.Integer(bits, high & (1 << 31) ? -1 : 0);\n};\n\n\n/**\n * Returns an Integer representation of the given string, written using the\n * given radix.\n * @param {string} str The textual representation of the Integer.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!goog.math.Integer} The corresponding Integer value.\n */\ngoog.math.Integer.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw new Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw new Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return goog.math.Integer.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw new Error('number format error: interior \"-\" character');\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = goog.math.Integer.fromNumber(Math.pow(radix, 8));\n\n  var result = goog.math.Integer.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = goog.math.Integer.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(goog.math.Integer.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(goog.math.Integer.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n\n/**\n * A number used repeatedly in calculations.  This must appear before the first\n * call to the from* functions below.\n * @type {number}\n * @private\n */\ngoog.math.Integer.TWO_PWR_32_DBL_ = (1 << 16) * (1 << 16);\n\n\n/** @type {!goog.math.Integer} */\ngoog.math.Integer.ZERO = goog.math.Integer.fromInt(0);\n\n\n/** @type {!goog.math.Integer} */\ngoog.math.Integer.ONE = goog.math.Integer.fromInt(1);\n\n\n/**\n * @type {!goog.math.Integer}\n * @private\n */\ngoog.math.Integer.TWO_PWR_24_ = goog.math.Integer.fromInt(1 << 24);\n\n\n/**\n * Returns the value, assuming it is a 32-bit integer.\n * @return {number} The corresponding int value.\n */\ngoog.math.Integer.prototype.toInt = function() {\n  return this.bits_.length > 0 ? this.bits_[0] : this.sign_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\ngoog.math.Integer.prototype.toNumber = function() {\n  if (this.isNegative()) {\n    return -this.negate().toNumber();\n  } else {\n    var val = 0;\n    var pow = 1;\n    for (var i = 0; i < this.bits_.length; i++) {\n      val += this.getBitsUnsigned(i) * pow;\n      pow *= goog.math.Integer.TWO_PWR_32_DBL_;\n    }\n    return val;\n  }\n};\n\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\ngoog.math.Integer.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw new Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  } else if (this.isNegative()) {\n    return '-' + this.negate().toString(radix);\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = goog.math.Integer.fromNumber(Math.pow(radix, 6));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.divide(radixToPower);\n    // The right shifting fixes negative values in the case when\n    // intval >= 2^31; for more details see\n    // https://github.com/google/closure-library/pull/498\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n\n/**\n * Returns the index-th 32-bit (signed) piece of the Integer according to\n * little-endian order (i.e., index 0 contains the smallest bits).\n * @param {number} index The index in question.\n * @return {number} The requested 32-bits as a signed number.\n */\ngoog.math.Integer.prototype.getBits = function(index) {\n  if (index < 0) {\n    return 0;  // Allowing this simplifies bit shifting operations below...\n  } else if (index < this.bits_.length) {\n    return this.bits_[index];\n  } else {\n    return this.sign_;\n  }\n};\n\n\n/**\n * Returns the index-th 32-bit piece as an unsigned number.\n * @param {number} index The index in question.\n * @return {number} The requested 32-bits as an unsigned number.\n */\ngoog.math.Integer.prototype.getBitsUnsigned = function(index) {\n  var val = this.getBits(index);\n  return val >= 0 ? val : goog.math.Integer.TWO_PWR_32_DBL_ + val;\n};\n\n\n/** @return {number} The sign bit of this number, -1 or 0. */\ngoog.math.Integer.prototype.getSign = function() {\n  return this.sign_;\n};\n\n\n/** @return {boolean} Whether this value is zero. */\ngoog.math.Integer.prototype.isZero = function() {\n  if (this.sign_ != 0) {\n    return false;\n  }\n  for (var i = 0; i < this.bits_.length; i++) {\n    if (this.bits_[i] != 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\ngoog.math.Integer.prototype.isNegative = function() {\n  return this.sign_ == -1;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\ngoog.math.Integer.prototype.isOdd = function() {\n  return (this.bits_.length == 0) && (this.sign_ == -1) ||\n      (this.bits_.length > 0) && ((this.bits_[0] & 1) != 0);\n};\n\n\n/**\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {boolean} Whether this Integer equals the other.\n */\ngoog.math.Integer.prototype.equals = function(other) {\n  if (this.sign_ != other.sign_) {\n    return false;\n  }\n  var len = Math.max(this.bits_.length, other.bits_.length);\n  for (var i = 0; i < len; i++) {\n    if (this.getBits(i) != other.getBits(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {boolean} Whether this Integer does not equal the other.\n */\ngoog.math.Integer.prototype.notEquals = function(other) {\n  return !this.equals(other);\n};\n\n\n/**\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {boolean} Whether this Integer is greater than the other.\n */\ngoog.math.Integer.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {boolean} Whether this Integer is greater than or equal to the other.\n */\ngoog.math.Integer.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {boolean} Whether this Integer is less than the other.\n */\ngoog.math.Integer.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {boolean} Whether this Integer is less than or equal to the other.\n */\ngoog.math.Integer.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * Compares this Integer with the given one.\n * @param {goog.math.Integer} other Integer to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\ngoog.math.Integer.prototype.compare = function(other) {\n  var diff = this.subtract(other);\n  if (diff.isNegative()) {\n    return -1;\n  } else if (diff.isZero()) {\n    return 0;\n  } else {\n    return +1;\n  }\n};\n\n\n/**\n * Returns an integer with only the first numBits bits of this value, sign\n * extended from the final bit.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Integer} The shorted integer value.\n */\ngoog.math.Integer.prototype.shorten = function(numBits) {\n  var arr_index = (numBits - 1) >> 5;\n  var bit_index = (numBits - 1) % 32;\n  var bits = [];\n  for (var i = 0; i < arr_index; i++) {\n    bits[i] = this.getBits(i);\n  }\n  var sigBits = bit_index == 31 ? 0xFFFFFFFF : (1 << (bit_index + 1)) - 1;\n  var val = this.getBits(arr_index) & sigBits;\n  if (val & (1 << bit_index)) {\n    val |= 0xFFFFFFFF - sigBits;\n    bits[arr_index] = val;\n    return new goog.math.Integer(bits, -1);\n  } else {\n    bits[arr_index] = val;\n    return new goog.math.Integer(bits, 0);\n  }\n};\n\n\n/** @return {!goog.math.Integer} The negation of this value. */\ngoog.math.Integer.prototype.negate = function() {\n  return this.not().add(goog.math.Integer.ONE);\n};\n\n\n/**\n * Returns the sum of this and the given Integer.\n * @param {goog.math.Integer} other The Integer to add to this.\n * @return {!goog.math.Integer} The Integer result.\n */\ngoog.math.Integer.prototype.add = function(other) {\n  var len = Math.max(this.bits_.length, other.bits_.length);\n  var arr = [];\n  var carry = 0;\n\n  for (var i = 0; i <= len; i++) {\n    var a1 = this.getBits(i) >>> 16;\n    var a0 = this.getBits(i) & 0xFFFF;\n\n    var b1 = other.getBits(i) >>> 16;\n    var b0 = other.getBits(i) & 0xFFFF;\n\n    var c0 = carry + a0 + b0;\n    var c1 = (c0 >>> 16) + a1 + b1;\n    carry = c1 >>> 16;\n    c0 &= 0xFFFF;\n    c1 &= 0xFFFF;\n    arr[i] = (c1 << 16) | c0;\n  }\n  return goog.math.Integer.fromBits(arr);\n};\n\n\n/**\n * Returns the difference of this and the given Integer.\n * @param {goog.math.Integer} other The Integer to subtract from this.\n * @return {!goog.math.Integer} The Integer result.\n */\ngoog.math.Integer.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given Integer.\n * @param {goog.math.Integer} other The Integer to multiply against this.\n * @return {!goog.math.Integer} The product of this and the other.\n */\ngoog.math.Integer.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return goog.math.Integer.ZERO;\n  } else if (other.isZero()) {\n    return goog.math.Integer.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both numbers are small, use float multiplication\n  if (this.lessThan(goog.math.Integer.TWO_PWR_24_) &&\n      other.lessThan(goog.math.Integer.TWO_PWR_24_)) {\n    return goog.math.Integer.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Fill in an array of 16-bit products.\n  var len = this.bits_.length + other.bits_.length;\n  var arr = [];\n  for (var i = 0; i < 2 * len; i++) {\n    arr[i] = 0;\n  }\n  for (var i = 0; i < this.bits_.length; i++) {\n    for (var j = 0; j < other.bits_.length; j++) {\n      var a1 = this.getBits(i) >>> 16;\n      var a0 = this.getBits(i) & 0xFFFF;\n\n      var b1 = other.getBits(j) >>> 16;\n      var b0 = other.getBits(j) & 0xFFFF;\n\n      arr[2 * i + 2 * j] += a0 * b0;\n      goog.math.Integer.carry16_(arr, 2 * i + 2 * j);\n      arr[2 * i + 2 * j + 1] += a1 * b0;\n      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);\n      arr[2 * i + 2 * j + 1] += a0 * b1;\n      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);\n      arr[2 * i + 2 * j + 2] += a1 * b1;\n      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 2);\n    }\n  }\n\n  // Combine the 16-bit values into 32-bit values.\n  for (var i = 0; i < len; i++) {\n    arr[i] = (arr[2 * i + 1] << 16) | arr[2 * i];\n  }\n  for (var i = len; i < 2 * len; i++) {\n    arr[i] = 0;\n  }\n  return new goog.math.Integer(arr, 0);\n};\n\n\n/**\n * Carries any overflow from the given index into later entries.\n * @param {Array<number>} bits Array of 16-bit values in little-endian order.\n * @param {number} index The index in question.\n * @private\n */\ngoog.math.Integer.carry16_ = function(bits, index) {\n  while ((bits[index] & 0xFFFF) != bits[index]) {\n    bits[index + 1] += bits[index] >>> 16;\n    bits[index] &= 0xFFFF;\n    index++;\n  }\n};\n\n\n/**\n * Returns \"this\" Integer divided by the given one. Both \"this\" and the given\n * Integer MUST be positive.\n *\n * This method is only needed for very large numbers (>10^308),\n * for which the original division algorithm gets into an infinite\n * loop (see https://github.com/google/closure-library/issues/500).\n *\n * The algorithm has some possible performance enhancements (or\n * could be rewritten entirely), it's just an initial solution for\n * the issue linked above.\n *\n * @param {!goog.math.Integer} other The Integer to divide \"this\" by.\n * @return {!goog.math.Integer} \"this\" value divided by the given one.\n * @private\n */\ngoog.math.Integer.prototype.slowDivide_ = function(other) {\n  if (this.isNegative() || other.isNegative()) {\n    throw new Error('slowDivide_ only works with positive integers.');\n  }\n\n  var twoPower = goog.math.Integer.ONE;\n  var multiple = other;\n\n  // First we have to figure out what the highest bit of the result\n  // is, so we increase \"twoPower\" and \"multiple\" until \"multiple\"\n  // exceeds \"this\".\n  while (multiple.lessThanOrEqual(this)) {\n    twoPower = twoPower.shiftLeft(1);\n    multiple = multiple.shiftLeft(1);\n  }\n\n  // Rewind by one power of two, giving us the highest bit of the\n  // result.\n  var res = twoPower.shiftRight(1);\n  var total = multiple.shiftRight(1);\n\n  // Now we starting decreasing \"multiple\" and \"twoPower\" to find the\n  // rest of the bits of the result.\n  var total2;\n  multiple = multiple.shiftRight(2);\n  twoPower = twoPower.shiftRight(2);\n  while (!multiple.isZero()) {\n    // whenever we can add \"multiple\" to the total and not exceed\n    // \"this\", that means we've found a 1 bit. Else we've found a 0\n    // and don't need to add to the result.\n    total2 = total.add(multiple);\n    if (total2.lessThanOrEqual(this)) {\n      res = res.add(twoPower);\n      total = total2;\n    }\n    multiple = multiple.shiftRight(1);\n    twoPower = twoPower.shiftRight(1);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Integer divided by the given one.\n * @param {!goog.math.Integer} other The Integer to divide this by.\n * @return {!goog.math.Integer} This value divided by the given one.\n */\ngoog.math.Integer.prototype.divide = function(other) {\n  if (other.isZero()) {\n    throw new Error('division by zero');\n  } else if (this.isZero()) {\n    return goog.math.Integer.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().divide(other.negate());\n    } else {\n      return this.negate().divide(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.divide(other.negate()).negate();\n  }\n\n  // Have to degrade to slowDivide for Very Large Numbers, because\n  // they're out of range for the floating-point approximation\n  // technique used below.\n  if (this.bits_.length > 30) {\n    return this.slowDivide_(other);\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = goog.math.Integer.ZERO;\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = goog.math.Integer.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = goog.math.Integer.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = goog.math.Integer.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Integer modulo the given one.\n * @param {!goog.math.Integer} other The Integer by which to mod.\n * @return {!goog.math.Integer} This value modulo the given one.\n */\ngoog.math.Integer.prototype.modulo = function(other) {\n  return this.subtract(this.divide(other).multiply(other));\n};\n\n\n/** @return {!goog.math.Integer} The bitwise-NOT of this value. */\ngoog.math.Integer.prototype.not = function() {\n  var len = this.bits_.length;\n  var arr = [];\n  for (var i = 0; i < len; i++) {\n    arr[i] = ~this.bits_[i];\n  }\n  return new goog.math.Integer(arr, ~this.sign_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Integer and the given one.\n * @param {goog.math.Integer} other The Integer to AND with this.\n * @return {!goog.math.Integer} The bitwise-AND of this and the other.\n */\ngoog.math.Integer.prototype.and = function(other) {\n  var len = Math.max(this.bits_.length, other.bits_.length);\n  var arr = [];\n  for (var i = 0; i < len; i++) {\n    arr[i] = this.getBits(i) & other.getBits(i);\n  }\n  return new goog.math.Integer(arr, this.sign_ & other.sign_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Integer and the given one.\n * @param {goog.math.Integer} other The Integer to OR with this.\n * @return {!goog.math.Integer} The bitwise-OR of this and the other.\n */\ngoog.math.Integer.prototype.or = function(other) {\n  var len = Math.max(this.bits_.length, other.bits_.length);\n  var arr = [];\n  for (var i = 0; i < len; i++) {\n    arr[i] = this.getBits(i) | other.getBits(i);\n  }\n  return new goog.math.Integer(arr, this.sign_ | other.sign_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Integer and the given one.\n * @param {goog.math.Integer} other The Integer to XOR with this.\n * @return {!goog.math.Integer} The bitwise-XOR of this and the other.\n */\ngoog.math.Integer.prototype.xor = function(other) {\n  var len = Math.max(this.bits_.length, other.bits_.length);\n  var arr = [];\n  for (var i = 0; i < len; i++) {\n    arr[i] = this.getBits(i) ^ other.getBits(i);\n  }\n  return new goog.math.Integer(arr, this.sign_ ^ other.sign_);\n};\n\n\n/**\n * Returns this value with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Integer} This shifted to the left by the given amount.\n */\ngoog.math.Integer.prototype.shiftLeft = function(numBits) {\n  var arr_delta = numBits >> 5;\n  var bit_delta = numBits % 32;\n  var len = this.bits_.length + arr_delta + (bit_delta > 0 ? 1 : 0);\n  var arr = [];\n  for (var i = 0; i < len; i++) {\n    if (bit_delta > 0) {\n      arr[i] = (this.getBits(i - arr_delta) << bit_delta) |\n          (this.getBits(i - arr_delta - 1) >>> (32 - bit_delta));\n    } else {\n      arr[i] = this.getBits(i - arr_delta);\n    }\n  }\n  return new goog.math.Integer(arr, this.sign_);\n};\n\n\n/**\n * Returns this value with bits shifted to the right by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Integer} This shifted to the right by the given amount.\n */\ngoog.math.Integer.prototype.shiftRight = function(numBits) {\n  var arr_delta = numBits >> 5;\n  var bit_delta = numBits % 32;\n  var len = this.bits_.length - arr_delta;\n  var arr = [];\n  for (var i = 0; i < len; i++) {\n    if (bit_delta > 0) {\n      arr[i] = (this.getBits(i + arr_delta) >>> bit_delta) |\n          (this.getBits(i + arr_delta + 1) << (32 - bit_delta));\n    } else {\n      arr[i] = this.getBits(i + arr_delta);\n    }\n  }\n  return new goog.math.Integer(arr, this.sign_);\n};\n"],
"names":["goog","provide","math","Integer","goog.math.Integer","bits","sign","bits_","sign_","top","i","length","val","IntCache_","fromInt","goog.math.Integer.fromInt","value","cachedObj","obj","fromNumber","goog.math.Integer.fromNumber","isNaN","isFinite","ZERO","negate","pow","TWO_PWR_32_DBL_","fromBits","goog.math.Integer.fromBits","high","fromString","goog.math.Integer.fromString","str","opt_radix","Error","radix","charAt","substring","indexOf","radixToPower","Math","result","size","min","parseInt","power","multiply","add","ONE","TWO_PWR_24_","prototype","toInt","goog.math.Integer.prototype.toInt","toNumber","goog.math.Integer.prototype.toNumber","isNegative","getBitsUnsigned","toString","goog.math.Integer.prototype.toString","isZero","rem","remDiv","divide","intval","subtract","digits","getBits","goog.math.Integer.prototype.getBits","index","goog.math.Integer.prototype.getBitsUnsigned","getSign","goog.math.Integer.prototype.getSign","goog.math.Integer.prototype.isZero","goog.math.Integer.prototype.isNegative","isOdd","goog.math.Integer.prototype.isOdd","equals","goog.math.Integer.prototype.equals","other","len","max","notEquals","goog.math.Integer.prototype.notEquals","greaterThan","goog.math.Integer.prototype.greaterThan","compare","greaterThanOrEqual","goog.math.Integer.prototype.greaterThanOrEqual","lessThan","goog.math.Integer.prototype.lessThan","lessThanOrEqual","goog.math.Integer.prototype.lessThanOrEqual","goog.math.Integer.prototype.compare","diff","shorten","goog.math.Integer.prototype.shorten","numBits","arr_index","bit_index","sigBits","goog.math.Integer.prototype.negate","not","goog.math.Integer.prototype.add","arr","carry","a1","a0","b1","b0","c0","c1","goog.math.Integer.prototype.subtract","goog.math.Integer.prototype.multiply","j","carry16_","goog.math.Integer.carry16_","slowDivide_","goog.math.Integer.prototype.slowDivide_","twoPower","multiple","shiftLeft","res","shiftRight","total","total2","goog.math.Integer.prototype.divide","approx","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","goog.math.Integer.prototype.modulo","goog.math.Integer.prototype.not","and","goog.math.Integer.prototype.and","or","goog.math.Integer.prototype.or","xor","goog.math.Integer.prototype.xor","goog.math.Integer.prototype.shiftLeft","arr_delta","bit_delta","goog.math.Integer.prototype.shiftRight"]
}
