{
"version":3,
"file":"module$node_modules$svg_pan_zoom$src$shadow_viewport.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/svg-pan-zoom/src/shadow-viewport.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$svg_pan_zoom$src$shadow_viewport\"] = function(global,require,module,exports) {\nvar SvgUtils = require('./svg-utilities')\n  , Utils = require('./utilities')\n  ;\n\nvar ShadowViewport = function(viewport, options){\n  this.init(viewport, options)\n}\n\n/**\n * Initialization\n *\n * @param  {SVGElement} viewport\n * @param  {Object} options\n */\nShadowViewport.prototype.init = function(viewport, options) {\n  // DOM Elements\n  this.viewport = viewport\n  this.options = options\n\n  // State cache\n  this.originalState = {zoom: 1, x: 0, y: 0}\n  this.activeState = {zoom: 1, x: 0, y: 0}\n\n  this.updateCTMCached = Utils.proxy(this.updateCTM, this)\n\n  // Create a custom requestAnimationFrame taking in account refreshRate\n  this.requestAnimationFrame = Utils.createRequestAnimationFrame(this.options.refreshRate)\n\n  // ViewBox\n  this.viewBox = {x: 0, y: 0, width: 0, height: 0}\n  this.cacheViewBox()\n\n  // Process CTM\n  var newCTM = this.processCTM()\n\n  // Update viewport CTM and cache zoom and pan\n  this.setCTM(newCTM)\n\n  // Update CTM in this frame\n  this.updateCTM()\n}\n\n/**\n * Cache initial viewBox value\n * If no viewBox is defined, then use viewport size/position instead for viewBox values\n */\nShadowViewport.prototype.cacheViewBox = function() {\n  var svgViewBox = this.options.svg.getAttribute('viewBox')\n\n  if (svgViewBox) {\n    var viewBoxValues = svgViewBox.split(/[\\s\\,]/).filter(function(v){return v}).map(parseFloat)\n\n    // Cache viewbox x and y offset\n    this.viewBox.x = viewBoxValues[0]\n    this.viewBox.y = viewBoxValues[1]\n    this.viewBox.width = viewBoxValues[2]\n    this.viewBox.height = viewBoxValues[3]\n\n    var zoom = Math.min(this.options.width / this.viewBox.width, this.options.height / this.viewBox.height)\n\n    // Update active state\n    this.activeState.zoom = zoom\n    this.activeState.x = (this.options.width - this.viewBox.width * zoom) / 2\n    this.activeState.y = (this.options.height - this.viewBox.height * zoom) / 2\n\n    // Force updating CTM\n    this.updateCTMOnNextFrame()\n\n    this.options.svg.removeAttribute('viewBox')\n  } else {\n    this.simpleViewBoxCache()\n  }\n}\n\n/**\n * Recalculate viewport sizes and update viewBox cache\n */\nShadowViewport.prototype.simpleViewBoxCache = function() {\n  var bBox = this.viewport.getBBox()\n\n  this.viewBox.x = bBox.x\n  this.viewBox.y = bBox.y\n  this.viewBox.width = bBox.width\n  this.viewBox.height = bBox.height\n}\n\n/**\n * Returns a viewbox object. Safe to alter\n *\n * @return {Object} viewbox object\n */\nShadowViewport.prototype.getViewBox = function() {\n  return Utils.extend({}, this.viewBox)\n}\n\n/**\n * Get initial zoom and pan values. Save them into originalState\n * Parses viewBox attribute to alter initial sizes\n *\n * @return {CTM} CTM object based on options\n */\nShadowViewport.prototype.processCTM = function() {\n  var newCTM = this.getCTM()\n\n  if (this.options.fit || this.options.contain) {\n    var newScale;\n    if (this.options.fit) {\n      newScale = Math.min(this.options.width/this.viewBox.width, this.options.height/this.viewBox.height);\n    } else {\n      newScale = Math.max(this.options.width/this.viewBox.width, this.options.height/this.viewBox.height);\n    }\n\n    newCTM.a = newScale; //x-scale\n    newCTM.d = newScale; //y-scale\n    newCTM.e = -this.viewBox.x * newScale; //x-transform\n    newCTM.f = -this.viewBox.y * newScale; //y-transform\n  }\n\n  if (this.options.center) {\n    var offsetX = (this.options.width - (this.viewBox.width + this.viewBox.x * 2) * newCTM.a) * 0.5\n      , offsetY = (this.options.height - (this.viewBox.height + this.viewBox.y * 2) * newCTM.a) * 0.5\n\n    newCTM.e = offsetX\n    newCTM.f = offsetY\n  }\n\n  // Cache initial values. Based on activeState and fix+center opitons\n  this.originalState.zoom = newCTM.a\n  this.originalState.x = newCTM.e\n  this.originalState.y = newCTM.f\n\n  return newCTM\n}\n\n/**\n * Return originalState object. Safe to alter\n *\n * @return {Object}\n */\nShadowViewport.prototype.getOriginalState = function() {\n  return Utils.extend({}, this.originalState)\n}\n\n/**\n * Return actualState object. Safe to alter\n *\n * @return {Object}\n */\nShadowViewport.prototype.getState = function() {\n  return Utils.extend({}, this.activeState)\n}\n\n/**\n * Get zoom scale\n *\n * @return {Float} zoom scale\n */\nShadowViewport.prototype.getZoom = function() {\n  return this.activeState.zoom\n}\n\n/**\n * Get zoom scale for pubilc usage\n *\n * @return {Float} zoom scale\n */\nShadowViewport.prototype.getRelativeZoom = function() {\n  return this.activeState.zoom / this.originalState.zoom\n}\n\n/**\n * Compute zoom scale for pubilc usage\n *\n * @return {Float} zoom scale\n */\nShadowViewport.prototype.computeRelativeZoom = function(scale) {\n  return scale / this.originalState.zoom\n}\n\n/**\n * Get pan\n *\n * @return {Object}\n */\nShadowViewport.prototype.getPan = function() {\n  return {x: this.activeState.x, y: this.activeState.y}\n}\n\n/**\n * Return cached viewport CTM value that can be safely modified\n *\n * @return {SVGMatrix}\n */\nShadowViewport.prototype.getCTM = function() {\n  var safeCTM = this.options.svg.createSVGMatrix()\n\n  // Copy values manually as in FF they are not itterable\n  safeCTM.a = this.activeState.zoom\n  safeCTM.b = 0\n  safeCTM.c = 0\n  safeCTM.d = this.activeState.zoom\n  safeCTM.e = this.activeState.x\n  safeCTM.f = this.activeState.y\n\n  return safeCTM\n}\n\n/**\n * Set a new CTM\n *\n * @param {SVGMatrix} newCTM\n */\nShadowViewport.prototype.setCTM = function(newCTM) {\n  var willZoom = this.isZoomDifferent(newCTM)\n    , willPan = this.isPanDifferent(newCTM)\n\n  if (willZoom || willPan) {\n    // Before zoom\n    if (willZoom) {\n      // If returns false then cancel zooming\n      if (this.options.beforeZoom(this.getRelativeZoom(), this.computeRelativeZoom(newCTM.a)) === false) {\n        newCTM.a = newCTM.d = this.activeState.zoom\n        willZoom = false\n      } else {\n        this.updateCache(newCTM);\n        this.options.onZoom(this.getRelativeZoom())\n      }\n    }\n\n    // Before pan\n    if (willPan) {\n      var preventPan = this.options.beforePan(this.getPan(), {x: newCTM.e, y: newCTM.f})\n          // If prevent pan is an object\n        , preventPanX = false\n        , preventPanY = false\n\n      // If prevent pan is Boolean false\n      if (preventPan === false) {\n        // Set x and y same as before\n        newCTM.e = this.getPan().x\n        newCTM.f = this.getPan().y\n\n        preventPanX = preventPanY = true\n      } else if (Utils.isObject(preventPan)) {\n        // Check for X axes attribute\n        if (preventPan.x === false) {\n          // Prevent panning on x axes\n          newCTM.e = this.getPan().x\n          preventPanX = true\n        } else if (Utils.isNumber(preventPan.x)) {\n          // Set a custom pan value\n          newCTM.e = preventPan.x\n        }\n\n        // Check for Y axes attribute\n        if (preventPan.y === false) {\n          // Prevent panning on x axes\n          newCTM.f = this.getPan().y\n          preventPanY = true\n        } else if (Utils.isNumber(preventPan.y)) {\n          // Set a custom pan value\n          newCTM.f = preventPan.y\n        }\n      }\n\n      // Update willPan flag\n      // Check if newCTM is still different\n      if ((preventPanX && preventPanY) || !this.isPanDifferent(newCTM)) {\n        willPan = false\n      } else {\n        this.updateCache(newCTM);\n        this.options.onPan(this.getPan());\n      }\n    }\n\n    // Check again if should zoom or pan\n    if (willZoom || willPan) {\n      this.updateCTMOnNextFrame()\n    }\n  }\n}\n\nShadowViewport.prototype.isZoomDifferent = function(newCTM) {\n  return this.activeState.zoom !== newCTM.a\n}\n\nShadowViewport.prototype.isPanDifferent = function(newCTM) {\n  return this.activeState.x !== newCTM.e || this.activeState.y !== newCTM.f\n}\n\n\n/**\n * Update cached CTM and active state\n *\n * @param {SVGMatrix} newCTM\n */\nShadowViewport.prototype.updateCache = function(newCTM) {\n  this.activeState.zoom = newCTM.a\n  this.activeState.x = newCTM.e\n  this.activeState.y = newCTM.f\n}\n\nShadowViewport.prototype.pendingUpdate = false\n\n/**\n * Place a request to update CTM on next Frame\n */\nShadowViewport.prototype.updateCTMOnNextFrame = function() {\n  if (!this.pendingUpdate) {\n    // Lock\n    this.pendingUpdate = true\n\n    // Throttle next update\n    this.requestAnimationFrame.call(window, this.updateCTMCached)\n  }\n}\n\n/**\n * Update viewport CTM with cached CTM\n */\nShadowViewport.prototype.updateCTM = function() {\n  var ctm = this.getCTM()\n\n  // Updates SVG element\n  SvgUtils.setCTM(this.viewport, ctm, this.defs)\n\n  // Free the lock\n  this.pendingUpdate = false\n\n  // Notify about the update\n  if(this.options.onUpdatedCTM) {\n    this.options.onUpdatedCTM(ctm)\n  }\n}\n\nmodule.exports = function(viewport, options){\n  return new ShadowViewport(viewport, options)\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","SvgUtils","Utils","ShadowViewport","viewport","options","init","prototype","ShadowViewport.prototype.init","originalState","zoom","x","y","activeState","updateCTMCached","proxy","updateCTM","requestAnimationFrame","createRequestAnimationFrame","refreshRate","viewBox","width","height","cacheViewBox","newCTM","processCTM","setCTM","ShadowViewport.prototype.cacheViewBox","svgViewBox","svg","getAttribute","viewBoxValues","split","filter","v","map","parseFloat","Math","min","updateCTMOnNextFrame","removeAttribute","simpleViewBoxCache","ShadowViewport.prototype.simpleViewBoxCache","bBox","getBBox","getViewBox","ShadowViewport.prototype.getViewBox","extend","ShadowViewport.prototype.processCTM","getCTM","fit","contain","newScale","max","a","d","e","f","center","offsetY","getOriginalState","ShadowViewport.prototype.getOriginalState","getState","ShadowViewport.prototype.getState","getZoom","ShadowViewport.prototype.getZoom","getRelativeZoom","ShadowViewport.prototype.getRelativeZoom","computeRelativeZoom","ShadowViewport.prototype.computeRelativeZoom","scale","getPan","ShadowViewport.prototype.getPan","ShadowViewport.prototype.getCTM","safeCTM","createSVGMatrix","b","c","ShadowViewport.prototype.setCTM","willZoom","isZoomDifferent","willPan","isPanDifferent","beforeZoom","updateCache","onZoom","preventPan","beforePan","preventPanX","preventPanY","isObject","isNumber","onPan","ShadowViewport.prototype.isZoomDifferent","ShadowViewport.prototype.isPanDifferent","ShadowViewport.prototype.updateCache","pendingUpdate","ShadowViewport.prototype.updateCTMOnNextFrame","call","window","ShadowViewport.prototype.updateCTM","ctm","defs","onUpdatedCTM","module.exports"]
}
