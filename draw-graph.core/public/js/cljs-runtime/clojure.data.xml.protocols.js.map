{"version":3,"sources":["clojure/data/xml/protocols.cljc"],"mappings":"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","names":["x__4433__auto__","m__4434__auto__","clojure.data.xml.protocols/qname-local","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","clojure.data.xml.protocols/qname-uri","clojure.data.xml.protocols/AsQName","qname","clojure.data.xml.protocols/gen-event","clojure.data.xml.protocols/next-events","clojure.data.xml.protocols/EventGeneration","item","next-items","clojure.data.xml.protocols/as-elements","clojure.data.xml.protocols/AsElements","expr","clojure.data.xml.protocols/xml-str","clojure.data.xml.protocols/AsXmlString","node"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.data.xml.protocols)\n\n;; XML names can be any data type that has at least a namespace uri and a name slot\n\n(defprotocol AsQName\n  (qname-local [qname] \"Get the name for this qname\")\n  (qname-uri   [qname] \"Get the namespace uri for this qname\"))\n\n(defprotocol EventGeneration\n  \"Protocol for generating new events based on element type\"\n  (gen-event [item]\n    \"Function to generate an event for e.\")\n  (next-events [item next-items]\n    \"Returns the next set of events that should occur after e.  next-events are the\n     events that should be generated after this one is complete.\"))\n\n(defprotocol AsElements\n  (as-elements [expr] \"Return a seq of elements represented by an expression.\"))\n\n(defprotocol AsXmlString\n  (xml-str [node] \"Serialize atribute value or content node\"))\n"]}