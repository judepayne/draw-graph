{"version":3,"sources":["promesa/core.cljc"],"mappings":"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","names":["promesa.core/Promise","promesa.impl.promise/Promise","promesa.core/schedule","ms","func","promesa.impl.scheduler/schedule","promesa.core/resolved","v","promesa.impl.promise/resolved","promesa.core/rejected","promesa.impl.promise/rejected","promesa.core/promise","promesa.impl.proto/-promise","promesa.core/promise?","promesa.core/resolved?","p","promesa.impl.proto/-resolved?","promesa.core/rejected?","promesa.impl.proto/-rejected?","promesa.core/pending?","promesa.impl.proto/-pending?","promesa.core/extract","promesa.impl.proto/-extract","promesa.core/done?","cljs.core/complement","promesa.core/map","f","promesa.impl.proto/-map","promesa.core/mapcat","promesa.impl.proto/-bind","promesa.core/bind","promesa.core/then","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","promesa.core/chain","seq29442","G__29443","cljs.core/first","cljs.core/next","self__4776__auto__","funcs","p1__29440#","p2__29441#","cljs.core.reduce","promesa.core/branch","success","failure","promesa.impl.proto/-catch","G__29470","promesa.core/catch","js/Error","pred-or-type","accept?","p1__29459#","cljs.core/ifn?","e","G__29489","promesa.core/error","promesa.core.catch$","type","promesa.core/err","promesa.core/finally","callback","promesa.core/all","promises","cljs.core.into_array","cljs.core/vec","promesa.core/any","promesa.core/cancel!","promesa.impl.proto/-cancel","promesa.core/cancelled?","promesa.impl.proto/-cancelled?","promesa.core/promisify","callable","args","resolve","reject","cljs.core.conj","e29542","cljs.core.apply","G__29561","promesa.core/timeout","t","G__29572","promesa.core/delay","promesa.core.delay","cljs.core/constantly","promesa.core/attempt","G__29590","promesa.core/await","seq29595","self__4777__auto__","cljs.core/seq","cljs.core.ex_info"],"sourcesContent":[";; Copyright (c) 2015-2016 Andrey Antukh <niwi@niwi.nz>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns promesa.core\n  (:refer-clojure :exclude [delay spread promise await map mapcat])\n  (:require [promesa.impl.promise :as pm]\n            [promesa.impl.proto :as pt]\n            [promesa.impl.scheduler :as ps])\n  #?(:clj\n     (:import java.util.concurrent.CompletableFuture\n              java.util.concurrent.CompletionStage)))\n\n;; --- Global Constants\n\n#?(:cljs (def ^:const Promise pm/Promise))\n\n#?(:clj\n   (defn set-executor!\n     \"Replace the default executor instance with\n     your own instance.\"\n     [executor]\n     (alter-var-root #'pm/+executor+ (constantly executor))))\n\n;; --- Scheduling helpers\n\n(defn schedule\n  \"Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function.\"\n  [ms func]\n  (ps/schedule ms func))\n\n;; --- Promise\n\n(defn resolved\n  \"Return a resolved promise with provided value.\"\n  [v]\n  (pm/resolved v))\n\n(defn rejected\n  \"Return a rejected promise with provided reason.\"\n  [v]\n  (pm/rejected v))\n\n(defn promise\n  \"The promise constructor.\"\n  [v]\n  (pt/-promise v))\n\n(defn promise?\n  \"Return true if `v` is a promise instance.\"\n  [v]\n  #?(:clj (instance? CompletionStage v)\n     :cljs (instance? Promise v)))\n\n;; Predicates\n\n(defn resolved?\n  \"Returns true if promise `p` is already fulfilled.\"\n  [p]\n  (pt/-resolved? p))\n\n(defn rejected?\n  \"Returns true if promise `p` is already rejected.\"\n  [p]\n  (pt/-rejected? p))\n\n(defn pending?\n  \"Returns true if promise `p` is stil pending.\"\n  [p]\n  (pt/-pending? p))\n\n(defn extract\n  \"Returns the current promise value.\"\n  [p]\n  (pt/-extract p))\n\n(def done?\n  \"Returns true if promise `p` is already done.\"\n  (complement pending?))\n\n;; Chaining\n\n(defn map\n  \"Apply a function to the promise value and\n  return a new promise with the result.\"\n  [f p]\n  (pt/-map p f))\n\n(defn mapcat\n  \"Same as `map` but removes one level of\n  promise neesting. Useful when the map function\n  returns a promise instead of value.\n\n  In JS environment this function is analogous\n  to `map` because the promise abstraction overloads\n  the `map` operator.\"\n  [f p]\n  (pt/-bind p f))\n\n(defn bind\n  \"A chain helper for promises.\"\n  [p f]\n  (pt/-bind p f))\n\n(defn then\n  \"Same as `map` but with parameters inverted\n  for convenience and for familiarity with\n  javascript's promises `.then` operator.\"\n  [p f]\n  (pt/-map p f))\n\n(defn chain\n  \"Like then but accepts multiple parameters.\"\n  [p & funcs]\n  (reduce #(then %1 %2) p funcs))\n\n(defn branch\n  [p success failure]\n  (-> p\n      (pt/-map success)\n      (pt/-catch failure)))\n\n(defn catch\n  \"Catch all promise chain helper.\"\n  ([p f]\n   (pt/-catch p f))\n  ([p pred-or-type f]\n   (let [accept? (if (ifn? pred-or-type)\n                   pred-or-type\n                   #(instance? pred-or-type %))]\n     (pt/-catch p (fn [e]\n                    (if (accept? e)\n                      (f e)\n                      (pm/rejected e)))))))\n\n(defn error\n  \"Same as `catch` but with parameters inverted.\"\n  ([f p] (catch p f))\n  ([f type p] (catch p type f)))\n\n(def err\n  \"A short alias for `error` function.\"\n  error)\n\n(defn finally\n  \"Attach handler to promise that will be\n  executed independently if promise is\n  resolved or rejected.\"\n  [p callback]\n  #?(:clj (-> p\n              (then #(callback))\n              (catch #(callback)))\n     :cljs (.finally p callback)))\n\n(defn all\n  \"Given an array of promises, return a promise\n  that is fulfilled  when all the items in the\n  array are fulfilled.\"\n  [promises]\n  #?(:cljs (then (.all Promise (into-array promises)) vec)\n     :clj (let [promises (clojure.core/map pt/-promise promises)]\n            (then (->> (into-array CompletableFuture promises)\n                       (CompletableFuture/allOf))\n                  (fn [_]\n                    (mapv pt/-extract promises))))))\n\n(defn any\n  \"Given an array of promises, return a promise\n  that is fulfilled when first one item in the\n  array is fulfilled.\"\n  [promises]\n  #?(:cljs (.any Promise (into-array promises))\n     :clj (->> (clojure.core/map pt/-promise promises)\n               (into-array CompletableFuture)\n               (CompletableFuture/anyOf))))\n\n;; Cancellation\n\n(defn cancel!\n  \"Cancel the promise.\"\n  [p]\n  (pt/-cancel p)\n  p)\n\n(defn cancelled?\n  \"Return true if `v` is a cancelled promise.\"\n  [v]\n  (pt/-cancelled? v))\n\n;; Utils\n\n(defn promisify\n  \"Given a function that accepts a callback as the last argument return other\n  function that returns a promise. Callback is expected to take single\n  parameter (result of a computation).\"\n  [callable]\n  (fn [& args]\n    (promise (fn [resolve reject]\n               (let [args (-> (vec args)\n                              (conj resolve))]\n                 (try\n                   (apply callable args)\n                   (catch #?(:clj Throwable :cljs js/Error) e\n                     (reject e))))))))\n\n#?(:cljs\n   (defn timeout\n     \"Returns a cancellable promise that will be fulfilled\n     with this promise's fulfillment value or rejection reason.\n     However, if this promise is not fulfilled or rejected\n     within `ms` milliseconds, the returned promise is cancelled\n     with a TimeoutError\"\n     ([p t] (.timeout p t))\n     ([p t v] (.timeout p t v))))\n\n(defn delay\n  \"Given a timeout in miliseconds and optional\n  value, returns a promise that will fulfilled\n  with provided value (or nil) after the\n  time is reached.\"\n  ([t] (delay t nil))\n  ([t v]\n   #?(:cljs (.then (.delay Promise t)\n                   (constantly v))\n      :clj (let [p (CompletableFuture.)]\n             (schedule t #(.complete p v))\n             p))))\n\n(defn attempt\n  \"A helper for start promise chain without worry about\n  synchronous or asynchronous exceptions. Returns a promise\n  resolved with the return value of the callback.\"\n  [callback]\n  #?(:cljs (promise (fn [resolve] (resolve (callback))))\n     :clj  (promise (fn [resolve reject]\n                      (let [result (callback)]\n                        (if (promise? result)\n                          (then result resolve)\n                          (resolve result)))))))\n\n#?(:clj\n   (defmacro do*\n     \"A sugar syntax on top of `attempt`.\"\n     [& body]\n     `(attempt #(do ~@body))))\n\n(defn await\n  [& args]\n  (throw (ex-info \"Should be only used in alet macro.\" {})))\n\n#?(:clj\n   (defmacro alet\n     \"A `let` alternative that always returns promise and allows\n     use `await` marker function in order to emulate the async/await\n     syntax and make the let expression look like synchronous where\n     async operations are performed.\"\n     [bindings & body]\n     (->> (reverse (partition 2 bindings))\n          (reduce (fn [acc [l r]]\n                    (if (and (coll? r) (symbol? (first r)))\n                      (let [mark (name (first r))]\n                        (if (= mark \"await\")\n                          `(bind ~(second r) (fn [~l] ~acc))\n                          `(let [~l ~r] ~acc)))\n                      `(let [~l ~r] ~acc)))\n                  `(promise (do ~@body))))))\n\n"]}