{
"version":3,
"file":"goog.dom.forms.js",
"lineCount":340,
"mappings":"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",
"sources":["goog/dom/forms.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for manipulating a form and elements.\n *\n * @author arv@google.com (Erik Arvidsson)\n * @suppress {strictMissingProperties}\n */\n\ngoog.provide('goog.dom.forms');\n\ngoog.require('goog.dom.InputType');\ngoog.require('goog.dom.TagName');\ngoog.require('goog.structs.Map');\ngoog.require('goog.window');\n\n\n\n/**\n * Submits form data via a new window. This hides references to the parent\n * window and should be used when submitting forms to untrusted 3rd party urls.\n * By default, this uses the action and method of the specified form\n * element. It is possible to override the default action and method if an\n * optional submit element with formaction and/or formmethod attributes is\n * provided.\n * @param {!HTMLFormElement} form The form.\n * @param {!HTMLElement=} opt_submitElement The `<button>` or `<input>` element\n *     used to submit the form. The element should have a submit type.\n * @return {boolean} true If the form was submitted succesfully.\n * @throws {!Error} If opt_submitElement is not a valid form submit element.\n */\ngoog.dom.forms.submitFormInNewWindow = function(form, opt_submitElement) {\n  var formData = goog.dom.forms.getFormDataMap(form);\n  var action = form.action;\n  var method = form.method;\n\n  if (opt_submitElement) {\n    if (goog.dom.InputType.SUBMIT != opt_submitElement.type.toLowerCase()) {\n      throw new Error('opt_submitElement does not have a valid type.');\n    }\n\n\n    var submitValue =\n        /** @type {?string} */ (goog.dom.forms.getValue(opt_submitElement));\n    if (submitValue != null) {\n      goog.dom.forms.addFormDataToMap_(\n          formData, opt_submitElement.name, submitValue);\n    }\n\n    if (opt_submitElement.getAttribute('formaction')) {\n      action = opt_submitElement.getAttribute('formaction');\n    }\n\n    if (opt_submitElement.getAttribute('formmethod')) {\n      method = opt_submitElement.getAttribute('formmethod');\n    }\n  }\n\n  return goog.dom.forms.submitFormDataInNewWindow(action, method, formData);\n};\n\n/**\n * Submits form data via a new window. This hides references to the parent\n * window and should be used when submitting forms to untrusted 3rd party urls.\n * @param {string} actionUri uri to submit form content to.\n * @param {string} method HTTP method used to submit the form.\n * @param {!goog.structs.Map<string, !Array<string>>} formData A map of the form\n *     data as field name to arrays of values.\n * @return {boolean} true If the form was submitted succesfully.\n */\ngoog.dom.forms.submitFormDataInNewWindow = function(\n    actionUri, method, formData) {\n  var newWin = goog.window.openBlank('', {noreferrer: true});\n\n  // This could be null if a new window could not be opened. e.g. if it was\n  // stopped by a popup blocker.\n  if (!newWin) {\n    return false;\n  }\n\n  var newDocument = newWin.document;\n\n  var newForm =\n      /** @type {!HTMLFormElement} */ (newDocument.createElement('form'));\n  newForm.method = method;\n  newForm.action = actionUri;\n\n  // After this point, do not directly reference the form object's functions as\n  // field names can shadow the form's properties.\n\n  formData.forEach(function(fieldValues, fieldName) {\n    for (var i = 0; i < fieldValues.length; i++) {\n      var fieldValue = fieldValues[i];\n      var newInput = newDocument.createElement('input');\n      newInput.name = fieldName;\n      newInput.value = fieldValue;\n      newInput.type = 'hidden';\n      HTMLFormElement.prototype.appendChild.call(newForm, newInput);\n    }\n  });\n\n  HTMLFormElement.prototype.submit.call(newForm);\n  return true;\n};\n\n\n/**\n * Returns form data as a map of name to value arrays. This doesn't\n * support file inputs.\n * @param {HTMLFormElement} form The form.\n * @return {!goog.structs.Map<string, !Array<string>>} A map of the form data\n *     as field name to arrays of values.\n */\ngoog.dom.forms.getFormDataMap = function(form) {\n  var map = new goog.structs.Map();\n  goog.dom.forms.getFormDataHelper_(\n      form, map, goog.dom.forms.addFormDataToMap_);\n  return map;\n};\n\n\n/**\n * Returns the form data as an application/x-www-url-encoded string. This\n * doesn't support file inputs.\n * @param {HTMLFormElement} form The form.\n * @return {string} An application/x-www-url-encoded string.\n */\ngoog.dom.forms.getFormDataString = function(form) {\n  var sb = [];\n  goog.dom.forms.getFormDataHelper_(\n      form, sb, goog.dom.forms.addFormDataToStringBuffer_);\n  return sb.join('&');\n};\n\n\n/**\n * Returns the form data as a map or an application/x-www-url-encoded\n * string. This doesn't support file inputs.\n * @param {HTMLFormElement} form The form.\n * @param {Object} result The object form data is being put in.\n * @param {Function} fnAppend Function that takes `result`, an element\n *     name, and an element value, and adds the name/value pair to the result\n *     object.\n * @private\n */\ngoog.dom.forms.getFormDataHelper_ = function(form, result, fnAppend) {\n  var els = form.elements;\n  for (var el, i = 0; el = els[i]; i++) {\n    if (  // Make sure we don't include elements that are not part of the form.\n        // Some browsers include non-form elements. Check for 'form' property.\n        // See http://code.google.com/p/closure-library/issues/detail?id=227\n        // and\n        // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#the-input-element\n        (el.form != form) || el.disabled ||\n        // HTMLFieldSetElement has a form property but no value.\n        el.tagName == goog.dom.TagName.FIELDSET) {\n      continue;\n    }\n\n    var name = el.name;\n    switch (el.type.toLowerCase()) {\n      case goog.dom.InputType.FILE:\n      // file inputs are not supported\n      case goog.dom.InputType.SUBMIT:\n      case goog.dom.InputType.RESET:\n      case goog.dom.InputType.BUTTON:\n        // don't submit these\n        break;\n      case goog.dom.InputType.SELECT_MULTIPLE:\n        var values = goog.dom.forms.getValue(el);\n        if (values != null) {\n          for (var value, j = 0; value = values[j]; j++) {\n            fnAppend(result, name, value);\n          }\n        }\n        break;\n      default:\n        var value = goog.dom.forms.getValue(el);\n        if (value != null) {\n          fnAppend(result, name, value);\n        }\n    }\n  }\n\n  // input[type=image] are not included in the elements collection\n  var inputs = form.getElementsByTagName(String(goog.dom.TagName.INPUT));\n  for (var input, i = 0; input = inputs[i]; i++) {\n    if (input.form == form &&\n        input.type.toLowerCase() == goog.dom.InputType.IMAGE) {\n      name = input.name;\n      fnAppend(result, name, input.value);\n      fnAppend(result, name + '.x', '0');\n      fnAppend(result, name + '.y', '0');\n    }\n  }\n};\n\n\n/**\n * Adds the name/value pair to the map.\n * @param {!goog.structs.Map<string, !Array<string>>} map The map to add to.\n * @param {string} name The name.\n * @param {string} value The value.\n * @private\n */\ngoog.dom.forms.addFormDataToMap_ = function(map, name, value) {\n  var array = map.get(name);\n  if (!array) {\n    array = [];\n    map.set(name, array);\n  }\n  array.push(value);\n};\n\n\n/**\n * Adds a name/value pair to an string buffer array in the form 'name=value'.\n * @param {Array<string>} sb The string buffer array for storing data.\n * @param {string} name The name.\n * @param {string} value The value.\n * @private\n */\ngoog.dom.forms.addFormDataToStringBuffer_ = function(sb, name, value) {\n  sb.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));\n};\n\n\n/**\n * Whether the form has a file input.\n * @param {HTMLFormElement} form The form.\n * @return {boolean} Whether the form has a file input.\n */\ngoog.dom.forms.hasFileInput = function(form) {\n  var els = form.elements;\n  for (var el, i = 0; el = els[i]; i++) {\n    if (!el.disabled && el.type &&\n        el.type.toLowerCase() == goog.dom.InputType.FILE) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Enables or disables either all elements in a form or a single form element.\n * @param {Element} el The element, either a form or an element within a form.\n * @param {boolean} disabled Whether the element should be disabled.\n */\ngoog.dom.forms.setDisabled = function(el, disabled) {\n  // disable all elements in a form\n  if (el.tagName == goog.dom.TagName.FORM) {\n    var els = /** @type {!HTMLFormElement} */ (el).elements;\n    for (var i = 0; el = els[i]; i++) {\n      goog.dom.forms.setDisabled(el, disabled);\n    }\n  } else {\n    // makes sure to blur buttons, multi-selects, and any elements which\n    // maintain keyboard/accessibility focus when disabled\n    if (disabled == true) {\n      el.blur();\n    }\n    el.disabled = disabled;\n  }\n};\n\n\n/**\n * Focuses, and optionally selects the content of, a form element.\n * @param {Element} el The form element.\n */\ngoog.dom.forms.focusAndSelect = function(el) {\n  el.focus();\n  if (el.select) {\n    el.select();\n  }\n};\n\n\n/**\n * Whether a form element has a value.\n * @param {Element} el The element.\n * @return {boolean} Whether the form has a value.\n */\ngoog.dom.forms.hasValue = function(el) {\n  var value = goog.dom.forms.getValue(el);\n  return !!value;\n};\n\n\n/**\n * Whether a named form field has a value.\n * @param {HTMLFormElement} form The form element.\n * @param {string} name Name of an input to the form.\n * @return {boolean} Whether the form has a value.\n */\ngoog.dom.forms.hasValueByName = function(form, name) {\n  var value = goog.dom.forms.getValueByName(form, name);\n  return !!value;\n};\n\n\n/**\n * Gets the current value of any element with a type.\n * @param {Element} el The element.\n * @return {string|Array<string>|null} The current value of the element\n *     (or null).\n */\ngoog.dom.forms.getValue = function(el) {\n  // Elements with a type may need more specialized logic.\n  var type = /** @type {!HTMLInputElement} */ (el).type;\n  switch (goog.isString(type) && type.toLowerCase()) {\n    case goog.dom.InputType.CHECKBOX:\n    case goog.dom.InputType.RADIO:\n      return goog.dom.forms.getInputChecked_(el);\n    case goog.dom.InputType.SELECT_ONE:\n      return goog.dom.forms.getSelectSingle_(el);\n    case goog.dom.InputType.SELECT_MULTIPLE:\n      return goog.dom.forms.getSelectMultiple_(el);\n    default:\n      // Not every element with a value has a type (e.g. meter and progress).\n      return el.value != null ? el.value : null;\n  }\n};\n\n\n/**\n * Returns the value of the named form field. In the case of radio buttons,\n * returns the value of the checked button with the given name.\n *\n * @param {HTMLFormElement} form The form element.\n * @param {string} name Name of an input to the form.\n *\n * @return {Array<string>|string|null} The value of the form element, or\n *     null if the form element does not exist or has no value.\n */\ngoog.dom.forms.getValueByName = function(form, name) {\n  var els = form.elements[name];\n\n  if (els) {\n    if (els.type) {\n      return goog.dom.forms.getValue(els);\n    } else {\n      for (var i = 0; i < els.length; i++) {\n        var val = goog.dom.forms.getValue(els[i]);\n        if (val) {\n          return val;\n        }\n      }\n    }\n  }\n  return null;\n};\n\n\n/**\n * Gets the current value of a checkable input element.\n * @param {Element} el The element.\n * @return {?string} The value of the form element (or null).\n * @private\n */\ngoog.dom.forms.getInputChecked_ = function(el) {\n  return el.checked ? /** @type {?} */ (el).value : null;\n};\n\n\n/**\n * Gets the current value of a select-one element.\n * @param {Element} el The element.\n * @return {?string} The value of the form element (or null).\n * @private\n */\ngoog.dom.forms.getSelectSingle_ = function(el) {\n  var selectedIndex = /** @type {!HTMLSelectElement} */ (el).selectedIndex;\n  return selectedIndex >= 0 ?\n      /** @type {!HTMLSelectElement} */ (el).options[selectedIndex].value :\n      null;\n};\n\n\n/**\n * Gets the current value of a select-multiple element.\n * @param {Element} el The element.\n * @return {Array<string>?} The value of the form element (or null).\n * @private\n */\ngoog.dom.forms.getSelectMultiple_ = function(el) {\n  var values = [];\n  for (var option, i = 0;\n       option = /** @type {!HTMLSelectElement} */ (el).options[i]; i++) {\n    if (option.selected) {\n      values.push(option.value);\n    }\n  }\n  return values.length ? values : null;\n};\n\n\n/**\n * Sets the current value of any element with a type.\n * @param {Element} el The element.\n * @param {*=} opt_value The value to give to the element, which will be coerced\n *     by the browser in the default case using toString. This value should be\n *     an array for setting the value of select multiple elements.\n */\ngoog.dom.forms.setValue = function(el, opt_value) {\n  // Elements with a type may need more specialized logic.\n  var type = /** @type {!HTMLInputElement} */ (el).type;\n  switch (goog.isString(type) && type.toLowerCase()) {\n    case goog.dom.InputType.CHECKBOX:\n    case goog.dom.InputType.RADIO:\n      goog.dom.forms.setInputChecked_(\n          el,\n          /** @type {string} */ (opt_value));\n      return;\n    case goog.dom.InputType.SELECT_ONE:\n      goog.dom.forms.setSelectSingle_(\n          el,\n          /** @type {string} */ (opt_value));\n      return;\n    case goog.dom.InputType.SELECT_MULTIPLE:\n      goog.dom.forms.setSelectMultiple_(\n          el,\n          /** @type {!Array<string>} */ (opt_value));\n      return;\n    default:\n      // Not every element with a value has a type (e.g. meter and progress).\n      el.value = opt_value != null ? opt_value : '';\n  }\n};\n\n\n/**\n * Sets a checkable input element's checked property.\n * #TODO(user): This seems potentially unintuitive since it doesn't set\n * the value property but my hunch is that the primary use case is to check a\n * checkbox, not to reset its value property.\n * @param {Element} el The element.\n * @param {string|boolean=} opt_value The value, sets the element checked if\n *     val is set.\n * @private\n */\ngoog.dom.forms.setInputChecked_ = function(el, opt_value) {\n  el.checked = opt_value;\n};\n\n\n/**\n * Sets the value of a select-one element.\n * @param {Element} el The element.\n * @param {string=} opt_value The value of the selected option element.\n * @private\n */\ngoog.dom.forms.setSelectSingle_ = function(el, opt_value) {\n  // unset any prior selections\n  el.selectedIndex = -1;\n  if (goog.isString(opt_value)) {\n    for (var option, i = 0;\n         option = /** @type {!HTMLSelectElement} */ (el).options[i]; i++) {\n      if (option.value == opt_value) {\n        option.selected = true;\n        break;\n      }\n    }\n  }\n};\n\n\n/**\n * Sets the value of a select-multiple element.\n * @param {Element} el The element.\n * @param {Array<string>|string=} opt_value The value of the selected option\n *     element(s).\n * @private\n */\ngoog.dom.forms.setSelectMultiple_ = function(el, opt_value) {\n  // reset string opt_values as an array\n  if (goog.isString(opt_value)) {\n    opt_value = [opt_value];\n  }\n  for (var option, i = 0;\n       option = /** @type {!HTMLSelectElement} */ (el).options[i]; i++) {\n    // we have to reset the other options to false for select-multiple\n    option.selected = false;\n    if (opt_value) {\n      for (var value, j = 0; value = opt_value[j]; j++) {\n        if (option.value == value) {\n          option.selected = true;\n        }\n      }\n    }\n  }\n};\n"],
"names":["goog","provide","require","dom","forms","submitFormInNewWindow","goog.dom.forms.submitFormInNewWindow","form","opt_submitElement","formData","getFormDataMap","action","method","InputType","SUBMIT","type","toLowerCase","Error","submitValue","getValue","addFormDataToMap_","name","getAttribute","submitFormDataInNewWindow","goog.dom.forms.submitFormDataInNewWindow","actionUri","newWin","window","openBlank","noreferrer","newDocument","document","newForm","createElement","forEach","fieldValues","fieldName","i","length","fieldValue","newInput","value","HTMLFormElement","prototype","appendChild","call","submit","goog.dom.forms.getFormDataMap","map","structs","Map","getFormDataHelper_","getFormDataString","goog.dom.forms.getFormDataString","sb","addFormDataToStringBuffer_","join","goog.dom.forms.getFormDataHelper_","result","fnAppend","els","elements","el","disabled","tagName","TagName","FIELDSET","FILE","RESET","BUTTON","SELECT_MULTIPLE","values","j","inputs","getElementsByTagName","String","INPUT","input","IMAGE","goog.dom.forms.addFormDataToMap_","array","get","set","push","goog.dom.forms.addFormDataToStringBuffer_","encodeURIComponent","hasFileInput","goog.dom.forms.hasFileInput","setDisabled","goog.dom.forms.setDisabled","FORM","blur","focusAndSelect","goog.dom.forms.focusAndSelect","focus","select","hasValue","goog.dom.forms.hasValue","hasValueByName","goog.dom.forms.hasValueByName","getValueByName","goog.dom.forms.getValue","isString","CHECKBOX","RADIO","getInputChecked_","SELECT_ONE","getSelectSingle_","getSelectMultiple_","goog.dom.forms.getValueByName","val","goog.dom.forms.getInputChecked_","checked","goog.dom.forms.getSelectSingle_","selectedIndex","options","goog.dom.forms.getSelectMultiple_","option","selected","setValue","goog.dom.forms.setValue","opt_value","setInputChecked_","setSelectSingle_","setSelectMultiple_","goog.dom.forms.setInputChecked_","goog.dom.forms.setSelectSingle_","goog.dom.forms.setSelectMultiple_"]
}
