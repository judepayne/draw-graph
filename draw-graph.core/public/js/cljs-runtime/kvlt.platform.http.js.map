{"version":3,"sources":["kvlt/platform/http.cljs"],"mappings":"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","names":["kvlt.platform.http/->response","req","m","cljs.core.vary_meta","cljs.core/assoc","kvlt.platform.http/error->map","e","code","or__4185__auto__","cljs.core.keyword","p__35768","map__35770","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","kvlt.platform.http/compose-url","query-string","server-port","cljs.core/name","p__35785","map__35787","kvlt.platform.http/req->node","body","timeout","insecure?","G__35794","clojure.string/upper-case","cljs.core.assoc","kvlt.platform.http/maybe-encode","buffer","as","headers","cljs.core._EQ_","cs","kvlt.middleware.util/charset","cljs.core/*target*","request!","js/require","kvlt.platform.http/request-node!","promesa.core/promise","resolve","_","respond","p1__35809#","cljs.core.comp","cljs.core/clj->js","error","node-resp","cljs.core.js__GT_clj","resp","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","kvlt.util/pprint-str","kvlt.platform.http/request!","kvlt.platform.xhr/request!"],"sourcesContent":["(ns ^:no-doc kvlt.platform.http\n  (:require [cljs.core.async :as async]\n            [taoensso.timbre :as log]\n            [clojure.string :as str]\n            [kvlt.util :as util]\n            [promesa.core :as p]\n            [kvlt.platform.xhr :as xhr]\n            [kvlt.middleware.util :refer [charset]]))\n(defn ->response [req m]\n  (vary-meta m assoc :kvlt/request req))\n\n(defn error->map [e]\n  (let [code (or (keyword (.. e -code)) :unknown)]\n    {:type    code\n     :error   code\n     :message (.. e -message)\n     :status  0}))\n\n(defn- compose-url [{:keys [query-string server-port] :as req}]\n  (str (name (req :scheme))\n       \"://\"\n       (req :server-name)\n       (when server-port\n         (str \":\" server-port))\n       (req :uri)\n       (when query-string\n         (str \"?\" query-string))))\n\n(defn req->node [{:keys [body kvlt.platform/timeout kvlt.platform/insecure?] :as req}]\n  (cond->\n      {:uri      (compose-url req)\n       :method   (-> req :request-method name str/upper-case)\n       :headers  (req :headers)\n       :encoding nil\n       :gzip     true}\n    body      (assoc :body body)\n    timeout   (assoc :timeout timeout)\n    insecure? (assoc :rejectUnauthorized false)))\n\n(defn- maybe-encode [buffer as headers]\n  (if (= as :byte-array)\n    buffer\n    (let [cs (-> headers :content-type charset)]\n      (.toString buffer cs))))\n\n(when (= *target* \"nodejs\")\n  (let [request! (js/require \"request\")]\n    (defn request-node! [req]\n      (p/promise\n       (fn [resolve _]\n         (let [respond (comp resolve #(->response req %))]\n           (request!\n            (clj->js (req->node req))\n            (fn [error node-resp buffer]\n              (if error\n                (respond (error->map error))\n                (let [headers (js->clj (.. node-resp -headers) :keywordize-keys true)\n                      resp    {:headers headers\n                               :status  (.. node-resp -statusCode)\n                               :body    (maybe-encode buffer (req :as) headers)}]\n                  (log/debug \"Received response\\n\" (util/pprint-str resp))\n                  (respond resp)))))))))))\n\n(defn request! [req]\n  (log/debug \"Issuing request\\n\" (util/pprint-str req))\n  (if (= *target* \"nodejs\")\n    (request-node! req)\n    (xhr/request! req)))\n"]}