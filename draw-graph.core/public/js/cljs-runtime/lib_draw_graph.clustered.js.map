{"version":3,"sources":["lib_draw_graph/clustered.cljc"],"mappings":"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","names":["lib-draw-graph.clustered/->keyword","k","cljs.core/Keyword","cljs.core.keyword","lib-draw-graph.clustered/add-cluster-key","g","cluster-on","cljs.core/assoc-in","lib-draw-graph.clustered/cluster-key","cljs.core.get_in","lib-draw-graph.clustered/clustered?","lib-draw-graph.clustered/add-attr-to-cluster","cluster","attr-k","attr-v","lib-draw-graph.clustered/add-cluster-edge","src","tgt","cljs.core.update_in","old","G__36441","cljs.core._EQ_","loom.graph.digraph","loom.graph.add_edges","lib-draw-graph.clustered/remove-clusters-from-edge-graph","clstrs","cljs.core.apply","loom.graph/remove-nodes","lib-draw-graph.clustered/delete-edge-graph","cljs.core.assoc","cljs.core.dissoc","lib-draw-graph.clustered/edge-graph","lib-draw-graph.clustered/add-cluster-parent","parent","cljs.core.conj","lib-draw-graph.clustered/cluster-parent","lib-draw-graph.clustered/cluster-children","lib-draw-graph.clustered/cluster-graph","lib-draw-graph.clustered/cluster-siblings","chdrn","cljs.core.remove","lib-draw-graph.clustered/cluster-descendants","clstr","acc","children","p1__36465#","cljs.core.map","descend","cljs.core/flatten","lib-draw-graph.clustered/first-cluster-attr","sub-key","attr","G__36474","cljs.core.get","temp__5733__auto__","lib-draw-graph.clustered/merged-cluster-attr","cljs.core.merge","G__36479","G__36483","var_args","G__36486","lib-draw-graph.clustered/cluster->nodes","js/Error","lib_draw_graph.clustered.cluster__GT_nodes","p1__36484#","cljs.core.filter","loom.graph/nodes","G__36500","lib-draw-graph.clustered/cluster->all-nodes","lib_draw_graph.clustered.cluster__GT_all_nodes","chds","cur-nodes","p1__36496#","res","cljs.core.distinct","cljs.core/empty?","G__36513","lib-draw-graph.clustered/nodes-by-cluster","lib_draw_graph.clustered.nodes_by_cluster","cljs.core/group-by","G__36518","lib-draw-graph.clustered/node->clusters","n","lib_draw_graph.clustered.node__GT_clusters","new-ancestor","cljs.core/first","ancestor","cljs.core/cons","cljs.core.into","lib-draw-graph.clustered/nodes->clusters","nds","clojure.set/union","p1__36526#","lib-draw-graph.clustered/clusters","lib-draw-graph.clustered/filter->parent","m","set-to-remove","cljs.core.reduce","p__36538","vec__36539","cljs.core.nth","a","v","cljs.core/some","lib-draw-graph.clustered/filter->children","p__36544","vec__36545","v'","clojure.set.difference","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","lib-draw-graph.clustered/remove-clusters","seq36551","G__36552","cljs.core/next","self__4776__auto__","clstrs-set","p1__36550#","cljs.core/dissoc","lib-draw-graph.clustered/remove-nodes","nodes","g'","clstrs-to-remove","g''"],"sourcesContent":["(ns ^{:doc \"Extending Loom to handle clusters.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.clustered\n  (:require [loom.graph            :as loom.graph]\n            [loom.alg-generic      :as loom.gen]\n            [clojure.set           :as set]))\n\n\n;; Loom Digraph is a Clojure record\n;; I have gone with the option of assoc'ing into it\n;; rather than extending the type and defining new protocols, for now.\n(defn ->keyword\n  \"Converts to keyword if needed\"\n  [k]\n  (if (keyword? k) k (keyword k)))\n\n\n(defn add-cluster-key\n  [g cluster-on]\n  (assoc-in g [:clusters :key] (->keyword cluster-on)))\n\n\n(defn cluster-key\n  [g]\n  (get-in g [:clusters :key]))\n\n\n(defn clustered?\n  [g]\n  (if (cluster-key g)\n    true\n    false))\n\n\n(defn add-attr-to-cluster\n  [g cluster attr-k attr-v]\n  (assoc-in g [:clusters :attr cluster attr-k] attr-v))\n\n\n\n;; --- Cluster edge graph functionality ------\n\n(defn add-cluster-edge\n  [g src tgt]\n  (update-in g [:clusters :edge-graph]\n             (fn [old tgt]\n               (case old\n                 nil (loom.graph/digraph [src tgt])\n                 (loom.graph/add-edges old [src tgt])))\n             tgt))\n\n\n(defn remove-clusters-from-edge-graph\n  [g clstrs]\n  (update-in g [:clusters :edge-graph]\n             (fn [old clstrs]\n               (apply loom.graph/remove-nodes old clstrs))\n             clstrs))\n\n\n(defn delete-edge-graph\n  [g]\n  (assoc g\n         :clusters\n         (dissoc (-> g :clusters) :edge-graph)))\n\n\n(defn edge-graph\n  [g]\n  (-> g :clusters :edge-graph))\n\n\n;; --- Cluster parent graph functionality ------\n\n(defn add-cluster-parent\n  [g cluster parent]\n  (-> g\n      (assoc-in [:clusters :hierarchy :->parent cluster] parent)\n      (update-in [:clusters :hierarchy :->children parent]\n                 (fn [old]\n                   (if (some? old) (conj old cluster) (conj #{} cluster))))))\n\n\n(defn cluster-parent\n  [g cluster]\n  (get-in g [:clusters :hierarchy :->parent cluster]))\n\n\n(defn cluster-children\n  [g cluster]\n  (get-in g [:clusters :hierarchy :->children cluster]))\n\n\n(defn cluster-graph\n  [g]\n  (-> g :clusters :hierarchy :->children))\n\n\n(defn cluster-siblings\n  [g cluster]\n  (let [parent (cluster-parent g cluster)\n        chdrn (cluster-children g parent)]\n    (remove #{cluster} chdrn)))\n\n\n(defn cluster-descendants\n  \"Returns all clusters inside the cluster recursively.\"\n  [g cluster]\n  (letfn [(descend [clstr acc]\n            (let [children (cluster-children g clstr)]\n              (if (nil? children)\n                (conj acc clstr)\n                (map #(descend % (conj acc clstr)) children))))]\n    (flatten (descend cluster []))))\n\n\n(defn first-cluster-attr\n  \"Gets sub-key attrs for the cluster, or if none, it's parent's attrs\n   and so on.\"\n  [g cluster sub-key]\n  (let [attr (sub-key (get (-> g :clusters :attr) cluster))]\n    (if attr\n      attr\n      (if-let [parent (cluster-parent g cluster)]\n        (first-cluster-attr g parent sub-key)\n        nil))))\n\n\n(defn merged-cluster-attr\n  \"Goes to the ultimate parent of the cluster and back down merging attributes\n  such that the child's attributes overwrite the parent's.\"\n  [g cluster sub-key]\n  (if-let [parent (cluster-parent g cluster)]\n    (merge  (merged-cluster-attr g parent sub-key)\n            (sub-key (get (-> g :clusters :attr) cluster)))\n    (sub-key (get (-> g :clusters :attr) cluster))))\n\n\n(defn cluster->nodes\n  \"Returns the nodes in the current cluster but not in children\n   of the current cluster.\"\n  ([g cluster] (cluster->nodes g (cluster-key g) cluster))\n  ([g cluster-on cluster]\n   (filter\n    #(= cluster (get % (->keyword cluster-on)))\n    (loom.graph/nodes g))))\n\n\n(defn cluster->all-nodes\n  \"Returns all nodes in a cluster, given the :cluster-on key\"\n  ([g cluster] (cluster->all-nodes g (cluster-key g)))\n  ([g cluster-on cluster]\n   (let [k (->keyword cluster-on)]\n     (letfn [(children [clstr acc]\n               (let [chds (cluster-children g clstr)\n                     cur-nodes (cluster->nodes g k clstr)\n                     acc (conj acc cur-nodes)]\n                 (if (some? chds)\n                   (map #(children % acc) chds)\n                   acc)))]\n       (let [res (distinct (flatten (children cluster [])))]\n         (if (empty? res)\n           nil\n           res))))))\n\n\n(defn nodes-by-cluster\n  \"Returns nodes in the graph grouped by cluster.\"\n  ([g] (nodes-by-cluster g (cluster-key g)))\n  ([g cluster-on]\n   (group-by (->keyword cluster-on) (loom.graph/nodes g))))\n\n\n(defn node->clusters\n  \"Returns the set of clusters that the node is in.\"\n  ([g n] (node->clusters g (cluster-key g) n))\n  ([g cluster-on n]\n   (letfn [(ancestor [acc]\n             ;(when (nil? acc) (println n acc))\n             (if-let [new-ancestor (cluster-parent g (first acc))]\n               (ancestor (cons new-ancestor acc))\n               acc))]\n     (into #{} (ancestor [(get n (->keyword cluster-on))])))))\n\n\n(defn nodes->clusters\n  \"Returns the set of clusters that the nodes are in.\"\n  [g nds]\n  (apply set/union (map #(node->clusters g %) nds)))\n\n\n;; ------------------------------\n\n\n(defn clusters\n  \"Returns the set of all clusters in the graph.\"\n  [g]\n  (nodes->clusters g (loom.graph/nodes g)))\n\n\n(defn ^:private filter->parent\n  [m set-to-remove]\n  (reduce\n   (fn [a [k v]]\n     (if (some set-to-remove #{k v})\n       a\n       (assoc a k v)))\n   {}\n   m))\n\n\n(defn ^:private filter->children\n  [m set-to-remove]\n  (reduce\n   (fn [a [k v]]\n     (if (some #{k} set-to-remove)\n       a\n       (let [v' (set/difference v set-to-remove)]\n         (if (empty? v')\n           a\n           (assoc a k v')))))\n   {}\n   m))\n\n\n(defn remove-clusters\n  \"Removes clusters from the graph.\n   Doesn't touch cluster edgess, so that those can be filtered down (once)\n   after multiple filtering operations.\"\n  [g & clstrs]\n  (let [clstrs-set (into #{} clstrs)]\n    (-> g\n        (update-in [:clusters :attr] #(apply dissoc % clstrs))\n        (update-in [:clusters :hierarchy :->parent] filter->parent clstrs-set)\n        (update-in [:clusters :hierarchy :->children] filter->children clstrs-set))))\n\n\n(defn remove-nodes\n  \"Removes nodes from a clustered graph. Returns a map of {:graph <graph>\n   :clusters <the clusters which remain>}\"\n  [g nodes]\n  (let [clstrs (clusters g)\n        g' (apply loom.graph/remove-nodes g nodes)\n        clstrs-to-remove (set/difference (clusters g) (clusters g'))\n        g'' (apply remove-clusters g' clstrs-to-remove)]\n    g''))\n\n"]}