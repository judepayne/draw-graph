{"version":3,"sources":["clojure/data/xml/node.cljc"],"mappings":"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","names":["this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","clojure.data.xml.node/Element","clojure.data.xml.node/->Element","tag","attrs","content","meta","_","this","cljs.core/hash-unordered-coll","other","js/cljs.core.equiv_map","cljs.core/RecordIter","cljs.core/nil-iter","qname","clojure.data.xml.name/as-qname","cljs.core.apply","cljs.core/str","cljs.core.concat","cljs.core.mapcat","p__54873","vec__54874","cljs.core.nth","n","a","cljs.core.pr_str","cljs.core/seq","k","nf","G__54877","cljs.core/Keyword","entry","cljs.core.conj","cljs.core/with-meta","v","G__54897","G__54892","next-meta","writer","opts","cljs.core/pr-writer","cljs.core/empty?","cljs.core/pr-sequential-writer","this__4439__auto__","k__4440__auto__","this__4441__auto__","k54905","else__4442__auto__","G__54915","cljs.core.get","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce","ret__4461__auto__","p__54917","vec__54918","k__4462__auto__","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/PersistentVector","G__54904","cljs.core/-iterator","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","coll__4436__auto__","this54906","other54907","cljs.core._EQ_","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__54927","cljs.core/keyword-identical?","expr__54928","cljs.core.assoc","this__4451__auto__","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","clojure.data.xml.node/CData","this__4482__auto__","cljs.core/List","writer__4483__auto__","G__54908","extmap__4478__auto__","G__54933","cljs.core/record?","clojure.data.xml.node/->CData","clojure.data.xml.node/map->CData","k54936","G__54944","p__54945","vec__54946","G__54935","this54937","other54938","pred__54964","expr__54965","clojure.data.xml.node/Comment","G__54941","G__54975","clojure.data.xml.node/->Comment","clojure.data.xml.node/map->Comment","var_args","G__54981","clojure.data.xml.node/element*","js/Error","or__4185__auto__","cljs.core.remove","cljs.core/nil?","G__55002","clojure.data.xml.node/element","args-arr__4810__auto__","len__4789__auto__","i__4790__auto__","argseq__4811__auto__","cljs.core/IndexedSeq","seq54999","G__55000","cljs.core/first","cljs.core/next","G__55001","self__4776__auto__","clojure.data.xml.node.element_STAR_","clojure.data.xml.node/cdata","clojure.data.xml.node/xml-comment","p__55040","map__55041","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","clojure.data.xml.node/map->Element","el","cljs.core/meta","clojure.data.xml.node/tagged-element","cljs.core/map?","cljs.core.ex_info","clojure.data.xml.node/element?"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.data.xml.node\n  \"Data types for xml nodes: Element, CData and Comment\"\n  {:author \"Herwig Hochleitner\"}\n  (:require [clojure.data.xml.name :refer [as-qname]])\n  #?(:clj (:import (clojure.lang IHashEq IObj ILookup IKeywordLookup Counted\n                                 Associative Seqable IPersistentMap\n                                 APersistentMap RT MapEquivalence MapEntry)\n                   (java.io Serializable Writer)\n                   (java.util Map Iterator))))\n\n;; Parsed data format\n;; Represents a node of an XML tree\n\n;; We implement a custom deftype for elements\n;; it is similar to (defrecord Element [tag attrs content])\n;; but we override its hash and equality to be compatible with\n;; clojure's hash-maps\n;; see http://dev.clojure.org/jira/browse/CLJ-2084\n;; also, elements don't have an extmap and degrade to hash-maps also\n;; when assoc'ing unknown keys\n\n;; FIXME hash caching cannot be used: http://dev.clojure.org/jira/browse/CLJ-2092\n\n#?\n(:clj\n (deftype ElementIterator [el ^:volatile-mutable fields]\n   Iterator\n   (hasNext [_] (boolean (seq fields)))\n   (next [_]\n     (let [f (first fields)]\n       (set! fields (next fields))\n       (MapEntry. f (get el f))))))\n\n(deftype Element [tag attrs content meta]\n\n  ;; serializing/cloning, hashing, equality, iteration\n\n  #?@\n  (:clj\n   [Serializable\n    MapEquivalence\n    IHashEq\n    (hasheq [this] (APersistentMap/mapHasheq this))\n    Iterable\n    (iterator [this] (ElementIterator. this '(:tag :attrs :content)))]\n   :cljs\n   [ICloneable\n    (-clone [_] (Element. tag attrs content meta))\n    IHash\n    (-hash [this] (hash-unordered-coll this))\n    IEquiv\n    (-equiv [this other] (or (identical? this other)\n                             ^boolean (js/cljs.core.equiv_map this other)))\n    IIterable\n    (-iterator [this] (RecordIter. 0 this 3 [:tag :attrs :content] (nil-iter)))])\n  Object\n  (toString [_]\n    (let [qname (as-qname tag)]\n      (apply str (concat [\"<\" qname]\n                         (mapcat (fn [[n a]]\n                                   [\" \" (as-qname n) \"=\" (pr-str a)])\n                                 attrs)\n                         (if (seq content)\n                           (concat [\">\"] content [\"</\" qname \">\"])\n                           [\"/>\"])))))\n  #?@(:clj\n      [(hashCode [this] (APersistentMap/mapHash this))\n       (equals [this other] (APersistentMap/mapEquals this other))\n       IPersistentMap\n       (equiv [this other] (APersistentMap/mapEquals this other))])\n\n  ;; Main collection interfaces, that are included in IPersistentMap,\n  ;; but are separate protocols in cljs\n\n  #?(:cljs ILookup)\n  (#?(:clj valAt :cljs -lookup) [this k]\n    (#?(:clj .valAt :cljs -lookup)\n     this k nil))\n  (#?(:clj valAt :cljs -lookup) [this k nf]\n    (case k\n      :tag tag\n      :attrs attrs\n      :content content\n      nf))\n  #?(:cljs ICounted)\n  (#?(:clj count :cljs -count) [this] 3)\n  #?(:cljs ICollection)\n  (#?(:clj cons :cljs -conj) [this entry]\n    (conj (with-meta {:tag tag :attrs attrs :content content} meta)\n          entry))\n  #?(:cljs IAssociative)\n  (#?(:clj assoc :cljs -assoc) [this k v]\n    (case k\n      :tag (Element. v attrs content meta)\n      :attrs (Element. tag v content meta)\n      :content (Element. tag attrs v meta)\n      (with-meta {:tag tag :attrs attrs :content content k v} meta)))\n  #?(:cljs IMap)\n  (#?(:clj without :cljs -dissoc) [this k]\n    (with-meta\n      (case k\n        :tag {:attrs attrs :content content}\n        :attrs {:tag tag :content content}\n        :content {:tag tag :attrs attrs}\n        this)\n      meta))\n  #?@(:cljs\n      [ISeqable\n       (-seq [this]\n             (seq [[:tag tag] [:attrs attrs] [:content content]]))]\n      :clj\n      [(seq [this] (iterator-seq (.iterator this)))])\n\n  #?(:clj (empty [_] (Element. tag {} [] {})))\n  #?@(:cljs\n      [IEmptyableCollection\n       (-empty [_] (Element. tag {} [] {}))])\n\n  ;; j.u.Map and included interfaces\n  #?@(:clj\n      [Map\n       (entrySet [this] (set this))\n       (values [this] (vals this))\n       (keySet [this] (set (keys this)))\n       (get [this k] (.valAt this k))\n       (containsKey [this k] (case k (:tag :attrs :content) true false))\n       (containsValue [this v] (boolean (some #{v} (vals this))))\n       (isEmpty [this] false)\n       (size [this] 3)])\n\n  ;; Metadata interface\n\n  #?(:clj IObj :cljs IMeta)\n  (#?(:clj meta :cljs -meta) [this] meta)\n  #?(:cljs IWithMeta)\n  (#?(:clj withMeta :cljs -with-meta) [this next-meta]\n    (Element. tag attrs content next-meta))\n\n  ;; cljs printing is protocol-based\n\n  #?@\n  (:cljs\n   [IPrintWithWriter\n    (-pr-writer [this writer opts]\n                (-write writer \"#xml/element{:tag \")\n                (pr-writer tag writer opts)\n                (when-not (empty? attrs)\n                  (-write writer \", :attrs \")\n                  (pr-writer attrs writer opts))\n                (when-not (empty? content)\n                  (-write writer \", :content \")\n                  (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts content))\n                (-write writer \"}\"))]))\n\n;; clj printing is a multimethod\n\n#?\n(:clj\n (defmethod print-method Element [{:keys [tag attrs content]} ^Writer writer]\n   (.write writer \"#xml/element{:tag \")\n   (print-method tag writer)\n   (when-not (empty? attrs)\n     (.write writer \", :attrs \")\n     (print-method attrs writer))\n   (when-not (empty? content)\n     (.write writer \", :content [\")\n     (print-method (first content) writer)\n     (doseq [c (next content)]\n       (.write writer \" \")\n       (print-method c writer))\n     (.write writer \"]\"))\n   (.write writer \"}\")))\n\n(defrecord CData [content])\n(defrecord Comment [content])\n\n(defn element*\n  \"Create an xml element from a content collection and optional metadata\"\n  ([tag attrs content meta]\n   (Element. tag (or attrs {}) (remove nil? content) meta))\n  ([tag attrs content]\n   (Element. tag (or attrs {}) (remove nil? content) nil)))\n\n#?(:clj\n   ;; Compiler macro for inlining the two constructors\n   (alter-meta! #'element* assoc :inline\n                (fn\n                  ([tag attrs content meta]\n                   `(Element. ~tag (or ~attrs {}) (remove nil? ~content) ~meta))\n                  ([tag attrs content]\n                   `(Element. ~tag (or ~attrs {}) (remove nil? ~content) nil)))))\n\n(defn element\n  \"Create an xml Element from content varargs\"\n  ([tag] (element* tag nil nil))\n  ([tag attrs] (element* tag attrs nil))\n  ([tag attrs & content] (element* tag attrs content)))\n\n(defn cdata\n  \"Create a CData node\"\n  [content]\n  (CData. content))\n\n(defn xml-comment\n  \"Create a Comment node\"\n  [content]\n  (Comment. content))\n\n(defn map->Element [{:keys [tag attrs content] :as el}]\n  (element* tag attrs content (meta el)))\n\n(defn tagged-element [el]\n  (cond (map? el) (map->Element el)\n        ;; TODO support hiccup syntax\n        :else (throw (ex-info \"Unsupported element representation\"\n                              {:element el}))))\n\n(defn element? [el]\n  (and (map? el) (some? (:tag el))))\n"]}