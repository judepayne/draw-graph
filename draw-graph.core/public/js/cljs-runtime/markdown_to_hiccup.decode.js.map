{"version":3,"sources":["markdown_to_hiccup/decode.cljc"],"mappings":"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","names":["var_args","G__35740","markdown-to-hiccup.decode/decode-string","js/Error","s","goog.string/unescapeEntities","transform-fn","decoded","markdown_to_hiccup.decode.decode_string.cljs$core$IFn$_invoke$arity$1","markdown-to-hiccup.decode/encode-string","G__35743","markdown-to-hiccup.decode/decode-iseq","iseq","cljs.core.map.cljs$core$IFn$_invoke$arity$2","markdown-to-hiccup.decode/decode","cljs.core/seq","transform-str-fn","p1__35741#","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","markdown-to-hiccup.decode/dispatch","seq35746","G__35747","cljs.core/first","cljs.core/next","self__4717__auto__","x","rest","cljs.core/map?","or__4131__auto__","cljs.core/vector?","js/markdown-to-hiccup","js/markdown-to-hiccup.decode","js/markdown-to-hiccup.decode.decode","method-table__4613__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__35752","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","transform","markdown_to_hiccup.decode.decode_string.cljs$core$IFn$_invoke$arity$2","m","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/sorted-map","markdown_to_hiccup.decode.decode_iseq.cljs$core$IFn$_invoke$arity$1","markdown_to_hiccup.decode.decode_iseq.cljs$core$IFn$_invoke$arity$2","v","cljs.core/vec","cljs.core/identity","f"],"sourcesContent":["(ns markdown-to-hiccup.decode\n  #?(:clj (:import [org.apache.commons.lang3 StringEscapeUtils])\n     :cljs (:require [goog.string :as gstr])))\n\n(defn decode-string\n  ([s]\n  #?(:clj (StringEscapeUtils/unescapeHtml4 s)\n     :cljs (gstr/unescapeEntities s)))\n  ([s transform-fn]\n   (let [decoded (decode-string s)]\n     (transform-fn decoded))))\n\n(defn encode-string\n  [s]\n  #?(:clj (StringEscapeUtils/escapeHtml4 s)\n     :cljs (throw (.Exception \"No yet implemented.\")))) ;; need to find a js encoder\n\n(declare decode)\n(defn decode-iseq\n  ([iseq] (map decode (seq iseq)))\n  ([iseq transform-str-fn] (map #(decode % transform-str-fn)\n                            (seq iseq))))\n\n(defn dispatch [x & rest]\n  \"I use standard predicate functions for type checking to support\n   both Clojure and ClojureScript, which do not dispatch\n   on the same types exactly (e.g. java.util.String vs string). Preserves\n   polymorphism by also allowing dispatch on a :decode-type key.\"\n  (cond\n    (map? x) (or (:decode-type x)\n                 ::map)\n    (vector? x) ::vector\n    (string? x) ::string\n    :else ::pass))\n\n(defmulti decode dispatch)\n(defmethod decode ::string\n  ([s] (decode-string s))\n  ([s transform] (decode-string s transform)))\n(defmethod decode ::map\n  ([m] (into (sorted-map) (decode-iseq m)))\n  ([m transform] (into (sorted-map) (decode-iseq m transform))))\n(defmethod decode ::vector\n  ([v] (vec (decode-iseq v)))\n  ([v transform] (vec (decode-iseq v transform))))\n(defmethod decode ::pass\n  ([x] (identity x))\n  ([x f] (identity x)))\n"]}