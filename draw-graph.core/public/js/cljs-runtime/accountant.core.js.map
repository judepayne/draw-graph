{"version":3,"sources":["accountant/core.cljs"],"mappings":"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","names":["accountant.core/transformer-create-url","token","path-prefix","location","accountant.core/transformer-retrieve-token","js/accountant","js/accountant.core","js/accountant.core.history","accountant.core/history","transformer","js/goog.history.Html5History.TokenTransformer","js/goog.history.Html5History","js/window","accountant.core/dispatch-on-navigate","history","nav-handler","goog.events/listen","goog.history.EventType/NAVIGATE","e","accountant.core/get-href-attribute","node","and__4174__auto__","cljs.core._EQ_","js/Node.ELEMENT_NODE","accountant.core/find-href-node","href","attrs","navigation-link?","cljs.core/not","temp__5735__auto__","parent","accountant.core/uri->query","uri","query","cljs.core/empty?","accountant.core/uri->fragment","fragment","accountant.core/prevent-reload-on-known-path","path-exists?","reload-same-path?","js/document","target","button","meta-key","alt-key","ctrl-key","shift-key","any-key","or__4185__auto__","href-node","link-target","js/goog.Uri","path","relative-href","title","host","port","current-host","js/window.location.hostname","current-port","js/window.location.port","loc","js/window.location","current-relative-href","fexpr__41212","cljs.core.not_EQ_","goog.events/dispatchEvent","js/goog.history.Event","js/accountant.core.nav-handler","accountant.core/nav-handler","js/accountant.core.path-exists?","accountant.core/path-exists?","p__41217","map__41218","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","accountant.core/configure-navigation!","accountant.core/map->params","params","p1__41229#","cljs.core.map","cljs.core/name","cljs.core/keys","values","cljs.core/vals","pairs","cljs.core.partition","cljs.core.interleave","clojure.string.join","p1__41230#","var_args","G__41265","accountant.core/navigate!","js/Error","route","accountant.core.navigate_BANG_","old-route","cljs.core/first","clojure.string.split","query-string","cljs.core/reduce-kv","valid","k","v","cljs.core.assoc","with-params","js/console.error","accountant.core/dispatch-current!","hash","G__41287"],"sourcesContent":["(ns accountant.core\n  \"The only namespace in this library.\"\n  (:require [clojure.string :as str]\n            [goog.events :as events]\n            [goog.history.EventType :as EventType])\n  (:import goog.history.Event\n           goog.history.Html5History\n           goog.Uri))\n\n(defn- transformer-create-url\n  [token path-prefix location]\n  (str path-prefix token))\n\n(defn- transformer-retrieve-token\n  [path-prefix location]\n  (str (.-pathname location) (.-search location) (.-hash location)))\n\n(defonce history (let [transformer (goog.history.Html5History.TokenTransformer.)]\n                   (set! (.. transformer -retrieveToken) transformer-retrieve-token)\n                   (set! (.. transformer -createUrl) transformer-create-url)\n                   (Html5History. js/window transformer)))\n\n(defn- dispatch-on-navigate\n  [history nav-handler]\n  (events/listen\n    history\n    EventType/NAVIGATE\n    (fn [e]\n      (let [token (.-token e)]\n        (nav-handler token)))))\n\n(defn- get-href-attribute\n  \"Given a DOM node, if it is an element node, return its href attribute.\n  Otherwise, return nil.\"\n  [node]\n  (when (and node (= (.-nodeType node) js/Node.ELEMENT_NODE))\n    (.getAttribute node \"href\")))\n\n(defn- find-href-node\n  \"Given a DOM element that may or may not be a link, traverse up the DOM tree\n  to see if any of its parents are links. If so, return the href content, if\n  it does not have an explicit `data-trigger` attribute to signify a non-navigational\n  link element.\"\n  [e]\n  (let [href (get-href-attribute e)\n        attrs (.-attributes e)\n        navigation-link? (and href attrs (-> attrs (aget \"data-trigger\") not))]\n    (if navigation-link?\n      e\n      (when-let [parent (.-parentNode e)]\n        (recur parent)))))\n\n(defn- uri->query [uri]\n  (let [query (.getQuery uri)]\n    (when-not (empty? query)\n      (str \"?\" query))))\n\n(defn- uri->fragment [uri]\n  (let [fragment (.getFragment uri)]\n    (when-not (empty? fragment)\n      (str \"#\" fragment))))\n\n(defn- prevent-reload-on-known-path\n  \"Create a click handler that blocks page reloads for known routes\"\n  [history path-exists? reload-same-path?]\n  (events/listen\n   js/document\n   \"click\"\n   (fn [e]\n     (let [target (.-target e)\n           button (.-button e)\n           meta-key (.-metaKey e)\n           alt-key (.-altKey e)\n           ctrl-key (.-ctrlKey e)\n           shift-key (.-shiftKey e)\n           any-key (or meta-key alt-key ctrl-key shift-key)\n           href-node (find-href-node target)\n           href (when href-node (.-href href-node))\n           link-target (when href-node (.-target href-node))\n           uri (.parse Uri href)\n           path (.getPath uri)\n           query (uri->query uri)\n           fragment (uri->fragment uri)\n           relative-href (str path query fragment)\n           title (.-title target)\n           host (.getDomain uri)\n           port (.getPort uri)\n           current-host js/window.location.hostname\n           current-port js/window.location.port\n           loc js/window.location\n           current-relative-href (str (.-pathname loc) (.-query loc) (.-hash loc))]\n       (when (and (not any-key)\n                  (#{\"\" \"_self\"} link-target)\n                  (= button 0)\n                  (= host current-host)\n                  (or (not port)\n                      (= (str port) (str current-port)))\n                  (path-exists? path))\n         (when (not= current-relative-href relative-href) ;; do not add duplicate html5 history state\n           (. history (setToken relative-href title)))\n         (.preventDefault e)\n         (when reload-same-path?\n           (events/dispatchEvent history (Event. path true))))))))\n\n(defonce nav-handler nil)\n(defonce path-exists? nil)\n\n(defn configure-navigation!\n  \"Create and configure HTML5 history navigation.\n\n  nav-handler: a fn of one argument, a path. Called when we've decided\n  to navigate to another page. You'll want to make your app draw the\n  new page here.\n\n  path-exists?: a fn of one argument, a path. Return truthy if this path is handled by the SPA\"\n  [{:keys [nav-handler path-exists? reload-same-path?]}]\n  (.setUseFragment history false)\n  (.setPathPrefix history \"\")\n  (.setEnabled history true)\n  (set! accountant.core/nav-handler nav-handler)\n  (set! accountant.core/path-exists? path-exists?)\n  (dispatch-on-navigate history nav-handler)\n  (prevent-reload-on-known-path history path-exists? reload-same-path?))\n\n(defn map->params [query]\n  (let [params (map #(name %) (keys query))\n        values (vals query)\n        pairs (partition 2 (interleave params values))]\n    (str/join \"&\" (map #(str/join \"=\" %) pairs))))\n\n(defn navigate!\n  \"add a browser history entry. updates window/location\"\n  ([route] (navigate! route {}))\n  ([route query]\n   (if nav-handler\n     (let [token (.getToken history)\n           old-route (first (str/split token \"?\"))\n           query-string (map->params (reduce-kv (fn [valid k v]\n                                                  (if v\n                                                    (assoc valid k v)\n                                                    valid)) {} query))\n           with-params (if (empty? query-string)\n                         route\n                         (str route \"?\" query-string))]\n       (if (= old-route route)\n         (. history (replaceToken with-params))\n         (. history (setToken with-params))))\n     (js/console.error \"can't navigate! until configure-navigation! called\"))))\n\n(defn dispatch-current! []\n  \"Dispatch current URI path.\"\n  (let [path (-> js/window .-location .-pathname)\n        query (-> js/window .-location .-search)\n        hash (-> js/window .-location .-hash)]\n    (if nav-handler\n      (nav-handler (str path query hash))\n      (js/console.error \"can't dispatch-current until configure-navigation! called\"))))\n"]}