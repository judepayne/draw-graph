{"version":3,"sources":["kvlt/websocket.cljc"],"mappings":";;;;AAIA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA;;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAUS;AAAVR,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAIE;AAAKE,AAAOC;AAAZ,AAAiBD;;AAJnB,AAAAN,AAAAL,AAAAE,AAAAC,AAAAC;;;AAKA,AAAAM,AAAA,AAAA,AAAqCG,AAAEC;AAAvC,AAA0CA;;AAC1C,AAAAJ,AAAA,AAAA,AAAkCG,AAAEC;AAApC,AAAuC,AAACC,AAAOD;;AAC/C,AAAAJ,AAAA,AAAA,AAAkCG,AAAEC;AAApC,AAAuC,AAACE,AAAiBF;;AAEzD,AAAA,AAAAjB,AAAAC,AAAAmB;AAAA;AAAA,AAAA;;;;;AAAA,AAAAjB,AAAA,AAAAC,AAAA,AAAUkB;AAAVjB,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAY,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAV,AAAA,AAAAC,AAAA,AAAA,AAIE;AAAKE,AAAOC;AAAZ,AAAiBD;;AAJnB,AAAAN,AAAAL,AAAAE,AAAAC,AAAAC;;;AAMA,AAAAe,AAAA,AAAA,AAAqCN,AAAEC;AAAvC,AAA0CA;;AAC1C,AAAAK,AAAA,AAAA,AAAqCN,AAAEC;AAAvC,AAA0C,AAACM,AAAgBN;;AAC3D,AAAAK,AAAA,AAAA,AAAqCN,AAAEC;AAAvC,AAA0C,AAACO,AAAgBP","names":["js/kvlt","js/kvlt.websocket","js/kvlt.websocket.format-outgoing","method-table__4613__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__40206","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","kvlt.websocket/format-outgoing","format","msg","_","x","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","kvlt.platform.util/encode-json","js/kvlt.websocket.format-incoming","fexpr__40213","kvlt.websocket/format-incoming","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","kvlt.platform.util/parse-json"],"sourcesContent":["(ns kvlt.websocket\n  (:require [#?(:clj clojure.edn :cljs cljs.reader) :as edn]\n            [kvlt.platform.util :as util]))\n\n(defmulti format-outgoing\n  \"Transform outgoing websocket messages.\n\n  Symbolic format name + arbitrary message -> String\"\n  (fn [format msg] format))\n(defmethod format-outgoing :default [_ x] x)\n(defmethod format-outgoing :edn  [_ x] (pr-str x))\n(defmethod format-outgoing :json [_ x] (util/encode-json x))\n\n(defmulti format-incoming\n  \"Transform incoming websocket messages.\n\n  Symbolic format name + string -> arbitrary message\"\n  (fn [format msg] format))\n\n(defmethod format-incoming :default [_ x] x)\n(defmethod format-incoming :edn     [_ x] (edn/read-string x))\n(defmethod format-incoming :json    [_ x] (util/parse-json x))\n"]}