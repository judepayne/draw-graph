{"version":3,"sources":["lib_draw_graph/postprocessor.cljc"],"mappings":"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","names":["lib-draw-graph.postprocessor/free-clusters","g","clstrs","lib-draw-graph.clustered/clusters","has-chdn","p1__36448#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.clustered/cluster-children","cljs.core.into.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/without","s","x","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","js/Error","lib-draw-graph.postprocessor/take-1","cljs.core/empty?","item","cljs.core/first","lib-draw-graph.postprocessor/no-incoming","nodes","cljs.core/set","cljs.core/keys","have-incoming","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","clojure.set/union","cljs.core/vals","lib-draw-graph.postprocessor/normalize","p1__36465#","p2__36466#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","var_args","G__36473","lib-draw-graph.postprocessor/kahn-sort","lib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$3","l","cljs.core/every?","vec__36478","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","n","s'","m","g'","p1__36468#","p2__36469#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.set.union.cljs$core$IFn$_invoke$arity$2","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/sorted-free-clusters","lib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$1","lib-draw-graph.clustered/cluster-graph","lib-draw-graph.postprocessor/with-chdn","p1__36489#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","lib-draw-graph.postprocessor/free-clusters-with-children","lib-draw-graph.postprocessor/->graph","free-clusters","edges","p__36491","vec__36492","a","k","v","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","p1__36490#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","loom.graph/digraph","lib-draw-graph.postprocessor/svg->zipper","svg","lib-draw-graph.svg/->zipper","lib-draw-graph.svg/parse-svg","lib-draw-graph.postprocessor/clusters->boxes","z","c","lib-draw-graph.svg/cluster->rect","lib-draw-graph.postprocessor/tasks->clusters","tasks","p__36495","vec__36496","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lib-draw-graph.postprocessor/sep","seq36499","G__36500","cljs.core/next","self__4717__auto__","bounding","rects","cljs.core/min","cljs.core/max","o","lib-draw-graph.postprocessor/collision-sep","lib-draw-graph.postprocessor/adjust-sep","p__36506","map__36507","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq36503","G__36504","sep","cluster-sep","BT?","cljs.core/not","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","min-lrb","x__4222__auto__","y__4223__auto__","min-lrt","lib-draw-graph.postprocessor/parse-int","js/parseInt","lib-draw-graph.postprocessor/str->int","cs","error-msg","cljs.core/integer?","e36510","e","lib-draw-graph.util/err","lib-draw-graph.postprocessor/env","opts","node-label-fn","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","task-graph","seps","p__36525","vec__36526","p1__36515#","adj-s","lib_draw_graph.postprocessor.adjust_sep.cljs$core$IFn$_invoke$arity$variadic","inner-rects","p__36529","vec__36530","lib-draw-graph.geometry/inner-rect","p__36533","vec__36535","prnt","chdn","state","p1__36518#","constr","p1__36519#","lib-draw-graph.svg/node->rect","lib_draw_graph.clustered.cluster__GT_nodes.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc-in","lib-draw-graph.util/root?","lib-draw-graph.postprocessor/env->map","env","p__36540","vec__36541","bdry","rect","lib-draw-graph.geometry/outer-rect","root?","others","a'","c'","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.postprocessor/max-move-factor","lib-draw-graph.postprocessor/shrink-bias","lib-draw-graph.postprocessor/update-env","new-st","env1","objects","acc","p__36544","vec__36545","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/do-annealing","label-fn","rankdir","y-retard","x-retard","dims","cljs.core/reduce-kv","p__36549","vec__36550","cur","lib_draw_graph.anneal.annealing.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.anneal/neighbor-fn","lib-draw-graph.anneal/cost-fn","lib-draw-graph.anneal/p-fn","lib-draw-graph.anneal/temp-fn","cljs.core/quot","cljs.core/count","lib-draw-graph.postprocessor/editor-rects","clstr","node","temp__5718__auto__","edited","ps","lib-draw-graph.svg/rect->svg","cljs.core/second","lib-draw-graph.postprocessor/edit-cluster-rects","lib_draw_graph.svg.tree_edit.cljs$core$IFn$_invoke$arity$6","lib-draw-graph.svg/all-clusters","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/x-label-spacer","lib-draw-graph.postprocessor/y-label-spacer","lib-draw-graph.postprocessor/y-label-spacer-BT","lib-draw-graph.postprocessor/editor-label-posn","G__36556","lib-draw-graph.clustered/merged-cluster-attr","G__36557","lib-draw-graph.postprocessor/edit-cluster-labels","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","p__36561","p__36562","vec__36563","vec__36566","lib-draw-graph.postprocessor/viewbox-size","roots","tx","ty","vbx","vby","min-x","max-x","p1__36558#","min-y","p1__36559#","max-y","p1__36560#","x-gap","y-gap","y","lib-draw-graph.postprocessor/optimize-clusters","vec__36569","env-out","p__36572","vec__36573","canvas","lib-draw-graph.svg/canvas","translation","viewbox","z'","lib-draw-graph.svg/set-canvas","lib-draw-graph.svg/->xml"],"sourcesContent":["(ns ^{:doc \"Post process the svg.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.postprocessor\n  (:require [lib-draw-graph.svg :as svg]\n            [lib-draw-graph.anneal :as anneal]\n            [loom.graph            :as loom.graph]\n            [lib-draw-graph.clustered :as clstr]\n            [lib-draw-graph.geometry :as g]\n            [lib-draw-graph.util :as util]\n            [clojure.set :as s]))\n\n\n(defn free-clusters\n  \"Returns clusters that (a) contain clusters (b) contain no nodes directly.\"\n  ;; TODO: remove the (b) restriction by parsing all svg nodes and adding\n  ;; 'obstacles' into the annealing routine.\n  [g]\n  (let [clstrs (clstr/clusters g)\n        ;with-nodes (into #{} (keys (nodes-by-cluster g)))\n        has-chdn (filter #(some? (clstr/cluster-children g %)) clstrs)]\n    ;(s/difference clstrs with-nodes)\n    (into #{} has-chdn)))\n\n\n;;Kahn sort - topological sort of a graph\n;; https://github.com/cloverage/cloverage/blob/HEAD/cloverage/src/cloverage/kahn.clj#L30\n(defn without\n  \"Returns set s with x removed.\"\n  [s x] (s/difference s #{x}))\n\n\n(defn take-1\n  \"Returns the pair [element, s'] where s' is set s with element removed.\"\n  [s] {:pre [(not (empty? s))]}\n  (let [item (first s)]\n    [item (without s item)]))\n\n\n(defn no-incoming\n  \"Returns the set of nodes in graph g for which there are no incoming\n  edges, where g is a map of nodes to sets of nodes.\"\n  [g]\n  (let [nodes (set (keys g))\n        have-incoming (apply s/union (vals g))]\n    (s/difference nodes have-incoming)))\n\n\n(defn normalize\n  \"Returns g with empty outgoing edges added for nodes with incoming\n  edges only.  Example: {:a #{:b}} => {:a #{:b}, :b #{}}\"\n  [g]\n  (let [have-incoming (apply s/union (vals g))]\n    (reduce #(if (get % %2) % (assoc % %2 #{})) g have-incoming)))\n\n\n(defn kahn-sort\n  \"Proposes a topological sort for directed graph g using Kahn's\n  algorithm, where g is a map of nodes to sets of nodes. If g is\n  cyclic, returns nil.\"\n  ([g]\n   (kahn-sort (normalize g) [] (no-incoming g)))\n  ([g l s]\n   (if (empty? s)\n     (when (every? empty? (vals g)) l)\n     (let [[n s'] (take-1 s)\n           m (g n)\n           g' (reduce #(update-in % [n] without %2) g m)]\n       (recur g' (conj l n) (s/union s' (s/intersection (no-incoming g') m)))))))\n\n\n(defn sorted-free-clusters\n  \"Kahn sorted free clusters\"\n  [g]\n  (filter (free-clusters g) (kahn-sort (clstr/cluster-graph g))))\n\n\n(defn with-chdn\n  \"Returns a vec of clusters with their children.\"\n  [g clstrs]\n  (mapv #(vector % (clstr/cluster-children g %)) clstrs))\n\n\n(defn free-clusters-with-children\n  \"Provides the targets for annealing in the graph.\"\n  [g]\n  (->> (sorted-free-clusters g)\n       (with-chdn g)))\n\n\n(defn ->graph\n  \"turns free clusters with children into a loom graph.\"\n  [free-clusters]\n  (let [edges (reduce\n               (fn [a [k v]]\n                 (apply conj a (map #(vector k %) v)))\n               []\n               free-clusters)]\n    (apply loom.graph/digraph edges)))\n\n\n;; Now we need to set up the annealing jobs by reading in the svg\n;; Since graphviz labels clusters at the top, we'll use the top\n;; of the uppermost sibling as the top boundary (taking into account\n;; the SEP) otherwise the bounding box of the containing cluster.\n;; we'll calculate SEP for each annealing job by finding the minimum\n;; distance between a children cluster's bounding box (LRB) and the boundary.\n\n\n(defn svg->zipper [svg]\n  (svg/->zipper (svg/parse-svg svg)))\n\n\n(defn clusters->boxes\n  \"Get the bounding boxes for the clusters from the zipper over the svg.\"\n  [z clstrs]\n  (reduce\n   (fn [a c] (assoc a c (svg/cluster->rect z c)))\n   {}\n   clstrs))\n\n\n(defn tasks->clusters\n  \"Converts anneal-tasks to a set of clusters\"\n  [tasks]\n  (reduce (fn [a [k v]]\n            (-> a\n                (conj k)\n                (clojure.set/union v)))\n          #{}\n          tasks))\n\n\n(defn sep\n  \"Returns the separation map between the bounding\"\n  [bounding & rects]\n  {:l (- (apply min (map :x rects)) (:x bounding))\n   :t (- (apply min (map :y rects)) (:y bounding))\n   :r (- (+ (:x bounding) (:w bounding))\n         (apply max (map (fn [o] (+ (:x o) (:w o))) rects)))\n   :b (- (+ (:y bounding) (:h bounding))\n         (apply max (map (fn [o] (+ (:y o) (:h o))) rects)))})\n\n\n(def collision-sep 8)\n\n\n(defn adjust-sep\n  \"takes a sep, preserves the top but adjusts other seps to minimum.\"\n  ([sep & {:keys [cluster-sep BT?] :or {cluster-sep nil BT? false}}]\n   (if (not BT?)\n     (if cluster-sep\n       (assoc sep :l cluster-sep :r cluster-sep :b cluster-sep)\n       (let [min-lrb (min (:l sep) (:r sep) (:b sep))]\n         (assoc sep :l min-lrb :r min-lrb :b min-lrb)))\n     ;; Bottom Top layout. Need to constraint differently\n     (if cluster-sep\n       (assoc sep :l cluster-sep :r cluster-sep :t cluster-sep)\n       (let [min-lrt (min (:l sep) (:r sep) (:t sep))]\n         (assoc sep :l min-lrt :r min-lrt :t min-lrt))))))\n\n\n(defn parse-int [s]\n  #?(:clj (Integer/parseInt s)\n     :cljs (js/parseInt s)))\n\n\n(defn str->int [cs error-msg]\n  (if (integer? cs)\n    cs\n    (try\n      (parse-int cs)\n      #?(:clj (catch Exception e (throw (util/err error-msg)))\n         :cljs (catch js/Error e (throw (util/err error-msg)))))))\n\n\n(defn env\n  \"Constructs a nested map which parameters required for annealing\n   from a zipper, a graph and the key clustered on in the graph.\"\n  [z g opts node-label-fn]\n  (let [cluster-sep (when (-> opts :pp-cluster-sep)\n                      (str->int  (-> opts :pp-cluster-sep) \"cluster separation should be an integer\"))\n        BT? (= (-> opts :rankdir) \"BT\")\n        tasks (into {} (free-clusters-with-children g))\n        task-graph (->graph tasks)\n        clstrs (tasks->clusters tasks)\n        rects (clusters->boxes z clstrs)\n        seps (reduce\n              (fn [a [k v]]\n                (let [s (apply sep (get rects k) (map #(get rects %) v))\n                      adj-s (if cluster-sep\n                              (adjust-sep s :cluster-sep cluster-sep :BT? BT?)\n                              (adjust-sep s :BT? BT?))]\n                  (assoc a k adj-s)))\n              {} tasks)\n        inner-rects (reduce (fn [a [k v]] (assoc a k (g/inner-rect v (get rects k)))) {} seps)\n        e (reduce\n           (fn [a [prnt chdn]]\n             (let [state {;; boundary is the inner-rect\n                          :boundary (get inner-rects prnt)\n                          ;; but object within the boundary are outers (true rects) not inners\n                          :objects (mapv #(get rects %) (get tasks prnt))}\n                   constr {:boundary true\n                           :grow true\n                           :collision (if cluster-sep\n                                        cluster-sep\n                                        collision-sep)\n                           :obstacles (mapv #(svg/node->rect z (node-label-fn %))\n                                            (clstr/cluster->nodes g prnt))}]\n               (-> a\n                   (assoc-in [prnt :constraints] constr)\n                   (assoc-in [prnt :state] state)\n                   (assoc-in [prnt :boundary-sep] (get seps prnt))\n                   ;; for now we set only root clusters to shrink\n                   (assoc-in [prnt :root?] (util/root? task-graph prnt)))))\n           {}\n           tasks)]\n    e))\n\n\n\n(defn env->map\n  \"Flattens an environment back into rectangles.\"\n  [env]\n  (reduce\n   (fn [a [k v]]\n     (let [sep (:boundary-sep v)\n           bdry (-> v :state :boundary)\n           rect (if sep (g/outer-rect sep bdry) bdry)\n           root? (:root? v)\n           others (reduce (fn [a' c']\n                            (assoc a'\n                                   (:name c') c'))\n                          {} (-> v :state :objects))]\n       (-> a\n           (assoc k (assoc rect :root? root?))\n           (merge others))))\n   {}\n   env))\n\n\n(def max-move-factor 50)  ;; max move defined by size of primary annealing dimension / this\n\n\n(defn shrink-bias\n  \"Defines a shrink bias on the basis of number of child clusters\"\n  [n]\n  (cond\n    (and (< n 4)) 2\n    (and (< n 7)) 3\n    (and (< n 14)) 3\n    :else 4))\n\n\n(defn update-env\n  \"updates environment with new state, for each <cluster, new-st> pair\n  in new-st updating to the new rect and boundary.\"\n  [env k new-st]\n  (let [env1 (assoc-in env [k :state] new-st)\n        objects (reduce (fn [acc c] (assoc acc (:name c) c)) {} (:objects new-st))]\n    (reduce (fn [acc [k v]]\n              (if (some? (get acc k))\n                (let [sep (get-in acc [k :boundary-sep])]\n                  ;; Annealing is done outside in (for nested cluster hierarchies).\n                  ;; after each round of annealing we need to take objects from the previous\n                  ;; round and set them - adjusted to inner-rects - for the next round.\n                  (assoc-in acc [k :state :boundary] (g/inner-rect sep v)))\n                acc))\n            env1\n            objects)))\n\n\n(defn do-annealing\n  [z g opts label-fn]\n  (let [env (env z g opts label-fn)\n        rankdir (-> opts :rankdir)\n        y-retard (if (or (= \"TB\" rankdir) (= \"BT\" rankdir))\n                   (str->int (-> opts :pp-anneal-bias) \"anneal bias should be an integer\") nil)\n        x-retard (if (or (= \"LR\" rankdir) (= \"RL\" rankdir))\n                   (str->int (-> opts :pp-anneal-bias) \"anneal bias should be an integer\") nil)\n        dims (if (-> opts :pp-clusters)\n               (reduce-kv (fn [m k v] (if v (conj m k) m))\n                                        []\n                                        (-> opts :pp-clusters))\n               [:x :w :y :h])]\n    (reduce (fn [a [k v]]\n              (let [cur (get a k)\n                    new-st (anneal/annealing (:state cur)\n                                      25000\n                                      0\n                                      (:constraints cur)\n                                      anneal/neighbor-fn\n                                      anneal/cost-fn\n                                      anneal/p-fn\n                                      anneal/temp-fn\n                                      :terminate-early? true\n                                      :dims dims\n                                      :x-retard x-retard\n                                      :y-retard y-retard\n                                      :max-move (let [bdry (-> cur :state :boundary)]\n                                                  (if (or (= \"TB\" rankdir) (= \"BT\" rankdir))\n                                                    (quot (:w bdry) max-move-factor)\n                                                    (quot (:h bdry) max-move-factor)))\n                                      :shrink-bias (when (:root? cur)\n                                                     (shrink-bias (count (-> cur :state :objects)))))]\n                (update-env a k new-st)))\n            env\n            env)))\n\n\n(defn editor-rects [env clstr node]\n  (if-let [edited (get env clstr)]\n    (let [ps (svg/rect->svg edited)]\n      (assoc-in node [:attrs (first ps)] (second ps)))\n    node))\n\n\n(defn edit-cluster-rects [z env]\n  (svg/tree-edit z\n                 svg/all-clusters\n                 7\n                 (fn [n] (first (:content n)))\n                 5\n                 (partial editor-rects env)))\n\n\n;; Section on moving text around (cluster labels)\n\n(def x-label-spacer 10) ;; x dist insider bounding rect\n(def y-label-spacer 18) ;; y dist below bounding rect's top\n(def y-label-spacer-BT 10)\n\n\n(defn editor-label-posn [env g opts clstr node]\n  ;; repositions cluster label\n  (let [BT? (= \"BT\" (-> opts :rankdir))]\n    (if (not BT?)\n      (if-let [edited (get env clstr)]\n        (case (-> (clstr/merged-cluster-attr g clstr :style) :labeljust)\n\n          \"l\" (-> node\n                  (assoc-in [:attrs :x] (+ (:x edited) x-label-spacer))\n                  (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))\n                  (assoc-in [:attrs :text-anchor] \"start\"))\n\n          \"r\" (-> node\n                  (assoc-in [:attrs :x] (- (+ (:x edited) (:w edited)) x-label-spacer))\n                  (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))\n                  (assoc-in [:attrs :text-anchor] \"end\"))\n\n          (-> node\n              (assoc-in [:attrs :x] (+ (:x edited) (/ (:w edited) 2)))\n              (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))))\n        node)\n\n      ;; Bottom Top layout. position labels at bottom\n      (if-let [edited (get env clstr)]\n        (case (-> (clstr/merged-cluster-attr g clstr :style) :labeljust)\n\n          \"l\" (-> node\n                  (assoc-in [:attrs :x] (+ (:x edited) x-label-spacer))\n                  (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))\n                  (assoc-in [:attrs :text-anchor] \"start\"))\n\n          \"r\" (-> node\n                  (assoc-in [:attrs :x] (- (+ (:x edited) (:w edited)) x-label-spacer))\n                  (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))\n                  (assoc-in [:attrs :text-anchor] \"end\"))\n\n          (-> node\n              (assoc-in [:attrs :x] (+ (:x edited) (/ (:w edited) 2)))\n              (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))))\n        node))))\n\n\n(defn edit-cluster-labels [z g opts env]\n  (svg/tree-edit z\n                 svg/all-clusters\n                 7\n                 (fn [n] (first (:content n)))\n                 7\n                 (partial editor-label-posn env g opts)))\n\n\n(defn viewbox-size\n  \"calculates the canvas size from seq of root clusters, svg translation and viewbox.\n  The svg's upper left point is always at 0,0.\n  translation is a 2 element vector in form [tx ty].\n  viewbox is a 2 element vector in form [vbx vby].\"\n  [roots [tx ty] [vbx vby]]\n  (let [rects (vals roots)\n        min-x (+ tx (apply min (map :x rects)))\n        max-x (+ tx (apply max (map #(+ (:x %) (:w %)) rects)))\n        min-y (+ ty (apply min (map #(:y %) rects))) ;; negative y axis compensation\n        max-y (+ ty (apply max (map #(+ (:y %) (:h %)) rects)))\n        x-gap (min min-x (- vbx max-x))\n        y-gap (min min-y (- vby max-y))\n        x (+ max-x x-gap)\n        y (+ max-y y-gap)]\n    [x y]))\n\n\n(defn optimize-clusters\n  \"Anneals free clusters in z & g.\n   z is a zipper over the svg and g the underlying graph.\n   Returns svg.\"\n  [svg g label-fn opts]\n  (let [z (svg->zipper svg)\n        env-out (env->map (do-annealing z g opts label-fn))\n        roots (into {} (filter (fn [[k v]] (:root? v)) env-out))\n        canvas (-> z svg/canvas)\n        translation (-> canvas :transform :translate)\n        viewbox (-> canvas :viewbox)\n        [vbx vby] (viewbox-size roots translation viewbox)\n        z' (svg/->zipper (svg/set-canvas z vbx vby))]\n    (-> (edit-cluster-rects z' env-out)\n        svg/->zipper\n        (edit-cluster-labels g opts env-out)\n        svg/->xml)))\n"]}