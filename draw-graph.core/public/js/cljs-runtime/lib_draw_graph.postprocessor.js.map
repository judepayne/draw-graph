{"version":3,"sources":["lib_draw_graph/postprocessor.cljc"],"mappings":"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","names":["lib-draw-graph.postprocessor/free-clusters","g","clstrs","lib-draw-graph.clustered/clusters","has-chdn","p1__36413#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.clustered/cluster-children","cljs.core.into.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/without","s","x","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","js/Error","lib-draw-graph.postprocessor/take-1","cljs.core/empty?","item","cljs.core/first","lib-draw-graph.postprocessor/no-incoming","nodes","cljs.core/set","cljs.core/keys","have-incoming","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","clojure.set/union","cljs.core/vals","lib-draw-graph.postprocessor/normalize","p1__36428#","p2__36429#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","var_args","G__36433","lib-draw-graph.postprocessor/kahn-sort","lib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$3","l","cljs.core/every?","vec__36434","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","n","s'","m","g'","p1__36430#","p2__36431#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.set.union.cljs$core$IFn$_invoke$arity$2","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/sorted-free-clusters","lib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$1","lib-draw-graph.clustered/cluster-graph","lib-draw-graph.postprocessor/with-chdn","p1__36443#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","lib-draw-graph.postprocessor/free-clusters-with-children","lib-draw-graph.postprocessor/svg->zipper","svg","lib-draw-graph.svg/->zipper","lib-draw-graph.svg/parse-svg","lib-draw-graph.postprocessor/clusters->boxes","z","a","c","lib-draw-graph.svg/cluster->rect","lib-draw-graph.postprocessor/tasks->clusters","tasks","cljs.core/second","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lib-draw-graph.postprocessor/sep","seq36446","G__36447","cljs.core/next","self__4717__auto__","bounding","rects","cljs.core/min","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/max","o","lib-draw-graph.postprocessor/collision-sep","lib-draw-graph.postprocessor/adjust-sep","p__36458","map__36459","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq36455","G__36456","sep","cluster-sep","BT?","cljs.core/not","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","min-lrb","x__4222__auto__","y__4223__auto__","min-lrt","lib-draw-graph.postprocessor/parse-int","js/parseInt","lib-draw-graph.postprocessor/str->int","cs","error-msg","cljs.core/integer?","e36473","e","lib-draw-graph.util/err","lib-draw-graph.postprocessor/env","opts","node-label-fn","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__36480","vec__36481","prnt","chdn","p-rect","c-rects","p1__36476#","lib_draw_graph.postprocessor.adjust_sep.cljs$core$IFn$_invoke$arity$variadic","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","state","p1__36479#","constr","lib-draw-graph.geometry/inner-rect","acc","cur","lib-draw-graph.svg/node->rect","lib_draw_graph.clustered.cluster__GT_nodes.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc-in","lib-draw-graph.postprocessor/env->map","env","p__36484","vec__36485","k","v","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.postprocessor/max-move-factor","lib-draw-graph.postprocessor/do-annealing","label-fn","rankdir","y-retard","x-retard","dims","cljs.core/reduce-kv","p__36492","vec__36493","new-st","lib_draw_graph.anneal.annealing.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.anneal/neighbor-fn","lib-draw-graph.anneal/cost-fn","lib-draw-graph.anneal/p-fn","lib-draw-graph.anneal/temp-fn","cljs.core/quot","adj-env","p__36496","vec__36497","k'","v'","lib-draw-graph.postprocessor/editor-rects","clstr","node","temp__5718__auto__","edited","ps","lib-draw-graph.svg/rect->svg","lib-draw-graph.postprocessor/edit-cluster-rects","lib_draw_graph.svg.tree_edit.cljs$core$IFn$_invoke$arity$6","lib-draw-graph.svg/all-clusters","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/x-label-spacer","lib-draw-graph.postprocessor/y-label-spacer","lib-draw-graph.postprocessor/y-label-spacer-BT","lib-draw-graph.postprocessor/editor-label-posn","G__36500","lib-draw-graph.clustered/merged-cluster-attr","G__36501","lib-draw-graph.postprocessor/edit-cluster-labels","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","lib-draw-graph.postprocessor/optimize-clusters","env-out","lib-draw-graph.svg/->xml"],"sourcesContent":["(ns ^{:doc \"Post process the svg.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.postprocessor\n  (:require [lib-draw-graph.svg :as svg]\n            [lib-draw-graph.anneal :as anneal]\n            [lib-draw-graph.clustered :as clstr]\n            [lib-draw-graph.geometry :as g]\n            [lib-draw-graph.util :as util]\n            [clojure.set :as s]))\n\n\n(defn free-clusters\n  \"Returns clusters that (a) contain clusters (b) contain no nodes directly.\"\n  ;; TODO: remove the (b) restriction by parsing all svg nodes and adding\n  ;; 'obstacles' into the annealing routine.\n  [g]\n  (let [clstrs (clstr/clusters g)\n        ;with-nodes (into #{} (keys (nodes-by-cluster g)))\n        has-chdn (filter #(some? (clstr/cluster-children g %)) clstrs)]\n    ;(s/difference clstrs with-nodes)\n    (into #{} has-chdn)))\n\n\n;;Kahn sort - topological sort of a graph\n;; https://github.com/cloverage/cloverage/blob/HEAD/cloverage/src/cloverage/kahn.clj#L30\n(defn without\n  \"Returns set s with x removed.\"\n  [s x] (s/difference s #{x}))\n\n\n(defn take-1\n  \"Returns the pair [element, s'] where s' is set s with element removed.\"\n  [s] {:pre [(not (empty? s))]}\n  (let [item (first s)]\n    [item (without s item)]))\n\n\n(defn no-incoming\n  \"Returns the set of nodes in graph g for which there are no incoming\n  edges, where g is a map of nodes to sets of nodes.\"\n  [g]\n  (let [nodes (set (keys g))\n        have-incoming (apply s/union (vals g))]\n    (s/difference nodes have-incoming)))\n\n\n(defn normalize\n  \"Returns g with empty outgoing edges added for nodes with incoming\n  edges only.  Example: {:a #{:b}} => {:a #{:b}, :b #{}}\"\n  [g]\n  (let [have-incoming (apply s/union (vals g))]\n    (reduce #(if (get % %2) % (assoc % %2 #{})) g have-incoming)))\n\n\n(defn kahn-sort\n  \"Proposes a topological sort for directed graph g using Kahn's\n  algorithm, where g is a map of nodes to sets of nodes. If g is\n  cyclic, returns nil.\"\n  ([g]\n   (kahn-sort (normalize g) [] (no-incoming g)))\n  ([g l s]\n   (if (empty? s)\n     (when (every? empty? (vals g)) l)\n     (let [[n s'] (take-1 s)\n           m (g n)\n           g' (reduce #(update-in % [n] without %2) g m)]\n       (recur g' (conj l n) (s/union s' (s/intersection (no-incoming g') m)))))))\n\n\n(defn sorted-free-clusters\n  \"Kahn sorted free clusters\"\n  [g]\n  (filter (free-clusters g) (kahn-sort (clstr/cluster-graph g))))\n\n\n(defn with-chdn\n  \"Returns a vec of clusters with their children.\"\n  [g clstrs]\n  (mapv #(vector % (clstr/cluster-children g %)) clstrs))\n\n\n(defn free-clusters-with-children\n  \"Provides the targets for annealing in the graph.\"\n  [g]\n  (->> (sorted-free-clusters g)\n       (with-chdn g)))\n\n;; Now we need to set up the annealing jobs by reading in the svg\n;; Since graphviz labels clusters at the top, we'll use the top\n;; of the uppermost sibling as the top boundary (taking into account\n;; the SEP) otherwise the bounding box of the containing cluster.\n;; we'll calculate SEP for each annealing job by finding the minimum\n;; distance between a children cluster's bounding box (LRB) and the boundary.\n\n\n(defn svg->zipper [svg]\n  (svg/->zipper (svg/parse-svg svg)))\n\n\n(defn clusters->boxes\n  \"Get the bounding boxes for the clusters from the zipper over the svg.\"\n  [z clstrs]\n  (reduce \n   (fn [a c] (assoc a c (svg/cluster->rect z c)))\n   {}\n   clstrs))\n\n\n(defn tasks->clusters \n  \"Converts anneal-tasks to a set of clusters\"\n  [tasks]\n  (reduce (fn [a c]\n            (-> a\n                (conj (first c))\n                (clojure.set/union (second c))))\n          #{}\n          tasks))\n\n\n(defn sep\n  \"Returns the separation map between the bounding\"\n  [bounding & rects]\n  {:l (- (apply min (map :x rects)) (:x bounding))\n   :t (- (apply min (map :y rects)) (:y bounding))\n   :r (- (+ (:x bounding) (:w bounding))\n         (apply max (map (fn [o] (+ (:x o) (:w o))) rects)))\n   :b (- (+ (:y bounding) (:h bounding))\n         (apply max (map (fn [o] (+ (:y o) (:h o))) rects)))})\n\n\n(def collision-sep 8)\n\n\n(defn adjust-sep\n  \"takes a sep, preserves the top but adjusts other seps to minimum.\"\n  ([sep & {:keys [cluster-sep BT?] :or {cluster-sep nil BT? false}}]\n   (if (not BT?)\n     (if cluster-sep\n       (assoc sep :l cluster-sep :r cluster-sep :b cluster-sep)\n       (let [min-lrb (min (:l sep) (:r sep) (:b sep))]\n         (assoc sep :l min-lrb :r min-lrb :b min-lrb)))\n     ;; Bottom Top layout. Need to constraint differently\n     (if cluster-sep\n       (assoc sep :l cluster-sep :r cluster-sep :t cluster-sep)\n       (let [min-lrt (min (:l sep) (:r sep) (:t sep))]\n         (assoc sep :l min-lrt :r min-lrt :t min-lrt))))))\n\n\n(defn parse-int [s]\n  #?(:clj (Integer/parseInt s)\n     :cljs (js/parseInt s)))\n\n\n(defn str->int [cs error-msg]\n  (if (integer? cs)\n    cs\n    (try\n      (parse-int cs)\n      #?(:clj (catch Exception e (throw (util/err error-msg)))\n         :cljs (catch js/Error e (throw (util/err error-msg)))))))\n\n\n(defn env\n  \"Constructs a nested map which parameters required for annealing\n   from a zipper, a graph and the key clustered on in the graph.\"\n  [z g opts node-label-fn]\n  (let [cluster-sep (when (-> opts :pp-cluster-sep)\n                      (str->int  (-> opts :pp-cluster-sep) \"cluster separation should be an integer\"))\n        BT? (= (-> opts :rankdir) \"BT\")\n        tasks (free-clusters-with-children g)\n        clstrs (tasks->clusters tasks)\n        rects (clusters->boxes z clstrs)]\n    (reduce\n     (fn [a [prnt chdn]]\n       (let [p-rect (get rects prnt)\n             c-rects (map #(get rects %) chdn)\n             sep (if cluster-sep\n                   (adjust-sep (apply sep p-rect c-rects) :cluster-sep cluster-sep :BT? BT?)\n                   (adjust-sep (apply sep p-rect c-rects) :BT? BT?))\n             state (into {} (map #(vector % (get rects %)) chdn))\n             constr {:boundary (g/inner-rect sep p-rect)\n                     :grow true\n                     :collision (if cluster-sep\n                                  cluster-sep\n                                  collision-sep)\n                     :obstacles (reduce\n                                 (fn [acc cur]\n                                   (assoc acc\n                                          (node-label-fn cur)\n                                          (svg/node->rect z (node-label-fn cur))))\n                                 {}\n                                 (clstr/cluster->nodes g prnt))}]\n         (-> a\n             (assoc-in [prnt :constraints] constr)\n             (assoc-in [prnt :state] state)\n             (assoc-in [prnt :boundary-sep] sep)\n             (assoc-in [prnt :rect] p-rect))))\n     {}\n     tasks)))\n\n\n(defn env->map\n  \"Flattens an environment back rectangles\"\n  [env]\n  (reduce\n   (fn [a [k v]]\n     (-> a\n         (assoc k (-> v :rect))\n         (merge (-> v :state))))\n   {}\n   env))\n\n\n(def max-move-factor 50)  ;; max move defined by size of primary annealing dimension / this\n\n\n(defn do-annealing\n  [z g opts label-fn]\n  (let [env (env z g opts label-fn)\n        rankdir (-> opts :rankdir)\n        y-retard (if (or (= \"TB\" rankdir) (= \"BT\" rankdir))\n                   (str->int (-> opts :pp-anneal-bias) \"anneal bias should be an integer\") nil)\n        x-retard (if (or (= \"LR\" rankdir) (= \"RL\" rankdir))\n                   (str->int (-> opts :pp-anneal-bias) \"anneal bias should be an integer\") nil)\n        dims (if (-> opts :pp-clusters)\n               (reduce-kv (fn [m k v] (if v (conj m k) m))\n                                        []\n                                        (-> opts :pp-clusters))\n               [:x :w :y :h])]\n    (reduce (fn [a [k v]]\n              (let [new-st (anneal/annealing (-> v :state)\n                                      10000\n                                      0\n                                      (-> (get a k) :constraints)\n                                      anneal/neighbor-fn\n                                      anneal/cost-fn\n                                      anneal/p-fn\n                                      anneal/temp-fn\n                                      :terminate-early? true\n                                      :dims dims\n                                      :x-retard x-retard\n                                      :y-retard y-retard\n                                      :max-move (if (or (= \"TB\" rankdir) (= \"BT\" rankdir))\n                                                  (quot\n                                                   (-> (get a k) :constraints :boundary :w)\n                                                   max-move-factor)\n                                                  (quot\n                                                   (-> (get a k) :constraints :boundary :h)\n                                                   max-move-factor)))\n                    adj-env (reduce\n                             (fn [acc [k' v']]\n                               (if (some?  (get acc k'))\n                                 (-> acc\n                                     (assoc-in [k' :rect] v')\n                                     (assoc-in [k' :constraints :boundary]\n                                               (g/inner-rect\n                                                (-> (get acc k') :boundary-sep)\n                                                v')))\n                                 acc))\n                             a\n                             new-st)]\n                (-> adj-env\n                    (assoc-in [k :state] new-st))))\n            env\n            env)))\n\n\n(defn editor-rects [env clstr node]\n  (if-let [edited (get env clstr)]\n    (let [ps (svg/rect->svg edited)]\n      (assoc-in node [:attrs (first ps)] (second ps)))\n    node))\n\n\n(defn edit-cluster-rects [z env]\n  (svg/tree-edit z\n                 svg/all-clusters\n                 7\n                 (fn [n] (first (:content n)))\n                 5\n                 (partial editor-rects env)))\n\n\n;; Section on moving text around (cluster labels)\n\n(def x-label-spacer 10) ;; x dist insider bounding rect\n(def y-label-spacer 18) ;; y dist below bounding rect's top\n(def y-label-spacer-BT 10)\n\n\n(defn editor-label-posn [env g opts clstr node]\n  ;; repositions cluster label\n  (let [BT? (= \"BT\" (-> opts :rankdir))]\n    (if (not BT?)\n      (if-let [edited (get env clstr)]\n        (case (-> (clstr/merged-cluster-attr g clstr :style) :labeljust)\n          \n          \"l\" (-> node\n                  (assoc-in [:attrs :x] (+ (:x edited) x-label-spacer))\n                  (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))\n                  (assoc-in [:attrs :text-anchor] \"start\"))\n\n          \"r\" (-> node\n                  (assoc-in [:attrs :x] (- (+ (:x edited) (:w edited)) x-label-spacer))\n                  (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))\n                  (assoc-in [:attrs :text-anchor] \"end\"))\n\n          (-> node\n              (assoc-in [:attrs :x] (+ (:x edited) (/ (:w edited) 2)))\n              (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))))\n        node)\n\n      ;; Bottom Top layout. position labels at bottom\n      (if-let [edited (get env clstr)]\n        (case (-> (clstr/merged-cluster-attr g clstr :style) :labeljust)\n          \n          \"l\" (-> node\n                  (assoc-in [:attrs :x] (+ (:x edited) x-label-spacer))\n                  (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))\n                  (assoc-in [:attrs :text-anchor] \"start\"))\n\n          \"r\" (-> node\n                  (assoc-in [:attrs :x] (- (+ (:x edited) (:w edited)) x-label-spacer))\n                  (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))\n                  (assoc-in [:attrs :text-anchor] \"end\"))\n\n          (-> node\n              (assoc-in [:attrs :x] (+ (:x edited) (/ (:w edited) 2)))\n              (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))))\n        node))))\n\n\n(defn edit-cluster-labels [z g opts env]\n  (svg/tree-edit z\n                 svg/all-clusters\n                 7\n                 (fn [n] (first (:content n)))\n                 7\n                 (partial editor-label-posn env g opts)))\n\n\n(defn optimize-clusters\n  \"Anneals free clusters in z & g.\n   z is a zipper over the svg and g the underlying graph.\n   Returns svg.\"\n  [svg g label-fn opts]\n  (let [z (svg->zipper svg)\n        env-out (env->map (do-annealing z g opts label-fn))]\n    (-> (edit-cluster-rects z env-out)\n        svg/->zipper\n        (edit-cluster-labels g opts env-out)\n        svg/->xml)))\n\n"]}