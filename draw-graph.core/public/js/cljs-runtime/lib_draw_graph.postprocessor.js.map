{"version":3,"sources":["lib_draw_graph/postprocessor.cljc"],"mappings":"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","names":["lib-draw-graph.postprocessor/free-clusters","g","clstrs","lib-draw-graph.clustered/clusters","has-chdn","p1__37505#","cljs.core.filter","lib-draw-graph.clustered/cluster-children","cljs.core.into","lib-draw-graph.postprocessor/without","s","x","clojure.set.difference","js/Error","lib-draw-graph.postprocessor/take-1","cljs.core/empty?","item","cljs.core/first","lib-draw-graph.postprocessor/no-incoming","nodes","cljs.core/set","cljs.core/keys","have-incoming","cljs.core.apply","clojure.set/union","cljs.core/vals","lib-draw-graph.postprocessor/normalize","p1__37515#","p2__37516#","cljs.core.reduce","cljs.core.get","cljs.core.assoc","var_args","G__37520","lib-draw-graph.postprocessor/kahn-sort","lib_draw_graph.postprocessor.kahn_sort","l","cljs.core/every?","vec__37521","cljs.core.nth","n","s'","m","g'","p1__37517#","p2__37518#","cljs.core.update_in","cljs.core.conj","clojure.set.union","clojure.set.intersection","lib-draw-graph.postprocessor/sorted-free-clusters","lib-draw-graph.clustered/cluster-graph","lib-draw-graph.postprocessor/with-chdn","p1__37524#","cljs.core.mapv","cljs.core/PersistentVector","lib-draw-graph.postprocessor/free-clusters-with-children","lib-draw-graph.postprocessor/->graph","free-clusters","edges","p__37526","vec__37527","a","k","v","cljs.core/conj","p1__37525#","cljs.core.map","loom.graph/digraph","lib-draw-graph.postprocessor/svg->zipper","svg","lib-draw-graph.svg/->zipper","lib-draw-graph.svg/parse-svg","lib-draw-graph.postprocessor/clusters->boxes","z","c","lib-draw-graph.svg/cluster->rect","lib-draw-graph.postprocessor/tasks->clusters","tasks","p__37536","vec__37537","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","lib-draw-graph.postprocessor/sep","seq37542","G__37543","cljs.core/next","self__4776__auto__","bounding","rects","cljs.core/min","cljs.core/max","o","lib-draw-graph.postprocessor/collision-sep","lib-draw-graph.postprocessor/adjust-sep","p__37553","map__37554","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","seq37551","G__37552","sep","cluster-sep","BT?","cljs.core/not","min-lrb","x__4276__auto__","y__4277__auto__","min-lrt","lib-draw-graph.postprocessor/parse-integer","js/parseInt","lib-draw-graph.postprocessor/str->int","cs","error-msg","cljs.core/integer?","e37556","e","lib-draw-graph.util/err","lib-draw-graph.postprocessor/env","opts","node-label-fn","cljs.core._EQ_","task-graph","seps","p__37560","vec__37561","p1__37557#","adj-s","lib_draw_graph.postprocessor.adjust_sep","inner-rects","p__37564","vec__37565","lib-draw-graph.geometry/inner-rect","p__37568","vec__37569","prnt","chdn","state","p1__37558#","constr","p1__37559#","lib-draw-graph.svg/node->rect","lib_draw_graph.clustered.cluster__GT_nodes","cljs.core/assoc-in","lib-draw-graph.util/root?","lib-draw-graph.postprocessor/env->map","env","p__37572","vec__37573","bdry","rect","lib-draw-graph.geometry/outer-rect","root?","others","a'","c'","cljs.core.merge","lib-draw-graph.postprocessor/max-move-factor","lib-draw-graph.postprocessor/shrink-bias","lib-draw-graph.postprocessor/update-env","new-st","env1","objects","acc","p__37576","vec__37577","cljs.core.get_in","lib-draw-graph.postprocessor/do-annealing","label-fn","rankdir","y-retard","x-retard","dims","cljs.core/reduce-kv","p__37582","vec__37583","cur","lib_draw_graph.anneal.annealing","lib-draw-graph.anneal/neighbor-fn","lib-draw-graph.anneal/cost-fn","lib-draw-graph.anneal/p-fn","lib-draw-graph.anneal/temp-fn","cljs.core/quot","cljs.core/count","lib-draw-graph.postprocessor/editor-rects","clstr","node","temp__5733__auto__","edited","ps","lib-draw-graph.svg/rect->svg","cljs.core/second","lib-draw-graph.postprocessor/edit-cluster-rects","lib_draw_graph.svg.tree_edit","lib-draw-graph.svg/all-clusters","cljs.core.partial","lib-draw-graph.postprocessor/x-label-spacer","lib-draw-graph.postprocessor/y-label-spacer","lib-draw-graph.postprocessor/y-label-spacer-BT","lib-draw-graph.postprocessor/editor-label-posn","G__37591","lib-draw-graph.clustered/merged-cluster-attr","G__37592","lib-draw-graph.postprocessor/edit-cluster-labels","p__37597","p__37598","vec__37599","vec__37602","lib-draw-graph.postprocessor/viewbox-size","roots","tx","ty","vbx","vby","min-x","max-x","p1__37594#","min-y","p1__37595#","max-y","p1__37596#","x-gap","y-gap","y","lib-draw-graph.postprocessor/optimize-clusters","vec__37608","env-out","p__37611","vec__37612","canvas","lib-draw-graph.svg/canvas","translation","viewbox","z'","lib-draw-graph.svg/set-canvas","lib-draw-graph.svg/->xml"],"sourcesContent":["(ns ^{:doc \"Post process the svg.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.postprocessor\n  (:require [lib-draw-graph.svg :as svg]\n            [lib-draw-graph.anneal :as anneal]\n            [loom.graph            :as loom.graph]\n            [lib-draw-graph.clustered :as clstr]\n            [lib-draw-graph.geometry :as g]\n            [lib-draw-graph.util :as util]\n            [clojure.set :as s]))\n\n\n(defn free-clusters\n  \"Returns clusters that (a) contain clusters (b) contain no nodes directly.\"\n  ;; TODO: remove the (b) restriction by parsing all svg nodes and adding\n  ;; 'obstacles' into the annealing routine.\n  [g]\n  (let [clstrs (clstr/clusters g)\n        ;with-nodes (into #{} (keys (nodes-by-cluster g)))\n        has-chdn (filter #(some? (clstr/cluster-children g %)) clstrs)]\n    ;(s/difference clstrs with-nodes)\n    (into #{} has-chdn)))\n\n\n;;Kahn sort - topological sort of a graph\n;; https://github.com/cloverage/cloverage/blob/HEAD/cloverage/src/cloverage/kahn.clj#L30\n(defn without\n  \"Returns set s with x removed.\"\n  [s x] (s/difference s #{x}))\n\n\n(defn take-1\n  \"Returns the pair [element, s'] where s' is set s with element removed.\"\n  [s] {:pre [(not (empty? s))]}\n  (let [item (first s)]\n    [item (without s item)]))\n\n\n(defn no-incoming\n  \"Returns the set of nodes in graph g for which there are no incoming\n  edges, where g is a map of nodes to sets of nodes.\"\n  [g]\n  (let [nodes (set (keys g))\n        have-incoming (apply s/union (vals g))]\n    (s/difference nodes have-incoming)))\n\n\n(defn normalize\n  \"Returns g with empty outgoing edges added for nodes with incoming\n  edges only.  Example: {:a #{:b}} => {:a #{:b}, :b #{}}\"\n  [g]\n  (let [have-incoming (apply s/union (vals g))]\n    (reduce #(if (get % %2) % (assoc % %2 #{})) g have-incoming)))\n\n\n(defn kahn-sort\n  \"Proposes a topological sort for directed graph g using Kahn's\n  algorithm, where g is a map of nodes to sets of nodes. If g is\n  cyclic, returns nil.\"\n  ([g]\n   (kahn-sort (normalize g) [] (no-incoming g)))\n  ([g l s]\n   (if (empty? s)\n     (when (every? empty? (vals g)) l)\n     (let [[n s'] (take-1 s)\n           m (g n)\n           g' (reduce #(update-in % [n] without %2) g m)]\n       (recur g' (conj l n) (s/union s' (s/intersection (no-incoming g') m)))))))\n\n\n(defn sorted-free-clusters\n  \"Kahn sorted free clusters\"\n  [g]\n  (filter (free-clusters g) (kahn-sort (clstr/cluster-graph g))))\n\n\n(defn with-chdn\n  \"Returns a vec of clusters with their children.\"\n  [g clstrs]\n  (mapv #(vector % (clstr/cluster-children g %)) clstrs))\n\n\n(defn free-clusters-with-children\n  \"Provides the targets for annealing in the graph.\"\n  [g]\n  (->> (sorted-free-clusters g)\n       (with-chdn g)))\n\n\n(defn ->graph\n  \"turns free clusters with children into a loom graph.\"\n  [free-clusters]\n  (let [edges (reduce\n               (fn [a [k v]]\n                 (apply conj a (map #(vector k %) v)))\n               []\n               free-clusters)]\n    (apply loom.graph/digraph edges)))\n\n\n;; Now we need to set up the annealing jobs by reading in the svg\n;; Since graphviz labels clusters at the top, we'll use the top\n;; of the uppermost sibling as the top boundary (taking into account\n;; the SEP) otherwise the bounding box of the containing cluster.\n;; we'll calculate SEP for each annealing job by finding the minimum\n;; distance between a children cluster's bounding box (LRB) and the boundary.\n\n\n(defn svg->zipper [svg]\n  (svg/->zipper (svg/parse-svg svg)))\n\n\n(defn clusters->boxes\n  \"Get the bounding boxes for the clusters from the zipper over the svg.\"\n  [z clstrs]\n  (reduce\n   (fn [a c] (assoc a c (svg/cluster->rect z c)))\n   {}\n   clstrs))\n\n\n(defn tasks->clusters\n  \"Converts anneal-tasks to a set of clusters\"\n  [tasks]\n  (reduce (fn [a [k v]]\n            (-> a\n                (conj k)\n                (clojure.set/union v)))\n          #{}\n          tasks))\n\n\n(defn sep\n  \"Returns the separation map between the bounding\"\n  [bounding & rects]\n  {:l (- (apply min (map :x rects)) (:x bounding))\n   :t (- (apply min (map :y rects)) (:y bounding))\n   :r (- (+ (:x bounding) (:w bounding))\n         (apply max (map (fn [o] (+ (:x o) (:w o))) rects)))\n   :b (- (+ (:y bounding) (:h bounding))\n         (apply max (map (fn [o] (+ (:y o) (:h o))) rects)))})\n\n\n(def collision-sep 8)\n\n\n(defn adjust-sep\n  \"takes a sep, preserves the top but adjusts other seps to minimum.\"\n  ([sep & {:keys [cluster-sep BT?] :or {cluster-sep nil BT? false}}]\n   (if (not BT?)\n     (if cluster-sep\n       (assoc sep :l cluster-sep :r cluster-sep :b cluster-sep)\n       (let [min-lrb (min (:l sep) (:r sep) (:b sep))]\n         (assoc sep :l min-lrb :r min-lrb :b min-lrb)))\n     ;; Bottom Top layout. Need to constraint differently\n     (if cluster-sep\n       (assoc sep :l cluster-sep :r cluster-sep :t cluster-sep)\n       (let [min-lrt (min (:l sep) (:r sep) (:t sep))]\n         (assoc sep :l min-lrt :r min-lrt :t min-lrt))))))\n\n\n(defn parse-integer [s]\n  #?(:clj (Integer/parseInt s)\n     :cljs (js/parseInt s)))\n\n\n(defn str->int [cs error-msg]\n  (if (integer? cs)\n    cs\n    (try\n      (parse-integer cs)\n      #?(:clj (catch Exception e (throw (util/err error-msg)))\n         :cljs (catch js/Error e (throw (util/err error-msg)))))))\n\n\n(defn env\n  \"Constructs a nested map which parameters required for annealing\n   from a zipper, a graph and the key clustered on in the graph.\"\n  [z g opts node-label-fn]\n  (let [cluster-sep (when (-> opts :pp-cluster-sep)\n                      (str->int  (-> opts :pp-cluster-sep) \"cluster separation should be an integer\"))\n        BT? (= (-> opts :rankdir) \"BT\")\n        tasks (into {} (free-clusters-with-children g))\n        task-graph (->graph tasks)\n        clstrs (tasks->clusters tasks)\n        rects (clusters->boxes z clstrs)\n        seps (reduce\n              (fn [a [k v]]\n                (let [s (apply sep (get rects k) (map #(get rects %) v))\n                      adj-s (if cluster-sep\n                              (adjust-sep s :cluster-sep cluster-sep :BT? BT?)\n                              (adjust-sep s :BT? BT?))]\n                  (assoc a k adj-s)))\n              {} tasks)\n        inner-rects (reduce (fn [a [k v]] (assoc a k (g/inner-rect v (get rects k)))) {} seps)\n        e (reduce\n           (fn [a [prnt chdn]]\n             (let [state {;; boundary is the inner-rect\n                          :boundary (get inner-rects prnt)\n                          ;; but object within the boundary are outers (true rects) not inners\n                          :objects (mapv #(get rects %) (get tasks prnt))}\n                   constr {:boundary true\n                           :grow true\n                           :collision (if cluster-sep\n                                        cluster-sep\n                                        collision-sep)\n                           :obstacles (mapv #(svg/node->rect z (node-label-fn %))\n                                            (clstr/cluster->nodes g prnt))}]\n               (-> a\n                   (assoc-in [prnt :constraints] constr)\n                   (assoc-in [prnt :state] state)\n                   (assoc-in [prnt :boundary-sep] (get seps prnt))\n                   ;; for now we set only root clusters to shrink\n                   (assoc-in [prnt :root?] (util/root? task-graph prnt)))))\n           {}\n           tasks)]\n    e))\n\n\n\n(defn env->map\n  \"Flattens an environment back into rectangles.\"\n  [env]\n  (reduce\n   (fn [a [k v]]\n     (let [sep (:boundary-sep v)\n           bdry (-> v :state :boundary)\n           rect (if sep (g/outer-rect sep bdry) bdry)\n           root? (:root? v)\n           others (reduce (fn [a' c']\n                            (assoc a'\n                                   (:name c') c'))\n                          {} (-> v :state :objects))]\n       (-> a\n           (assoc k (assoc rect :root? root?))\n           (merge others))))\n   {}\n   env))\n\n\n(def max-move-factor 50)  ;; max move defined by size of primary annealing dimension / this\n\n\n(defn shrink-bias\n  \"Defines a shrink bias on the basis of number of child clusters\"\n  [n]\n  (cond\n    (and (< n 4)) 2\n    (and (< n 7)) 3\n    (and (< n 14)) 3\n    :else 4))\n\n\n(defn update-env\n  \"updates environment with new state, for each <cluster, new-st> pair\n  in new-st updating to the new rect and boundary.\"\n  [env k new-st]\n  (let [env1 (assoc-in env [k :state] new-st)\n        objects (reduce (fn [acc c] (assoc acc (:name c) c)) {} (:objects new-st))]\n    (reduce (fn [acc [k v]]\n              (if (some? (get acc k))\n                (let [sep (get-in acc [k :boundary-sep])]\n                  ;; Annealing is done outside in (for nested cluster hierarchies).\n                  ;; after each round of annealing we need to take objects from the previous\n                  ;; round and set them - adjusted to inner-rects - for the next round.\n                  (assoc-in acc [k :state :boundary] (g/inner-rect sep v)))\n                acc))\n            env1\n            objects)))\n\n\n(defn do-annealing\n  [z g opts label-fn]\n  (let [env (env z g opts label-fn)\n        rankdir (-> opts :rankdir)\n        y-retard (if (or (= \"TB\" rankdir) (= \"BT\" rankdir))\n                   (str->int (-> opts :pp-anneal-bias) \"anneal bias should be an integer\") nil)\n        x-retard (if (or (= \"LR\" rankdir) (= \"RL\" rankdir))\n                   (str->int (-> opts :pp-anneal-bias) \"anneal bias should be an integer\") nil)\n        dims (if (-> opts :pp-clusters)\n               (reduce-kv (fn [m k v] (if v (conj m k) m))\n                                        []\n                                        (-> opts :pp-clusters))\n               [:x :w :y :h])]\n    (reduce (fn [a [k v]]\n              (let [cur (get a k)\n                    new-st (anneal/annealing (:state cur)\n                                      25000\n                                      0\n                                      (:constraints cur)\n                                      anneal/neighbor-fn\n                                      anneal/cost-fn\n                                      anneal/p-fn\n                                      anneal/temp-fn\n                                      :terminate-early? true\n                                      :dims dims\n                                      :x-retard x-retard\n                                      :y-retard y-retard\n                                      :max-move (let [bdry (-> cur :state :boundary)]\n                                                  (if (or (= \"TB\" rankdir) (= \"BT\" rankdir))\n                                                    (quot (:w bdry) max-move-factor)\n                                                    (quot (:h bdry) max-move-factor)))\n                                      :shrink-bias (when (:root? cur)\n                                                     (shrink-bias (count (-> cur :state :objects)))))]\n                (update-env a k new-st)))\n            env\n            env)))\n\n\n(defn editor-rects [env clstr node]\n  (if-let [edited (get env clstr)]\n    (let [ps (svg/rect->svg edited)]\n      (assoc-in node [:attrs (first ps)] (second ps)))\n    node))\n\n\n(defn edit-cluster-rects [z env]\n  (svg/tree-edit z\n                 svg/all-clusters\n                 7\n                 (fn [n] (first (:content n)))\n                 5\n                 (partial editor-rects env)))\n\n\n;; Section on moving text around (cluster labels)\n\n(def x-label-spacer 10) ;; x dist insider bounding rect\n(def y-label-spacer 18) ;; y dist below bounding rect's top\n(def y-label-spacer-BT 10)\n\n\n(defn editor-label-posn [env g opts clstr node]\n  ;; repositions cluster label\n  (let [BT? (= \"BT\" (-> opts :rankdir))]\n    (if (not BT?)\n      (if-let [edited (get env clstr)]\n        (case (-> (clstr/merged-cluster-attr g clstr :style) :labeljust)\n\n          \"l\" (-> node\n                  (assoc-in [:attrs :x] (+ (:x edited) x-label-spacer))\n                  (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))\n                  (assoc-in [:attrs :text-anchor] \"start\"))\n\n          \"r\" (-> node\n                  (assoc-in [:attrs :x] (- (+ (:x edited) (:w edited)) x-label-spacer))\n                  (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))\n                  (assoc-in [:attrs :text-anchor] \"end\"))\n\n          (-> node\n              (assoc-in [:attrs :x] (+ (:x edited) (/ (:w edited) 2)))\n              (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))))\n        node)\n\n      ;; Bottom Top layout. position labels at bottom\n      (if-let [edited (get env clstr)]\n        (case (-> (clstr/merged-cluster-attr g clstr :style) :labeljust)\n\n          \"l\" (-> node\n                  (assoc-in [:attrs :x] (+ (:x edited) x-label-spacer))\n                  (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))\n                  (assoc-in [:attrs :text-anchor] \"start\"))\n\n          \"r\" (-> node\n                  (assoc-in [:attrs :x] (- (+ (:x edited) (:w edited)) x-label-spacer))\n                  (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))\n                  (assoc-in [:attrs :text-anchor] \"end\"))\n\n          (-> node\n              (assoc-in [:attrs :x] (+ (:x edited) (/ (:w edited) 2)))\n              (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))))\n        node))))\n\n\n(defn edit-cluster-labels [z g opts env]\n  (svg/tree-edit z\n                 svg/all-clusters\n                 7\n                 (fn [n] (first (:content n)))\n                 7\n                 (partial editor-label-posn env g opts)))\n\n\n(defn viewbox-size\n  \"calculates the canvas size from seq of root clusters, svg translation and viewbox.\n  The svg's upper left point is always at 0,0.\n  translation is a 2 element vector in form [tx ty].\n  viewbox is a 2 element vector in form [vbx vby].\"\n  [roots [tx ty] [vbx vby]]\n  (let [rects (vals roots)\n        min-x (+ tx (apply min (map :x rects)))\n        max-x (+ tx (apply max (map #(+ (:x %) (:w %)) rects)))\n        min-y (+ ty (apply min (map #(:y %) rects))) ;; negative y axis compensation\n        max-y (+ ty (apply max (map #(+ (:y %) (:h %)) rects)))\n        x-gap (min min-x (- vbx max-x))\n        y-gap (min min-y (- vby max-y))\n        x (+ max-x x-gap)\n        y (+ max-y y-gap)]\n    [x y]))\n\n\n(defn optimize-clusters\n  \"Anneals free clusters in z & g.\n   z is a zipper over the svg and g the underlying graph.\n   Returns svg.\"\n  [svg g label-fn opts]\n  (let [z (svg->zipper svg)\n        env-out (env->map (do-annealing z g opts label-fn))\n        roots (into {} (filter (fn [[k v]] (:root? v)) env-out))\n        canvas (-> z svg/canvas)\n        translation (-> canvas :transform :translate)\n        viewbox (-> canvas :viewbox)\n        [vbx vby] (viewbox-size roots translation viewbox)\n        z' (svg/->zipper (svg/set-canvas z vbx vby))]\n    (-> (edit-cluster-rects z' env-out)\n        svg/->zipper\n        (edit-cluster-labels g opts env-out)\n        svg/->xml)))\n"]}