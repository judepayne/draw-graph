{"version":3,"sources":["lib_draw_graph/postprocessor.cljc"],"mappings":"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","names":["lib-draw-graph.postprocessor/free-clusters","g","clstrs","lib-draw-graph.clustered/clusters","has-chdn","p1__36423#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.clustered/cluster-children","cljs.core.into.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/without","s","x","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","js/Error","lib-draw-graph.postprocessor/take-1","cljs.core/empty?","item","cljs.core/first","lib-draw-graph.postprocessor/no-incoming","nodes","cljs.core/set","cljs.core/keys","have-incoming","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","clojure.set/union","cljs.core/vals","lib-draw-graph.postprocessor/normalize","p1__36425#","p2__36426#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","var_args","G__36432","lib-draw-graph.postprocessor/kahn-sort","lib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$3","l","cljs.core/every?","vec__36435","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","n","s'","m","g'","p1__36429#","p2__36430#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.set.union.cljs$core$IFn$_invoke$arity$2","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/sorted-free-clusters","lib_draw_graph.postprocessor.kahn_sort.cljs$core$IFn$_invoke$arity$1","lib-draw-graph.clustered/cluster-graph","lib-draw-graph.postprocessor/with-chdn","p1__36439#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","lib-draw-graph.postprocessor/free-clusters-with-children","lib-draw-graph.postprocessor/svg->zipper","svg","lib-draw-graph.svg/->zipper","lib-draw-graph.svg/parse-svg","lib-draw-graph.postprocessor/clusters->boxes","z","a","c","lib-draw-graph.svg/cluster->rect","lib-draw-graph.postprocessor/tasks->clusters","tasks","p__36454","vec__36455","k","v","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lib-draw-graph.postprocessor/sep","seq36462","G__36463","cljs.core/next","self__4717__auto__","bounding","rects","cljs.core/min","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/max","o","lib-draw-graph.postprocessor/collision-sep","lib-draw-graph.postprocessor/adjust-sep","p__36466","map__36467","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq36464","G__36465","sep","cluster-sep","BT?","cljs.core/not","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","min-lrb","x__4222__auto__","y__4223__auto__","min-lrt","lib-draw-graph.postprocessor/parse-int","js/parseInt","lib-draw-graph.postprocessor/str->int","cs","error-msg","cljs.core/integer?","e36475","e","lib-draw-graph.util/err","lib-draw-graph.postprocessor/env","opts","node-label-fn","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","seps","p__36480","vec__36481","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","p1__36476#","adj-s","lib_draw_graph.postprocessor.adjust_sep.cljs$core$IFn$_invoke$arity$variadic","inner-rects","p__36489","vec__36490","lib-draw-graph.geometry/inner-rect","p__36494","vec__36496","prnt","chdn","state","p1__36477#","constr","p1__36478#","lib-draw-graph.svg/node->rect","lib_draw_graph.clustered.cluster__GT_nodes.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc-in","lib-draw-graph.postprocessor/env->map","env","p__36503","vec__36504","bdry","rect","lib-draw-graph.geometry/outer-rect","others","a'","c'","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.postprocessor/max-move-factor","lib-draw-graph.postprocessor/update-env","new-st","env1","objects","acc","p__36515","vec__36516","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/do-annealing","label-fn","rankdir","y-retard","x-retard","dims","cljs.core/reduce-kv","p__36522","vec__36525","cur","lib_draw_graph.anneal.annealing.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.anneal/neighbor-fn","lib-draw-graph.anneal/cost-fn","lib-draw-graph.anneal/p-fn","lib-draw-graph.anneal/temp-fn","cljs.core/quot","lib-draw-graph.postprocessor/editor-rects","clstr","node","temp__5718__auto__","edited","ps","lib-draw-graph.svg/rect->svg","cljs.core/second","lib-draw-graph.postprocessor/edit-cluster-rects","lib_draw_graph.svg.tree_edit.cljs$core$IFn$_invoke$arity$6","lib-draw-graph.svg/all-clusters","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.postprocessor/x-label-spacer","lib-draw-graph.postprocessor/y-label-spacer","lib-draw-graph.postprocessor/y-label-spacer-BT","lib-draw-graph.postprocessor/editor-label-posn","G__36529","lib-draw-graph.clustered/merged-cluster-attr","G__36531","lib-draw-graph.postprocessor/edit-cluster-labels","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","lib-draw-graph.postprocessor/optimize-clusters","env-out","lib-draw-graph.svg/->xml"],"sourcesContent":["(ns ^{:doc \"Post process the svg.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.postprocessor\n  (:require [lib-draw-graph.svg :as svg]\n            [lib-draw-graph.anneal :as anneal]\n            [loom.graph            :as loom.graph]\n            [lib-draw-graph.clustered :as clstr]\n            [lib-draw-graph.geometry :as g]\n            [lib-draw-graph.util :as util]\n            [clojure.set :as s]))\n\n\n(defn free-clusters\n  \"Returns clusters that (a) contain clusters (b) contain no nodes directly.\"\n  ;; TODO: remove the (b) restriction by parsing all svg nodes and adding\n  ;; 'obstacles' into the annealing routine.\n  [g]\n  (let [clstrs (clstr/clusters g)\n        ;with-nodes (into #{} (keys (nodes-by-cluster g)))\n        has-chdn (filter #(some? (clstr/cluster-children g %)) clstrs)]\n    ;(s/difference clstrs with-nodes)\n    (into #{} has-chdn)))\n\n\n;;Kahn sort - topological sort of a graph\n;; https://github.com/cloverage/cloverage/blob/HEAD/cloverage/src/cloverage/kahn.clj#L30\n(defn without\n  \"Returns set s with x removed.\"\n  [s x] (s/difference s #{x}))\n\n\n(defn take-1\n  \"Returns the pair [element, s'] where s' is set s with element removed.\"\n  [s] {:pre [(not (empty? s))]}\n  (let [item (first s)]\n    [item (without s item)]))\n\n\n(defn no-incoming\n  \"Returns the set of nodes in graph g for which there are no incoming\n  edges, where g is a map of nodes to sets of nodes.\"\n  [g]\n  (let [nodes (set (keys g))\n        have-incoming (apply s/union (vals g))]\n    (s/difference nodes have-incoming)))\n\n\n(defn normalize\n  \"Returns g with empty outgoing edges added for nodes with incoming\n  edges only.  Example: {:a #{:b}} => {:a #{:b}, :b #{}}\"\n  [g]\n  (let [have-incoming (apply s/union (vals g))]\n    (reduce #(if (get % %2) % (assoc % %2 #{})) g have-incoming)))\n\n\n(defn kahn-sort\n  \"Proposes a topological sort for directed graph g using Kahn's\n  algorithm, where g is a map of nodes to sets of nodes. If g is\n  cyclic, returns nil.\"\n  ([g]\n   (kahn-sort (normalize g) [] (no-incoming g)))\n  ([g l s]\n   (if (empty? s)\n     (when (every? empty? (vals g)) l)\n     (let [[n s'] (take-1 s)\n           m (g n)\n           g' (reduce #(update-in % [n] without %2) g m)]\n       (recur g' (conj l n) (s/union s' (s/intersection (no-incoming g') m)))))))\n\n\n(defn sorted-free-clusters\n  \"Kahn sorted free clusters\"\n  [g]\n  (filter (free-clusters g) (kahn-sort (clstr/cluster-graph g))))\n\n\n(defn with-chdn\n  \"Returns a vec of clusters with their children.\"\n  [g clstrs]\n  (mapv #(vector % (clstr/cluster-children g %)) clstrs))\n\n\n(defn free-clusters-with-children\n  \"Provides the targets for annealing in the graph.\"\n  [g]\n  (->> (sorted-free-clusters g)\n       (with-chdn g)))\n\n\n;; Now we need to set up the annealing jobs by reading in the svg\n;; Since graphviz labels clusters at the top, we'll use the top\n;; of the uppermost sibling as the top boundary (taking into account\n;; the SEP) otherwise the bounding box of the containing cluster.\n;; we'll calculate SEP for each annealing job by finding the minimum\n;; distance between a children cluster's bounding box (LRB) and the boundary.\n\n\n(defn svg->zipper [svg]\n  (svg/->zipper (svg/parse-svg svg)))\n\n\n(defn clusters->boxes\n  \"Get the bounding boxes for the clusters from the zipper over the svg.\"\n  [z clstrs]\n  (reduce\n   (fn [a c] (assoc a c (svg/cluster->rect z c)))\n   {}\n   clstrs))\n\n\n(defn tasks->clusters\n  \"Converts anneal-tasks to a set of clusters\"\n  [tasks]\n  (reduce (fn [a [k v]]\n            (-> a\n                (conj k)\n                (clojure.set/union v)))\n          #{}\n          tasks))\n\n\n(defn sep\n  \"Returns the separation map between the bounding\"\n  [bounding & rects]\n  {:l (- (apply min (map :x rects)) (:x bounding))\n   :t (- (apply min (map :y rects)) (:y bounding))\n   :r (- (+ (:x bounding) (:w bounding))\n         (apply max (map (fn [o] (+ (:x o) (:w o))) rects)))\n   :b (- (+ (:y bounding) (:h bounding))\n         (apply max (map (fn [o] (+ (:y o) (:h o))) rects)))})\n\n\n(def collision-sep 8)\n\n\n(defn adjust-sep\n  \"takes a sep, preserves the top but adjusts other seps to minimum.\"\n  ([sep & {:keys [cluster-sep BT?] :or {cluster-sep nil BT? false}}]\n   (if (not BT?)\n     (if cluster-sep\n       (assoc sep :l cluster-sep :r cluster-sep :b cluster-sep)\n       (let [min-lrb (min (:l sep) (:r sep) (:b sep))]\n         (assoc sep :l min-lrb :r min-lrb :b min-lrb)))\n     ;; Bottom Top layout. Need to constraint differently\n     (if cluster-sep\n       (assoc sep :l cluster-sep :r cluster-sep :t cluster-sep)\n       (let [min-lrt (min (:l sep) (:r sep) (:t sep))]\n         (assoc sep :l min-lrt :r min-lrt :t min-lrt))))))\n\n\n(defn parse-int [s]\n  #?(:clj (Integer/parseInt s)\n     :cljs (js/parseInt s)))\n\n\n(defn str->int [cs error-msg]\n  (if (integer? cs)\n    cs\n    (try\n      (parse-int cs)\n      #?(:clj (catch Exception e (throw (util/err error-msg)))\n         :cljs (catch js/Error e (throw (util/err error-msg)))))))\n\n\n(defn env\n  \"Constructs a nested map which parameters required for annealing\n   from a zipper, a graph and the key clustered on in the graph.\"\n  [z g opts node-label-fn]\n  (let [cluster-sep (when (-> opts :pp-cluster-sep)\n                      (str->int  (-> opts :pp-cluster-sep) \"cluster separation should be an integer\"))\n        BT? (= (-> opts :rankdir) \"BT\")\n        tasks (into {} (free-clusters-with-children g))\n        clstrs (tasks->clusters tasks)\n        rects (clusters->boxes z clstrs)\n        seps (reduce\n              (fn [a [k v]]\n                (let [s (apply sep (get rects k) (map #(get rects %) v))\n                      adj-s (if cluster-sep\n                              (adjust-sep s :cluster-sep cluster-sep :BT? BT?)\n                              (adjust-sep s :BT? BT?))]\n                  (assoc a k adj-s)))\n              {} tasks)\n        inner-rects (reduce (fn [a [k v]] (assoc a k (g/inner-rect v (get rects k)))) {} seps)\n        e (reduce\n           (fn [a [prnt chdn]]\n             (let [state {;; boundary is the inner-rect\n                          :boundary (get inner-rects prnt)\n                          ;; but object within the boundary are outers (true rects) not inners\n                          :objects (mapv #(get rects %) (get tasks prnt))}\n                   constr {:boundary true\n                           :grow true\n                           :collision (if cluster-sep\n                                        cluster-sep\n                                        collision-sep)\n                           :obstacles (mapv #(svg/node->rect z (node-label-fn %))\n                                            (clstr/cluster->nodes g prnt))}]\n               (-> a\n                   (assoc-in [prnt :constraints] constr)\n                   (assoc-in [prnt :state] state)\n                   (assoc-in [prnt :boundary-sep] (get seps prnt)))))\n           {}\n           tasks)]\n    e))\n\n\n\n(defn env->map\n  \"Flattens an environment back rectangles\"\n  [env]\n  (reduce\n   (fn [a [k v]]\n     (let [sep (:boundary-sep v)\n           bdry (-> v :state :boundary)\n           rect (if sep (g/outer-rect sep bdry) bdry)\n           others (reduce (fn [a' c'] (assoc a' (:name c') c')) {} (-> v :state :objects))]\n       (-> a\n           (assoc k rect)\n           (merge others))))\n   {}\n   env))\n\n\n(def max-move-factor 50)  ;; max move defined by size of primary annealing dimension / this\n\n\n\n(defn update-env\n  \"updates environment with new state, for each <cluster, new-st> pair\n  in new-st updating to the new rect and boundary.\"\n  [env k new-st]\n  (let [env1 (assoc-in env [k :state] new-st)\n        objects (reduce (fn [acc c] (assoc acc (:name c) c)) {} (:objects new-st))]\n    (reduce (fn [acc [k v]]\n              (if (some? (get acc k))\n                (let [sep (get-in acc [k :boundary-sep])]\n                  ;; Annealing is done outside in (for nested cluster hierarchies).\n                  ;; after each round of annealing we need to take objects from the previous\n                  ;; round and set them - adjusted to inner-rects - for the next round.\n                  (assoc-in acc [k :state :boundary] (g/inner-rect sep v)))\n                acc))\n            env1\n            objects)))\n\n\n(defn do-annealing\n  [z g opts label-fn]\n  (let [env (env z g opts label-fn)\n        ;b (println env)\n        ;b (reduce (fn [a [k v]] (println k (-> :state :boundary) (-> v :state :objects))) {} env)\n        rankdir (-> opts :rankdir)\n        y-retard (if (or (= \"TB\" rankdir) (= \"BT\" rankdir))\n                   (str->int (-> opts :pp-anneal-bias) \"anneal bias should be an integer\") nil)\n        x-retard (if (or (= \"LR\" rankdir) (= \"RL\" rankdir))\n                   (str->int (-> opts :pp-anneal-bias) \"anneal bias should be an integer\") nil)\n        dims (if (-> opts :pp-clusters)\n               (reduce-kv (fn [m k v] (if v (conj m k) m))\n                                        []\n                                        (-> opts :pp-clusters))\n               [:x :w :y :h])]\n    (reduce (fn [a [k v]]\n              ;(println \"loop \" k (get a k))\n              (let [cur (get a k)\n                    ;z (println cur)\n                    new-st (anneal/annealing (:state cur)\n                                      25000\n                                      0\n                                      (:constraints cur)\n                                      anneal/neighbor-fn\n                                      anneal/cost-fn\n                                      anneal/p-fn\n                                      anneal/temp-fn\n                                      :terminate-early? true\n                                      :dims dims\n                                      :x-retard x-retard\n                                      :y-retard y-retard\n                                      :max-move (let [bdry (-> cur :state :boundary)]\n                                                  (if (or (= \"TB\" rankdir) (= \"BT\" rankdir))\n                                                    (quot (:w bdry) max-move-factor)\n                                                    (quot (:h bdry) max-move-factor))))]\n                (update-env a k new-st)))\n            env\n            env)))\n\n\n(defn editor-rects [env clstr node]\n  (if-let [edited (get env clstr)]\n    (let [ps (svg/rect->svg edited)]\n      (assoc-in node [:attrs (first ps)] (second ps)))\n    node))\n\n\n(defn edit-cluster-rects [z env]\n  (svg/tree-edit z\n                 svg/all-clusters\n                 7\n                 (fn [n] (first (:content n)))\n                 5\n                 (partial editor-rects env)))\n\n\n;; Section on moving text around (cluster labels)\n\n(def x-label-spacer 10) ;; x dist insider bounding rect\n(def y-label-spacer 18) ;; y dist below bounding rect's top\n(def y-label-spacer-BT 10)\n\n\n(defn editor-label-posn [env g opts clstr node]\n  ;; repositions cluster label\n  (let [BT? (= \"BT\" (-> opts :rankdir))]\n    (if (not BT?)\n      (if-let [edited (get env clstr)]\n        (case (-> (clstr/merged-cluster-attr g clstr :style) :labeljust)\n\n          \"l\" (-> node\n                  (assoc-in [:attrs :x] (+ (:x edited) x-label-spacer))\n                  (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))\n                  (assoc-in [:attrs :text-anchor] \"start\"))\n\n          \"r\" (-> node\n                  (assoc-in [:attrs :x] (- (+ (:x edited) (:w edited)) x-label-spacer))\n                  (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))\n                  (assoc-in [:attrs :text-anchor] \"end\"))\n\n          (-> node\n              (assoc-in [:attrs :x] (+ (:x edited) (/ (:w edited) 2)))\n              (assoc-in [:attrs :y] (+ (:y edited) y-label-spacer))))\n        node)\n\n      ;; Bottom Top layout. position labels at bottom\n      (if-let [edited (get env clstr)]\n        (case (-> (clstr/merged-cluster-attr g clstr :style) :labeljust)\n\n          \"l\" (-> node\n                  (assoc-in [:attrs :x] (+ (:x edited) x-label-spacer))\n                  (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))\n                  (assoc-in [:attrs :text-anchor] \"start\"))\n\n          \"r\" (-> node\n                  (assoc-in [:attrs :x] (- (+ (:x edited) (:w edited)) x-label-spacer))\n                  (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))\n                  (assoc-in [:attrs :text-anchor] \"end\"))\n\n          (-> node\n              (assoc-in [:attrs :x] (+ (:x edited) (/ (:w edited) 2)))\n              (assoc-in [:attrs :y] (- (+ (:y edited) (:h edited)) y-label-spacer-BT))))\n        node))))\n\n\n(defn edit-cluster-labels [z g opts env]\n  (svg/tree-edit z\n                 svg/all-clusters\n                 7\n                 (fn [n] (first (:content n)))\n                 7\n                 (partial editor-label-posn env g opts)))\n\n\n(defn optimize-clusters\n  \"Anneals free clusters in z & g.\n   z is a zipper over the svg and g the underlying graph.\n   Returns svg.\"\n  [svg g label-fn opts]\n  (let [z (svg->zipper svg)\n        env-out (env->map (do-annealing z g opts label-fn))]\n    (-> (edit-cluster-rects z env-out)\n        svg/->zipper\n        (edit-cluster-labels g opts env-out)\n        svg/->xml)))\n"]}