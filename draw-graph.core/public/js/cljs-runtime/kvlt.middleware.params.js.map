{"version":3,"sources":["kvlt/middleware/params.cljc"],"mappings":"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","names":["kvlt.middleware.params/query-string+encoding","params","encoding","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","p__47048","vec__47049","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","cljs.core/sequential?","p1__47046#","p2__47047#","cljs.core.map.cljs$core$IFn$_invoke$arity$3","kvlt.middleware.util.url_encode.cljs$core$IFn$_invoke$arity$variadic","cljs.core/name","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","kvlt.middleware.params/query-string","p__47065","vec__47066","seq47055","G__47056","cljs.core/first","cljs.core/next","self__4717__auto__","content-type","kvlt.middleware.util/charset","kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic","kvlt.middleware.params/short-query","p__47078","map__47079","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","query","m","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","kvlt.middleware.params/query","p__47089","map__47090","cljs.core.get.cljs$core$IFn$_invoke$arity$3","query-params","req","G__47095","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.update.cljs$core$IFn$_invoke$arity$4","old","new","cljs.core/empty?","kvlt.middleware.params.query_string.cljs$core$IFn$_invoke$arity$variadic","kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$1","js/kvlt","js/kvlt.middleware","js/kvlt.middleware.params","js/kvlt.middleware.params.coerce-form-params","method-table__4613__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","fexpr__47098","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","kvlt.middleware.params/coerce-form-params","p__47107","map__47108","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","p__47117","map__47118","form-params","form-param-encoding","p__47128","map__47129","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","p__47133","map__47134","kvlt.platform.util/encode-json","kvlt.middleware.params/short-form","p__47138","map__47139","form","kvlt.middleware.params/form","p__47147","map__47148","request-method","and__4120__auto__","fexpr__47159"],"sourcesContent":["(ns kvlt.middleware.params\n  (:require [clojure.string :as str]\n            [kvlt.middleware.util :as util\n             #? (:clj :refer :cljs :refer-macros) [defmw]]\n            [kvlt.middleware.util :as util\n             :refer [->mw ->content-type url-encode charset]]\n            [kvlt.platform.util :refer [encode-json]]))\n\n(defn ^:no-doc query-string+encoding [params encoding]\n  (str/join\n   \"&\"\n   (mapcat\n    (fn [[k v]]\n      (if (sequential? v)\n        (map #(str (url-encode (name %1) encoding)\n                   \"=\"\n                   (url-encode (str %2) encoding))\n             (repeat k) v)\n        [(str (url-encode (name k) encoding)\n              \"=\"\n              (url-encode (str v) encoding))]))\n    params)))\n\n(defn ^:no-doc query-string [params & [content-type]]\n  (let [encoding (charset content-type)]\n    (query-string+encoding params encoding)))\n\n(defmw short-query\n  \"Rename request's `:query` key to `:query-params`\"\n  ^{:has :query :removing :query}\n  (fn [{:keys [query] :as m}]\n    (assoc m :query-params query)))\n\n(defmw query\n  \"Given a request having a `:query-params` map, append to the URL's\n  query (`:query-string`) its URL-encoded string representation. \"\n  (fn [{:keys [query-params content-type]\n        :or {content-type :x-www-form-urlencoded} :as req}]\n    (cond-> req\n      query-params\n      (-> (dissoc :query-params)\n          (update\n           :query-string\n           (fn [old new] (if-not (empty? old) (str old \"&\" new) new))\n           (query-string query-params (->content-type content-type)))))))\n\n(defmulti coerce-form-params\n  \"Turn a `:form-params` map into a string request body, dispatching\n  on the qualified content type, as a namespaced\n  keyword (e.g. `:application/edn`).\n\n  The baseline implementation (for\n  `:application/x-www-form-urlencoded`) looks at the request's\n  `:form-param-encoding` to determine the character set of the output\n  string, on platforms where this is supported.\"\n  (fn [{:keys [content-type]}]\n    (keyword (->content-type content-type))))\n\n(defmethod coerce-form-params :application/x-www-form-urlencoded\n  [{:keys [content-type form-params form-param-encoding]}]\n  (if form-param-encoding\n    (query-string+encoding form-params form-param-encoding)\n    (query-string form-params (->content-type content-type))))\n\n(defmethod coerce-form-params :application/edn [{:keys [form-params]}]\n  (pr-str form-params))\n\n(defmethod coerce-form-params :application/json [{:keys [form-params]}]\n  (encode-json form-params))\n\n(defmw short-form\n  \"Rename request's `:form` key to `:form-params`\"\n  ^{:has :form :removing :form}\n  (fn [{:keys [form] :as m}]\n    (assoc m :form-params form)))\n\n(defmw form\n  \"Given a request having a `:form-params` map and a method of `POST`,\n  `PUT` or `PATCH`, use [[coerce-form-params]] to generate a request\n  body.  If no content type is supplied, a default of\n  `application/x-www-form-urlencoded` is associated with the request,\n  and passed to [[coerce-form-params]].\n\n  Assumes placement after [[kvlt.middleware/method]]\"\n  (fn [{:keys [form-params content-type request-method]\n        :or {content-type :x-www-form-urlencoded}\n        :as req}]\n    (if (and form-params (#{:post :put :patch} request-method))\n      (let [content-type (->content-type content-type)\n            req          (assoc req :content-type content-type)]\n        (assoc req :body (coerce-form-params req)))\n      req)))\n"]}