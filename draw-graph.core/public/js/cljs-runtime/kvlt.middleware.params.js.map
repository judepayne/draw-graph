{"version":3,"sources":["kvlt/middleware/params.cljc"],"mappings":"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","names":["kvlt.middleware.params/query-string+encoding","params","encoding","clojure.string.join","cljs.core.mapcat","p__35756","vec__35757","cljs.core.nth","k","v","cljs.core/sequential?","p1__35754#","p2__35755#","cljs.core.map","kvlt.middleware.util.url_encode","cljs.core/name","cljs.core.repeat","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","kvlt.middleware.params/query-string","p__35790","vec__35791","seq35764","G__35765","cljs.core/first","cljs.core/next","self__4776__auto__","content-type","kvlt.middleware.util/charset","kvlt.middleware.util.__GT_mw","kvlt.middleware.params/short-query","p__35799","map__35800","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","query","m","cljs.core.assoc","kvlt.middleware.params/query","p__35811","map__35814","query-params","req","G__35816","cljs.core.dissoc","cljs.core.update","old","new","cljs.core/empty?","kvlt.middleware.params.query_string","kvlt.middleware.util.__GT_content_type","js/kvlt","js/kvlt.middleware","js/kvlt.middleware.params","js/kvlt.middleware.params.coerce-form-params","method-table__4672__auto__","cljs.core.atom","prefer-table__4673__auto__","method-cache__4674__auto__","cached-hierarchy__4675__auto__","hierarchy__4676__auto__","fexpr__35826","cljs.core/MultiFn","cljs.core.symbol","kvlt.middleware.params/coerce-form-params","p__35827","map__35830","cljs.core.keyword","p__35834","map__35835","form-params","form-param-encoding","p__35837","map__35838","cljs.core.pr_str","p__35844","map__35845","kvlt.platform.util/encode-json","kvlt.middleware.params/short-form","p__35851","map__35852","form","kvlt.middleware.params/form","p__35857","map__35858","request-method","and__4174__auto__","fexpr__35870"],"sourcesContent":["(ns kvlt.middleware.params\n  (:require [clojure.string :as str]\n            [kvlt.middleware.util :as util\n             #? (:clj :refer :cljs :refer-macros) [defmw]]\n            [kvlt.middleware.util :as util\n             :refer [->mw ->content-type url-encode charset]]\n            [kvlt.platform.util :refer [encode-json]]))\n\n(defn ^:no-doc query-string+encoding [params encoding]\n  (str/join\n   \"&\"\n   (mapcat\n    (fn [[k v]]\n      (if (sequential? v)\n        (map #(str (url-encode (name %1) encoding)\n                   \"=\"\n                   (url-encode (str %2) encoding))\n             (repeat k) v)\n        [(str (url-encode (name k) encoding)\n              \"=\"\n              (url-encode (str v) encoding))]))\n    params)))\n\n(defn ^:no-doc query-string [params & [content-type]]\n  (let [encoding (charset content-type)]\n    (query-string+encoding params encoding)))\n\n(defmw short-query\n  \"Rename request's `:query` key to `:query-params`\"\n  ^{:has :query :removing :query}\n  (fn [{:keys [query] :as m}]\n    (assoc m :query-params query)))\n\n(defmw query\n  \"Given a request having a `:query-params` map, append to the URL's\n  query (`:query-string`) its URL-encoded string representation. \"\n  (fn [{:keys [query-params content-type]\n        :or {content-type :x-www-form-urlencoded} :as req}]\n    (cond-> req\n      query-params\n      (-> (dissoc :query-params)\n          (update\n           :query-string\n           (fn [old new] (if-not (empty? old) (str old \"&\" new) new))\n           (query-string query-params (->content-type content-type)))))))\n\n(defmulti coerce-form-params\n  \"Turn a `:form-params` map into a string request body, dispatching\n  on the qualified content type, as a namespaced\n  keyword (e.g. `:application/edn`).\n\n  The baseline implementation (for\n  `:application/x-www-form-urlencoded`) looks at the request's\n  `:form-param-encoding` to determine the character set of the output\n  string, on platforms where this is supported.\"\n  (fn [{:keys [content-type]}]\n    (keyword (->content-type content-type))))\n\n(defmethod coerce-form-params :application/x-www-form-urlencoded\n  [{:keys [content-type form-params form-param-encoding]}]\n  (if form-param-encoding\n    (query-string+encoding form-params form-param-encoding)\n    (query-string form-params (->content-type content-type))))\n\n(defmethod coerce-form-params :application/edn [{:keys [form-params]}]\n  (pr-str form-params))\n\n(defmethod coerce-form-params :application/json [{:keys [form-params]}]\n  (encode-json form-params))\n\n(defmw short-form\n  \"Rename request's `:form` key to `:form-params`\"\n  ^{:has :form :removing :form}\n  (fn [{:keys [form] :as m}]\n    (assoc m :form-params form)))\n\n(defmw form\n  \"Given a request having a `:form-params` map and a method of `POST`,\n  `PUT` or `PATCH`, use [[coerce-form-params]] to generate a request\n  body.  If no content type is supplied, a default of\n  `application/x-www-form-urlencoded` is associated with the request,\n  and passed to [[coerce-form-params]].\n\n  Assumes placement after [[kvlt.middleware/method]]\"\n  (fn [{:keys [form-params content-type request-method]\n        :or {content-type :x-www-form-urlencoded}\n        :as req}]\n    (if (and form-params (#{:post :put :patch} request-method))\n      (let [content-type (->content-type content-type)\n            req          (assoc req :content-type content-type)]\n        (assoc req :body (coerce-form-params req)))\n      req)))\n"]}