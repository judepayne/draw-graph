{
"version":3,
"file":"goog.math.long.js",
"lineCount":575,
"mappings":"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",
"sources":["goog/math/long.js"],
"sourcesContent":["// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"long\". This\n * implementation is derived from LongLib in GWT.\n *\n */\n\ngoog.provide('goog.math.Long');\n\ngoog.require('goog.asserts');\ngoog.require('goog.reflect');\n\n\n\n/**\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * JavaScript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within JavaScript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @param {number} low  The low (signed) 32 bits of the long.\n * @param {number} high  The high (signed) 32 bits of the long.\n * @struct\n * @constructor\n * @final\n */\ngoog.math.Long = function(low, high) {\n  /**\n   * @const {number}\n   * @private\n   */\n  this.low_ = low | 0;  // force into 32 signed bits.\n\n  /**\n   * @const {number}\n   * @private\n   */\n  this.high_ = high | 0;  // force into 32 signed bits.\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object<number, !goog.math.Long>}\n * @private\n */\ngoog.math.Long.IntCache_ = {};\n\n\n/**\n * Returns a cached long number representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!goog.math.Long} The corresponding Long value.\n * @private\n */\ngoog.math.Long.getCachedIntValue_ = function(value) {\n  return goog.reflect.cache(goog.math.Long.IntCache_, value, function(val) {\n    return new goog.math.Long(val, val < 0 ? -1 : 0);\n  });\n};\n\n/**\n * The array of maximum values of a Long in string representation for a given\n * radix between 2 and 36, inclusive.\n * @private @const {!Array<string>}\n */\ngoog.math.Long.MAX_VALUE_FOR_RADIX_ = [\n  '', '',  // unused\n  '111111111111111111111111111111111111111111111111111111111111111',\n  // base 2\n  '2021110011022210012102010021220101220221',  // base 3\n  '13333333333333333333333333333333',          // base 4\n  '1104332401304422434310311212',              // base 5\n  '1540241003031030222122211',                 // base 6\n  '22341010611245052052300',                   // base 7\n  '777777777777777777777',                     // base 8\n  '67404283172107811827',                      // base 9\n  '9223372036854775807',                       // base 10\n  '1728002635214590697',                       // base 11\n  '41a792678515120367',                        // base 12\n  '10b269549075433c37',                        // base 13\n  '4340724c6c71dc7a7',                         // base 14\n  '160e2ad3246366807',                         // base 15\n  '7fffffffffffffff',                          // base 16\n  '33d3d8307b214008',                          // base 17\n  '16agh595df825fa7',                          // base 18\n  'ba643dci0ffeehh',                           // base 19\n  '5cbfjia3fh26ja7',                           // base 20\n  '2heiciiie82dh97',                           // base 21\n  '1adaibb21dckfa7',                           // base 22\n  'i6k448cf4192c2',                            // base 23\n  'acd772jnc9l0l7',                            // base 24\n  '64ie1focnn5g77',                            // base 25\n  '3igoecjbmca687',                            // base 26\n  '27c48l5b37oaop',                            // base 27\n  '1bk39f3ah3dmq7',                            // base 28\n  'q1se8f0m04isb',                             // base 29\n  'hajppbc1fc207',                             // base 30\n  'bm03i95hia437',                             // base 31\n  '7vvvvvvvvvvvv',                             // base 32\n  '5hg4ck9jd4u37',                             // base 33\n  '3tdtk1v8j6tpp',                             // base 34\n  '2pijmikexrxp7',                             // base 35\n  '1y2p0ij32e8e7'                              // base 36\n];\n\n\n/**\n * The array of minimum values of a Long in string representation for a given\n * radix between 2 and 36, inclusive.\n * @private @const {!Array<string>}\n */\ngoog.math.Long.MIN_VALUE_FOR_RADIX_ = [\n  '', '',  // unused\n  '-1000000000000000000000000000000000000000000000000000000000000000',\n  // base 2\n  '-2021110011022210012102010021220101220222',  // base 3\n  '-20000000000000000000000000000000',          // base 4\n  '-1104332401304422434310311213',              // base 5\n  '-1540241003031030222122212',                 // base 6\n  '-22341010611245052052301',                   // base 7\n  '-1000000000000000000000',                    // base 8\n  '-67404283172107811828',                      // base 9\n  '-9223372036854775808',                       // base 10\n  '-1728002635214590698',                       // base 11\n  '-41a792678515120368',                        // base 12\n  '-10b269549075433c38',                        // base 13\n  '-4340724c6c71dc7a8',                         // base 14\n  '-160e2ad3246366808',                         // base 15\n  '-8000000000000000',                          // base 16\n  '-33d3d8307b214009',                          // base 17\n  '-16agh595df825fa8',                          // base 18\n  '-ba643dci0ffeehi',                           // base 19\n  '-5cbfjia3fh26ja8',                           // base 20\n  '-2heiciiie82dh98',                           // base 21\n  '-1adaibb21dckfa8',                           // base 22\n  '-i6k448cf4192c3',                            // base 23\n  '-acd772jnc9l0l8',                            // base 24\n  '-64ie1focnn5g78',                            // base 25\n  '-3igoecjbmca688',                            // base 26\n  '-27c48l5b37oaoq',                            // base 27\n  '-1bk39f3ah3dmq8',                            // base 28\n  '-q1se8f0m04isc',                             // base 29\n  '-hajppbc1fc208',                             // base 30\n  '-bm03i95hia438',                             // base 31\n  '-8000000000000',                             // base 32\n  '-5hg4ck9jd4u38',                             // base 33\n  '-3tdtk1v8j6tpq',                             // base 34\n  '-2pijmikexrxp8',                             // base 35\n  '-1y2p0ij32e8e8'                              // base 36\n];\n\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromInt = function(value) {\n  var intValue = value | 0;\n  goog.asserts.assert(value === intValue, 'value should be a 32-bit integer');\n\n  if (-128 <= intValue && intValue < 128) {\n    return goog.math.Long.getCachedIntValue_(intValue);\n  } else {\n    return new goog.math.Long(intValue, intValue < 0 ? -1 : 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the given value.\n * NaN will be returned as zero. Infinity is converted to max value and\n * -Infinity to min value.\n * @param {number} value The number in question.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromNumber = function(value) {\n  if (value > 0) {\n    if (value >= goog.math.Long.TWO_PWR_63_DBL_) {\n      return goog.math.Long.getMaxValue();\n    }\n    return new goog.math.Long(value, value / goog.math.Long.TWO_PWR_32_DBL_);\n  } else if (value < 0) {\n    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {\n      return goog.math.Long.getMinValue();\n    }\n    return new goog.math.Long(-value, -value / goog.math.Long.TWO_PWR_32_DBL_)\n        .negate();\n  } else {\n    // NaN or 0.\n    return goog.math.Long.getZero();\n  }\n};\n\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating\n * the given high and low bits.  Each is assumed to use 32 bits.\n * @param {number} lowBits The low 32-bits.\n * @param {number} highBits The high 32-bits.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromBits = function(lowBits, highBits) {\n  return new goog.math.Long(lowBits, highBits);\n};\n\n\n/**\n * TODO(goktug): Replace with Number.MAX_SAFE_INTEGER when polyfil is guaranteed\n * to be removed.\n * @type {number}\n * @private\n */\ngoog.math.Long.MAX_SAFE_INTEGER_ = 0x1fffffffffffff;\n\n\n/**\n * Returns a Long representation of the given string, written using the given\n * radix.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!goog.math.Long} The corresponding Long value.\n */\ngoog.math.Long.fromString = function(str, opt_radix) {\n  if (str.charAt(0) == '-') {\n    return goog.math.Long.fromString(str.substring(1), opt_radix).negate();\n  }\n\n  // We can avoid very expensive multiply based code path for some common cases.\n  var numberValue = parseInt(str, opt_radix || 10);\n  if (numberValue <= goog.math.Long.MAX_SAFE_INTEGER_) {\n    return new goog.math.Long(\n        (numberValue % goog.math.Long.TWO_PWR_32_DBL_) | 0,\n        (numberValue / goog.math.Long.TWO_PWR_32_DBL_) | 0);\n  }\n\n  if (str.length == 0) {\n    throw new Error('number format error: empty string');\n  }\n  if (str.indexOf('-') >= 0) {\n    throw new Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw new Error('radix out of range: ' + radix);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated multiply.\n  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));\n\n  var result = goog.math.Long.getZero();\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = goog.math.Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(goog.math.Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(goog.math.Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n/**\n * Returns the boolean value of whether the input string is within a Long's\n * range. Assumes an input string containing only numeric characters with an\n * optional preceding '-'.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {boolean} Whether the string is within the range of a Long.\n */\ngoog.math.Long.isStringInRange = function(str, opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw new Error('radix out of range: ' + radix);\n  }\n\n  var extremeValue = (str.charAt(0) == '-') ?\n      goog.math.Long.MIN_VALUE_FOR_RADIX_[radix] :\n      goog.math.Long.MAX_VALUE_FOR_RADIX_[radix];\n\n  if (str.length < extremeValue.length) {\n    return true;\n  } else if (str.length == extremeValue.length && str <= extremeValue) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function above.\n * @const {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_32_DBL_ = 0x100000000;\n\n\n/**\n * @const {number}\n * @private\n */\ngoog.math.Long.TWO_PWR_63_DBL_ = 0x8000000000000000;\n\n\n/**\n * @private @const {!goog.math.Long}\n */\ngoog.math.Long.ZERO_ = goog.math.Long.fromBits(0, 0);\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getZero = function() {\n  return goog.math.Long.ZERO_;\n};\n\n\n/**\n * @private @const {!goog.math.Long}\n */\ngoog.math.Long.ONE_ = goog.math.Long.fromBits(1, 0);\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getOne = function() {\n  return goog.math.Long.ONE_;\n};\n\n\n/**\n * @private @const {!goog.math.Long}\n */\ngoog.math.Long.NEG_ONE_ = goog.math.Long.fromBits(-1, -1);\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getNegOne = function() {\n  return goog.math.Long.NEG_ONE_;\n};\n\n\n/**\n * @private @const {!goog.math.Long}\n */\ngoog.math.Long.MAX_VALUE_ = goog.math.Long.fromBits(0xFFFFFFFF, 0x7FFFFFFF);\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getMaxValue = function() {\n  return goog.math.Long.MAX_VALUE_;\n};\n\n\n/**\n * @private @const {!goog.math.Long}\n */\ngoog.math.Long.MIN_VALUE_ = goog.math.Long.fromBits(0, 0x80000000);\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getMinValue = function() {\n  return goog.math.Long.MIN_VALUE_;\n};\n\n\n/**\n * @private @const {!goog.math.Long}\n */\ngoog.math.Long.TWO_PWR_24_ = goog.math.Long.fromBits(1 << 24, 0);\n\n/**\n * @return {!goog.math.Long}\n * @public\n */\ngoog.math.Long.getTwoPwr24 = function() {\n  return goog.math.Long.TWO_PWR_24_;\n};\n\n\n/** @return {number} The value, assuming it is a 32-bit integer. */\ngoog.math.Long.prototype.toInt = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\ngoog.math.Long.prototype.toNumber = function() {\n  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +\n      this.getLowBitsUnsigned();\n};\n\n\n/**\n * @return {boolean} if can be exactly represented using number (i.e. abs(value)\n *     < 2^53).\n */\ngoog.math.Long.prototype.isSafeInteger = function() {\n  var top11Bits = this.high_ >> 21;\n  // If top11Bits are all 0s, then the number is between [0, 2^53-1]\n  return top11Bits == 0\n      // If top11Bits are all 1s, then the number is between [-1, -2^53]\n      || (top11Bits == -1\n          // and exclude -2^53\n          && !(this.low_ == 0 && this.high_ == (0xffe00000 | 0)));\n};\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\ngoog.math.Long.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw new Error('radix out of range: ' + radix);\n  }\n\n  // We can avoid very expensive division based code path for some common cases.\n  if (this.isSafeInteger()) {\n    var asNumber = this.toNumber();\n    // Shortcutting for radix 10 (common case) to avoid boxing via toString:\n    // https://jsperf.com/tostring-vs-vs-if\n    return radix == 10 ? ('' + asNumber) : asNumber.toString(radix);\n  }\n\n  // We need to split 64bit integer into: `a * radix**safeDigits + b` where\n  // neither `a` nor `b` exceeds 53 bits, meaning that safeDigits can be any\n  // number in a range: [(63 - 53) / log2(radix); 53 / log2(radix)].\n\n  // Other options that need to be benchmarked:\n  //   11..16 - (radix >> 2);\n  //   10..13 - (radix >> 3);\n  //   10..11 - (radix >> 4);\n  var safeDigits = 14 - (radix >> 2);\n\n  var radixPowSafeDigits = Math.pow(radix, safeDigits);\n  var radixToPower = goog.math.Long.fromBits(\n      radixPowSafeDigits, radixPowSafeDigits / goog.math.Long.TWO_PWR_32_DBL_);\n\n  var remDiv = this.div(radixToPower);\n  var val = Math.abs(this.subtract(remDiv.multiply(radixToPower)).toNumber());\n  var digits = radix == 10 ? ('' + val) : val.toString(radix);\n\n  if (digits.length < safeDigits) {\n    // Up to 13 leading 0s we might need to insert as the greatest safeDigits\n    // value is 14 (for radix 2).\n    digits = '0000000000000'.substr(digits.length - safeDigits) + digits;\n  }\n\n  val = remDiv.toNumber();\n  return (radix == 10 ? val : val.toString(radix)) + digits;\n};\n\n/** @return {number} The high 32-bits as a signed value. */\ngoog.math.Long.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n\n/** @return {number} The low 32-bits as a signed value. */\ngoog.math.Long.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The low 32-bits as an unsigned value. */\ngoog.math.Long.prototype.getLowBitsUnsigned = function() {\n  // The right shifting fixes negative values in the case when\n  // intval >= 2^31; for more details see\n  // https://github.com/google/closure-library/pull/498\n  return this.low_ >>> 0;\n};\n\n\n/**\n * @return {number} Returns the number of bits needed to represent the absolute\n *     value of this Long.\n */\ngoog.math.Long.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.getMinValue())) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n\n\n/** @return {boolean} Whether this value is zero. */\ngoog.math.Long.prototype.isZero = function() {\n  // Check low part first as there is high chance it's not 0.\n  return this.low_ == 0 && this.high_ == 0;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\ngoog.math.Long.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\ngoog.math.Long.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long equals the other.\n */\ngoog.math.Long.prototype.equals = function(other) {\n  // Compare low parts first as there is higher chance they are different.\n  return (this.low_ == other.low_) && (this.high_ == other.high_);\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long does not equal the other.\n */\ngoog.math.Long.prototype.notEquals = function(other) {\n  return !this.equals(other);\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than the other.\n */\ngoog.math.Long.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than or equal to the other.\n */\ngoog.math.Long.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than the other.\n */\ngoog.math.Long.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {goog.math.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than or equal to the other.\n */\ngoog.math.Long.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * Compares this Long with the given one.\n * @param {goog.math.Long} other Long to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\ngoog.math.Long.prototype.compare = function(other) {\n  if (this.high_ == other.high_) {\n    if (this.low_ == other.low_) {\n      return 0;\n    }\n    return this.getLowBitsUnsigned() > other.getLowBitsUnsigned() ? 1 : -1;\n  }\n  return this.high_ > other.high_ ? 1 : -1;\n};\n\n\n/** @return {!goog.math.Long} The negation of this value. */\ngoog.math.Long.prototype.negate = function() {\n  var negLow = (~this.low_ + 1) | 0;\n  var overflowFromLow = !negLow;\n  var negHigh = (~this.high_ + overflowFromLow) | 0;\n  return goog.math.Long.fromBits(negLow, negHigh);\n};\n\n\n/**\n * Returns the sum of this and the given Long.\n * @param {goog.math.Long} other Long to add to this one.\n * @return {!goog.math.Long} The sum of this and the given Long.\n */\ngoog.math.Long.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns the difference of this and the given Long.\n * @param {goog.math.Long} other Long to subtract from this.\n * @return {!goog.math.Long} The difference of this and the given Long.\n */\ngoog.math.Long.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given long.\n * @param {goog.math.Long} other Long to multiply with this.\n * @return {!goog.math.Long} The product of this and the other.\n */\ngoog.math.Long.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return this;\n  }\n  if (other.isZero()) {\n    return other;\n  }\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns this Long divided by the given one.\n * @param {goog.math.Long} other Long by which to divide.\n * @return {!goog.math.Long} This Long divided by the given one.\n */\ngoog.math.Long.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw new Error('division by zero');\n  }\n  if (this.isNegative()) {\n    if (this.equals(goog.math.Long.getMinValue())) {\n      if (other.equals(goog.math.Long.getOne()) ||\n          other.equals(goog.math.Long.getNegOne())) {\n        return goog.math.Long.getMinValue();  // recall -MIN_VALUE == MIN_VALUE\n      }\n      if (other.equals(goog.math.Long.getMinValue())) {\n        return goog.math.Long.getOne();\n      }\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(goog.math.Long.getZero())) {\n        return other.isNegative() ? goog.math.Long.getOne() :\n                                    goog.math.Long.getNegOne();\n      }\n      var rem = this.subtract(other.multiply(approx));\n      var result = approx.add(rem.div(other));\n      return result;\n    }\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    }\n    return this.negate().div(other).negate();\n  }\n  if (this.isZero()) {\n    return goog.math.Long.getZero();\n  }\n  if (other.isNegative()) {\n    if (other.equals(goog.math.Long.getMinValue())) {\n      return goog.math.Long.getZero();\n    }\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = goog.math.Long.getZero();\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = goog.math.Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = goog.math.Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = goog.math.Long.getOne();\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Long modulo the given one.\n * @param {goog.math.Long} other Long by which to mod.\n * @return {!goog.math.Long} This Long modulo the given one.\n */\ngoog.math.Long.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n\n/** @return {!goog.math.Long} The bitwise-NOT of this value. */\ngoog.math.Long.prototype.not = function() {\n  return goog.math.Long.fromBits(~this.low_, ~this.high_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to AND.\n * @return {!goog.math.Long} The bitwise-AND of this and the other.\n */\ngoog.math.Long.prototype.and = function(other) {\n  return goog.math.Long.fromBits(\n      this.low_ & other.low_, this.high_ & other.high_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to OR.\n * @return {!goog.math.Long} The bitwise-OR of this and the other.\n */\ngoog.math.Long.prototype.or = function(other) {\n  return goog.math.Long.fromBits(\n      this.low_ | other.low_, this.high_ | other.high_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n * @param {goog.math.Long} other The Long with which to XOR.\n * @return {!goog.math.Long} The bitwise-XOR of this and the other.\n */\ngoog.math.Long.prototype.xor = function(other) {\n  return goog.math.Long.fromBits(\n      this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the left by the given amount.\n */\ngoog.math.Long.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return goog.math.Long.fromBits(\n          low << numBits, (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return goog.math.Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n * The new leading bits match the current sign bit.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the right by the given amount.\n */\ngoog.math.Long.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return goog.math.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)), high >> numBits);\n    } else {\n      return goog.math.Long.fromBits(\n          high >> (numBits - 32), high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with\n * zeros placed into the new leading bits.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!goog.math.Long} This shifted to the right by the given amount, with\n *     zeros placed into the new leading bits.\n */\ngoog.math.Long.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return goog.math.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)), high >>> numBits);\n    } else if (numBits == 32) {\n      return goog.math.Long.fromBits(high, 0);\n    } else {\n      return goog.math.Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n"],
"names":["goog","provide","require","math","Long","goog.math.Long","low","high","low_","high_","IntCache_","getCachedIntValue_","goog.math.Long.getCachedIntValue_","value","reflect","cache","val","MAX_VALUE_FOR_RADIX_","MIN_VALUE_FOR_RADIX_","fromInt","goog.math.Long.fromInt","intValue","asserts","assert","fromNumber","goog.math.Long.fromNumber","TWO_PWR_63_DBL_","getMaxValue","TWO_PWR_32_DBL_","getMinValue","negate","getZero","fromBits","goog.math.Long.fromBits","lowBits","highBits","MAX_SAFE_INTEGER_","fromString","goog.math.Long.fromString","str","opt_radix","charAt","substring","numberValue","parseInt","length","Error","indexOf","radix","radixToPower","Math","pow","result","i","size","min","power","multiply","add","isStringInRange","goog.math.Long.isStringInRange","extremeValue","ZERO_","goog.math.Long.getZero","ONE_","getOne","goog.math.Long.getOne","NEG_ONE_","getNegOne","goog.math.Long.getNegOne","MAX_VALUE_","goog.math.Long.getMaxValue","MIN_VALUE_","goog.math.Long.getMinValue","TWO_PWR_24_","getTwoPwr24","goog.math.Long.getTwoPwr24","prototype","toInt","goog.math.Long.prototype.toInt","toNumber","goog.math.Long.prototype.toNumber","getLowBitsUnsigned","isSafeInteger","goog.math.Long.prototype.isSafeInteger","top11Bits","toString","goog.math.Long.prototype.toString","asNumber","safeDigits","radixPowSafeDigits","remDiv","div","abs","subtract","digits","substr","getHighBits","goog.math.Long.prototype.getHighBits","getLowBits","goog.math.Long.prototype.getLowBits","goog.math.Long.prototype.getLowBitsUnsigned","getNumBitsAbs","goog.math.Long.prototype.getNumBitsAbs","isNegative","equals","bit","isZero","goog.math.Long.prototype.isZero","goog.math.Long.prototype.isNegative","isOdd","goog.math.Long.prototype.isOdd","goog.math.Long.prototype.equals","other","notEquals","goog.math.Long.prototype.notEquals","lessThan","goog.math.Long.prototype.lessThan","compare","lessThanOrEqual","goog.math.Long.prototype.lessThanOrEqual","greaterThan","goog.math.Long.prototype.greaterThan","greaterThanOrEqual","goog.math.Long.prototype.greaterThanOrEqual","goog.math.Long.prototype.compare","goog.math.Long.prototype.negate","negLow","overflowFromLow","negHigh","goog.math.Long.prototype.add","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","goog.math.Long.prototype.subtract","goog.math.Long.prototype.multiply","goog.math.Long.prototype.div","halfThis","shiftRight","approx","shiftLeft","rem","res","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","goog.math.Long.prototype.modulo","not","goog.math.Long.prototype.not","and","goog.math.Long.prototype.and","or","goog.math.Long.prototype.or","xor","goog.math.Long.prototype.xor","goog.math.Long.prototype.shiftLeft","numBits","goog.math.Long.prototype.shiftRight","shiftRightUnsigned","goog.math.Long.prototype.shiftRightUnsigned"]
}
