{"version":3,"sources":["kvlt/platform/xhr.cljs"],"mappings":"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","names":["p__30227","map__30228","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","kvlt.platform.xhr/tidy-http-error","error-code","error-text","status","m","cljs.core.dissoc","cljs.core.assoc","p__30234","map__30236","kvlt.platform.xhr/req->url","scheme","server-name","server-port","uri","query-string","G__30246","js/goog.Uri","cljs.core/name","or__4185__auto__","p__30248","map__30254","kvlt.platform.xhr/req->xhr","credentials?","timeout","as","request","xhr","G__30257","js/goog.net.XhrIo","cljs.core._EQ_","kvlt.platform.xhr/code->error","kvlt.platform.xhr/headers->map","headers","p1__30263#","p2__30262#","cljs.core.reduce","vec__30264","cljs.core.nth","k","v","clojure.string.split","clojure.string/blank?","clojure.string/lower-case","kvlt.platform.xhr/response->map","resp","req","map__30267","G__30268","G__30274","cljs.core.vary_meta","cljs.core/assoc","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","kvlt.util/pprint-str","kvlt.platform.xhr/filter-headers","cljs.core.into","iter__4582__auto__","s__30285","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__30288","cljs.core/chunk-buffer","i__30287","vec__30293","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30284","cljs.core/chunk-rest","vec__30302","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/not","fexpr__30301","fexpr__30305","p__30307","map__30308","kvlt.platform.xhr/request!","request-method","body","url","method","cljs.core/clj->js","promesa.core/promise","resolve","reject","p1__30306#","goog.net.EventType/COMPLETE","G__30312","cljs.core/chunk-first"],"sourcesContent":["(ns ^:no-doc kvlt.platform.xhr\n  (:require [cljs.core.async :as async]\n            [taoensso.timbre :as log]\n            [clojure.string :as str]\n            [kvlt.util :as util]\n            [promesa.core :as p])\n  (:import [goog.Uri]\n           [goog.net XmlHttp XmlHttpFactory EventType ErrorCode XhrIo]))\n\n(defn- tidy-http-error [{:keys [error-code error-text status] :as m}]\n  (-> m\n      (dissoc :error-text :error-code)\n      (assoc\n        :type    error-code\n        :error   error-code\n        :message error-text)))\n\n(defn req->url [{:keys [scheme server-name server-port uri query-string]}]\n  (str (doto (goog.Uri.)\n         (.setScheme (name (or scheme :http)))\n         (.setDomain server-name)\n         (.setPort server-port)\n         (.setPath uri)\n         (.setQuery query-string true))))\n\n(defn req->xhr\n  [{:keys [kvlt.platform/credentials? timeout as]\n    :or {timeout 0} :as request}]\n  (let [xhr (doto (XhrIo.)\n              (.setTimeoutInterval timeout)\n              (.setWithCredentials credentials?))]\n    (when (= as :byte-array)\n      (.setResponseType xhr (.. XhrIo -ResponseType -ARRAY_BUFFER)))\n    xhr))\n\n(def code->error\n  {0 :no-error\n   1 :access-denied\n   2 :file-not-found\n   3 :ff-silent-error\n   4 :custom-error\n   5 :exception\n   6 :http-error\n   7 :abort\n   8 :timeout\n   9 :offline})\n\n(defn headers->map [headers]\n  (reduce\n   #(let [[k v] (str/split %2 #\":\\s+\")]\n      (if (or (str/blank? k) (str/blank? v))\n        %1 (assoc %1 (str/lower-case k) v)))\n   {} (str/split (or headers \"\") #\"(\\n)|(\\r)|(\\r\\n)|(\\n\\r)\")))\n\n(defn response->map [resp req]\n  (let [{:keys [status] :as m}\n        {:status     (.getStatus resp)\n         :success    (.isSuccess resp)\n         :body       (.getResponse resp)\n         :headers    (headers->map (.getAllResponseHeaders resp))\n         :error-code (code->error (.getLastErrorCode resp))\n         :error-text (.getLastError resp)}\n        m (-> m\n              (cond-> (= status 0) tidy-http-error)\n              (vary-meta assoc :kvlt/request req))]\n    (log/debug \"Received response\\n\" (util/pprint-str m))\n    m))\n\n(defn filter-headers [m]\n  (into {}\n    (for [[k v] m\n          :when (not (#{:accept-encoding \"accept-encoding\"} k))]\n      [k v])))\n\n(defn request! [{:keys [request-method headers body credentials?] :as req}]\n  (let [url     (req->url req)\n        method  (name (or request-method :get))\n        headers (clj->js (filter-headers headers))\n        xhr     (req->xhr req)]\n    (p/promise\n     (fn [resolve reject]\n       (.listen xhr EventType.COMPLETE\n                #(resolve (response->map (.. % -target) req)))\n       (.send xhr url method body headers)))))\n"]}