{"version":3,"sources":["kvlt/platform/xhr.cljs"],"mappings":"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","names":["p__46887","map__46889","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","kvlt.platform.xhr/tidy-http-error","error-code","error-text","status","m","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__46897","map__46899","kvlt.platform.xhr/req->url","scheme","server-name","server-port","uri","query-string","G__46925","js/goog.Uri","cljs.core/name","or__4131__auto__","p__46932","map__46934","cljs.core.get.cljs$core$IFn$_invoke$arity$3","kvlt.platform.xhr/req->xhr","credentials?","timeout","as","request","xhr","G__46939","js/goog.net.XhrIo","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","kvlt.platform.xhr/code->error","kvlt.platform.xhr/headers->map","headers","p1__46949#","p2__46948#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","vec__46953","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","clojure.string.split.cljs$core$IFn$_invoke$arity$2","clojure.string/blank?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","clojure.string/lower-case","kvlt.platform.xhr/response->map","resp","req","map__46962","G__46967","G__46973","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","kvlt.util/pprint-str","kvlt.platform.xhr/filter-headers","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__46976","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__46978","cljs.core/chunk-buffer","i__46977","vec__46987","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46975","cljs.core/chunk-rest","vec__46991","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/not","fexpr__46990","fexpr__46994","p__47003","map__47005","kvlt.platform.xhr/request!","request-method","body","url","method","cljs.core/clj->js","promesa.core/promise","resolve","reject","p1__46997#","goog.net.EventType/COMPLETE","G__47011","cljs.core/chunk-first"],"sourcesContent":["(ns ^:no-doc kvlt.platform.xhr\n  (:require [cljs.core.async :as async]\n            [taoensso.timbre :as log]\n            [clojure.string :as str]\n            [kvlt.util :as util]\n            [promesa.core :as p])\n  (:import [goog.Uri]\n           [goog.net XmlHttp XmlHttpFactory EventType ErrorCode XhrIo]))\n\n(defn- tidy-http-error [{:keys [error-code error-text status] :as m}]\n  (-> m\n      (dissoc :error-text :error-code)\n      (assoc\n        :type    error-code\n        :error   error-code\n        :message error-text)))\n\n(defn req->url [{:keys [scheme server-name server-port uri query-string]}]\n  (str (doto (goog.Uri.)\n         (.setScheme (name (or scheme :http)))\n         (.setDomain server-name)\n         (.setPort server-port)\n         (.setPath uri)\n         (.setQuery query-string true))))\n\n(defn req->xhr\n  [{:keys [kvlt.platform/credentials? timeout as]\n    :or {timeout 0} :as request}]\n  (let [xhr (doto (XhrIo.)\n              (.setTimeoutInterval timeout)\n              (.setWithCredentials credentials?))]\n    (when (= as :byte-array)\n      (.setResponseType xhr (.. XhrIo -ResponseType -ARRAY_BUFFER)))\n    xhr))\n\n(def code->error\n  {0 :no-error\n   1 :access-denied\n   2 :file-not-found\n   3 :ff-silent-error\n   4 :custom-error\n   5 :exception\n   6 :http-error\n   7 :abort\n   8 :timeout\n   9 :offline})\n\n(defn headers->map [headers]\n  (reduce\n   #(let [[k v] (str/split %2 #\":\\s+\")]\n      (if (or (str/blank? k) (str/blank? v))\n        %1 (assoc %1 (str/lower-case k) v)))\n   {} (str/split (or headers \"\") #\"(\\n)|(\\r)|(\\r\\n)|(\\n\\r)\")))\n\n(defn response->map [resp req]\n  (let [{:keys [status] :as m}\n        {:status     (.getStatus resp)\n         :success    (.isSuccess resp)\n         :body       (.getResponse resp)\n         :headers    (headers->map (.getAllResponseHeaders resp))\n         :error-code (code->error (.getLastErrorCode resp))\n         :error-text (.getLastError resp)}\n        m (-> m\n              (cond-> (= status 0) tidy-http-error)\n              (vary-meta assoc :kvlt/request req))]\n    (log/debug \"Received response\\n\" (util/pprint-str m))\n    m))\n\n(defn filter-headers [m]\n  (into {}\n    (for [[k v] m\n          :when (not (#{:accept-encoding \"accept-encoding\"} k))]\n      [k v])))\n\n(defn request! [{:keys [request-method headers body credentials?] :as req}]\n  (let [url     (req->url req)\n        method  (name (or request-method :get))\n        headers (clj->js (filter-headers headers))\n        xhr     (req->xhr req)]\n    (p/promise\n     (fn [resolve reject]\n       (.listen xhr EventType.COMPLETE\n                #(resolve (response->map (.. % -target) req)))\n       (.send xhr url method body headers)))))\n"]}