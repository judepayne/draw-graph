{"version":3,"sources":["clojure/data/xml/js/dom.cljs"],"mappings":"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","names":["clojure.data.xml.js.dom/doc","js/DOMParser","clojure.data.xml.js.dom/text-node","s","var_args","G__50834","clojure.data.xml.js.dom/element*","js/Error","tag","attrs","content","meta","el","clojure.data.xml.js.dom.element_STAR_.cljs$core$IFn$_invoke$arity$3","x50839","cljs.core/PROTOCOL_SENTINEL","_","x50844","cljs.core/clone","cljs.core/-with-meta","clojure.data.xml.name/qname-uri","clojure.data.xml.name/qname-local","cljs.core/reduce-kv","k","v","uri","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","n","G__50860","clojure.data.xml.js.dom/element","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq50857","G__50858","cljs.core/first","cljs.core/next","G__50859","self__4717__auto__","clojure.data.xml.js.dom/cdata","clojure.data.xml.js.dom/xml-comment","clojure.data.xml.js.dom/node-list","elements","f","seq__50868","cljs.core/seq","chunk__50869","count__50870","i__50871","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","clojure.data.xml.js.dom/element-node","clojure.data.xml.js.dom/Text","cljs.core/type","clojure.data.xml.js.dom/Element","clojure.data.xml.js.dom.element.cljs$core$IFn$_invoke$arity$1","clojure.data.xml.js.dom/NamedNodeMap","clojure.data.xml.js.dom/NodeList","clojure.data.xml.js.dom/Attr","clojure.data.xml.js.dom.element.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.js.dom/CData","clojure.data.xml.js.dom/Comment","clojure.data.xml.node/CData","clojure.data.xml.node/Comment","cljs.core/native-satisfies?","cljs.core/ILookup","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/ISequential","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.js.dom/dom-element-tag","clojure.data.xml.name.qname.cljs$core$IFn$_invoke$arity$2","clojure.data.xml.js.dom/xmlns-attr?","a","clojure.data.xml.name/xmlns-uri","clojure.data.xml.js.dom/remove-xmlns-attrs-xf","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","clojure.data.xml.js.dom/remove-xmlns-attrs","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","cljs.core/into","clojure.data.xml.js.dom/filter-xmlns-attrs-xf","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","clojure.data.xml.js.dom/filter-xmlns-attrs","G__50909","clojure.data.xml.js.dom/dom-element-attrs","clojure.data.xml.js.dom.dom_element_attrs.cljs$core$IFn$_invoke$arity$2","xf","cljs.core.transduce.cljs$core$IFn$_invoke$arity$4","cljs.core.completing.cljs$core$IFn$_invoke$arity$2","ta","attr-node","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/persistent!","cljs.core/transient","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","clojure.data.xml.js.dom/node-list-vec","nl","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","clojure.data.xml.js.dom/element-data","clojure.data.xml.js.dom/as-node","clojure.data.xml.node/xml-comment","clojure.data.xml.node/cdata","clojure.data.xml.node.element_STAR_.cljs$core$IFn$_invoke$arity$4","clojure.data.xml.js.dom.dom_element_attrs.cljs$core$IFn$_invoke$arity$1","clojure.data.xml.js.dom/extend-dom-as-data!","G__50937","G__50940","cljs.core/Keyword","nf","G__50944","G__50949","nm","el0","el1","attr","temp__5718__auto__","i","not-found","acc","init","G__50981","G__50982","G__50983","nm0","nm1","or__4131__auto__","and__4120__auto__","qn","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/reduced","nl0","nl1","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$1","t0","t1","cljs.core/key","G__51050","cljs.core/val","G__51054"],"sourcesContent":["(ns clojure.data.xml.js.dom\n  (:require\n   [clojure.data.xml.name :refer [qname-uri qname-local qname xmlns-uri]]\n   [clojure.data.xml.node :as node]))\n\n(def doc\n  (.. (js/DOMParser.)\n      (parseFromString \"<d />\" \"text/xml\")))\n\n(defn text-node\n  \"Create a Text node\"\n  [s]\n  (.createTextNode doc s))\n\n(defn element*\n  \"Create an xml element from a content collection and optional metadata\"\n  ([tag attrs content meta]\n   (let [el (element* tag attrs content)]\n     (specify! el\n       IMeta\n       (-meta [_] meta)\n       IWithMeta\n       (-with-meta [_ meta]\n         (specify el\n           IMeta\n           (-meta [_] meta)\n           IWithMeta\n           (-with-meta [_ meta]\n             (-with-meta el meta)))))\n     el))\n  ([tag attrs content]\n   (let [el (.createElementNS doc (qname-uri tag) (qname-local tag))]\n     (reduce-kv (fn [_ k v]\n                  (let [uri (qname-uri k)]\n                    (if (= uri \"http://www.w3.org/2000/xmlns/\")\n                      (.setAttribute el (str \"xmlns:\" (qname-local k)) v)\n                      (.setAttributeNS el uri (qname-local k) v))))\n                nil attrs)\n     (reduce (fn [_ n]\n               (.appendChild el (if (string? n)\n                                  (text-node n)\n                                  n)))\n             nil content)\n     el)))\n\n(defn element\n  \"Create an xml Element from content varargs\"\n  ([tag] (element* tag nil nil))\n  ([tag attrs] (element* tag attrs nil))\n  ([tag attrs & content] (element* tag attrs content)))\n\n(defn cdata\n  \"Create a CData node\"\n  [content]\n  (.createCDATASection doc content))\n\n(defn xml-comment\n  \"Create a Comment node\"\n  [content]\n  (.createComment doc content))\n\n(declare element-node)\n\n(defn node-list\n  \"Create a NodeList\"\n  [elements]\n  (let [f (.createDocumentFragment doc)]\n    (doseq [el elements]\n      (.appendChild f (element-node el)))\n    (.-childNodes f)))\n\n;; ## Types\n\n;; we get these from reflection, to only depend only on js/DOMParser and js/XMLSerializer\n;; these can easily be provided in nashorn, ...\n\n(def Text (type (text-node \"\")))\n(def Element (type (element :e)))\n(def NamedNodeMap (type (.-attributes (element :e))))\n(def NodeList (type (node-list [])))\n(def Attr (type (aget (.-attributes (element :e {:a \"1\"})) 0)))\n(def CData (type (cdata \"\")))\n(def Comment (type (xml-comment \"\")))\n\n;; ## Coercions\n\n;; ## -> DOM\n\n(defn element-node\n  \"Coerce xml elements to dom nodes\"\n  [el]\n  (cond\n    (string? el) (text-node el)\n    (instance? node/CData el) (cdata (:content el))\n    (instance? node/Comment el) (xml-comment (:content el))\n    (instance? Element el) el\n    (instance? CData el) el\n    (instance? Comment el) el\n    ;; stupid xmldom, (some? (.-item el))\n    #_(instance? NodeList el)\n    (some? (.-item el)) el\n    (instance? Text el) el\n    (satisfies? ILookup el) (element* (:tag el)\n                                      (:attrs el)\n                                      (map element-node (:content el)))\n    (satisfies? ISequential el) (node-list el)\n    :else (throw (ex-info \"Cannot coerce\" {:form el}))))\n\n;; ## -> DATA\n\n(defn- dom-element-tag [el]\n  (qname (.-namespaceURI el)\n         (.-localName el)))\n\n(defn- xmlns-attr? [a]\n  (identical? xmlns-uri (.-namespaceURI a)))\n(def remove-xmlns-attrs-xf (remove xmlns-attr?))\n(def remove-xmlns-attrs (partial into {} remove-xmlns-attrs-xf))\n(def filter-xmlns-attrs-xf (filter xmlns-attr?))\n(def filter-xmlns-attrs (partial into {} filter-xmlns-attrs-xf))\n\n(defn dom-element-attrs\n  ([el] (dom-element-attrs remove-xmlns-attrs-xf el))\n  ([xf el]\n   (transduce\n    xf\n    (completing\n     (fn [ta attr-node]\n       (assoc! ta\n               (dom-element-tag attr-node)\n               (.-value attr-node)))\n     persistent!)\n    (transient {})\n    (array-seq el))))\n\n(declare element-data)\n\n(defn- node-list-vec [nl]\n  (into [] (map element-data) (array-seq nl)))\n\n(defn- as-node [n]\n  (if (instance? Text n)\n    (.-nodeValue n) ;; .-data\n    n))\n\n(defn element-data\n  \"Coerce xml elements to element maps / content vectors\"\n  [el]\n  (cond\n    (instance? Comment el)\n    (node/xml-comment (.-data el))\n    (instance? CData el)\n    (node/cdata (.-data el))\n    (instance? Text el)\n    (.-nodeValue el)\n    (instance? Element el)\n    (node/element* (dom-element-tag el)\n                   (dom-element-attrs (.-attributes el))\n                   (node-list-vec (.-childNodes el))\n                   {:clojure.data.xml/nss (dom-element-attrs\n                                           filter-xmlns-attrs-xf\n                                           (.-attributes el))})\n    ;;(instance? NamedNodeMap el)\n    (.-getNamedItemNS el)\n    (dom-element-attrs el)\n    (instance? NodeList el) (node-list-vec el)\n    (string? el) el\n    (satisfies? ILookup el) el\n    (satisfies? ISequential el) el\n    :else (throw (ex-info \"Element cannot be converted to data\" {:element el}))))\n\n(defn extend-dom-as-data! []\n  (extend-type Element\n    IMap\n    IMeta\n    (-meta [el]\n      {:clojure.data.xml/nss (filter-xmlns-attrs\n                              (.-attributes el))})\n    ILookup\n    (-lookup\n      ([el k]\n       (case k\n         :tag (dom-element-tag el)\n         :attrs (.-attributes el)\n         :content (.-childNodes el)\n         (throw (ex-info \"XML tag has no key\" {:key k :el el}))))\n      ([el k nf]\n       #_(println \"Element\" k \"=>\" (case k\n                                     :tag (dom-element-tag el)\n                                     :attrs (.-attributes el)\n                                     :content (.-childNodes el)\n                                     nf))\n       (case k\n         :tag (dom-element-tag el)\n         :attrs (remove-xmlns-attrs (.-attributes el))\n         :content (.-childNodes el)\n         nf)))\n    ICounted\n    (-count [nm] 3)\n    IEquiv\n    (-equiv [el0 el1]\n      (if false #_(instance? Element el1)\n          (do\n            ;; we can't use .isEqualNode, since that has bugs with namespaces\n            (.log js/console el0 el1)\n            (println 'isEqualNode (.isEqualNode el0 el1))\n            (.isEqualNode el0 el1))\n          (and (= (:tag el0) (:tag el1))\n               (= (:attrs el0) (:attrs el1))\n               (= (:content el0) (:content el1))))))\n  (extend-type NamedNodeMap\n    IMap\n    ISeqable\n    (-seq [nm] (array-seq nm))\n    ILookup\n    (-lookup\n      ([attrs attr]\n       (if-let [i (.getNamedItemNS attrs (qname-uri attr) (qname-local attr))]\n         (.-value i)\n         nil))\n      ([attrs attr not-found]\n       #_(println \"Attrs\" attr \"=>\" (if-let [i (.getNamedItemNS attrs (qname-uri attr) (qname-local attr))]\n                                      (.-value i)\n                                      not-found))\n       (if-let [i (.getNamedItemNS attrs (qname-uri attr) (qname-local attr))]\n         (.-value i)\n         not-found)))\n    ICounted\n    (-count [nm] (reduce (fn [acc attr]\n                           (if (xmlns-attr? attr)\n                             acc\n                             (inc acc)))\n                         0 nm))\n    IKVReduce\n    (-kv-reduce [nm f init]\n      (reduce (fn [acc attr]\n                (if (xmlns-attr? attr)\n                  acc\n                  (f acc (dom-element-tag attr) (.-value attr))))\n              init nm))\n    IEquiv\n    (-equiv [nm0 nm1]\n      #_(println \"NamedNodeMap.-equiv\" (identical? nm0 nm1) (count nm0) (count nm1))\n      (or (identical? nm0 nm1)\n          (and (identical? (count nm0) (count nm1))\n               (reduce-kv (fn [_ qn v]\n                            #_(println \"=\" v 'qn qn '(get nm1 qn \"\") (get nm1 qn \"\"))\n                            (or (identical? v (get nm1 qn \"\"))\n                                (reduced false)))\n                          true nm0)))))\n  (extend-type NodeList\n                                        ;specify! (.. (node-list []) -constructor -prototype)\n    ISeqable\n    (-seq [nl] (seq (map as-node (array-seq nl))))\n    ISequential\n    ICounted\n    (-count [nl] (alength nl))\n    IIndexed\n    (-nth\n      ([nl n]\n       (as-node (aget nl n)))\n      ([nl n nf]\n       (if (and (<= 0 n) (< n (alength nl)))\n         (as-node (aget nl n))\n         nf)))\n    IEquiv\n    (-equiv [nl0 nl1]\n      #_(println \"NodeList.-equiv\")\n      (or (identical? nl0 nl1)\n          (and (identical? (count nl0) (count nl1))\n               (reduce (fn [_ n]\n                         (or (= (nth nl0 n) (nth nl1 n))\n                             (reduced false)))\n                       true (range (count nl0)))))))\n  (extend-type Text\n    IEquiv\n    (-equiv [t0 t1]\n      (identical? (.-nodeValue t0)\n                  (if (instance? Text t1)\n                    (.-nodeValue t1)\n                    t1))))\n  (extend-type Attr\n    ISeqable\n    (-seq [attr] (array-seq #js[(key attr) (key attr)]))\n    IMapEntry\n    (-key [attr] (dom-element-tag attr))\n    (-val [attr] (.-value attr))\n    ISequential\n    ICounted\n    (-count [_] 2)\n    IIndexed\n    (-nth\n      ([attr n] (case n\n                  0 (key attr)\n                  1 (val attr)))\n      ([attr n nf]\n       (case n\n         0 (dom-element-tag attr)\n         1 (.-value attr)\n         nf))))\n  {'Text Text\n   'Element Element\n   'NamedNodeMap NamedNodeMap\n   'NodeList NodeList})\n"]}