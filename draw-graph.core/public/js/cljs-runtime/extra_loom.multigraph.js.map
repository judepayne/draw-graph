{"version":3,"sources":["extra_loom/multigraph.cljc"],"mappings":";;;;;AA2BA,AAAA;AAAA;;;AAAA,AAAaO;;AAAb;;;AAAA,AACGL,AAAIM;AADP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACOA,AAAAA;AADP,AACOA,AAAAA;;AADP,AAAAR,AAAA,AAAA,AAAA,AAAA,AACOQ,AAAAA;AADPP,AAAA,AAAAC,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACOO,AAAAA;;AADP,AAAAJ,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACOI,AAAAA;;AADP,AAAA,AAAAH,AAAA,AACOG;;;;;;AADP;;;AAAA,AAEGF,AAAWE;AAFd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEcA,AAAAA;AAFd,AAEcA,AAAAA;;AAFd,AAAAR,AAAA,AAAA,AAAA,AAAA,AAEcQ,AAAAA;AAFdP,AAAA,AAAAK,AAAA,AAAAH,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEcO,AAAAA;;AAFd,AAAAJ,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEcI,AAAAA;;AAFd,AAAA,AAAAH,AAAA,AAEcG;;;;;;AAFd,AAMA,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAWqE;;AAAX,AAAA,AAAAtE,AAAA;AAAA,AAAA,AAAAA,AAAAC,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAWkE;;AAAX,AAAA,AAAApE,AAAA;AAAA,AAAA,AAAAG,AAAAF;AAAAE,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAAE;;;AAAA;AAAAC;;;AAAA;AAAAC;;;AAAA;AAAAC;;;;AAAA,AAAAC,AAAAC,AAAAT,AAAAC;;;;;AAAA,AAAA,AAAA,AAAA,AAAAS,AAAAC,AAAAC,AAAWuD;;AAAX,AAAA,AAAAzD,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAC,AAAAF,AAAA,AAAA;AAAAG,AAAA,AAAAD,AAAAF,AAAA,AAAA;AAAA,AAAA,AAAAL,AAAAA,AAAAG,AAAAG,AAAAE,AAAAR,AAAAG,AAAAG,AAAAE;AAAAP,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAU,AAAAC,AAAAC,AAAW6C;;AAAX,AAAA,AAAA/C,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAE;;AAAA,AAAA,AAAAC,AAAAJ,AAAAE,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAI,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvB,AAAA,AAAA,AAAAuB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAA,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApB,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAAmB,AAAWuC;;AAAX,AAAA,AAAAvC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAqB,AAAArB,AAAA,AAAAsB;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWmC;;AAAX,AAAA,AAAAnC,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWiC;;AAAX,AAAA,AAAAjC,AAAA;AAAA,AAAA,AAAA9B,AAAAC,AAAAC,AAAAC,AAAA0B,AAAAxB,AAAA0B,AAAWgC;;;AAAX,AAAA,AAAA,AAAA,AAAA/B,AAAW+B;;AAAX,AAAA,AAAA/B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA5B;;;AAAA,AAAA,AAAA,AAAA,AAAA6B,AAAW6B;;AAAX,AAAA,AAAA7B,AAAA;AAAA,AAAA,AAAAC,AAAAJ;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;AAAAA;;AAAA,AAAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAAF;AAAA,AAAA,AAAAH,AAAAI;;AAAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAWwB;;AAAX,AAAA,AAAAzB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAWqB;;AAAX,AAAA,AAAAtB,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAL,AAAAZ,AAAAa;;AAAA,AAAA1C,AAAAC,AAAAC,AAAAC,AAAA0B,AAAA,AAAAkB,AAAA,AAAAH,AAAAvC,AAAAqC,AAAA,AAAWqB;;;;AAAX,AAAA,AAAA,AAAA,AAAAf,AAAAC,AAAAzB,AAAWuC;;AAAX,AAAA,AAAAf,AAAA;AAAA,AAAA,AAAAE,AAAAC;AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAAC,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAA5B,AAAAvB,AAAAC,AAAAC,AAAA0B,AAAAxB,AAAA,AAAW0D;;AAAX,AAAA,AAAAb,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAApD,AAAAwB,AAAAtB,AAAAC,AAAA0B,AAAAxB,AAAA,AAAW0D;;AAAX,AAAA,AAAAb,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAApD,AAAAC,AAAAuB,AAAArB,AAAA0B,AAAAxB,AAAA,AAAW0D;;AAAX,AAAA,AAAAb,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAApD,AAAAC,AAAAC,AAAAsB,AAAAK,AAAAxB,AAAA,AAAW0D;;AAAX,AAAA/D,AAAAC,AAAAC,AAAAC,AAAA0B,AAAA,AAAAwB,AAAAhD,AAAA4C,AAAAzB,AAAA,AAAWuC;;;;;;;AAAX,AAAA,AAAA,AAAA,AAAAT,AAAWS;;AAAX,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA,AAAA,AAAAkC,AAAA,AAAAxD,AAAA,AAAA,AAAAwD,AAAA,AAAAvD,AAAA,AAAA,AAAAuD,AAAA,AAAAtD,AAAA,AAAA,AAAAsD,AAAA,AAAArD,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAAoD,AAAAjC,AAAWuC;;AAAX,AAAA,AAAAN,AAAA;AAAA,AAAA,AAAAzD,AAAAC,AAAAC,AAAAC,AAAAqB,AAAAnB,AAAA0B,AAAWgC;;;AAAX,AAAA,AAAA,AAAA,AAAAL,AAAAC,AAAWI;;AAAX,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAAD;AAAA,AAAAD,AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;;AAAA,AAAAlD,AAAAqD,AAAAJ,AAAAC;;;;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAF,AAAA,AAAAC,AAAAE;AAAA,AAAA,AAAAC,AAAAD,AAAA;;;AAAA;;;AAAA,AAAWM,AAAYxE,AAAGC,AAAIC,AAAKC;AAAnC,AAAA,AAAA4D,AAAA,AAAA,AAAA,AAAuB/D,AAAGC,AAAIC,AAAKC;;;AAAnC;;;AAAA,AAAAiE,AAAWK;AAAX,AAAA,AAAAJ,AAAA,AAAAC,AAAA,AAAA1B,AAAAwB,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAG,AAAAH;AAAA,AAAAtB,AAAA,AAAAwB;;AAAAA;;;AAAA,AAAA,AAAAP,AAAA,AAAA,AAAAK,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAAsB,AAAA;;;AAAAN,AAGA,AAAA,AAAA,AAAA,AAAAW,AAAaX;;AAAb,AAAA,AAAA,AAAaA,AAEX,AAAMY;AAAN,AAAA,AAAA,AAAMA;AAAN,AAAY,AAAMA;;;AAFpB,AAAA,AAAA,AAAaZ,AAGX,AAAOY;AAAP,AAAA,AAAA,AAAOA;AAAP,AAAa,AAAOA;;;AAHtB,AAAA,AAAA,AAAAD,AAAaX;;AAAb,AAAA,AAAA,AAAaA,AAKX,AAAKY;AAAL,AAAA,AAAA,AAAKA;AAAL,AAAW,AAAKA;;;AALlB,AAAA,AAAA,AAAaZ,AAMX,AAAYY;AAAZ,AAAA,AAAA,AAAYA;AAAZ,AAAkB,AAAYA;;AAGhC,AAAA,AAAA,AAAA,AAAAD,AACsBnD;;AADtB,AAAA,AAAA,AACsBA,AAEpB,AAAK/B;AAAL,AAAA,AAAA,AAAKA;AAAL,AAAA;;;AAHF,AAAA,AAAA,AACsB+B,AAGpB,AAAY/B;AAAZ,AAAA,AAAA,AAAYA;AAAZ,AAAA;;AAGF,AAAA;;;AAAA,AAAAoF,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAEF7E,AAAIC;AAFR,AAGG,AAAA6D,AAAA,AAAA,AAAA,AAAA,AAEU,AAACiB,AACV/E,AAAIC;;;AANR,AAAA,AAAA,AAAM4E,AAOF7E,AAAIC,AAAKC;AAPb,AAQG,AAAA4D,AAAA,AAAA,AAAA,AAEU,AAACiB,AACV/E,AAAIC,AAAKC;;;AAXb,AAAA,AAAA,AAAM2E;;AAAN,AAcA;;;AAAA,AAAMG,AAEHC;AAFH,AAGE,AAAWnB,AAAWmB;;AAGxB;;;AAAA,AAAMC,AAEH3F,AAAK4F;AAFR,AAGE,AACC,AAAK,AAAC5C,AAAE,AAAClD,AAAUE,AAAM,AAACF,AAAU8F,AAC/B,AAAC5C,AAAE,AAAC6C,AAAI7F,AAAM,AAAC6F,AAAID,AACnB,AAAC5C,AAAE,AAAC8C,AAAK9F,AAAM,AAAC8F,AAAKF,AAC1B,AAAK,AAACG,AAAK,AAACjG,AAAUE,AAAM,AAACF,AAAU8F,AAClC,AAAC5C,AAAE,AAAC6C,AAAI7F,AAAM,AAAC8F,AAAKF,AACpB,AAAC5C,AAAE,AAAC8C,AAAK9F,AAAM,AAAC6F,AAAID;;AAG5B;;;AAAA,AAAMI,AAEHN;AAFH,AAGE,AAAI,AAACD,AAAaC,AACd,AAAK,AACmB3D,AAA4B2D,AAC/C,AAAA,AAAG,AAACjD,AAAMiD;;AAMrB,AAAA;AAAA;;;AAAA,AAAaQ;;AAAb;;;AAAA,AACGD,AAAeE,AAAEC,AAAGC;AADvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACkBF,AAAAA;AADlB,AACkBA,AAAAA,AAAEC,AAAGC;;AADvB,AAAA7G,AAAA,AAAA,AAAA,AAAA,AACkB2G,AAAAA;AADlB1G,AAAA,AAAAwG,AAAA,AAAAtG,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACkB0G,AAAAA,AAAEC,AAAAA,AAAGC,AAAAA;;AADvB,AAAAzG,AAAA,AAAAqG,AAAA;AAAA,AAAA,AAAA,AAAA,AAAArG,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACkBuG,AAAAA,AAAEC,AAAAA,AAAGC,AAAAA;;AADvB,AAAA,AAAAxG,AAAA,AACkBsG;;;;;;AADlB,AAIA,AAAA,AAAMG,AAAgBH,AAAEC,AAAGC;AAA3B,AAA+B,AAAA,AAAA,AAAA,AAACE,AAAOJ,AAAYC,AAAcC;;AAGjE;;;;AAAA,AAAOG,AAGJL,AAAEM;AAHL,AAIE,AAACxF,AACA,AAAAyF,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAApF,AAAAqF,AAAA,AAAA,AAAUE;AAAV,AAAAvF,AAAAqF,AAAA,AAAA,AAAYG;AAAZ,AAAgB,AAAChF,AAAO8E,AAAI,AAAA,AAAA,AAAIE,AAAAA,AAAEL,AAAAA,AAAAA,AAAUM,AAAKC;AADlD,AAGC,AAAA,AAAUb;;AAIb,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAlG,AAAAC,AAAW0H;;AAAX,AAAA,AAAA3H,AAAA;AAAA,AAAA,AAAAA,AAAAC,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA8G,AAAA5G,AAAWuH;;AAAX,AAAA,AAAAzH,AAAA;AAAA,AAAA,AAAA+G,AAAAD;AAAAC,AAAA,AAAA,AAAAA,AAAA3G,AAAA,AAAA2G,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAAC;;;AAAA;AAAAC;;;;AAAA,AAAAxG,AAAAC,AAAAoG,AAAA5G;;;;;AAAA,AAAA,AAAA,AAAA,AAAAS,AAAAC,AAAAC,AAAW4G;;AAAX,AAAA,AAAA9G,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC,AAAAmG;AAAA,AAAA,AAAAC,AAAAD;AAAAhG,AAAA,AAAAC,AAAAgG,AAAA,AAAA;AAAA/F,AAAA,AAAAD,AAAAgG,AAAA,AAAA;AAAA,AAAA,AAAAvG,AAAAA,AAAAG,AAAAG,AAAAE,AAAAR,AAAAG,AAAAG,AAAAE;AAAAP,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAU,AAAAC,AAAAC,AAAWkG;;AAAX,AAAA,AAAApG,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAE;;AAAA,AAAA,AAAAC,AAAAJ,AAAAE,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAI,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAoF,AAAA,AAAA,AAAApF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAqF,AAAA,AAAAvG;;;AAAA,AAAA,AAAA,AAAA,AAAA0G,AAAWK;;AAAX,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAtF,AAAA,AAAAsF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA1G,AAAA,AAAAqB,AAAArB,AAAA,AAAAsB;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWwF;;AAAX,AAAA,AAAAxF,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWsF;;AAAX,AAAA,AAAAtF,AAAA;AAAA,AAAA,AAAA6E,AAAAC,AAAA/E,AAAAxB,AAAA0B,AAAWqF;;;AAAX,AAAA,AAAA,AAAA,AAAApF,AAAWoF;;AAAX,AAAA,AAAApF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA5B;;;AAAA,AAAA,AAAA,AAAA,AAAA6B,AAAWkF;;AAAX,AAAA,AAAAlF,AAAA;AAAA,AAAA,AAAAC,AAAAJ;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;AAAAA;;AAAA,AAAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAAF;AAAA,AAAA,AAAAH,AAAAI;;AAAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAA6E,AAAAC,AAAWG;;AAAX,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAC,AAAA,AAAAzE,AAAA,AAAAwE,AAAA,AAAAC,AAAA,AAAAzE,AAAA,AAAAwE,AAAA,AAAAC,AAAA,AAAAzE,AAAA,AAAAwE,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAxE,AAAAC,AAAW0E;;AAAX,AAAA,AAAA3E,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAL,AAAAZ,AAAAa;;AAAA,AAAAiE,AAAAC,AAAA/E,AAAA,AAAAkB,AAAA,AAAAH,AAAAvC,AAAAqC,AAAA,AAAW0E;;;;AAAX,AAAA,AAAA,AAAA,AAAApE,AAAAC,AAAA8D,AAAWK;;AAAX,AAAA,AAAApE,AAAA;AAAA,AAAA,AAAAkE,AAAA/D;AAAAgE,AAAAlE;AAAA,AAAA,AAAA,AAAAiE,AAAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAC;AAAA,AAAAJ,AAAAH,AAAA/E,AAAAxB,AAAA,AAAW+G;;AAAX,AAAA,AAAAF,AAAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAC;AAAA,AAAAR,AAAAI,AAAAlF,AAAAxB,AAAA,AAAW+G;;AAAX,AAAAT,AAAAC,AAAA/E,AAAA,AAAAwB,AAAAhD,AAAA4C,AAAA8D,AAAA,AAAWK;;;;;AAAX,AAAA,AAAA,AAAA,AAAA9D,AAAW8D;;AAAX,AAAA,AAAA9D,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA,AAAA,AAAAkC,AAAA,AAAAmD,AAAA,AAAA,AAAAnD,AAAA,AAAAoD,AAAA,AAAAvG;;;AAAA,AAAA,AAAA,AAAA,AAAAoD,AAAAsD,AAAWK;;AAAX,AAAA,AAAA3D,AAAA;AAAA,AAAA,AAAAkD,AAAAC,AAAAG,AAAA1G,AAAA0B,AAAWqF;;;AAAX,AAAA,AAAA,AAAA,AAAA1D,AAAAC,AAAWyD;;AAAX,AAAA,AAAA1D,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAAD;AAAA,AAAAD,AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;;AAAA,AAAAlD,AAAAqD,AAAAJ,AAAAC;;;;AAAA,AAAA,AAAAyD,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAApD;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAmD,AAAA,AAAApD,AAAAE;AAAA,AAAA,AAAAC,AAAAD,AAAA;;;AAAA;;;AAAA,AAAWqD,AAA0BZ,AAAQC;AAA7C,AAAA,AAAAQ,AAAA,AAAA,AAAA,AAAqCT,AAAQC;;;AAA7C;;;AAAA,AAAAS,AAAWG;AAAX,AAAA,AAAAnD,AAAA,AAAAiD,AAAA,AAAA1E,AAAAyE,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA9C,AAAA8C;AAAA,AAAAvE,AAAA,AAAAwE;;AAAAA;;;AAAA,AAAA,AAAAF,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtE,AAAAsB,AAAA;;;AAAA+C,AAGA,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA3H,AAAAC,AAAWwI;;AAAX,AAAA,AAAAzI,AAAA;AAAA,AAAA,AAAAA,AAAAC,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA8H,AAAA5H,AAAWqI;;AAAX,AAAA,AAAAvI,AAAA;AAAA,AAAA,AAAA+H,AAAAD;AAAAC,AAAA,AAAA,AAAAA,AAAA3H,AAAA,AAAA2H,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAAf;;;AAAA;AAAAC;;;;AAAA,AAAAxG,AAAAC,AAAAoH,AAAA5H;;;;;AAAA,AAAA,AAAA,AAAA,AAAAS,AAAAC,AAAAC,AAAW0H;;AAAX,AAAA,AAAA5H,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC,AAAAiH;AAAA,AAAA,AAAAC,AAAAD;AAAA9G,AAAA,AAAAC,AAAA8G,AAAA,AAAA;AAAA7G,AAAA,AAAAD,AAAA8G,AAAA,AAAA;AAAA,AAAA,AAAArH,AAAAA,AAAAG,AAAAG,AAAAE,AAAAR,AAAAG,AAAAG,AAAAE;AAAAP,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAU,AAAAC,AAAAC,AAAWgH;;AAAX,AAAA,AAAAlH,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAE;;AAAA,AAAA,AAAAC,AAAAJ,AAAAE,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAI,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAoF,AAAA,AAAA,AAAApF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAqF,AAAA,AAAAvG;;;AAAA,AAAA,AAAA,AAAA,AAAAwH,AAAWK;;AAAX,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAApG,AAAA,AAAAoG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAxH,AAAA,AAAAqB,AAAArB,AAAA,AAAAsB;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWsG;;AAAX,AAAA,AAAAtG,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWoG;;AAAX,AAAA,AAAApG,AAAA;AAAA,AAAA,AAAA6E,AAAAC,AAAA/E,AAAAxB,AAAA0B,AAAWmG;;;AAAX,AAAA,AAAA,AAAA,AAAAlG,AAAWkG;;AAAX,AAAA,AAAAlG,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA5B;;;AAAA,AAAA,AAAA,AAAA,AAAA6B,AAAWgG;;AAAX,AAAA,AAAAhG,AAAA;AAAA,AAAA,AAAAC,AAAAJ;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;AAAAA;;AAAA,AAAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAAF;AAAA,AAAA,AAAAH,AAAAI;;AAAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAA2F,AAAAC,AAAWG;;AAAX,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAC,AAAA,AAAAvF,AAAA,AAAAsF,AAAA,AAAAC,AAAA,AAAAvF,AAAA,AAAAsF,AAAA,AAAAC,AAAA,AAAAvF,AAAA,AAAAsF,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAtF,AAAAC,AAAWwF;;AAAX,AAAA,AAAAzF,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAL,AAAAZ,AAAAa;;AAAA,AAAAiE,AAAAC,AAAA/E,AAAA,AAAAkB,AAAA,AAAAH,AAAAvC,AAAAqC,AAAA,AAAWwF;;;;AAAX,AAAA,AAAA,AAAA,AAAAlF,AAAAC,AAAA4E,AAAWK;;AAAX,AAAA,AAAAlF,AAAA;AAAA,AAAA,AAAAgF,AAAA7E;AAAA8E,AAAAhF;AAAA,AAAA,AAAA,AAAA+E,AAAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAC;AAAA,AAAAJ,AAAAjB,AAAA/E,AAAAxB,AAAA,AAAW6H;;AAAX,AAAA,AAAAF,AAAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAC;AAAA,AAAAtB,AAAAkB,AAAAhG,AAAAxB,AAAA,AAAW6H;;AAAX,AAAAvB,AAAAC,AAAA/E,AAAA,AAAAwB,AAAAhD,AAAA4C,AAAA4E,AAAA,AAAWK;;;;;AAAX,AAAA,AAAA,AAAA,AAAA5E,AAAW4E;;AAAX,AAAA,AAAA5E,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA,AAAA,AAAAkC,AAAA,AAAAmD,AAAA,AAAA,AAAAnD,AAAA,AAAAoD,AAAA,AAAAvG;;;AAAA,AAAA,AAAA,AAAA,AAAAoD,AAAAoE,AAAWK;;AAAX,AAAA,AAAAzE,AAAA;AAAA,AAAA,AAAAkD,AAAAC,AAAAiB,AAAAxH,AAAA0B,AAAWmG;;;AAAX,AAAA,AAAA,AAAA,AAAAxE,AAAAC,AAAWuE;;AAAX,AAAA,AAAAxE,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAAD;AAAA,AAAAD,AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;;AAAA,AAAAlD,AAAAqD,AAAAJ,AAAAC;;;;AAAA,AAAA,AAAAuE,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAlE;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAiE,AAAA,AAAAlE,AAAAE;AAAA,AAAA,AAAAC,AAAAD,AAAA;;;AAAA;;;AAAA,AAAWmE,AAAwB1B,AAAQC;AAA3C,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAmCvB,AAAQC;;;AAA3C;;;AAAA,AAAAuB,AAAWG;AAAX,AAAA,AAAAjE,AAAA,AAAA+D,AAAA,AAAAxF,AAAAuF,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA5D,AAAA4D;AAAA,AAAArF,AAAA,AAAAsF;;AAAAA;;;AAAA,AAAA,AAAAF,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApF,AAAAsB,AAAA;;;AAAA6D,AAGA,AAAA,AAAMK,AACH5C;AADH,AAEE,AAAC6C,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA9D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA+D,AAAA,AAAA,AAAAA,AAAYC,AAAAA,AAAQ/C,AAAAA,AAAAA,AAAAA,AAAAA;;AAG/B;;;AAAA,AAAOgD,AAEJhD,AAAEiD;AAFL,AAGE,AAACJ,AAAQ,AAAA,AAAA,AAACzC,AAAOJ,AAAYiD;;AAG/B;;;AAAA,AAAOC,AAEJlD;AAFH,AAGE,AAAA,AAACK,AAAcL;;AAGjB;;;AAAA,AAAOmD,AAEJnD;AAFH,AAGE,AAAA,AAAC7C,AAAS,AAACiG,AAAK,AAAA,AAAUpD;;AAK5B;;;AAAA,AAAOqD,AAEJrD,AAAEiD;AAFL,AAGE,AAACnI,AACA,AAAAwI,AAAK7C;AAAL,AAAA,AAAA8C,AAAAD;AAAA,AAAAnI,AAAAoI,AAAA,AAAA,AAAU7C;AAAV,AAAAvF,AAAAoI,AAAA,AAAA,AAAY5C;AAAZ,AACE,AAAI,AAAC6C,AAAI,AAACJ,AAAK,AAAA,AAAYzC,AAAIsC;AAC7B,AAACvF,AAAM+C,AAAIC,AAAE,AAAA,AAAA,AAACN,AAAOO,AAAcsC;;AACnCxC;;AAJL,AAMC,AAAA,AAAUT;;AAGb;;;AAAA,AAAOyD,AAEJzD,AAAEiD;AAFL,AAGE,AAAA,AAAA,AAAA,AAACS,AAAS1D,AAAYiD,AAAgB,AAACI,AAAIrD,AAAEiD;;AAG/C;;;AAAA,AAAOU,AAEJ3D,AAAEiD;AAFL,AAGMjD,AACA,AAAA,AAAA,AAAA,AAAA,AAAC4D,AAAoBX,AAAiBY,AACtC,AAACJ,AAAaR;;AAGpB,AAAA;;;AAAA,AAAAhE,AAAOkF;AAAP,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAOE,AAEJnE,AAAIyE;AAFP,AAEc,AAAC3J,AAAO6I,AAAS3D,AAAEyE;;;AAFjC,AAAA,AAAA,AAAON;;AAAP;AAAA,AAAA,AAAA,AAAAC,AAAOD;AAAP,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAKA;;;AAAA,AAAOM,AAEJnF;AAFH,AAGE,AAAA,AAAA,AAAC7B,AAAM6B,AAAO,AAACI,AAAKJ,AAAS,AAACG,AAAIH;;AAGpC;;;AAAA,AAAOoF,AAEJpF;AAFH,AAGE,AAAA,AAAA,AAAC7B,AAAM,AAACgH,AAAanF;;AAGvB;;;AAAA,AAAOqF,AAEJ5E,AAAET;AAFL,AAGE,AAAMsF,AAAE,AAACnF,AAAIH;AACPuF,AAAE,AAACnF,AAAKJ;AACRwF,AAAS,AAACJ,AAAcpF;AAF9B,AAGMS,AACA,AAAA,AAAA,AAAA,AAAC4D,AAAoBkB,AAAaD,AAAG,AAAA,AAACG,AAAKC,AAAUF,AACrD,AAAA,AAAA,AAAA,AAACnB,AAAoBiB,AAAYC,AAAG,AAAA,AAACE,AAAKC,AAAUF;;AAG5D,AAAA;;;;AAAA,AAAA9F,AAAOiG;AAAP,AAAA,AAAApB,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAjB;;;AAAA,AAAA,AAAA,AAAA,AAAAkB,AAAOD,AAGJlF,AAAEhB;AAHL,AAAA,AAAAoG,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArG,AAAA,AAAAqG,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAF,AAAAA;AAAA,AAAA3K,AAAA2K,AAAA,AAAA,AAGoB5K;AAHpB,AAIE,AAAAkL,AAAe1G;AAAf,AAAA7D,AAAAuK,AAAA,AAAA,AAAOb;AAAP,AAAA1J,AAAAuK,AAAA,AAAA,AAASZ;AAAT,AAAA3J,AAAAuK,AAAA,AAAA,AAAWC;AACLpG,AAAE,AAACqG,AAAUf,AAAEC;AADrB,AAEU9E,AACE,AAAA,AAAA,AAAA,AAAC4D,AAAoBiB,AAAaC,AAAG,AAAA,AAACE,AAAKC,AAAU1F,AACrD,AAACsG,AAAYrL,AAAUoK,AAAkBrF,AACzC,AAACuG,AAAUjB,AAAEC,AACb,AAAA,AAAA,AAACe,AAAYF,AAAGjC,AAAiB,AAAKnE,AAAIoG;;;AAVxD,AAAA,AAAA,AAAOT;;AAAP;AAAA,AAAA,AAAA,AAAAK,AAAOL;AAAP,AAAA,AAAAM,AAAA,AAAAlB,AAAAiB;AAAAA,AAAA,AAAAhB,AAAAgB;AAAAE,AAAA,AAAAnB,AAAAiB;AAAAA,AAAA,AAAAhB,AAAAgB;AAAA,AAAA,AAAAf,AAAA;AAAA,AAAA,AAAAA,AAAAgB,AAAAC,AAAAF;;;AAAA,AAaA,AAAA,AAAOQ,AACJC,AAAEtF,AAAEuF;AADP,AAEE,AAAI,AAACC,AAAOD;AACV,AAAChJ,AAAO+I,AAAEtF;;AACV,AAAChD,AAAMsI,AAAEtF,AAAEuF;;;AAGf;;;AAAA,AAAOE,AAEJnG,AAAET;AAFL,AAGE,AAAA6G,AAA8B7G;AAA9B6G,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArH,AAAA,AAAAqH,AAAA,AAAA,AAAA,AAAA,AAAAf,AAAAC,AAAAc,AAAAA;AAAA,AAAA3L,AAAA2L,AAAA,AAAOvB;AAAP,AAAApK,AAAA2L,AAAA,AAActB;AAAd,AAAArK,AAAA2L,AAAA,AAAsB/L;AAChBgM,AAAgB,AAACC,AAAK,AAACnG,AAAeH,AAAE6E,AAAEC,AAAGvF;AAC7CgH,AAAe,AAACD,AAAK,AAACnG,AAAeH,AAAE8E,AAAED,AAAGtF;AAFlD,AAGMS,AACA,AAAA,AAAA,AAAA,AAAC4D,AAAoBiB,AAAckB,AAAYjB,AAAEuB,AACjD,AAAA,AAAA,AAAA,AAACzC,AAAoBkB,AAAaiB,AAAYlB,AAAE0B,AAChD,AAAA,AAAA,AAAA,AAAC3C,AAAoBiB,AAAakB,AAAYjB,AAAEyB,AAChD,AAAA,AAAA,AAAA,AAAC3C,AAAoBkB,AAAciB,AAAYlB,AAAEwB,AACjD,AAAA,AAAA,AAACzC,AAAmB4C,AAAOnM;;AAGnC;;;AAAA,AAAOoM,AAEJzG,AAAET;AAFL,AAGE,AAAMmH,AAAM,AAAA,AACE,AAACpH,AAAaC,AAAG,AAAAjB,AAAA,AAAA,AAAA,AAAA,AAAMiB,AAEZ,AAAA,AAAAoH,AAACC;AAAD,AAAS,AAAAD,AAACnH,AAAYD;AADtB,AAACY,AAAeH,AAAE,AAACN,AAAIH,AAAG,AAACI,AAAKJ;;AAFzD,AAIE,AAACzE,AAAOqL,AAAmBnG,AAAE0G;;AAGjC;;;AAAA,AAAOG,AAEJ7G,AAAEiD;AAFL,AAGMjD,AACA,AAAA,AAAA,AAAC8G,AAAoB7D,AACrB,AAAA,AAAA,AAAC6D,AAAkB7D,AAEnB,AAAA,AAAA,AAAA,AAAA,AAAC8D,AAAwCP,AAAOvD,AAChD,AAAA,AAAA,AAAA,AAAA,AAAC8D,AAAyCP,AAAOvD;;AAGvD;;;AAAA,AAAO+D,AAEJhH;AAFH,AAGMA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACiH,AAA+Cf,AAChD,AAAA,AAAA,AAAA,AAAA,AAAA,AAACe,AAA8Cf;;AAGrD;;;AAAA,AAAOgB,AAEJlB;AAFH,AAGE,AAAClL,AACA,AAAAqM,AAAK1G;AAAL,AAAA,AAAA2G,AAAAD;AAAA,AAAAhM,AAAAiM,AAAA,AAAA,AAAU1G;AAAV,AAAAvF,AAAAiM,AAAA,AAAA,AAAYzG;AAAZ,AAAgB,AAACjD,AAAM+C,AAAIC,AAAE,AAAA,AAACvD,AAAS,AAACkK,AAAI3C,AAAa/D;AAD1D,AAGCqF;;AAGH;;;AAAA,AAAOsB,AAEJtB;AAFH,AAGE,AAAA,AAAA,AAACtI,AAAMsI,AACW,AAACkB,AAAc,AAAA,AAAWlB,AAC3B,AAACkB,AAAc,AAAA,AAAYlB;;AAK9C,AAAA;;;AAAA,AAAA/G,AAAOuI;AAAP,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAApI,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAOoI,AAEHxH,AAAEhB,AAAK0B,AAAEC;AAFb,AAGG,AAAA,AAAA,AAAC+C,AAAS1D,AAAU,AAACzG,AAAGyF,AAAM0B,AAAGC;;;AAHpC,AAAA,AAAA,AAAO6G,AAIHxH,AAAEC,AAAGC,AAAGQ,AAAEC;AAJd,AAKG,AAAA,AAAA8G,AAAAC,AAAC5M;AAAD,AAAS,AAAA2M,AAAAC,AAACC,AAAuBjH,AAAEC;AAAGX,AAAE,AAACF,AAAcE,AAAEC,AAAGC;;;AAL/D,AAAA,AAAA,AAAOsH;;AAAP,AAQA;;;AAAA,AAAOI,AAEJ5H,AAAEiD,AAAKvC,AAAEC;AAFZ,AAGE,AAAA,AAAA,AAAC+C,AAAS1D,AAAUiD,AAAKvC,AAAGC;;AAG9B,AAAA;;;AAAA,AAAA1B,AAAO6I;AAAP,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA1I,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAO0I,AAEH9H,AAAEhB,AAAK0B;AAFX,AAGG,AAAA,AAAA,AAACqH,AAAgB/H,AAAU,AAACzG,AAAGyF,AAAM0B;;;AAHxC,AAAA,AAAA,AAAOoH,AAIH9H,AAAEC,AAAGC,AAAGQ;AAJZ,AAKG,AAAA,AAAAsH,AAAAC,AAACnN;AAAD,AAAS,AAAAkN,AAAAC,AAACC,AAA4BxH;AAAGV,AAAE,AAACF,AAAcE,AAAEC,AAAGC;;;AALlE,AAAA,AAAA,AAAO4H;;AAAP,AAQA;;;AAAA,AAAOK,AAEJnI,AAAEiD,AAAKvC;AAFV,AAGE,AAAA,AAAA,AAACqH,AAAgB/H,AAAUiD,AAAKvC;;AAGlC,AAAA;;;;;AAAA,AAAAzB,AAAOoJ;AAAP,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAjJ,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAOiJ,AAIHrI,AAAEsI,AAAa5H;AAJnB,AAKG,AACE,AAACpB,AAAagJ;AAAc,AAAA,AAAA,AAAClI,AAAOJ,AAAU,AAACzG,AAAG+O,AAAc5H;;AADlE,AAE8B,AAAA,AAAA,AAACN,AAAOJ,AAAUsI,AAAa5H;;;;;AAPhE,AAAA,AAAA,AAAO2H,AAQHrI,AAAEC,AAAGC,AAAGQ;AARZ,AASG,AAAM6H,AAAG,AAACzI,AAAcE,AAAEC,AAAGC;AAA7B,AACE,AAACpF,AACA,AAAK0N,AAAIxJ;AAAT,AACE,AAAMyJ,AAAG,AAACC,AAAM1I,AAAEhB,AAAK0B;AAAvB,AACE,AAAI+H;AAAG,AAAC/K,AAAM8K,AAAI,AAACjP,AAAGyF,AAAMyJ;;AAAID;;AAHrC,AAKCD;;;AAfN,AAAA,AAAA,AAAOF;;AAAP,AAkBA,AAAA;;;;;AAAA,AAAApJ,AAAO2J;AAAP,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAxJ,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAOwJ,AAIH5I,AAAEsI;AAJN,AAKG,AACE,AAAChJ,AAAagJ;AAAc,AAAA,AAAA,AAAClI,AAAOJ,AAAU,AAACzG,AAAG+O;;AADpD,AAE8B,AAAA,AAAA,AAAClI,AAAOJ,AAAUsI;;;;;AAPnD,AAAA,AAAA,AAAOM,AAQH5I,AAAEC,AAAGC;AART,AASG,AAAMqI,AAAG,AAACzI,AAAcE,AAAEC,AAAGC;AAA7B,AACE,AAACpF,AACA,AAAK+N,AAAK7J;AAAV,AACE,AAAMwJ,AAAI,AAACM,AAAO9I,AAAEhB;AAApB,AACE,AAAIwJ;AAAI,AAAC9K,AAAMmL,AAAK,AAACtP,AAAGyF,AAAMwJ;;AAAKK;;AAHxC,AAKCN;;;AAfN,AAAA,AAAA,AAAOK;;AAAP,AAmBA,AAUA,AAOA,AAUA,AAIA,AA0BA,AAAA,AAAA,AAAA,AAAA7J,AAAQwD;;AAxDOvC,AAwDf,AAAA,AAAA,AAAA,AAAQuC;AAxDOvC,AAwDf,AAAA,AAAA;AAxDkB,AAACmD,AAAOnD,AAwD1B;;;AAvDeA,AAuDf,AAAA,AAAA,AAAA,AAAQuC;AAvDOvC,AAuDf,AAAA,AAAA;AAvDkB,AAACkD,AAAOlD,AAuD1B;;;AAtDmBA,AAAEiD,AAsDrB,AAAA,AAAA,AAAA,AAAQV;AAtDWvC,AAsDnB,AAAA,AAAA;AAtD2B,AAAChD,AAAU,AAACmG,AAAOnD,AAAGiD,AAsDjD;;;AArDmBjD,AAAEC,AAAGC,AAqDxB,AAAA,AAAA,AAAA,AAAQqC;AArDWvC,AAqDnB,AAAA,AAAA;AArD4B,AAAMgG,AAAE,AAAA,AAAA,AAAA,AAAC5F,AAAOJ,AAAYC,AAqDxD;AArD4B,AAA6C,AAAC4C,AAAQ,AAAA,AAACkG,AAAO7I,AAAI,AAACkD,AAAK4C;;;AAC/EhG,AAAEiD,AAoDvB,AAAA,AAAA,AAAA,AAAQV;AApDavC,AAoDrB,AAAA,AAAA;AApD6B,AAACoD,AAAK,AAAA,AAAA,AAAA,AAAChD,AAAOJ,AAAYiD,AAoDvD;;;AAnDoBjD,AAAEiD,AAmDtB,AAAA,AAAA,AAAA,AAAQV;AAnDYvC,AAmDpB,AAAA,AAAA;AAnD4B,AAAC1D,AAAM,AAACuE,AAAK,AAACD,AAAK,AAAA,AAAA,AAAA,AAACR,AAAOJ,AAAYiD,AAmDnE;;;AAlDmBjD,AAAEiD,AAkDrB,AAAA,AAAA,AAAA,AAAQV;AAlDWvC,AAkDnB,AAAA,AAAA;AAlD2B,AAACa,AAAK,AAACD,AAAK,AAAA,AAAA,AAAA,AAACR,AAAOJ,AAAYiD,AAkD3D;;;AAAA,AAAA,AAAA,AAAAlE,AAAQwD;;AAvCYvC,AAAEyE,AAuCtB,AAAA,AAAA,AAAA,AAAQlC;AAvCYvC,AAuCpB,AAAA,AAAA;AAvC6B,AAACqF,AAAMlB,AAAUnE,AAAEyE,AAuChD;;;AAtCoBzE,AAAE0G,AAsCtB,AAAA,AAAA,AAAA,AAAQnE;AAtCYvC,AAsCpB,AAAA,AAAA;AAtC6B,AAAI,AAAC4C,AAAS5C,AAsC3C;AArC+B,AAAClF,AAAOoK,AAASlF,AAAE0G;;AACnB,AAAA,AAAAuC,AAAAC,AAACpO;AAAD,AAAS,AAAAmO,AAAAC,AAAA,AAAA,AAACC;AAAgCnJ,AAAE0G;;;;AACpD1G,AAAEyE,AAmCzB,AAAA,AAAA,AAAA,AAAQlC;AAnCevC,AAmCvB,AAAA,AAAA;AAnCgC,AAAClF,AAAO+L,AAAY7G,AAAEyE,AAmCtD;;;AAlCuBzE,AAAE0G,AAkCzB,AAAA,AAAA,AAAA,AAAQnE;AAlCevC,AAkCvB,AAAA,AAAA;AAlCgC,AAACgH,AAA6B,AAAClM,AAAO2L,AAAYzG,AAAE0G,AAkCpF;;;AAjCoB1G,AAiCpB,AAAA,AAAA,AAAA,AAAQuC;AAjCYvC,AAiCpB,AAAA,AAAA;AAjCuB,AAAA,AAAA,AAAA,AAAA,AAACtC,AAAMsC,AAiC9B;;;AAAA,AAAA,AAAA,AAAAjB,AAAQwD;;AA7BevC,AAAEC,AAAGC,AA6B5B,AAAA,AAAA,AAAA,AAAQqC;AA7BevC,AA6BvB,AAAA,AAAA;AA7BgC,AAACG,AAAeH,AAAEC,AAAGC,AA6BrD;;;AAAA,AAAA,AAAA,AAAAnB,AAAQwD;;AAvBDvC,AAAEsI,AAAa5H,AAAEC,AAuBxB,AAAA,AAAA,AAAA,AAAQ4B;AAvBDvC,AAuBP,AAAA,AAAA;AAvB2B,AAAI,AAACV,AAAagJ,AAuB7C;AAtB+B,AAACX,AAAiB3H,AAAEsI,AAAa5H,AAAEC;;AACnC,AAACiH,AAAiB5H,AAAEsI,AAAa5H,AAAEC;;;;AAC3DX,AAAEC,AAAGC,AAAGQ,AAAEC,AAoBjB,AAAA,AAAA,AAAA,AAAQ4B;AApBDvC,AAoBP,AAAA,AAAA;AApBoB,AAAC2H,AAAiB3H,AAAEC,AAAGC,AAAGQ,AAAEC,AAoBhD;;;AAjBOX,AAAEsI,AAAa5H,AAiBtB,AAAA,AAAA,AAAA,AAAQ6B;AAjBDvC,AAiBP,AAAA,AAAA;AAjByB,AAAI,AAACV,AAAagJ,AAiB3C;AAhB6B,AAACJ,AAAsBlI,AAAEsI,AAAa5H;;AACtC,AAACyH,AAAsBnI,AAAEsI,AAAa5H;;;;AAC5DV,AAAEC,AAAGC,AAAGQ,AAcf,AAAA,AAAA,AAAA,AAAQ6B;AAdDvC,AAcP,AAAA,AAAA;AAdkB,AAACkI,AAAsBlI,AAAEC,AAAGC,AAAGQ,AAcjD;;;AAXOV,AAAEsI,AAAa5H,AAWtB,AAAA,AAAA,AAAA,AAAQ6B;AAXDvC,AAWP,AAAA,AAAA;AAXyB,AAAC0I,AAAM1I,AAAEsI,AAAa5H,AAW/C;;;AAVOV,AAAEC,AAAGC,AAAGQ,AAUf,AAAA,AAAA,AAAA,AAAQ6B;AAVDvC,AAUP,AAAA,AAAA;AAVkB,AAAC0I,AAAM1I,AAAEC,AAAGC,AAAGQ,AAUjC;;;AAPOV,AAAEsI,AAOT,AAAA,AAAA,AAAA,AAAQ/F;AAPDvC,AAOP,AAAA,AAAA;AAPuB,AAAC8I,AAAO9I,AAAEsI,AAOjC;;;AANOtI,AAAEC,AAAGC,AAMZ,AAAA,AAAA,AAAA,AAAQqC;AANDvC,AAMP,AAAA,AAAA;AANgB,AAAC8I,AAAO9I,AAAEC,AAAGC,AAM7B;;AAeA,AAAA,AAAA,AAAA,AAAAnB,AAAQ0C;;AAvEOzB,AAuEf,AAAA,AAAA,AAAA,AAAQyB;AAvEOzB,AAuEf,AAAA,AAAA;AAvEkB,AAACmD,AAAOnD,AAuE1B;;;AAtEeA,AAsEf,AAAA,AAAA,AAAA,AAAQyB;AAtEOzB,AAsEf,AAAA,AAAA;AAtEkB,AAACkD,AAAOlD,AAsE1B;;;AArEmBA,AAAEiD,AAqErB,AAAA,AAAA,AAAA,AAAQxB;AArEWzB,AAqEnB,AAAA,AAAA;AArE2B,AAAChD,AAAU,AAACmG,AAAOnD,AAAGiD,AAqEjD;;;AApEmBjD,AAAEC,AAAGC,AAoExB,AAAA,AAAA,AAAA,AAAQuB;AApEWzB,AAoEnB,AAAA,AAAA;AApE4B,AAAMgG,AAAE,AAAA,AAAA,AAAA,AAAC5F,AAAOJ,AAAYC,AAoExD;AApE4B,AAA6C,AAAC4C,AAAQ,AAAA,AAACkG,AAAO7I,AAAI,AAACkD,AAAK4C;;;AAC/EhG,AAAEiD,AAmEvB,AAAA,AAAA,AAAA,AAAQxB;AAnEazB,AAmErB,AAAA,AAAA;AAnE6B,AAACoD,AAAK,AAAA,AAAA,AAAA,AAAChD,AAAOJ,AAAYiD,AAmEvD;;;AAlEoBjD,AAAEiD,AAkEtB,AAAA,AAAA,AAAA,AAAQxB;AAlEYzB,AAkEpB,AAAA,AAAA;AAlE4B,AAAC1D,AAAM,AAACuE,AAAK,AAACD,AAAK,AAAA,AAAA,AAAA,AAACR,AAAOJ,AAAYiD,AAkEnE;;;AAjEmBjD,AAAEiD,AAiErB,AAAA,AAAA,AAAA,AAAQxB;AAjEWzB,AAiEnB,AAAA,AAAA;AAjE2B,AAACa,AAAK,AAACD,AAAK,AAAA,AAAA,AAAA,AAACR,AAAOJ,AAAYiD,AAiE3D;;;AAAA,AAAA,AAAA,AAAAlE,AAAQ0C;;AA7DezB,AAAEiD,AA6DzB,AAAA,AAAA,AAAA,AAAQxB;AA7DezB,AA6DvB,AAAA,AAAA;AA7D+B,AAACoD,AAAK,AAAA,AAAA,AAAA,AAAChD,AAAOJ,AAAYiD,AA6DzD;;;AA5DmBjD,AAAEiD,AA4DrB,AAAA,AAAA,AAAA,AAAQxB;AA5DWzB,AA4DnB,AAAA,AAAA;AA5D2B,AAAC1D,AAAM,AAACuE,AAAK,AAACD,AAAK,AAAA,AAAA,AAAA,AAACR,AAAOJ,AAAYiD,AA4DlE;;;AA3DkBjD,AAAEiD,AA2DpB,AAAA,AAAA,AAAA,AAAQxB;AA3DUzB,AA2DlB,AAAA,AAAA;AA3D0B,AAACa,AAAK,AAACD,AAAK,AAAA,AAAA,AAAA,AAACR,AAAOJ,AAAYiD,AA2D1D;;;AA1DmBjD,AA0DnB,AAAA,AAAA,AAAA,AAAQyB;AA1DWzB,AA0DnB,AAAA,AAAA;AA1DsB,AAAA,AAAA,AAAA,AAACgJ,AAAchJ,AAAkBsH,AA0DvD;;;AAAA,AAAA,AAAA,AAAAvI,AAAQ0C;;AAtDYzB,AAAEyE,AAsDtB,AAAA,AAAA,AAAA,AAAQhD;AAtDYzB,AAsDpB,AAAA,AAAA;AAtD6B,AAACqF,AAAMlB,AAAUnE,AAAEyE,AAsDhD;;;AArDoBzE,AAAE0G,AAqDtB,AAAA,AAAA,AAAA,AAAQjF;AArDYzB,AAqDpB,AAAA,AAAA;AArD6B,AAAI,AAAC4C,AAAS5C,AAqD3C;AApD+B,AAAClF,AAAOoK,AAASlF,AAAE0G;;AACnB,AAAA,AAAAuC,AAAAC,AAACpO;AAAD,AAAS,AAAAmO,AAAAC,AAAA,AAAA,AAACC;AAAgCnJ,AAAE0G;;;;AACpD1G,AAAEyE,AAkDzB,AAAA,AAAA,AAAA,AAAQhD;AAlDezB,AAkDvB,AAAA,AAAA;AAlDgC,AAAClF,AAAO+L,AAAY7G,AAAEyE,AAkDtD;;;AAjDuBzE,AAAE0G,AAiDzB,AAAA,AAAA,AAAA,AAAQjF;AAjDezB,AAiDvB,AAAA,AAAA;AAjDgC,AAACgH,AAA6B,AAAClM,AAAO2L,AAAYzG,AAAE0G,AAiDpF;;;AAhDoB1G,AAgDpB,AAAA,AAAA,AAAA,AAAQyB;AAhDYzB,AAgDpB,AAAA,AAAA;AAhDuB,AAAA,AAAA,AAAA,AAAA,AAACtC,AAAMsC,AAgD9B;;;AAAA,AAAA,AAAA,AAAAjB,AAAQ0C;;AA5CezB,AAAEC,AAAGC,AA4C5B,AAAA,AAAA,AAAA,AAAQuB;AA5CezB,AA4CvB,AAAA,AAAA;AA5CgC,AAACG,AAAeH,AAAEC,AAAGC,AA4CrD;;;AAAA,AAAA,AAAA,AAAAnB,AAAQ0C;;AAtCDzB,AAAEsI,AAAa5H,AAAEC,AAsCxB,AAAA,AAAA,AAAA,AAAQc;AAtCDzB,AAsCP,AAAA,AAAA;AAtC2B,AAAI,AAACV,AAAagJ,AAsC7C;AArC+B,AAACX,AAAiB3H,AAAEsI,AAAa5H,AAAEC;;AACnC,AAACiH,AAAiB5H,AAAEsI,AAAa5H,AAAEC;;;;AAC3DX,AAAEC,AAAGC,AAAGQ,AAAEC,AAmCjB,AAAA,AAAA,AAAA,AAAQc;AAnCDzB,AAmCP,AAAA,AAAA;AAnCoB,AAAC2H,AAAiB3H,AAAEC,AAAGC,AAAGQ,AAAEC,AAmChD;;;AAhCOX,AAAEsI,AAAa5H,AAgCtB,AAAA,AAAA,AAAA,AAAQe;AAhCDzB,AAgCP,AAAA,AAAA;AAhCyB,AAAI,AAACV,AAAagJ,AAgC3C;AA/B6B,AAACJ,AAAsBlI,AAAEsI,AAAa5H;;AACtC,AAACyH,AAAsBnI,AAAEsI,AAAa5H;;;;AAC5DV,AAAEC,AAAGC,AAAGQ,AA6Bf,AAAA,AAAA,AAAA,AAAQe;AA7BDzB,AA6BP,AAAA,AAAA;AA7BkB,AAACkI,AAAsBlI,AAAEC,AAAGC,AAAGQ,AA6BjD;;;AA1BOV,AAAEsI,AAAa5H,AA0BtB,AAAA,AAAA,AAAA,AAAQe;AA1BDzB,AA0BP,AAAA,AAAA;AA1ByB,AAAC0I,AAAM1I,AAAEsI,AAAa5H,AA0B/C;;;AAzBOV,AAAEC,AAAGC,AAAGQ,AAyBf,AAAA,AAAA,AAAA,AAAQe;AAzBDzB,AAyBP,AAAA,AAAA;AAzBkB,AAAC0I,AAAM1I,AAAEC,AAAGC,AAAGQ,AAyBjC;;;AAtBOV,AAAEsI,AAsBT,AAAA,AAAA,AAAA,AAAQ7G;AAtBDzB,AAsBP,AAAA,AAAA;AAtBuB,AAAC8I,AAAO9I,AAAEsI,AAsBjC;;;AArBOtI,AAAEC,AAAGC,AAqBZ,AAAA,AAAA,AAAA,AAAQuB;AArBDzB,AAqBP,AAAA,AAAA;AArBgB,AAAC8I,AAAO9I,AAAEC,AAAGC,AAqB7B;;AAmBA,AAAA;;;;AAAA,AAAAjB,AAAMmK;AAAN,AAAA,AAAAtF,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsF,AAAA,AAAA,AAAA,AAAAnF;;;AAAA,AAAA,AAAA,AAAA,AAAMmF,AAGHpJ,AAAIuJ;AAHP,AAIE,AAAA,AAAgBvJ,AAAEwJ;AAAlB,AACU,AAEC,AAACC,AAAKD;AACN,AAAMjB,AAAG,AAAI,AAACkB,AAAK,AAACC,AAAI,AAACpF,AAAMkF,AACpB,AAAAG,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAlM,AAAAgM;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAAE,AAAA,AAAA1F,AAAAyF;AAAA,AAAA5O,AAAA6O,AAAA,AAAA,AAAOoB;AAAP,AAAAjQ,AAAA6O,AAAA,AAAA,AAASqB;AAAT,AAAA,AAAApB,AAAA;AAAAC;AAAA,AAAA,AAAAL,AAAA,AAAA;;AAAA,AAAA,AAAAK,AAAAA;;AAAA,AAAA,AAAAJ,AAAA,AAAAlM,AAAAsM;AAAA,AAAA,AAAAJ;AAAA,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAA,AAAAK,AAAAD;AAAA,AAAAE,AAy/D2B,AAAA8C,AAAAhD;AAz/D3BG,AAAA,AAAA/N,AAAA8N;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAAI,AAAA,AAAAvM,AAAAkM,AAAAI;AAAA,AAAArP,AAAAsP,AAAA,AAAA,AACOa;AADP,AAAAnQ,AAAAsP,AAAA,AAAA,AACWc;AADX,AAAA,AAAA,AAAAb,AAAAJ,AAAA,AAEGc,AAAEE,AAAIC;;AAFT,AAAA,AAAAf,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAZ;;AAAA,AAAAS,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAAS,AAAA,AAAAzG,AAAA4F;AAAA,AAAA/O,AAAA4P,AAAA,AAAA,AACOO;AADP,AAAAnQ,AAAA4P,AAAA,AAAA,AACWQ;AADX,AAAA,AAAAP,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAAf,AAEGkB,AAAEE,AAAIC;;;AAFT;;;;;AAAA,AAAA;;;AAAAL,AAAA,AAAAtN,AAAA,AAAAqM,AACeoB;AADf,AAAA,AAAAH;AAAA,AAAAvP,AAAAuP,AAAA,AAAAC,AAAA,AAAAF,AAAArB;;AAAA,AAAA,AAAAqB,AAAArB;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAeH;AAGf,AAAAG,AAAA,AAAA6B;AAAA,AAAA,AAAA3B,AAAA,AAAA;AAAA,AAAA,AAAA2B,AAAAA;;AAAA,AAAA,AAAA1B,AAAA,AAAAlM,AAAA4N;AAAA,AAAA,AAAA1B;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA2B,AAAA,AAAAnH,AAAAyF;AAAA,AAAA5O,AAAAsQ,AAAA,AAAA,AAAOL;AAAP,AAAAjQ,AAAAsQ,AAAA,AAAA,AAASJ;AAAT,AAAA,AAAApB,AAAA;AAAAyB;AAAA,AAAA,AAAA7B,AAAA,AAAA;;AAAA,AAAA,AAAA6B,AAAAA;;AAAA,AAAA,AAAA5B,AAAA,AAAAlM,AAAA8N;AAAA,AAAA,AAAA5B;AAAA,AAAA,AAAA4B,AAAA5B;AAAA,AAAA,AAAA,AAAAK,AAAAuB;AAAA,AAAAtB,AAs/D2B,AAAA8C,AAAAxB;AAt/D3BrB,AAAA,AAAA/N,AAAA8N;AAAAuB,AAAA,AAAApB,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAuB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAvB;AAAA,AAAA,AAAAnM,AAAAkM,AAAAwB,AACMN;AADN,AAAA,AAAA,AAAAZ,AAAAiB,AAAA,AAEGP,AAAEE;;AAFL,AAAA,AAAAM,AAAA;;;;AAAA;;;;;AAAA,AAAAjB,AAAA,AAAAC,AAAAe,AAAA,AAAAE,AAAA,AAAAf,AAAAY;;AAAA,AAAAf,AAAA,AAAAC,AAAAe,AAAA;;;AAAA,AAAA,AAAArH,AAAAoH,AACMJ;AADN,AAAA,AAAAN,AAAA,AAAA,AAAAa,AAAA,AAAAZ,AAAAS,AAEGN,AAAEE;;;AAFL;;;;;AAAA,AAAA;;;AAAAJ,AAAA,AAAAtN,AAAA,AAAAqM,AACUoB;AADV,AAAA,AAAAH;AAAA,AAAAvP,AAAAuP,AAAA,AAAAY,AAAA,AAAAb,AAAAO;;AAAA,AAAA,AAAAP,AAAAO;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAA7B,AAAeH;;AAJ1B,AAOMxJ,AACA,AAAC+L,AAAW,AAAC3I,AAAKoG,AAClB,AAACwC,AAAWzD;;AAZnB,AAcC,AAAC1I,AAAM2J;AAAM,AAAA,AAACwC,AAAWhM,AAAGwJ;;AAd7B,AAgBO,AAAC7F,AAAS3D,AAAEwJ;;;;;AAjB7B,AAkBE,AAAC1O,AAAOmR,AAAMjM,AAAEuJ;;;AAtBpB,AAAA,AAAA,AAAMH;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAhF,AAAA+E;AAAAA,AAAA,AAAA9E,AAAA8E;AAAA,AAAA,AAAA7E,AAAA;AAAA,AAAA,AAAAA,AAAA8E,AAAAD;;;AAAA,AAyBA,AAAA,AAAA,AAAApK,AAAMiN;AAAN,AAAA,AAAApI,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoI,AAAAjI;;;AAAA,AAAA,AAAA,AAAA,AAAMiI,AAAc3C;AAApB,AACE,AAAClE,AAAM+D,AAAY,AAAA7G,AAAA,AAAA,AAAA,AAAA,AAAA,AAAgCgH;;;AADrD,AAAA,AAAA,AAAM2C;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxO,AAAAuO;;;AAAA,AAIA,AAAA,AAAA,AAAAlN,AAAMoN;AAAN,AAAA,AAAAvI,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuI,AAAApI;;;AAAA,AAAA,AAAA,AAAA,AAAMoI,AAAgB9C;AAAtB,AACE,AAAClE,AAAM+D,AAAY,AAAA3H,AAAA,AAAA,AAAA,AAAA,AAAA,AAAkC8H;;;AADvD,AAAA,AAAA,AAAM8C;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxO,AAAA0O;;;AAAA,AAIA;;;AAAA,AAAMC,AAEHvM;AAFH,AAGE,AAAC4G,AAAO,AAAA,AAAC4F,AAAuB,AAACC,AAAMzM;;AAGzC;;;AAAA,AAAM0M,AAEH1M;AAFH,AAGE,AAAA,AAAC2M;;AACD,AAAA,AAACA,AAAQ,AAACrQ,AAAM,AAACsQ,AAAM5M;;AACvB,AAAA6M,AAAA,AAAAjP,AAAa,AAACgP,AAAM5M;AAApB8M,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ/J;AAAR,AAAA,AACE,AAAA,AAAC0J,AAAa1J,AAAK,AAAMkK,AAAE,AAACC,AAAMpN,AAAEiD;AAAjB,AAAwB,AAAI,AAACrF,AAAIuP;AAAGA;;AAAZ;;;;AAD7C;AAAA,AAAAN;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAlD,AAAA,AAAAlM,AAAAiP;AAAA,AAAA,AAAA/C;AAAA,AAAA,AAAA+C,AAAA/C;AAAA,AAAA,AAAA,AAAAK,AAAA0C;AAAA,AAAAI,AAAA,AAAAC,AAAAL;AAAA,AAAA,AAAA,AAAA/B,AAAA+B;AAAAI;AAAA,AAAA3Q,AAAA2Q;AAAA;;;;;;;AAAA,AAAA,AAAA3I,AAAAuI,AAAQ5J;AAAR,AAAA,AACE,AAAA,AAAC0J,AAAa1J,AAAK,AAAMkK,AAAE,AAACC,AAAMpN,AAAEiD;AAAjB,AAAwB,AAAI,AAACrF,AAAIuP;AAAGA;;AAAZ;;;;AAD7C;AAAA,AAAA,AAAA5I,AAAAsI;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAEA,AAAA,AAACF,AAAQ,AAACrQ,AAAM,AAACmQ,AAAMzM;;AACvB,AAAAqN,AAAA,AAAAzP,AAAa,AAAC6O,AAAMzM;AAApBsN,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQxO;AAAR,AAAA,AACE,AAAA,AAAA,AAAC2N,AAAa,AAACjN,AAAIV,AAAW,AAACW,AAAKX,AAC3B,AAAMmO,AAAE,AAACC,AAAMpN,AAAEhB;AAAjB,AACE,AAAI,AAACpB,AAAIuP;AAAGA;;AAAZ;;;;AAHb;AAAA,AAAAE;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAA1D,AAAA,AAAAlM,AAAAyP;AAAA,AAAA,AAAAvD;AAAA,AAAA,AAAAuD,AAAAvD;AAAA,AAAA,AAAA,AAAAK,AAAAkD;AAAA,AAAAJ,AAAA,AAAAC,AAAAG;AAAA,AAAA,AAAA,AAAAvC,AAAAuC;AAAAJ;AAAA,AAAA3Q,AAAA2Q;AAAA;;;;;;;AAAA,AAAA,AAAA3I,AAAA+I,AAAQrO;AAAR,AAAA,AACE,AAAA,AAAA,AAAC2N,AAAa,AAACjN,AAAIV,AAAW,AAACW,AAAKX,AAC3B,AAAMmO,AAAE,AAACC,AAAMpN,AAAEhB;AAAjB,AACE,AAAI,AAACpB,AAAIuP;AAAGA;;AAAZ;;;;AAHb;AAAA,AAAA,AAAA5I,AAAA8I;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAMF,AAAA;;;AAAA,AAAApO,AAAMwO;AAAN,AAAA,AAAA3J,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2J,AAAAxJ;;;AAAA,AAAA,AAAA,AAAA,AAAMwJ,AAEDE;AAFL,AAGE,AAAC7S,AAAO,AAAC8S,AAAQC,AAAgBC,AAAmBH;;;AAHtD,AAAA,AAAA,AAAMF;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAArB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxO,AAAA8P;;;AAAA,AAMA;;;AAAA,AAAMK,AAEH/N;AAFH,AAGE,AAAMgO,AAAE,AAACC,AAAKjO;AAAd,AACE,AAAI,AAACnD,AAAEmR,AAAEE,AACL,AAACrR,AAAEmR,AAAEG","names":["x__4487__auto__","m__4488__auto__","extra-loom.multigraph/id","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","extra-loom.multigraph/mirrored?","extra-loom.multigraph/Identified","this","this__4439__auto__","k__4440__auto__","this__4441__auto__","k36768","else__4442__auto__","G__36780","cljs.core/Keyword","id","src","dest","mirrored?","cljs.core.get","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce","ret__4461__auto__","p__36782","vec__36783","k__4462__auto__","cljs.core.nth","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__36767","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","coll__4436__auto__","cljs.core/hash-unordered-coll","this36769","other36770","cljs.core._EQ_","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__36795","cljs.core/keyword-identical?","expr__36796","cljs.core.assoc","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","extra-loom.multigraph/UniqueEdge","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__36775","extmap__4478__auto__","G__36798","cljs.core/record?","extra-loom.multigraph/->UniqueEdge","extra-loom.multigraph/map->UniqueEdge","cljs.core/PROTOCOL_SENTINEL","edge","var_args","G__36812","extra-loom.multigraph/make-edge","js/Error","cljs.core/random-uuid","extra-loom.multigraph/unique-edge?","e","extra-loom.multigraph/edge-equiv?","other","loom.graph/src","loom.graph/dest","cljs.core.not_EQ_","extra-loom.multigraph/edge?","extra-loom.multigraph/edges-between","extra-loom.multigraph/MultipleEdge","g","n1","n2","extra-loom.multigraph/edges-between*","cljs.core.get_in","extra-loom.multigraph/edges-of-type","edge-type","p__36843","vec__36844","acc","k","v","cljs.core/vals","tool-belt.core/join","k36851","G__36857","nodemap","attrs","p__36865","vec__36867","G__36850","this36852","other36853","pred__36893","expr__36894","extra-loom.multigraph/MultiEdgeEditableDigraph","G__36854","G__36918","extra-loom.multigraph/->MultiEdgeEditableDigraph","extra-loom.multigraph/map->MultiEdgeEditableDigraph","k36927","G__36936","p__36937","vec__36938","G__36926","this36928","other36929","pred__36951","expr__36952","extra-loom.multigraph/MultiEdgeEditableGraph","G__36934","G__36966","extra-loom.multigraph/->MultiEdgeEditableGraph","extra-loom.multigraph/map->MultiEdgeEditableGraph","extra-loom.multigraph/digraph?","cljs.core/boolean","cljs.core/native-satisfies?","loom.graph/Digraph","extra-loom.multigraph/has-node?*","node","extra-loom.multigraph/edges*","extra-loom.multigraph/nodes*","cljs.core/keys","extra-loom.multigraph/ins","p__36988","vec__36990","tool-belt.core/in?","extra-loom.multigraph/add-in-edges","cljs.core/assoc-in","extra-loom.multigraph/add-node","cljs.core.update_in","cljs.core/merge","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","extra-loom.multigraph/add-nodes","seq36998","G__36999","cljs.core/first","cljs.core/next","self__4776__auto__","nodes","extra-loom.multigraph/reverse-edge","extra-loom.multigraph/mirrored-edge","extra-loom.multigraph/add-mirrored-edge","s","d","e-mirror","cljs.core.fnil","cljs.core/conj","extra-loom.multigraph/add-edge","p__37018","map__37019","cljs.core.apply","cljs.core/hash-map","seq37008","G__37009","G__37010","vec__37024","am","extra_loom.multigraph.make_edge","tool_belt.core.apply_to_if","extra_loom.multigraph.add_nodes","extra-loom.multigraph/excise-edge","m","edges-after","cljs.core/empty?","extra-loom.multigraph/remove-unique-edge","map__37030","out-edges-after","cljs.core.disj","in-edges-after","cljs.core/dissoc","extra-loom.multigraph/remove-edge","edges","p1__37034#","cljs.core.filter","extra-loom.multigraph/remove-node","tool-belt.core/dissoc-in","tool_belt.core.update_in_all","extra-loom.multigraph/remove-empty-edge-containers","tool-belt.core/dissoc-in-when","extra-loom.multigraph/reverse-edges","p__37041","vec__37042","cljs.core.map","extra-loom.multigraph/swap-ins-outs","G__37052","extra-loom.multigraph/add-attr-to-edge","p1__37047#","p2__37048#","extra_loom.multigraph.add_attr_to_edge","extra-loom.multigraph/add-attr-to-node","G__37058","extra-loom.multigraph/remove-attr-from-edge","tool-belt.core/dissoc-in-clean","p1__37055#","p2__37056#","extra_loom.multigraph.remove_attr_from_edge","extra-loom.multigraph/remove-attr-from-node","G__37079","extra-loom.multigraph/attr*","node-or-edge","es","ats","at","extra_loom.multigraph.attr_STAR_","G__37086","extra-loom.multigraph/attrs*","atts","extra_loom.multigraph.attrs_STAR_","cljs.core/some","tool-belt.core/update-in-all","p1__37099#","p2__37100#","extra_loom.multigraph.add_edge","extra-loom.multigraph/build-graph","seq37151","G__37152","inits","init","cljs.core/map?","cljs.core/val","iter__4582__auto__","s__37211","cljs.core/LazySeq","temp__5735__auto__","xs__6292__auto__","vec__37216","iterys__4578__auto__","s__37213","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__37215","cljs.core/chunk-buffer","i__37214","vec__37219","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__37212","cljs.core/chunk-rest","vec__37222","cljs.core/cons","cljs.core/rest","fs__4579__auto__","iter__37210","n","nbrs","nbr","wt","s__37226","vec__37232","s__37228","b__37230","i__37229","iter__37227","iter__37225","loom.graph/add-nodes*","loom.graph/add-edges*","build","extra-loom.multigraph/multigraph","seq37236","self__4777__auto__","extra-loom.multigraph/multidigraph","seq37238","extra-loom.multigraph/distinct-edges","cljs.core/complement","loom.graph/edges","extra-loom.multigraph/pprint","cljs.core.println","loom.graph/nodes","seq__37241","chunk__37242","count__37243","i__37244","c__4609__auto__","cljs.core/chunk-first","a","loom.attr/attrs","seq__37246","chunk__37247","count__37248","i__37249","extra-loom.multigraph/merge-graphs","seq37253","gs","cljs.core.partial","tool-belt.core/deep-merge-with","clojure.set/union","extra-loom.multigraph/extra-loom-graph?","t","cljs.core/type","extra_loom.multigraph/MultiEdgeEditableDigraph","extra_loom.multigraph/MultiEdgeEditableGraph"],"sourcesContent":["(ns extra-loom.multigraph\n  (:require\n   [tool-belt.core\n    :refer [in? not-in? apply-to-if join update-in-all dissoc-in dissoc-in-when\n            dissoc-in-clean update-in-all-if deep-merge-with]]\n   [loom.graph :refer [Graph ;; the Graph protocol & its members\n                       nodes edges has-node? has-edge? successors* out-degree out-edges\n\n                       Digraph ;; the Digraph protocol & its members\n                       predecessors* in-degree in-edges transpose\n\n                       EditableGraph ;; the EditableGraph protocol& members\n                       add-nodes* add-edges* remove-nodes* remove-edges* remove-all\n\n                       Edge\n                       src dest\n\n                       ;; any more vars needed by our implementation\n                       successors predecessors]]\n   [loom.graph :as lg]\n   [loom.attr  :refer [AttrGraph ;; the AttrGraph protocol & its members\n                       add-attr remove-attr attr attrs]]\n   #?@(:clj [[loom.cljs :refer (def-protocol-impls)]]))\n            #?@(:cljs [(:require-macros [loom.cljs :refer [def-protocol-impls extend]])]))\n\n;; ****** Edge ******\n\n(defprotocol Identified\n  (id [this] \"Returns the id of this.\")\n  (mirrored? [this] \"Returns true if this is a mirrored edge.\"))\n\n\n;; Record for an Edge that implements Loom's Edge protocol, and helper fns\n(defrecord UniqueEdge [id src dest mirrored?])\n\n\n(extend-type UniqueEdge\n  lg/Edge\n  (src [edge] (:src edge))\n  (dest [edge] (:dest edge))\n  Identified\n  (id [edge] (:id edge))\n  (mirrored? [edge] (:mirrored? edge)))\n\n\n(extend-type #?(:clj clojure.lang.IPersistentVector\n                :cljs cljs.core.PersistentVector)\n  Identified\n  (id [this] nil)\n  (mirrored? [this] false))\n\n\n(defn make-edge\n  \"Returns a new UniqueEdge instance from src and dest.\"\n  ([src dest]\n   (UniqueEdge.\n    #?(:clj (java.util.UUID/randomUUID)\n       :cljs (random-uuid))\n    src dest false))\n  ([src dest mirrored?]\n   (UniqueEdge.\n    #?(:clj (java.util.UUID/randomUUID)\n       :cljs (random-uuid))\n    src dest mirrored?)))\n\n\n(defn unique-edge?\n  \"Is e a UniqueEdge?\"\n  [e]\n  (instance? UniqueEdge e))\n\n\n(defn edge-equiv?\n  \"Does this edge have the same src and dest as the other?\"\n  [this other]\n  (or\n   (and (= (mirrored? this) (mirrored? other))\n        (= (src this) (src other))\n        (= (dest this) (dest other)))\n   (and (not= (mirrored? this) (mirrored? other))\n        (= (src this) (dest other))\n        (= (dest this) (src other)))))\n\n\n(defn edge?\n  \"Is e an edge?\"\n  [e]\n  (or (unique-edge? e)\n      (and (instance? #?(:clj clojure.lang.IPersistentVector\n                        :cljs cljs.core.PersistentVector) e)\n           (> (count e) 1))))\n\n\n;; ****** Graph ******\n\n;; A protocol for additional utilities required by MultipleEdges (between the same two nodes).\n(defprotocol MultipleEdge\n  (edges-between [g n1 n2] \"Returns the edges in g between two nodes.\"))\n\n\n(defn edges-between* [g n1 n2] (get-in g [:nodemap n1 :out-edges n2]))\n\n\n(defn- edges-of-type\n  \"Fetches the edges in the graph of edge-type which should be either\n   :in-edges or :out-edges.\"\n  [g edge-type]\n  (reduce\n   (fn [acc [k v]] (concat acc (-> v edge-type vals join)))\n   #{}\n   (:nodemap g)))\n\n\n;; A MultiEdge Graphs/ Digraphs allows for multiple edges between the same two nodes.\n(defrecord MultiEdgeEditableDigraph [nodemap attrs])\n\n\n(defrecord MultiEdgeEditableGraph [nodemap attrs])\n\n\n(defn digraph?\n  [g]\n  (boolean (satisfies? Digraph g)))\n\n\n(defn- has-node?*\n  \"Is node in g?\"\n  [g node]\n  (boolean (get-in g [:nodemap node])))\n\n\n(defn- edges*\n  \"Returns the edges of the graph.\"\n  [g]\n  (edges-of-type g :out-edges))\n\n\n(defn- nodes*\n  \"Returns the nodes of the graph.\"\n  [g]\n  (into #{} (keys (:nodemap g))))\n\n\n;; EditableGraph\n\n(defn- ins\n  \"Returns the in-edges of the node.\"\n  [g node]\n  (reduce\n   (fn [acc [k v]]\n     (if (in? (keys (:out-edges v)) node)\n       (assoc acc k (get-in v [:out-edges node]))\n       acc))\n   {}\n   (:nodemap g)))\n\n\n(defn- add-in-edges\n  \"Adds the in-edges of the node to the node.\"\n  [g node]\n  (assoc-in g [:nodemap node :in-edges] (ins g node)))\n\n\n(defn- add-node\n  \"Adds the node to the graph.\"\n  [g node]\n  (-> g\n      (update-in [:nodemap node :out-edges] merge {})\n      (add-in-edges node)))\n\n\n(defn- add-nodes\n  \"Adds the nodes to the graph.\"\n  [g & nodes] (reduce add-node g nodes))\n\n\n(defn- reverse-edge\n  \"Reverses the direction of an edge.\"\n  [e]\n  (assoc e :src (dest e) :dest (src e)))\n\n\n(defn- mirrored-edge\n  \"Creates a mirrored edge.\"\n  [e]\n  (assoc (reverse-edge e) :mirrored? true))\n\n\n(defn- add-mirrored-edge\n  \"Creates a mirrored edge of e and adds to the graph.\"\n  [g e]\n  (let [s (src e)\n        d (dest e)\n        e-mirror (mirrored-edge e)]\n    (-> g\n        (update-in [:nodemap d :out-edges s] (fnil conj #{}) e-mirror)\n        (update-in [:nodemap s :in-edges d] (fnil conj #{}) e-mirror))))\n\n\n(defn- add-edge\n  \"Adds an edge to the graph. The edge should be either a 2-vector [src dest]\n  or a 3-vector [src dest attr-map]. mirrored? indicates a mirrored edge in a graph, not digraph.\"\n  [g edge & {:keys [mirrored?] :or {mirrored? false}}]\n  (let [[s d am] edge   ;; destructure into src dest attrp-map\n        e (make-edge s d)]      \n        (-> g\n              (update-in [:nodemap s :out-edges d] (fnil conj #{}) e)\n              (apply-to-if mirrored? add-mirrored-edge e)\n              (add-nodes s d) ;; to add d non-destructively & capture the in-edges for s & d.\n              (apply-to-if am assoc-in [:attrs (:id e)] am))))\n\n\n(defn- excise-edge\n  [m k edges-after]\n  (if (empty? edges-after)\n    (dissoc m k)\n    (assoc m k edges-after)))\n\n\n(defn- remove-unique-edge\n  \"Removes a unique edge from the graph.\"\n  [g e]\n  (let [{s :src d :dest id :id} e\n        out-edges-after (disj (edges-between* g s d) e)\n        in-edges-after (disj (edges-between* g d s) e)]\n    (-> g\n        (update-in [:nodemap s :out-edges] excise-edge d out-edges-after)\n        (update-in [:nodemap d :in-edges] excise-edge s in-edges-after)\n        (update-in [:nodemap s :in-edges] excise-edge d in-edges-after)\n        (update-in [:nodemap d :out-edges] excise-edge s out-edges-after)\n        (update-in [:attrs] dissoc id))))\n\n\n(defn- remove-edge\n  \"Removes the edge from the graph.\"\n  [g e]\n  (let [edges (cond\n                (unique-edge? e) (list e)\n                :else (->> (edges-between* g (src e) (dest e))\n                           (filter #(edge-equiv? e %))))]\n    (reduce remove-unique-edge g edges)))\n\n\n(defn- remove-node\n  \"Removes the node from the graph.\"\n  [g node]\n  (-> g\n      (dissoc-in [:nodemap node])\n      (dissoc-in [:attrs node])\n      ;; remove orphaned in-edges\n      (update-in-all [:nodemap :all :in-edges] dissoc node)\n      (update-in-all [:nodemap :all :out-edges] dissoc node)))\n\n\n(defn- remove-empty-edge-containers\n  \"Removes any empty entries in in-edges and out-edges. clean up\"\n  [g]\n  (-> g\n      (dissoc-in-when [:nodemap :all :out-edges :all] empty?)\n      (dissoc-in-when [:nodemap :all :in-edges :all] empty?)))\n\n\n(defn- reverse-edges\n  \"Reverses all the edges in a map of :out-edges or :in-edges\"\n  [m]\n  (reduce\n   (fn [acc [k v]] (assoc acc k (into #{} (map reverse-edge v))))\n   {}\n   m))\n\n\n(defn- swap-ins-outs\n  \"Swaps in-edges with out-edges and reverse the direction of each edge in both.\"\n  [m]\n  (assoc m\n         :out-edges (reverse-edges (:in-edges m))\n         :in-edges (reverse-edges (:out-edges m))))\n\n\n;; attrs\n\n(defn- add-attr-to-edge\n  \"Adds an attr to an edge in the graph.\"\n  ([g edge k v]\n   (assoc-in g [:attrs (id edge) k] v))\n  ([g n1 n2 k v]\n   (reduce #(add-attr-to-edge %1 %2 k v) g (edges-between g n1 n2))))\n\n\n(defn- add-attr-to-node\n  \"Adds an attr to the node in the graph.\"\n  [g node k v]\n  (assoc-in g [:attrs node k] v))\n\n\n(defn- remove-attr-from-edge\n  \"Removes an attr from the edge in the graph.\"\n  ([g edge k]\n   (dissoc-in-clean g [:attrs (id edge) k]))\n  ([g n1 n2 k]\n   (reduce #(remove-attr-from-edge %1 %2 k) g (edges-between g n1 n2))))\n\n\n(defn- remove-attr-from-node\n  \"Removes an attr from the node in the graph.\"\n  [g node k]\n  (dissoc-in-clean g [:attrs node k]))\n\n\n(defn- attr*\n  \"Returns the attr with key k or a map of values for the node or edge in the graph.\n  A map of values {edge-id attr) is returned when the edge is specified as n1 n2\n  and so is (potentially) ambiguous.\"\n  ([g node-or-edge k]\n   (cond\n     (unique-edge? node-or-edge) (get-in g [:attrs (id node-or-edge) k])\n     :else                       (get-in g [:attrs node-or-edge k])))\n  ([g n1 n2 k]\n   (let [es (edges-between g n1 n2)]\n     (reduce\n      (fn [ats edge]\n        (let [at (attr* g edge k)]\n          (if at (assoc ats (id edge) at) ats)))\n      nil\n      es))))\n\n\n(defn- attrs*\n  \"Returns the attrs or a map of values for the node or edge in the graph.\n  A map of values {edge-id attrs) is returned when the edge is specified as n1 n2\n  and so is (potentially) ambiguous.\"\n  ([g node-or-edge]\n   (cond\n     (unique-edge? node-or-edge) (get-in g [:attrs (id node-or-edge)])\n     :else                       (get-in g [:attrs node-or-edge])))\n  ([g n1 n2]\n   (let [es (edges-between g n1 n2)]\n     (reduce\n      (fn [atts edge]\n        (let [ats (attrs* g edge)]\n          (if ats (assoc atts (id edge) ats) atts)))\n      nil\n      es))))\n\n\n;; Default implementations of the protocols\n(def-protocol-impls ^:private impl-graph\n  {:nodes (fn [g] (nodes* g))\n   :edges (fn [g] (edges* g))\n   :has-node? (fn [g node] (contains? (nodes* g) node))\n   :has-edge? (fn [g n1 n2] (let [m (get-in g [:nodemap n1 :out-edges])] (boolean (some #{n2} (keys m)))))\n   :successors* (fn [g node] (keys (get-in g [:nodemap node :out-edges])))\n   :out-degree (fn [g node] (count (join (vals (get-in g [:nodemap node :out-edges])))))\n   :out-edges (fn [g node] (join (vals (get-in g [:nodemap node :out-edges]))))})\n\n\n(def-protocol-impls ^:private impl-digraph\n  {:predecessors* (fn [g node] (keys (get-in g [:nodemap node :in-edges])))\n   :in-degree (fn [g node] (count (join (vals (get-in g [:nodemap node :in-edges])))))\n   :in-edges (fn [g node] (join (vals (get-in g [:nodemap node :in-edges]))))     \n   :transpose (fn [g] (update-in-all g [:nodemap :all] swap-ins-outs))})\n\n\n(def-protocol-impls ^:private impl-editablegraph\n  {:add-nodes* (fn [g nodes] (apply add-nodes g nodes))\n   :add-edges* (fn [g edges] (if (digraph? g)\n                               (reduce add-edge g edges)\n                               (reduce #(add-edge %1 %2 :mirrored? true) g edges)))\n   :remove-nodes* (fn [g nodes] (reduce remove-node g nodes))\n   :remove-edges* (fn [g edges] (remove-empty-edge-containers (reduce remove-edge g edges)))\n   :remove-all (fn [g] (assoc g :nodemap {} :attrs {}))})\n\n\n(def-protocol-impls ^:prviate impl-multipleedge\n  {:edges-between (fn [g n1 n2] (edges-between* g n1 n2))})\n\n\n(def-protocol-impls ^:private impl-attrgraph\n  {:add-attr\n   (fn\n     ([g node-or-edge k v] (if (unique-edge? node-or-edge)\n                               (add-attr-to-edge g node-or-edge k v)\n                               (add-attr-to-node g node-or-edge k v)))\n     ([g n1 n2 k v] (add-attr-to-edge g n1 n2 k v)))\n   :remove-attr\n   (fn\n     ([g node-or-edge k] (if (unique-edge? node-or-edge)\n                             (remove-attr-from-edge g node-or-edge k)\n                             (remove-attr-from-node g node-or-edge k)))\n     ([g n1 n2 k] (remove-attr-from-edge g n1 n2 k)))\n   :attr\n   (fn\n     ([g node-or-edge k] (attr* g node-or-edge k))\n     ([g n1 n2 k] (attr* g n1 n2 k)))\n   :attrs\n   (fn\n     ([g node-or-edge] (attrs* g node-or-edge))\n     ([g n1 n2] (attrs* g n1 n2)))})\n\n\n;; ****** Public API ******\n\n;; A multigraph\n(extend MultiEdgeEditableGraph\n  Graph\n  impl-graph\n\n  EditableGraph\n  impl-editablegraph\n\n  MultipleEdge\n  impl-multipleedge\n\n  AttrGraph\n  impl-attrgraph)\n\n\n;; A multidigraph\n(extend MultiEdgeEditableDigraph\n  Graph\n  impl-graph\n\n  Digraph\n  impl-digraph\n\n  EditableGraph\n  impl-editablegraph\n\n  MultipleEdge\n  impl-multipleedge\n\n  AttrGraph\n  impl-attrgraph)\n\n\n;; building\n\n(defn build-graph\n  \"Builds up a graph (i.e. adds edges and nodes) from any combination of\n  adjacency maps, edges, or nodes.\"\n  [g & inits]\n  (letfn [(build [g init]\n            (cond\n             ;; adacency map\n             (map? init)\n             (let [es (if (map? (val (first init)))\n                        (for [[n nbrs] init\n                              [nbr wt] nbrs]\n                          [n nbr wt])\n                        (for [[n nbrs] init\n                              nbr nbrs]\n                          [n nbr]))]\n               (-> g\n                   (add-nodes* (keys init))\n                   (add-edges* es)))\n             ;; edge\n             (edge? init) (add-edges* g [init])\n             ;; node\n             :else (add-node g init)))]\n    (reduce build g inits)))\n\n\n(defn multigraph [& inits]\n  (apply build-graph (MultiEdgeEditableGraph. {} {}) inits))\n\n\n(defn multidigraph [& inits]\n  (apply build-graph (MultiEdgeEditableDigraph. {} {}) inits))\n\n\n(defn distinct-edges\n  \"The distinct edges in the graph. eliminates mirrored edges.\"\n  [g]\n  (filter (complement :mirrored?) (edges g)))\n\n\n(defn pprint\n  \"Pretty print a multidigraph\"\n  [g]\n  (println \"Multidigraph\")\n  (println (count (nodes g)) \"Nodes:\")\n  (doseq [node (nodes g)]\n    (println \\tab node (let [a (attrs g node)] (if (seq a) a \"\"))))\n  (println (count (edges g)) \"Edges:\")\n  (doseq [edge (edges g)]\n    (println \\tab (src edge) \"->\" (dest edge)\n             (let [a (attrs g edge)]\n               (if (seq a) a \"\")))))\n\n\n(defn merge-graphs\n  \"Merges multigraphs or multidigraphs.\"\n  [& gs]\n  (reduce (partial deep-merge-with clojure.set/union) gs))\n\n\n(defn extra-loom-graph?\n  \"Returns true is g is an extra-loom graph.\"\n  [g]\n  (let [t (type g)]\n    (or (= t extra_loom.multigraph.MultiEdgeEditableDigraph)\n        (= t extra_loom.multigraph.MultiEdgeEditableGraph))))\n"]}