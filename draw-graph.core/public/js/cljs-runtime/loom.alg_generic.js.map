{"version":3,"sources":["loom/alg_generic.cljc"],"mappings":"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","names":["loom.alg-generic/trace-path","preds","node","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core/iterate","loom.alg-generic/paths","path","this-node","cljs.core/peek","p1__34184#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/not-any?","edge","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.partition.cljs$core$IFn$_invoke$arity$3","p1__34186#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","G__34187","G__34188","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/cons","loom.alg-generic/trace-paths","start","p1__34189#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","G__34190","loom.alg-generic/preds->span","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__34191","vec__34192","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","span","n","p","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__34195","G__34196","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","loom.alg-generic/pre-traverse","p__34200","map__34201","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq34197","G__34198","cljs.core/first","cljs.core/next","G__34199","self__4717__auto__","successors","seen","stack","temp__5720__auto__","cljs.core/contains?","step","cljs.core/pop","nbrs","cljs.core/LazySeq","cljs.core.into.cljs$core$IFn$_invoke$arity$2","loom.alg-generic/pre-edge-traverse","p__34271","map__34272","seq34261","G__34262","G__34263","nbrstack","temp__5718__auto__","nbr","parent","loom.alg-generic/pre-span","p__34303","map__34305","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq34294","G__34295","G__34296","return-seen","cljs.core/empty?","v","u","loom.alg-generic/post-traverse","p__34330","map__34331","seq34323","G__34324","G__34325","result","loom.alg-generic/post-edge-traverse","p__34364","map__34367","seq34349","G__34350","G__34351","edges","G__34383","loom.alg-generic/topsort-component","js/Error","loom.alg_generic.topsort_component.cljs$core$IFn$_invoke$arity$4","explored","us","cljs.core/seq","cljs.core/some","loom.alg-generic/bf-traverse","p__34417","map__34419","seq34411","G__34412","G__34413","f","when","or__4131__auto__","d","nbr-pred","cljs.core/constantly","queue","vec__34472","depth","p1__34407#","p1__34408#","G__34476","G__34477","G__34478","iter__4523__auto__","s__34481","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__34483","cljs.core/chunk-buffer","i__34482","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__34480","cljs.core/chunk-rest","cljs.core/rest","p1__34409#","p2__34410#","cljs.core/PersistentQueue","cljs.core/map?","s__34492","b__34494","i__34493","iter__34491","s","loom.alg-generic/bf-span","p__34515","map__34516","seq34510","G__34511","G__34512","cljs.core/last","loom.alg_generic.bf_traverse.cljs$core$IFn$_invoke$arity$variadic","_","pm","loom.alg-generic/bf-path","p__34531","map__34532","seq34523","G__34524","G__34525","G__34526","end","opts","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/vector","p__34535","vec__34536","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/concat","cljs.core/reverse","loom.alg-generic/shared-keys","m1","m2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","loom.alg-generic/bf-path-bi","outgoing","predecessors","loom.alg-generic/reverse-edges","successor-fn","nodes","coll","s__34556","xs__6277__auto__","iterys__4519__auto__","s__34558","b__34560","i__34559","iter__34557","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__34555","loom.alg-generic/conj-paths","from-map","to-map","matches","s__34592","s__34594","s__34596","b__34598","i__34597","iter__34595","iter__34593","iter__34591","from","cljs.core.map.cljs$core$IFn$_invoke$arity$2","to","cljs.core/vec","loom.alg-generic/bf-paths-bi","find-succs","find-preds","overlaps","q","p1__34609#","map-set-pairs","map","pairs","cljs.core/persistent!","p__34612","vec__34613","key","val","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/transient","incoming","q1","cljs.core/List","q2","all","cljs.core/set","G__34630","loom.alg-generic/dijkstra-traverse","dist","loom.alg_generic.dijkstra_traverse.cljs$core$IFn$_invoke$arity$4","p__34685","vec__34686","state","pq","vec__34695","dist-su","fpq","p__34703","vec__34704","dist-suv","dist-sv","and__4120__auto__","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","cljs.core/hash","cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic","loom.alg-generic/dijkstra-span","p__34725","vec__34726","vec__34729","cljs.core/assoc-in","cljs.core/second","loom.alg_generic.dijkstra_traverse.cljs$core$IFn$_invoke$arity$3","loom.alg-generic/dijkstra-path-dist","vec__34751","end-state","p__34743","vec__34744","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","loom.alg-generic/dijkstra-path","loom.alg-generic/bits-per-long","cljs.core/long","loom.alg-generic/bm-longs","bits","G__34768","Math/ceil","loom.alg-generic/bm-new","cljs.core.long_array.cljs$core$IFn$_invoke$arity$1","loom.alg-generic/bm-copy","bm","size","loom.alg-generic/bm-set","bitmap","idx","x__4219__auto__","y__4220__auto__","new-bitmap","chunk","cljs.core/quot","offset","cljs.core/mod","mask","value","new-value","loom.alg-generic/bm-get","masked-value","loom.alg-generic/bm-or","seq34798","self__4718__auto__","bitmaps","cljs.core/max","seq__34810","chunk__34817","count__34818","i__34819","seq__34820","chunk__34822","count__34823","i__34824","vec__34875","c__4550__auto__","cljs.core/chunk-first","vec__34878","seq__34811","chunk__34813","count__34814","i__34815","vec__34904","vec__34910","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/list","loom.alg-generic/bm-get-indicies","s__34919","s__34921","b__34923","i__34922","iter__34920","iter__34918","cljs.core.range.cljs$core$IFn$_invoke$arity$1","this__4385__auto__","k__4386__auto__","this__4387__auto__","k34930","else__4388__auto__","G__34965","cljs.core/Keyword","node->idx","idx->node","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","ret__4407__auto__","p__34986","vec__34987","k__4408__auto__","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core/PersistentVector","G__34929","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","this__4381__auto__","h__4243__auto__","fexpr__34997","coll__4382__auto__","cljs.core/hash-unordered-coll","this34931","other34932","this__4394__auto__","k__4395__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__35003","cljs.core/keyword-identical?","expr__35004","G__35006","G__35007","G__35008","G__35009","G__35011","G__35012","this__4397__auto__","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core/-conj","loom.alg-generic/Ancestry","this__4428__auto__","writer__4429__auto__","cljs.core/-write","G__34935","extmap__4424__auto__","G__35038","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","loom.alg-generic/->Ancestry","loom.alg-generic/map->Ancestry","loom.alg-generic/ancestry-new","loom.alg-generic/ancestry-contains?","ancestry","loom.alg-generic/ancestry-add","seq35044","G__35045","G__35046","parents","map__35049","nid","pidxs","loom.alg-generic/ancestor?","childer","parenter","map__35059","cidx","pidx","cljs.core/boolean","loom.alg-generic/ancestors","child","map__35068","loom.alg-generic/ancestry-nodes"],"sourcesContent":["(ns ^{:doc \"Graph algorithms for use on any type of graph\"\n      :author \"Justin Kramer\"}\n  loom.alg-generic\n  (:refer-clojure :exclude [ancestors]))\n\n#?(:clj (do (set! *warn-on-reflection* true)\n            ;(set! *unchecked-math* :warn-on-boxed)\n            ))\n\n;;;\n;;; Utility functions\n;;;\n\n(defn trace-path\n  \"Using a map of nodes-to-preds, traces a node's family tree back to the\n  source. Cycles are not accounted for.\"\n  [preds node]\n  (take-while identity (iterate preds node)))\n\n(defn paths\n  \"Returns a lazy seq of all non-looping path vectors starting with\n  [<start-node>]\"\n  [preds path]\n  (let [this-node (peek path)]\n    (->> (preds this-node)\n         (filter #(not-any? (fn [edge] (= edge [this-node %]))\n                            (partition 2 1 path)))\n         (mapcat #(paths preds (conj path %)))\n         (cons path))))\n\n(defn trace-paths\n  \"Given a function and a starting node, returns all possible paths\n  back to source. Cycles are not accounted for.\"\n  [preds start]\n  (remove #(preds (peek %)) (paths preds [start])))\n\n(defn preds->span\n  \"Converts a map of the form {node predecessor} to a spanning tree of the\n  form {node [successors]}\"\n  [preds]\n  (reduce\n   (fn [span [n p]]\n     (if p\n       (assoc span p (conj (span p []) n))\n       span))\n   {} preds))\n\n;;;\n;;; Depth-first traversal\n;;;\n\n(defn pre-traverse\n  \"Traverses a graph depth-first preorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  lazy seq of nodes.\"\n  [successors start & {:keys [seen] :or {seen #{}}}]\n  (letfn [(step [stack seen]\n            (when-let [node (peek stack)]\n              (if (contains? seen node)\n                (step (pop stack) seen)\n                (let [seen (conj seen node)\n                      nbrs (remove seen (successors node))]\n                  (lazy-seq\n                    (cons node\n                          (step (into (pop stack) nbrs)\n                                seen)))))))]\n    (step [start] seen)))\n\n(defn pre-edge-traverse\n  \"Traverses a graph depth-first preorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  lazy seq of edges, each edge being a vector [source-node dest-node].\n  Note that for undirected graphs each edge will be returned twice,\n  once for each direction.\"\n  [successors start & {:keys [seen] :or {seen #{}}}]\n  (letfn [(step [successors start nbrs stack nbrstack seen]\n    (if-let [nbr (first nbrs)]\n      (cons\n        [start nbr]\n        (lazy-seq\n          (let [seen (conj seen start)]\n            (if (seen nbr)\n              (step successors start (next nbrs) stack nbrstack seen)\n              (step successors nbr (successors nbr)\n                    (conj stack start) (conj nbrstack (next nbrs))\n                    seen)))))\n      (when-let [parent (peek stack)]\n        (recur successors parent (peek nbrstack)\n               (pop stack) (pop nbrstack) (conj seen start)))))]\n    (when-not (seen start)\n      (step successors start (successors start) [] [] (conj seen start)))))\n\n;; TODO: graph-seq, analog of tree-seq\n\n(defn pre-span\n  \"Returns a depth-first spanning tree of the form {node [successors]}\"\n  [successors start & {:keys [seen return-seen] :or {seen #{}}}]\n  (loop [seen seen\n         preds {start nil}\n         stack [start]]\n    (if (empty? stack)\n      ;; TODO: this is awkward, devise something better\n      (if return-seen\n        [(preds->span preds) seen]\n        (preds->span preds))\n      (let [v (peek stack)\n            seen (conj seen v)]\n        (if-let [u (first (remove seen (successors v)))]\n          (recur seen (assoc preds u v) (conj stack u))\n          (recur seen preds (pop stack)))))))\n\n(defn post-traverse\n  \"Traverses a graph depth-first postorder from start, successors\n  being a function that returns adjacent nodes. Returns a vector\"\n  [successors start & {:keys [seen return-seen] :or {seen #{}}}]\n  ;; For most graphs, being lazy wouldn't matter\n  (loop [seen seen\n         result []\n         stack [start]]\n    (if (empty? stack)\n      (if return-seen\n        [result seen]\n        result)\n      (let [v (peek stack)\n            seen (conj seen v)\n            nbrs (remove seen (successors v))]\n        (if (empty? nbrs)\n          (recur seen (conj result v) (pop stack))\n          (recur seen result (conj stack (first nbrs))))))))\n\n(defn post-edge-traverse\n  \"Traverses a graph depth-first postorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  seq of edges, each edge being a vector [source-node dest-node].\n  Note that for undirected graphs each edge will be returned twice,\n  once for each direction.\"\n  [successors start & {:keys [seen return-seen] :or {seen #{}}}]\n  (if (seen start)\n    (when return-seen\n      [nil seen])\n    (loop [start start\n          nbrs (successors start)\n          stack []\n          nbrstack []\n          seen seen\n          edges ()]\n      (let [seen (conj seen start)]\n        (if-let [nbr (first nbrs)]\n          (if (seen nbr)\n            (recur start (next nbrs) stack nbrstack seen (conj edges [start nbr]))\n            (recur nbr (successors nbr)\n                   (conj stack start) (conj nbrstack (next nbrs))\n                   seen (conj edges [start nbr])))\n          (if-let [parent (peek stack)]\n            (recur parent (peek nbrstack)\n                   (pop stack) (pop nbrstack) seen edges)\n            (if return-seen\n              [edges seen]\n              edges)))))))\n\n(defn topsort-component\n  \"Topological sort of a component of a (presumably) directed graph.\n  Returns nil if the graph contains any cycles. See loom.alg/topsort\n  for a complete topological sort\"\n  ([successors start]\n     (topsort-component successors start #{} #{}))\n  ([successors start seen explored]\n     (loop [seen seen\n            explored explored\n            result ()\n            stack [start]]\n       (if (empty? stack)\n         result\n         (let [v (peek stack)\n               seen (conj seen v)\n               us (remove explored (successors v))]\n           (if (seq us)\n             (when-not (some seen us)\n               (recur seen explored result (conj stack (first us))))\n             (recur seen (conj explored v) (conj result v) (pop stack))))))))\n\n;;;\n;;; Breadth-first traversal\n;;;\n\n(defn bf-traverse\n  \"Traverses a graph breadth-first from start, successors being a\n  function that returns adjacent nodes. When :f is provided, returns a\n  lazy seq of (f node predecessor-map depth) for each node traversed.\n  Otherwise, returns a lazy seq of the nodes. When :when is provided,\n  filters successors with (f neighbor predecessor depth).\"\n  [successors start & {:keys [f when seen]}]\n  (let [f (or f (fn [n p d] n))\n        nbr-pred (or when (constantly true))]\n    (letfn [(step [queue preds]\n              (when-let [[node depth] (peek queue)]\n                (cons\n                 (f node preds depth)\n                 (lazy-seq\n                  (let [nbrs (->> (successors node)\n                                  (remove #(contains? preds %))\n                                  (filter #(nbr-pred % node (inc depth))))]\n                    (step (into (pop queue) (for [nbr nbrs] [nbr (inc depth)]))\n                          (reduce #(assoc %1 %2 node) preds nbrs)))))))]\n      (step (conj #?(:clj clojure.lang.PersistentQueue/EMPTY\n                     :cljs cljs.core/PersistentQueue.EMPTY)\n                  [start 0])\n            (if (map? seen)\n              (assoc seen start nil)\n              (into {start nil} (for [s seen] [s nil])))))))\n\n(defn bf-span\n  \"Return a breadth-first spanning tree of the form {node\n  [successors]}\"\n  [successors start & {:keys [seen]}]\n  (preds->span\n   (last\n    (bf-traverse successors start\n                 :f (fn [_ pm _] pm)\n                 :seen seen))))\n\n(defn bf-path\n  \"Returns a path from start to end with the fewest hops (i.e. irrespective\n  of edge weights), successors being a function that returns adjacent nodes\"\n  [successors start end & {:as opts}]\n  (let [opts (merge opts {:f vector})]\n    (when-let [preds (some\n                      (fn [[_ pm _]] (when (pm end) pm))\n                      (apply bf-traverse successors start (apply concat opts)))]\n      (reverse (trace-path preds end)))))\n\n(defn- shared-keys\n  \"Returns a lazy-seq of the keys that exist in both m1 and m2\"\n  [m1 m2]\n  (if (< (count m2) (count m1))\n    (recur m2 m1)\n    (filter (partial contains? m2) (keys m1))))\n\n#?(:cljs\n   (defn bf-path-bi [outgoing predecessors start end]\n     (throw (js/Error. \"Unsupported operation `bf-path-bi`\")))\n   :clj\n   (defn bf-path-bi\n     \"Using a bidirectional breadth-first search, finds a path from start\n  to end with the fewest hops (i.e. irrespective of edge weights),\n  outgoing and predecessors being functions which return adjacent\n  nodes. Can be much faster than a unidirectional search on certain\n  types of graphs\"\n     [outgoing predecessors start end]\n     (let [done? (atom false)\n           preds1 (atom {})             ;from start to end\n           preds2 (atom {})             ;from end to start\n           search (fn [nbrs n preds]\n                    (dorun\n                     (take-while\n                      (fn [_] (not @done?))\n                      (bf-traverse\n                       nbrs n :f (fn [_ pm _] (reset! preds pm))))))\n           search1 (future (search outgoing start preds1))\n           search2 (future (search predecessors end preds2))\n           ;; TODO: watchers?\n           find-intersects #(shared-keys @preds1 @preds2)]\n       (loop [intersects (find-intersects)]\n         (if (or (seq intersects) (future-done? search1) (future-done? search2))\n           (do\n             (reset! done? true)\n             (cond\n               (seq intersects)\n               (let [intersect (apply min-key\n                                      #(+ (count (trace-path @preds1 %))\n                                          (count (trace-path @preds2 %)))\n                                      intersects)]\n                 (concat\n                  (reverse (trace-path @preds1 intersect))\n                  (rest (trace-path @preds2 intersect))))\n               (@preds1 end) (reverse (trace-path @preds1 end))\n               (@preds2 start) (trace-path @preds2 start)))\n           (recur (find-intersects)))))))\n\n(defn- reverse-edges [successor-fn nodes coll]\n  (for [node nodes\n        nbr (successor-fn node)\n        :when (not (contains? coll nbr))]\n    [nbr node]))\n\n(defn- conj-paths [from-map to-map matches]\n  (for [n matches\n        from (map reverse (trace-paths from-map n))\n        to (map rest (trace-paths to-map n))]\n    (vec (concat from to))))\n\n(defn bf-paths-bi\n  \"Using a bidirectional breadth-first search, returns all shortest\n  paths from start to end; predecessors is called on end and each\n  preceding node, successors is called on start, etc.\"\n  [successors predecessors start end]\n  (let [find-succs (partial reverse-edges successors)\n        find-preds (partial reverse-edges predecessors)\n        overlaps (fn [coll q] (seq (filter #(contains? coll %) q)))\n        map-set-pairs (fn [map pairs]\n                        (persistent! (reduce (fn [map [key val]]\n                                  (assoc! map key (conj (get map key #{}) val)))\n                                (transient map) pairs)))]\n    (loop [outgoing {start nil}\n           incoming {end nil}\n           q1 (list start)\n           q2 (list end)]\n      (when (and (seq q1) (seq q2))\n        (if (<= (count q1) (count q2))\n          (let [pairs (find-succs q1 outgoing)\n                outgoing (map-set-pairs outgoing pairs)\n                q1 (map first pairs)]\n            (if-let [all (overlaps incoming q1)]\n              (conj-paths outgoing incoming (set all))\n              (recur outgoing incoming q1 q2)))\n          (let [pairs (find-preds q2 incoming)\n                incoming (map-set-pairs incoming pairs)\n                q2 (map first pairs)]\n            (if-let [all (overlaps outgoing q2)]\n              (conj-paths outgoing incoming (set all))\n              (recur outgoing incoming q1 q2))))))))\n\n;; FIXME: Decide whether this can be optimized and is worth keeping\n#_(defn bf-path-bi2\n    \"Non-threaded version of bf-path-bi. Tends to be slower.\"\n    [outgoing predecessors start end]\n    (loop [preds {start nil}\n           succs {end nil}\n           q1 [start]\n           q2 [end]]\n      (when (and (seq q1) (seq q2))\n        (if (<= (count q1) (count q2))\n          (let [pairs (for [node q1 nbr (outgoing node)\n                            :when (not (contains? preds nbr))]\n                        [nbr node])\n                preds (into preds pairs)\n                q1 (map first pairs)]\n            (if-let [i (some #(when (contains? succs %) %) q1)]\n              (concat\n               (reverse (trace-path preds i))\n               (rest (trace-path succs i)))\n              (recur preds succs q1 q2)))\n          (let [pairs (for [node q2 nbr (predecessors node)\n                            :when (not (contains? succs nbr))]\n                        [nbr node])\n                succs (into succs pairs)\n                q2 (map first pairs)]\n            (if-let [i (some #(when (contains? preds %) %) q2)]\n              (concat\n               (reverse (trace-path preds i))\n               (rest (trace-path succs i)))\n              (recur preds succs q1 q2)))))))\n\n;;;\n;;; Dijkstra\n;;;\n\n(defn dijkstra-traverse\n  \"Returns a lazy-seq of [current-node state] where state is a map in the\n  format {node [distance predecessor]}. When f is provided, returns\n  a lazy-seq of (f node state) for each node\"\n  ([successors dist start]\n     (dijkstra-traverse successors dist start vector))\n  ([successors dist start f]\n     (letfn [(step [[state pq]]\n               (when-let [[dist-su _ u :as fpq] (first pq)]\n                 (cons\n                  (f u state)\n                  (lazy-seq\n                   (step\n                    (reduce\n                     (fn [[state pq] v]\n                       (let [dist-suv (+ dist-su (dist u v))\n                             dist-sv (first (state v))]\n                         (if (and dist-sv (>= dist-suv dist-sv))\n                           [state pq]\n                           (let [pq (if dist-sv\n                                      (disj pq [dist-sv (hash v) v])\n                                      pq)]\n                             [(assoc state v [dist-suv u])\n                              (conj pq [dist-suv (hash v) v])]))))\n                     [state (disj pq fpq)]\n                     (successors u)))))))]\n       (step [{start [0 nil]}\n              ;; Poor man's priority queue. Caveats:\n              ;; 1) Have to keep it in sync with current state\n              ;; 2) Have to include hash codes for non-Comparable items\n              ;; 3) O(logn) operations\n              ;; Tried clojure.contrib.priority-map but it wasn't any faster\n              (sorted-set [0 (hash start) start])]))))\n\n(defn dijkstra-span\n  \"Finds all shortest distances from start, where successors and dist\n  are functions called as (successors node) and (dist node1 node2).\n  Returns a map in the format {node {successor distance}}\"\n  [successors dist start]\n  (reduce\n   (fn [span [n [d p]]]\n     (if p\n       (assoc-in span [p n] d)\n       span))\n   {}\n   (second (last (dijkstra-traverse successors dist start)))))\n\n(defn dijkstra-path-dist\n  \"Finds the shortest path from start to end, where successors and dist\n  are functions called as (successors node) and (dist node1 node2).\n  Returns a vector: [path distance]\"\n  [successors dist start end]\n  (if-let [[_ end-state] (first (filter\n                                 (fn [[node _]] (= end node))\n                                 (dijkstra-traverse successors dist start)))]\n    [(reverse (trace-path (comp second end-state) end))\n     (first (end-state end))]))\n\n(defn dijkstra-path\n  \"Finds the shortest path from start to end, where successors and dist\n  are functions called as (successors node) and (dist node1 node2)\"\n  [successors dist start end]\n  (first (dijkstra-path-dist successors dist start end)))\n\n;; FIXME: Research proper way to do this\n#_(defn dijkstra-path-dist-bi\n    \"Finds a path -- not necessarily the shortest -- from start to end\n  birectionally, where successors and dist are functions called as\n  (successors node) and (dist node1 node2). Returns a vector: [path distance]\"\n    [successors dist start end]\n    ;; TODO: make this work better with directed graphs (predecessors fn)\n    (let [done? (atom false)\n          processed1 (atom #{})\n          processed2 (atom #{})\n          state1 (atom nil)\n          state2 (atom nil)\n          find-intersect (fn [] (some #(when (@processed1 %) %) @processed2))\n          search (fn [n processed state]\n                   (dorun\n                    (take-while\n                     (fn [_] (not @done?))\n                     (dijkstra-traverse successors dist n\n                                        #(do\n                                           (swap! processed conj %1)\n                                           (reset! state %2))))))\n          search1 (future (search start processed1 state1))\n          search2 (future (search end processed2 state2))]\n      (loop [intersect (find-intersect)]\n        (if (or intersect (future-done? search1))\n          (do\n            (prn intersect)\n            (reset! done? true)\n            (cond\n             intersect [(concat\n                         (reverse (trace-path (comp second @state1) intersect))\n                         (rest (trace-path (comp second @state2) intersect)))\n                        (+ (first (@state1 intersect))\n                           (first (@state2 intersect)))]\n             (@state1 end) [(reverse (trace-path (comp second @state1) end))\n                            (first (@state1 end))]\n             (@state2 start) [(trace-path (comp second @state2) start)\n                              (first (@state2 start))]))\n\n          (recur (find-intersect))))))\n\n;;;\n;;; Node-bitmap based fast DAG ancestry cache implementation\n;;;\n\n;;; Ancestry node-bitmap helper vars/fns\n\n(def bits-per-long (long #?(:clj 64 :cljs 32)))\n\n(defn bm-longs\n  \"Returns the number of longs required to store bits count bits in a bitmap.\"\n  [bits]\n  (long (Math/ceil (/ bits bits-per-long))))\n\n(defn bm-new\n  \"Create new empty bitmap.\"\n  ^longs []\n  (long-array 1))\n\n(defn- bm-copy ^longs [bm size]\n  #?(:clj (java.util.Arrays/copyOf ^longs bm ^Long size)\n     :cljs (.slice bm 0 size)))\n\n(defn bm-set\n  \"Set boolean state of bit in 'bitmap at 'idx to true.\"\n  ^longs [^longs bitmap idx]\n  (let [size (max (count bitmap) (bm-longs (inc idx)))\n        new-bitmap (bm-copy bitmap size) \n        chunk (quot idx bits-per-long)\n        offset (mod idx bits-per-long)\n        mask (bit-set 0 offset)\n        value (aget new-bitmap chunk)\n        new-value (bit-or value ^Long mask)]\n    (aset new-bitmap chunk new-value)\n    new-bitmap))\n\n(defn bm-get\n  \"Get boolean state of bit in 'bitmap at 'idx.\"\n  [^longs bitmap idx]\n  (when (<= (bm-longs (inc idx)) (count bitmap))\n    (let [chunk (quot idx bits-per-long)\n          offset (mod idx bits-per-long)\n          mask (bit-set 0 offset)\n          value (aget bitmap chunk)\n          masked-value (bit-and value mask)]\n      (not (zero? masked-value)))))\n\n(defn bm-or\n  \"Logically OR 'bitmaps together.\"\n  ^longs [& bitmaps]\n  (if (empty? bitmaps)\n    (bm-new)\n    (let [size (apply max (map count bitmaps))\n          new-bitmap (bm-copy (first bitmaps) size)]\n      (doseq [bitmap (rest bitmaps)\n              [idx value] (map-indexed list bitmap)\n              :let [masked-value (bit-or value (aget new-bitmap idx))]]\n        (aset new-bitmap idx masked-value))\n      new-bitmap)))\n\n(defn bm-get-indicies\n  \"Get the indicies of set bits in 'bitmap.\"\n  [^longs bitmap]\n  (for [chunk (range (count bitmap))\n        offset (range bits-per-long)\n        :let [idx (+ (* chunk bits-per-long) offset)]\n        :when (bm-get bitmap idx)]\n    idx))\n\n;;; Ancestry public API\n\n(defrecord Ancestry [node->idx idx->node bitmaps])\n\n(defn ancestry-new\n  \"Create a new, empty Ancestry cache.\"\n  []\n  (->Ancestry {} {} []))\n\n(defn ancestry-contains?\n  \"Finds if a 'node is contained in the 'ancestry cache.\"\n  [ancestry node]\n  (-> ancestry :node->idx (contains? node)))\n\n(defn ancestry-add\n  \"Adds a 'node and its 'parents associations to the 'ancestry cache.\"\n  [ancestry node & parents]\n  (if (ancestry-contains? ancestry node)\n    ;; TODO Should we throw instead of drop?\n    ancestry\n    (let [{:keys [node->idx idx->node bitmaps]} ancestry\n          nid (count node->idx)\n          node->idx (assoc node->idx node nid)\n          idx->node (assoc idx->node nid node)\n          pidxs (map node->idx parents)\n          new-bitmap (if (empty? pidxs)\n                       (bm-new)\n                       (apply bm-or (map bitmaps pidxs)))\n          new-bitmap (reduce bm-set new-bitmap pidxs)\n          bitmaps (conj bitmaps new-bitmap)]\n      (->Ancestry node->idx idx->node bitmaps))))\n\n(defn ancestor?\n  \"Finds if the 'parenter node is an ancestor of 'childer node for the given\n  'ancestry cache.\"\n  [ancestry childer parenter]\n  (let [{:keys [node->idx bitmaps]} ancestry\n        cidx (node->idx childer)\n        pidx (node->idx parenter)]\n    (boolean\n     (when (and cidx pidx)\n       (bm-get (get bitmaps cidx)\n               pidx)))))\n\n(defn ancestors\n  \"Returns all of the ancestors of 'child node.\"\n  [ancestry child]\n  (let [{:keys [node->idx idx->node bitmaps]} ancestry\n        cidx (node->idx child)]\n    (->> (get bitmaps cidx)\n         bm-get-indicies\n         (map idx->node))))\n\n(defn ancestry-nodes\n  \"Returns all of the nodes in an 'ancestry.\"\n  [ancestry]\n  (-> ancestry :node->idx keys))\n"]}