{"version":3,"sources":["loom/alg_generic.cljc"],"mappings":";;AAaA;;;;AAAA,AAAMA,AAGHC,AAAMC;AAHT,AAIE,AAACC,AAAWC,AAAS,AAACC,AAAQJ,AAAMC;;AAEtC;;;;AAAA,AAAMI,AAGHL,AAAMM;AAHT,AAIE,AAAMC,AAAU,AAACC,AAAKF;AAAtB,AAIO,AAAA,AAAAS,AAACC,AACD,AAACI,AAAKd;AADN,AAAS,AAAAW,AAAOjB;AAAPkB,AAAa,AAAAH,AAACI,AAAKb;AAAnB,AAAA,AAAAW,AAAAC,AAAAD,AAAAC,AAACb,AAAAA,AAAAA;AAFV,AAAA,AAAAI,AAACC;AAAD,AAAS,AAACC,AAAS,AAAKC;AAAL,AAAW,AAAA,AAAAH,AAACI,AAAED,AAAML;AACpB,AAAA,AAAA,AAACO,AAAcR;AAFlC,AAACN,AAAAA,AAAAA,AAAMO,AAAAA;;AAMhB;;;;AAAA,AAAMc,AAGHrB,AAAMsB;AAHT,AAIE,AAAA,AAAAC,AAACC;AAAD,AAAS,AAAAC,AAAO,AAAAF,AAACf;AAAR,AAAA,AAAAiB,AAAAA,AAACzB,AAAAA,AAAAA;AAAgB,AAAA,AAACK,AAAML,AAAOsB;;AAE1C;;;;AAAA,AAAMI,AAGH1B;AAHH,AAIE,AAAC2B,AACA,AAAAC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAWG;AAAX,AAAAF,AAAAD,AAAA,AAAA,AAAaI;AAAb,AACE,AAAIA;AACF,AAACC,AAAMH,AAAKE,AAAE,AAACd,AAAK,AAAAgB,AAAMF;AAANG,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC,AAACL,AAAAA,AAAAA;AAAWC;;AAChCD;;AAJL,AAKI/B;;AAMN,AAAA;;;;;AAAA,AAAAqC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAIHa,AAAWlC;AAJd,AAAA,AAAAuB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAA,AAI8BY;AAJ9B,AAKE,AAAA,AAAeC,AAAMD;AAArB,AACU,AAAAE,AAAgB,AAACnD,AAAKkD;AAAtB,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAAW1D;AAAX,AACE,AAAI,AAAC2D,AAAUH,AAAKxD;AAClB,AAAC4D,AAAK,AAACC,AAAIJ,AAAOD;;AAClB,AAAMA,AAAK,AAACtC,AAAKsC,AAAKxD;AAChB8D,AAAK,AAACvC,AAAOiC,AAAK,AAACD,AAAAA,AAAAA,AAAWvD,AAAAA;AADpC,AAEE,AAAA+D,AAAA,AAAA;AAAA,AACE,AAAC5C,AAAKnB,AACA,AAAC4D,AAAK,AAACI,AAAK,AAACH,AAAIJ,AAAOK,AAClBN;AAHd,AAAA;;;AALN;;;AADV,AAUE,AAAA,AAACI,AAAMvC,AAAOmC;;;AAflB,AAAA,AAAA,AAAMd;;AAAN;AAAA,AAAA,AAAA,AAAAO,AAAMP;AAAN,AAAA,AAAAQ,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAG,AAAAJ;;;AAAA,AAiBA,AAAA;;;;;;;AAAA,AAAAb,AAAM6B;AAAN,AAAA,AAAA5B,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAzB;;;AAAA,AAAA,AAAA,AAAA,AAAA0B,AAAMD,AAMHV,AAAWlC;AANd,AAAA,AAAA8C,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAArB,AAAAC,AAAAoB,AAAAA;AAAA,AAAAnB,AAAAmB,AAAA,AAAA,AAM8BX;AAN9B,AAOE,AAAA,AAAeD,AAAWlC,AAAMyC,AAAKL,AAAMc,AAASf;;AAApD,AACE,AAAAgB,AAAa,AAACrB,AAAMW;AAApB,AAAA,AAAAU;AAAA,AAAAA,AAASC;AAAT,AACE,AAAA,AAACtD,AACEE,AAAMoD,AACP,AAAAV,AAAA,AAAA;;AAAA,AACE,AAAMP,AAAK,AAACtC,AAAKsC,AAAKnC;AAAtB,AACE,AAAI,AAACmC,AAAAA,AAAAA,AAAKiB,AAAAA;AACR,AAACb,AAAKL,AAAWlC,AAAM,AAAC+B,AAAKU,AAAML,AAAMc,AAASf;;AAClD,AAACI,AAAKL,AAAWkB,AAAI,AAAClB,AAAAA,AAAAA,AAAWkB,AAAAA,AAC3B,AAACvD,AAAKuC,AAAMpC,AAAO,AAACH,AAAKqD,AAAS,AAACnB,AAAKU,AACxCN;;;AANZ,AAAA;;AAOF,AAAAE,AAAkB,AAACnD,AAAKkD;AAAxB,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAAWgB;AAAX,AACE,AAAOnB;AAAWmB;AAAO,AAACnE,AAAKgE;AACxB,AAACV,AAAIJ;AAAO,AAACI,AAAIU;AAAU,AAACrD,AAAKsC,AAAKnC;;;;;;;;;AAF/C;;;;;;AAXJ,AAcE,AAAU,AAACmC,AAAAA,AAAAA,AAAKnC,AAAAA;AAAhB;;AAAA,AACE,AAAA,AAAA,AAACuC,AAAKL,AAAWlC,AAAM,AAACkC,AAAAA,AAAAA,AAAWlC,AAAAA,AAAa,AAACH,AAAKsC,AAAKnC;;;;AAtBjE,AAAA,AAAA,AAAM4C;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAlB,AAAAiB;AAAAA,AAAA,AAAAhB,AAAAgB;AAAAE,AAAA,AAAAnB,AAAAiB;AAAAA,AAAA,AAAAhB,AAAAgB;AAAA,AAAA,AAAAd,AAAA;AAAA,AAAA,AAAAA,AAAAe,AAAAC,AAAAF;;;AAAA,AA0BA,AAAA;;;AAAA,AAAAhC,AAAMuC;AAAN,AAAA,AAAAtC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAnC;;;AAAA,AAAA,AAAA,AAAA,AAAAoC,AAAMD,AAEHpB,AAAWlC;AAFd,AAAA,AAAAwD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhC,AAAA,AAAAgC,AAAA,AAAA,AAAA,AAAA,AAAA/B,AAAAC,AAAA8B,AAAAA;AAAA,AAAA7B,AAAA6B,AAAA,AAAA,AAE8BrB;AAF9B,AAAAR,AAAA6B,AAAA,AAEmCI;AAFnC,AAGE,AAAOzB,AAAKA;AAAZ,AAAA,AACOzD,AAAOsB;AADd,AAEOoC,AAAOpC;;AAFd,AAGE,AAAI,AAAC6D,AAAOzB;AAEV,AAAIwB;AAAJ,AACG,AAACxD,AAAY1B,AAAOyD;;AACrB,AAAC/B,AAAY1B;;;AACf,AAAMoF,AAAE,AAAC5E,AAAKkD;AACRD,AAAK,AAACtC,AAAKsC,AAAK2B;AADtB,AAEE,AAAAX,AAAW,AAACrB,AAAM,AAAC5B,AAAOiC,AAAK,AAACD,AAAAA,AAAAA,AAAW4B,AAAAA;AAA3C,AAAA,AAAAX;AAAA,AAAAA,AAASY;AAAT,AACE,AAAO5B;AAAK,AAACvB,AAAMlC,AAAMqF,AAAED;AAAG,AAACjE,AAAKuC,AAAM2B;;;;;;AAC1C,AAAO5B;AAAKzD;AAAM,AAAC8D,AAAIJ;;;;;;;;;;;AAfjC,AAAA,AAAA,AAAMkB;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA5B,AAAA2B;AAAAA,AAAA,AAAA1B,AAAA0B;AAAAE,AAAA,AAAA7B,AAAA2B;AAAAA,AAAA,AAAA1B,AAAA0B;AAAA,AAAA,AAAAxB,AAAA;AAAA,AAAA,AAAAA,AAAAyB,AAAAC,AAAAF;;;AAAA,AAiBA,AAAA;;;;AAAA,AAAA1C,AAAMiD;AAAN,AAAA,AAAAhD,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA7C;;;AAAA,AAAA,AAAA,AAAA,AAAA8C,AAAMD,AAGH9B,AAAWlC;AAHd,AAAA,AAAAkE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1C,AAAA,AAAA0C,AAAA,AAAA,AAAA,AAAA,AAAAzC,AAAAC,AAAAwC,AAAAA;AAAA,AAAAvC,AAAAuC,AAAA,AAAA,AAG8B/B;AAH9B,AAAAR,AAAAuC,AAAA,AAGmCN;AAHnC,AAKE,AAAOzB,AAAKA;AAAZ,AACOmC;AADP,AAEOlC,AAAOpC;;AAFd,AAGE,AAAI,AAAC6D,AAAOzB;AACV,AAAIwB;AAAJ,AACGU,AAAOnC;;AACRmC;;;AACF,AAAMR,AAAE,AAAC5E,AAAKkD;AACRD,AAAK,AAACtC,AAAKsC,AAAK2B;AAChBrB,AAAK,AAACvC,AAAOiC,AAAK,AAACD,AAAAA,AAAAA,AAAW4B,AAAAA;AAFpC,AAGE,AAAI,AAACD,AAAOpB;AACV,AAAON;AAAK,AAACtC,AAAKyE,AAAOR;AAAG,AAACtB,AAAIJ;;;;;;AACjC,AAAOD;AAAKmC;AAAO,AAACzE,AAAKuC,AAAM,AAACN,AAAMW;;;;;;;;;;;AAjBhD,AAAA,AAAA,AAAMuB;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAtC,AAAAqC;AAAAA,AAAA,AAAApC,AAAAoC;AAAAE,AAAA,AAAAvC,AAAAqC;AAAAA,AAAA,AAAApC,AAAAoC;AAAA,AAAA,AAAAlC,AAAA;AAAA,AAAA,AAAAA,AAAAmC,AAAAC,AAAAF;;;AAAA,AAmBA,AAAA;;;;;;;AAAA,AAAApD,AAAMwD;AAAN,AAAA,AAAAvD,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAApD;;;AAAA,AAAA,AAAA,AAAA,AAAAqD,AAAMD,AAMHrC,AAAWlC;AANd,AAAA,AAAAyE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjD,AAAA,AAAAiD,AAAA,AAAA,AAAA,AAAA,AAAAhD,AAAAC,AAAA+C,AAAAA;AAAA,AAAA9C,AAAA8C,AAAA,AAAA,AAM8BtC;AAN9B,AAAAR,AAAA8C,AAAA,AAMmCb;AANnC,AAOE,AAAI,AAACzB,AAAAA,AAAAA,AAAKnC,AAAAA;AACR,AAAM4D;AAAN,AAAA,AAAA,AACOzB;;AADP;;;AAEA,AAAOnC,AAAMA;AACPyC,AAAK,AAACP,AAAAA,AAAAA,AAAWlC,AAAAA;AADvB,AAEMoC;AAFN,AAGMc;AACAf,AAAKA;AAJX,AAKM0C;;AALN,AAME,AAAM1C,AAAK,AAACtC,AAAKsC,AAAKnC;AAAtB,AACE,AAAAmD,AAAa,AAACrB,AAAMW;AAApB,AAAA,AAAAU;AAAA,AAAAA,AAASC;AAAT,AACE,AAAI,AAACjB,AAAAA,AAAAA,AAAKiB,AAAAA;AACR,AAAOpD;AAAM,AAAC+B,AAAKU;AAAML;AAAMc;AAASf;AAAK,AAAA,AAACtC,AAAKgF,AAAO7E,AAAMoD;;;;;;;;;AAChE,AAAOA;AAAI,AAAClB,AAAAA,AAAAA,AAAWkB,AAAAA;AAChB,AAACvD,AAAKuC,AAAMpC;AAAO,AAACH,AAAKqD,AAAS,AAACnB,AAAKU;AACxCN;AAAK,AAAA,AAACtC,AAAKgF,AAAO7E,AAAMoD;;;;;;;;;;AACjC,AAAAD,AAAgB,AAACjE,AAAKkD;AAAtB,AAAA,AAAAe;AAAA,AAAAA,AAASE;AAAT,AACE,AAAOA;AAAO,AAACnE,AAAKgE;AACb,AAACV,AAAIJ;AAAO,AAACI,AAAIU;AAAUf;AAAK0C;;;;;;;;;AACvC,AAAIjB;AAAJ,AACGiB,AAAM1C;;AACP0C;;;;;;;;;AA5Bd,AAAA,AAAA,AAAMN;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA7C,AAAA4C;AAAAA,AAAA,AAAA3C,AAAA2C;AAAAE,AAAA,AAAA9C,AAAA4C;AAAAA,AAAA,AAAA3C,AAAA2C;AAAA,AAAA,AAAAzC,AAAA;AAAA,AAAA,AAAAA,AAAA0C,AAAAC,AAAAF;;;AAAA,AA8BA,AAAA;;;;;AAAA,AAAA3D,AAAMgE;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAIF7C,AAAWlC;AAJf,AAKK,AAAA,AAAA,AAACiF,AAAkB/C,AAAWlC;;;AALnC,AAAA,AAAA,AAAM+E,AAMF7C,AAAWlC,AAAMmC,AAAK+C;AAN1B,AAOK,AAAO/C,AAAKA;AACL+C,AAASA;AADhB,AAEOZ;AAFP,AAGOlC,AAAOpC;;AAHd,AAIE,AAAI,AAAC6D,AAAOzB;AACVkC;;AACA,AAAMR,AAAE,AAAC5E,AAAKkD;AACRD,AAAK,AAACtC,AAAKsC,AAAK2B;AAChBqB,AAAG,AAACjF,AAAOgF,AAAS,AAAChD,AAAAA,AAAAA,AAAW4B,AAAAA;AAFtC,AAGE,AAAI,AAACsB,AAAID;AACP,AAAU,AAACE,AAAKlD,AAAKgD;AAArB;;AAAA,AACE,AAAOhD;AAAK+C;AAASZ;AAAO,AAACzE,AAAKuC,AAAM,AAACN,AAAMqD;;;;;;;;AACjD,AAAOhD;AAAK,AAACtC,AAAKqF,AAASpB;AAAG,AAACjE,AAAKyE,AAAOR;AAAG,AAACtB,AAAIJ;;;;;;;;;;;;AAnBhE,AAAA,AAAA,AAAM2C;;AAAN,AAyBA,AAAA;;;;;;;AAAA,AAAAhE,AAAMuE;AAAN,AAAA,AAAAtE,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAnE;;;AAAA,AAAA,AAAA,AAAA,AAAAoE,AAAMD,AAMHpD,AAAWlC;AANd,AAAA,AAAAwF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhE,AAAA,AAAAgE,AAAA,AAAA,AAAA,AAAA,AAAA/D,AAAAC,AAAA8D,AAAAA;AAAA,AAAA7D,AAAA6D,AAAA,AAM8BI;AAN9B,AAAAjE,AAAA6D,AAAA,AAMgCK;AANhC,AAAAlE,AAAA6D,AAAA,AAMqCrD;AANrC,AAOE,AAAMyD,AAAE,AAAAE,AAAIF;AAAJ,AAAA,AAAAE;AAAAA;;AAAM,AAAKpF,AAAEC,AAAEoF;AAAT,AAAYrF;;;;AACpBsF,AAAS,AAAAF,AAAID;AAAJ,AAAA,AAAAC;AAAAA;;AAAS,AAAA,AAACG;;;AADzB,AAEE,AAAA,AAAeC,AAAMxH;AAArB,AACU,AAAA2D,AAAwB,AAACnD,AAAKgH;AAA9B,AAAA,AAAA7D;AAAA,AAAA,AAAA8D,AAAA9D;AAAA,AAAA7B,AAAA2F,AAAA,AAAA,AAAYxH;AAAZ,AAAA6B,AAAA2F,AAAA,AAAA,AAAiBC;AAAjB,AACE,AAACtG,AACA,AAAC8F,AAAAA,AAAAA,AAAEjH,AAAAA,AAAKD,AAAAA,AAAM0H,AAAAA,AACd,AAAA1D,AAAA,AAAA;AAAA,AACC,AAAMD,AAEU,AAAA,AAAA6D,AAAClH;AAAD,AAAS,AAAAmH,AAAAD;AAAAE,AAAY7H;AAAZ8H,AAAiB,AAAA,AAAKL;AAAtB,AAAA,AAAAG,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACT,AAAAA,AAAAA;AADV,AAAA,AAAAK,AAACnG;AAAD,AAAS,AAAAmG,AAAC/D,AAAU5D;AADpB,AAACwD,AAAAA,AAAAA,AAAWvD,AAAAA;AAA5B,AAGE,AAAC4D,AAAK,AAACI,AAAK,AAACH,AAAI0D,AAAO,AAAAQ,AAAA,AAAAC;AAAA,AAAA,AAAAjE,AAAA,AAAA;AAAA,AAAA,AAAAiE,AAAAA;;AAAA,AAAA,AAAAtE,AAAA,AAAA+C,AAAAuB;AAAA,AAAA,AAAAtE;AAAA,AAAA,AAAAsE,AAAAtE;AAAA,AAAA,AAAA,AAAAuE,AAAAD;AAAA,AAAAE,AA6uEO,AAAAmL,AAAArL;AA7uEPG,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAM9D;AAAN,AAAA,AAAA,AAAAgE,AAAAJ,AAAA,AAAiB5D,AAAI,AAAA,AAAKgD;;AAA1B,AAAA,AAAAc,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAb;;AAAA,AAAAU,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAlF,AAAA6E,AAAMvD;AAAN,AAAA,AAAAtD,AAAA,AAAA,AAAAyH,AAAA,AAAAE,AAAAd,AAAiBvD,AAAI,AAAA,AAAKgD;;;AAA1B;;;;AAAA,AAAA;;AAAA,AAAA,AAAAM,AAAUjE;AAC5B,AAAA,AAAAiF,AAAAC,AAACtH;AAAD,AAAS,AAAAqH,AAAAC,AAAC/G,AAAYjC;AAAMD,AAAM+D;AAL3C,AAAA;;AAHH;;;AADV,AAUE,AAACF,AAAK,AAAA,AAAA,AAAC1C,AACc,AAAA+H,AACR5H,AACP,AAAI,AAAC6H,AAAK1F,AACR,AAAA,AAACvB,AAAMuB,AAAKnC,AACZ,AAAA,AAAA,AAAC2C,AAAM3C,AAAW,AAAA0G,AAAA,AAAAoB;AAAA,AAAA,AAAApF,AAAA,AAAA;AAAA,AAAA,AAAAoF,AAAAA;;AAAA,AAAA,AAAAzF,AAAA,AAAA+C,AAAA0C;AAAA,AAAA,AAAAzF;AAAA,AAAA,AAAAyF,AAAAzF;AAAA,AAAA,AAAA,AAAAuE,AAAAkB;AAAA,AAAAjB,AAsuEmB,AAAAmL,AAAAlK;AAtuEnBhB,AAAA,AAAAC,AAAAF;AAAAkB,AAAA,AAAAd,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAkB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAlB;AAAA,AAAA,AAAAK,AAAAN,AAAAmB,AAAME;AAAN,AAAA,AAAA,AAAAd,AAAAW,AAAA,AAAA,AAAeG;;AAAf,AAAA,AAAAF,AAAA;;;;AAAA;;;;;AAAA,AAAAX,AAAA,AAAAC,AAAAS,AAAA,AAAAE,AAAA,AAAAT,AAAAM;;AAAA,AAAAT,AAAA,AAAAC,AAAAS,AAAA;;;AAAA,AAAA,AAAAjG,AAAAgG,AAAMI;AAAN,AAAA,AAAApI,AAAA,AAAA,AAAA,AAAAmI,AAAA,AAAAR,AAAAK,AAAeI;;;AAAf;;;;AAAA,AAAA;;AAAA,AAAA,AAAAxB,AAAQvE;;;;AAxBxC,AAAA,AAAA,AAAMmD;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA5D,AAAA2D;AAAAA,AAAA,AAAA1D,AAAA0D;AAAAE,AAAA,AAAA7D,AAAA2D;AAAAA,AAAA,AAAA1D,AAAA0D;AAAA,AAAA,AAAAxD,AAAA;AAAA,AAAA,AAAAA,AAAAyD,AAAAC,AAAAF;;;AAAA,AA0BA,AAAA;;;;AAAA,AAAA1E,AAAMoH;AAAN,AAAA,AAAAnH,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAhH;;;AAAA,AAAA,AAAA,AAAA,AAAAiH,AAAMD,AAGHjG,AAAWlC;AAHd,AAAA,AAAAqI,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7G,AAAA,AAAA6G,AAAA,AAAA,AAAA,AAAA,AAAA5G,AAAAC,AAAA2G,AAAAA;AAAA,AAAA1G,AAAA0G,AAAA,AAG8BlG;AAH9B,AAIE,AAAC/B,AACA,AAACqI,AACA,AAAA,AAACC,AAAYxG,AAAWlC,AACR,AAAK2I,AAAEC,AAAGD;AAAV,AAAaC;AAD7B,AAEmBzG;;;AARvB,AAAA,AAAA,AAAMgG;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAzG,AAAAwG;AAAAA,AAAA,AAAAvG,AAAAuG;AAAAE,AAAA,AAAA1G,AAAAwG;AAAAA,AAAA,AAAAvG,AAAAuG;AAAA,AAAA,AAAArG,AAAA;AAAA,AAAA,AAAAA,AAAAsG,AAAAC,AAAAF;;;AAAA,AAUA,AAAA;;;;AAAA,AAAAvH,AAAM8H;AAAN,AAAA,AAAA7H,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6H,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA1H;;;AAAA,AAAA,AAAA,AAAA,AAAA2H,AAAMD,AAGH3G,AAAWlC,AAAMoJ;AAHpB,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvH,AAAA,AAAAuH,AAAA,AAAA,AAAA,AAAA,AAAAtH,AAAAC,AAAAqH,AAAAA;AAAAA,AAG+BM;AAH/B,AAIE,AAAMA,AAAK,AAAA,AAAA,AAACC,AAAMD,AAASE;AAA3B,AACE,AAAAlH,AAAiB,AAACgD,AACA,AAAAmE;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAhJ,AAAAiJ,AAAA,AAAA,AAAMd;AAAN,AAAAnI,AAAAiJ,AAAA,AAAA,AAAQb;AAAR,AAAApI,AAAAiJ,AAAA,AAAA,AAAWd;AAAX,AAAe,AAAM,AAACC,AAAAA,AAAAA,AAAGQ,AAAAA;AAAV,AAAeR;;AAAf;;AACf,AAACnH,AAAM6D,AAAYpD,AAAWlC,AAAM,AAACyB,AAAMiI,AAAOL;AAFpE,AAAA,AAAAhH;AAAA,AAAA,AAAAA,AAAW3D;AAAX,AAGE,AAACiL,AAAQ,AAAClL,AAAWC,AAAM0K;;AAH7B;;;;AALJ,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAnH,AAAAkH;AAAAA,AAAA,AAAAjH,AAAAiH;AAAAE,AAAA,AAAApH,AAAAkH;AAAAA,AAAA,AAAAjH,AAAAiH;AAAAG,AAAA,AAAArH,AAAAkH;AAAAA,AAAA,AAAAjH,AAAAiH;AAAA,AAAA,AAAA/G,AAAA;AAAA,AAAA,AAAAA,AAAAgH,AAAAC,AAAAC,AAAAH;;;AAAA,AAUA;;;AAAA,AAAOY,AAEJC,AAAGC;;AAFN,AAGE,AAAI,AAAG,AAAC/C,AAAM+C,AAAI,AAAC/C,AAAM8C;AACvB,AAAOC;AAAGD;;;;;AACV,AAACzK,AAAO,AAAC2K,AAAQzH,AAAUwH,AAAI,AAACE,AAAKH;;;;;AAGtC,AAAA,AAAMI,AAAYC,AAASC,AAAanK,AAAMoJ;AAA9C,AACE,AAAO,AAAApE,AAAA;;AAuCZ,AAAA,AAAOoF,AAAeC,AAAaC,AAAMC;AAAzC,AACE,AAAA7D,AAAA,AAAA8D;AAAA,AAAA,AAAA9H,AAAA,AAAA;AAAA,AAAA,AAAA8H,AAAAA;;AAAA,AAAA,AAAAnI,AAAA,AAAA+C,AAAAoF;AAAA,AAAA,AAAAnI;AAAA,AAAA,AAAAoI,AAAApI;AAAA,AAAA,AAAA,AAAAP,AAAA2I,AAAM9L;AAAN,AAAA,AAAA+L,AAAA;AAAAC;AAAA,AAAA,AAAAjI,AAAA,AAAA;;AAAA,AAAA,AAAAiI,AAAAA;;AAAA,AAAA,AAAAtI,AAAA,AAAA+C,AAAAuF;AAAA,AAAA,AAAAtI;AAAA,AAAA,AAAAsI,AAAAtI;AAAA,AAAA,AAAA,AAAAuE,AAAA+D;AAAA,AAAA9D,AA+pEiD,AAAAmL,AAAArH;AA/pEjD7D,AAAA,AAAAC,AAAAF;AAAA+D,AAAA,AAAA3D,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA+D,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA/D;AAAA,AAAA,AAAAK,AAAAN,AAAAgE,AACMzH;AADN,AAAA,AAEY,AAAK,AAACd,AAAUiI,AAAKnH;AAFjC,AAAA,AAAAgE,AAAAwD,AAAA,AAGGxH,AAAIzE;;AAHP,AAAA,AAAAkM,AAAA;;;;AAAA,AAAA,AAAAA,AAAA;;;;;AAAA;;;;;AAAA,AAAAxD,AAAA,AAAAC,AAAAsD,AAAA,AAAAE,AAAA,AAAAtD,AAAAmD;;AAAA,AAAAtD,AAAA,AAAAC,AAAAsD,AAAA;;;AAAA,AAAA,AAAA9I,AAAA6I,AACMvH;AADN,AAAA,AAEY,AAAK,AAACd,AAAUiI,AAAKnH;AAFjC,AAAAtD,AAAA,AAAA,AAAAgL,AAAA,AAAArD,AAAAkD,AAGGvH,AAAIzE;;AAHP,AAAA,AAAA8I,AAAAkD;;;;;;AAAA;;;;;AAAA,AAAA;;;AAAAI,AAAA,AAAA3F,AAAA,AAAAsF,AACU,AAACL,AAAAA,AAAAA,AAAa1L,AAAAA;AADxB,AAAA,AAAAoM;AAAA,AAAAC,AAAAD,AAAA,AAAAE,AAAA,AAAAxD,AAAA+C;;AAAA,AAAA,AAAA/C,AAAA+C;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAA9D,AAAW4D;;AAKb,AAAA,AAAOY,AAAYC,AAASC,AAAOC;AAAnC,AACE,AAAA3E,AAAA,AAAA4E;AAAA,AAAA,AAAA5I,AAAA,AAAA;AAAA,AAAA,AAAA4I,AAAAA;;AAAA,AAAA,AAAAjJ,AAAA,AAAA+C,AAAAkG;AAAA,AAAA,AAAAjJ;AAAA,AAAA,AAAAoI,AAAApI;AAAA,AAAA,AAAA,AAAAP,AAAA2I,AAAM/J;AAAN,AAAA,AAAAgK,AAAA;AAAAa;AAAA,AAAA,AAAA7I,AAAA,AAAA;;AAAA,AAAA,AAAA6I,AAAAA;;AAAA,AAAA,AAAAlJ,AAAA,AAAA+C,AAAAmG;AAAA,AAAA,AAAAlJ;AAAA,AAAA,AAAAoI,AAAApI;AAAA,AAAA,AAAA,AAAAP,AAAA2I,AACMqB;AADN,AAAA,AAAApB,AAAA;AAAAc;AAAA,AAAA,AAAA9I,AAAA,AAAA;;AAAA,AAAA,AAAA8I,AAAAA;;AAAA,AAAA,AAAAnJ,AAAA,AAAA+C,AAAAoG;AAAA,AAAA,AAAAnJ;AAAA,AAAA,AAAAmJ,AAAAnJ;AAAA,AAAA,AAAA,AAAAuE,AAAA4E;AAAA,AAAA3E,AAypEiD,AAAAmL,AAAAxG;AAzpEjD1E,AAAA,AAAAC,AAAAF;AAAA4E,AAAA,AAAAxE,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA4E,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA5E;AAAA,AAAA,AAAAK,AAAAN,AAAA6E,AAEMM;AAFN,AAAA,AAAA,AAAA5E,AAAAqE,AAGE,AAACQ,AAAI,AAACjB,AAAOc,AAAKE;;AAHpB,AAAA,AAAAN,AAAA;;;;AAAA;;;;;AAAA,AAAArE,AAAA,AAAAC,AAAAmE,AAAA,AAAAE,AAAA,AAAAnE,AAAAgE;;AAAA,AAAAnE,AAAA,AAAAC,AAAAmE,AAAA;;;AAAA,AAAA,AAAA3J,AAAA0J,AAEMQ;AAFN,AAAA,AAAAlM,AAAA,AAAA6L,AAAA,AAAAlE,AAAA+D,AAGE,AAACS,AAAI,AAACjB,AAAOc,AAAKE;;;AAHpB;;;;;AAAA,AAAA;;;AAAAjB,AAAA,AAAA3F,AAAA,AAAAsF,AAES,AAACqB,AAAItE,AAAK,AAAC1H,AAAYqL,AAAO1K;AAFvC,AAAA,AAAAqK;AAAA,AAAAC,AAAAD,AAAA,AAAAa,AAAA,AAAAnE,AAAA8D;;AAAA,AAAA,AAAA9D,AAAA8D;;;;;AAAA;;;;;AAAA,AAAA;;;AAAAR,AAAA,AAAA3F,AAAA,AAAAsF,AACW,AAACqB,AAAIpC,AAAQ,AAAC5J,AAAYoL,AAASzK;AAD9C,AAAA,AAAAqK;AAAA,AAAAC,AAAAD,AAAA,AAAAc,AAAA,AAAApE,AAAA6D;;AAAA,AAAA,AAAA7D,AAAA6D;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAA5E,AAAQ2E;;AAKV;;;;;AAAA,AAAMa,AAIHhK,AAAWiI,AAAanK,AAAMoJ;AAJjC,AAKE,AAAM+C,AAAW,AAACpC,AAAQK,AAAclI;AAClCkK,AAAW,AAACrC,AAAQK,AAAcD;AAClCkC,AAAS,AAAK9B,AAAK+B;AAAV,AAAa,AAAClH,AAAI,AAAA,AAAAmH,AAACnN;AAAD,AAAS,AAAAmN,AAACjK,AAAUiI;AAAQ+B;;AACvDE,AAAc,AAAKC,AAAIC;AAAT,AACE,AAACC,AAAY,AAACtM,AAAO,AAAAuM,AAAKH;AAAL,AAAA,AAAAI,AAAAD;AAAA,AAAApM,AAAAqM,AAAA,AAAA,AAAUC;AAAV,AAAAtM,AAAAqM,AAAA,AAAA,AAAcE;AAAd,AACX,AAACC,AAAOP,AAAIK,AAAI,AAACjN,AAAK,AAAA,AAAC8B,AAAI8K,AAAIK,AAASC;AAC1C,AAACE,AAAUR,AAAKC;;AAN9C,AAOE,AAAA,AAAA,AAAOxC,AAAUlK;AAAjB,AAAA,AACOkN,AAAU9D;AACV+D,AAAG,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAMpN;AACTqN,AAAG,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAMhE;;AAHhB,AAIE,AAAM,AAAK,AAAChE,AAAI+H,AAAI,AAAC/H,AAAIiI;AAAzB,AACE,AAAI,AAAI,AAACtG,AAAMoG,AAAI,AAACpG,AAAMsG;AACxB,AAAMX,AAAM,AAACP,AAAWgB,AAAGjD;AACrBA,AAAS,AAACsC,AAActC,AAASwC;AACjCS,AAAG,AAACpB,AAAIjK,AAAM4K;AAFpB,AAGE,AAAAvJ,AAAa,AAACkJ,AAASa,AAASC;AAAhC,AAAA,AAAAhK;AAAA,AAAAA,AAASmK;AAAT,AACE,AAACpC,AAAWhB,AAASgD,AAAS,AAACK,AAAID;;AACnC,AAAOpD;AAASgD;AAASC;AAAGE;;;;;;;;AAChC,AAAMX,AAAM,AAACN,AAAWiB,AAAGH;AACrBA,AAAS,AAACV,AAAcU,AAASR;AACjCW,AAAG,AAACtB,AAAIjK,AAAM4K;AAFpB,AAGE,AAAAvJ,AAAa,AAACkJ,AAASnC,AAASmD;AAAhC,AAAA,AAAAlK;AAAA,AAAAA,AAASmK;AAAT,AACE,AAACpC,AAAWhB,AAASgD,AAAS,AAACK,AAAID;;AACnC,AAAOpD;AAASgD;AAASC;AAAGE;;;;;;;;;AAbpC;;;;;AAkDN,AAAA;;;;;AAAA,AAAAtM,AAAM0M;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAzI,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMyI,AAIFvL,AAAWwL,AAAK1N;AAJpB,AAKK,AAAC2N,AAAkBzL,AAAWwL,AAAK1N,AAAMuJ;;;AAL9C,AAAA,AAAA,AAAMkE,AAMFvL,AAAWwL,AAAK1N,AAAM4F;AAN1B,AAOK,AAAA,AAAAgI;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAApN,AAAAqN,AAAA,AAAA,AAAgBC;AAAhB,AAAAtN,AAAAqN,AAAA,AAAA,AAAsBE;AAAtB,AACU,AAAA1L,AAAiC,AAACP,AAAMiM;AAAxC,AAAA,AAAA1L;AAAA,AAAA,AAAA2L,AAAA3L;AAAA,AAAA7B,AAAAwN,AAAA,AAAA,AAAYC;AAAZ,AAAAzN,AAAAwN,AAAA,AAAA,AAAoBrF;AAApB,AAAAnI,AAAAwN,AAAA,AAAA,AAAsBjK;AAAtBiK,AAA4BE;AAA5B,AACE,AAACpO,AACA,AAAC8F,AAAAA,AAAAA,AAAE7B,AAAAA,AAAE+J,AAAAA,AACL,AAAApL,AAAA,AAAA;AAAA,AACC,AAACH,AACA,AAAClC,AACA,AAAA8N,AAAgBrK;AAAhB,AAAA,AAAAsK,AAAAD;AAAA,AAAA3N,AAAA4N,AAAA,AAAA,AAAMN;AAAN,AAAAtN,AAAA4N,AAAA,AAAA,AAAYL;AAAZ,AACE,AAAMM,AAAS,AAAGJ,AAAQ,AAACP,AAAAA,AAAAA,AAAK3J,AAAAA,AAAED,AAAAA;AAC5BwK,AAAQ,AAACxM,AAAM,AAACgM,AAAAA,AAAAA,AAAMhK,AAAAA;AAD5B,AAEE,AAAI,AAAAyK,AAAKD;AAAL,AAAA,AAAAC;AAAa,AAAIF,AAASC;;AAA1BC;;;AAAJ,AACGT,AAAMC;;AACP,AAAMA,AAAG,AAAIO,AACF,AAAA,AAACE,AAAKT,AAAIO,AAAQ,AAACG,AAAK3K,AAAGA,AAC3BiK;AAFX,AAAA,AAGG,AAAA,AAACnN,AAAMkN,AAAMhK,AAAGuK,AAAStK,AACzB,AAAA,AAAClE,AAAKkO,AAAIM,AAAS,AAACI,AAAK3K,AAAGA;;AAVtC,AAWEgK,AAAM,AAACU,AAAKT,AAAGG,AAChB,AAAChM,AAAAA,AAAAA,AAAW6B,AAAAA;AAdf,AAAA;;AAHH;;;AADV,AAmBE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACxB,AAAOvC,AAMD,AAAA,AAAA,AAAC0O,AAAc,AAACD,AAAKzO,AAAOA;;;AAhC1C,AAAA,AAAA,AAAMyN;;AAAN,AAkCA;;;;;AAAA,AAAMkB,AAIHzM,AAAWwL,AAAK1N;AAJnB,AAKE,AAACK,AACA,AAAAuO,AAAKnO;AAAL,AAAA,AAAAoO,AAAAD;AAAA,AAAApO,AAAAqO,AAAA,AAAA,AAAWnO;AAAXoO,AAAA,AAAAtO,AAAAqO,AAAA,AAAA;AAAA,AAAArO,AAAAsO,AAAA,AAAA,AAAc/I;AAAd,AAAAvF,AAAAsO,AAAA,AAAA,AAAgBnO;AAAhB,AACE,AAAIA;AACF,AAAA,AAACoO,AAAStO,AAAME,AAAED,AAAGqF;;AACrBtF;;AAJL,AAMC,AAACuO,AAAO,AAACvG,AAAK,AAACkF,AAAkBzL,AAAWwL,AAAK1N;;AAEpD;;;;;AAAA,AAAMiP,AAIH/M,AAAWwL,AAAK1N,AAAMoJ;AAJzB,AAKE,AAAAjG,AAAuB,AAACrB,AAAM,AAAC1C,AACA,AAAAgQ;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA5O,AAAA6O,AAAA,AAAA,AAAM1Q;AAAN,AAAA6B,AAAA6O,AAAA,AAAA,AAAW1G;AAAX,AAAe,AAACpJ,AAAE6J,AAAIzK;AACtB,AAACgP,AAAkBzL,AAAWwL,AAAK1N;AAFlE,AAAA,AAAAmD;AAAA,AAAA+L,AAAA/L;AAAA,AAAA3C,AAAA0O,AAAA,AAAA,AAAUvG;AAAV,AAAAnI,AAAA0O,AAAA,AAAA,AAAYC;AAAZ,AAAA,AAGG,AAACxF,AAAQ,AAAClL,AAAW,AAAC6Q,AAAKN,AAAOG,AAAW/F,AAC7C,AAACtH,AAAM,AAACqN,AAAAA,AAAAA,AAAU/F,AAAAA;;AAJrB;;;AAMF;;;;AAAA,AAAMmG,AAGHrN,AAAWwL,AAAK1N,AAAMoJ;AAHzB,AAIE,AAACtH,AAAM,AAACmN,AAAmB/M,AAAWwL,AAAK1N,AAAMoJ;;AAiDnD,AAAKoG,AAAc,AAAA,AAACC;AAEpB;;;AAAA,AAAMC,AAEHC;AAFH,AAGE,AAACF,AAAK,AAACG,AAAU,AAAGD,AAAKH;;AAE3B;;;AAAA,AAAMK;AAAN,AAGE,AAAA,AAACC;;AAEH,AAAA,AAAOC,AAAgBC,AAAGC;AAA1B,AAEW,AAAA,AAAQD,AAAKC;;AAExB;;;AAAA,AAAMC,AAEWC,AAAOC;AAFxB,AAGE,AAAMH,AAAK,AAAAI,AAAK,AAACtJ,AAAMoJ;AAAZG,AAAoB,AAACZ,AAAS,AAAA,AAAKU;AAAnC,AAAA,AAAAC,AAAAC,AAAAD,AAAAC;;AACLC,AAAW,AAACR,AAAQI,AAAOF;AAC3BO,AAAM,AAACC,AAAKL,AAAIZ;AAChBkB,AAAO,AAACC,AAAIP,AAAIZ;AAChBoB,AAAK,AAAA,AAAWF;AAChBG,AAAM,AAAMN,AAAWC;AACvBM,AAAU,AAAQD,AAAYD;AANpC,AAOE,AAAML,AAAWC,AAAMM;;AACvBP;;AAEJ;;;AAAA,AAAMQ,AAEIZ,AAAOC;AAFjB,AAGE,AAAM,AAAI,AAACV,AAAS,AAAA,AAAKU,AAAM,AAACrJ,AAAMoJ;AAAtC,AACE,AAAMK,AAAM,AAACC,AAAKL,AAAIZ;AAChBkB,AAAO,AAACC,AAAIP,AAAIZ;AAChBoB,AAAK,AAAA,AAAWF;AAChBG,AAAM,AAAMV,AAAOK;AACnBQ,AAAa,AAASH,AAAMD;AAJlC,AAKE,AAAK,AAAA,AAAOI;;AANhB;;;AAQF,AAAA;;;AAAA,AAAAjQ,AAAMkQ;AAAN,AAAA,AAAAjQ,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiQ,AAAA9P;;;AAAA,AAAA,AAAA,AAAA,AAAM8P,AAEMG;AAFZ,AAGE,AAAI,AAACvN,AAAOuN;AACV,AAACvB;;AACD,AAAMI,AAAK,AAACxO,AAAM4P,AAAI,AAACtF,AAAIhF,AAAMqK;AAC3Bb,AAAW,AAACR,AAAQ,AAACjO,AAAMsP,AAASnB;AAD1C,AAEE,AAAAqB,AAAA,AAAAlM,AAAe,AAACqC,AAAK2J;AAArBG,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQtB;AAAR,AAAA,AAAAuB,AAAA,AAAAtM,AACoB,AAACoN,AAAYC,AAAKtC;AADtCwB,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAArR,AAAAsR,AAAA,AAAA,AACS1B;AADT,AAAA5P,AAAAsR,AAAA,AAAA,AACajB;AADb,AAAA,AAEcG,AAAa,AAAQH,AAAM,AAAMN,AAAWH;AAF1D,AAAA,AAGE,AAAMG,AAAWH,AAAIY;;AAHvB;AAAA,AAAAU;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAxP,AAAA,AAAA+C,AAAAsM;AAAA,AAAA,AAAArP;AAAA,AAAA,AAAAqP,AAAArP;AAAA,AAAA,AAAA,AAAAuE,AAAA8K;AAAA,AAAAK,AAAA,AAAAC,AAAAN;AAAA,AAAA,AAAA,AAAAlK,AAAAkK;AAAAK;AAAA,AAAAhL,AAAAgL;AAAA;;;;;;;AAAA,AAAAE,AAAA,AAAAnQ,AAAA4P;AAAA,AAAAlR,AAAAyR,AAAA,AAAA,AACS7B;AADT,AAAA5P,AAAAyR,AAAA,AAAA,AACapB;AADb,AAAA,AAEcG,AAAa,AAAQH,AAAM,AAAMN,AAAWH;AAF1D,AAAA,AAGE,AAAMG,AAAWH,AAAIY;;AAHvB;AAAA,AAAA,AAAAjP,AAAA2P;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAAA,AAAAJ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAApP,AAAA,AAAA+C,AAAAkM;AAAA,AAAA,AAAAjP;AAAA,AAAA,AAAAiP,AAAAjP;AAAA,AAAA,AAAA,AAAAuE,AAAA0K;AAAA,AAAAS,AAAA,AAAAC,AAAAV;AAAA,AAAA,AAAA,AAAA9J,AAAA8J;AAAAS;AAAA,AAAAhL,AAAAgL;AAAA;;;;;;;AAAA,AAAA,AAAAjQ,AAAAwP,AAAQnB;AAAR,AAAA,AAAA+B,AAAA,AAAA9M,AACoB,AAACoN,AAAYC,AAAKtC;AADtCgC,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAA7R,AAAA8R,AAAA,AAAA,AACSlC;AADT,AAAA5P,AAAA8R,AAAA,AAAA,AACazB;AADb,AAAA,AAEcG,AAAa,AAAQH,AAAM,AAAMN,AAAWH;AAF1D,AAAA,AAGE,AAAMG,AAAWH,AAAIY;;AAHvB;AAAA,AAAAkB;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAhQ,AAAA,AAAA+C,AAAA8M;AAAA,AAAA,AAAA7P;AAAA,AAAA,AAAA6P,AAAA7P;AAAA,AAAA,AAAA,AAAAuE,AAAAsL;AAAA,AAAAH,AAAA,AAAAC,AAAAE;AAAA,AAAA,AAAA,AAAA1K,AAAA0K;AAAAH;AAAA,AAAAhL,AAAAgL;AAAA;;;;;;;AAAA,AAAAQ,AAAA,AAAAzQ,AAAAoQ;AAAA,AAAA1R,AAAA+R,AAAA,AAAA,AACSnC;AADT,AAAA5P,AAAA+R,AAAA,AAAA,AACa1B;AADb,AAAA,AAEcG,AAAa,AAAQH,AAAM,AAAMN,AAAWH;AAF1D,AAAA,AAGE,AAAMG,AAAWH,AAAIY;;AAHvB;AAAA,AAAA,AAAAjP,AAAAmQ;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAAA,AAAA,AAAAnQ,AAAAuP;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAIAf;;;;AAXN,AAAA,AAAA,AAAMU;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA/L,AAAA8L;;;AAAA,AAaA;;;AAAA,AAAMwB,AAEIvC;AAFV,AAGE,AAAAzJ,AAAA,AAAAiM;AAAA,AAAA,AAAAjQ,AAAA,AAAA;AAAA,AAAA,AAAAiQ,AAAAA;;AAAA,AAAA,AAAAtQ,AAAA,AAAA+C,AAAAuN;AAAA,AAAA,AAAAtQ;AAAA,AAAA,AAAAoI,AAAApI;AAAA,AAAA,AAAA,AAAAP,AAAA2I,AAAM+F;AAAN,AAAA,AAAA9F,AAAA;AAAAkI;AAAA,AAAA,AAAAlQ,AAAA,AAAA;;AAAA,AAAA,AAAAkQ,AAAAA;;AAAA,AAAA,AAAAvQ,AAAA,AAAA+C,AAAAwN;AAAA,AAAA,AAAAvQ;AAAA,AAAA,AAAAuQ,AAAAvQ;AAAA,AAAA,AAAA,AAAAuE,AAAAgM;AAAA,AAAA/L,AA26DiD,AAAAmL,AAAAY;AA36DjD9L,AAAA,AAAAC,AAAAF;AAAAgM,AAAA,AAAA5L,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAgM,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAhM;AAAA,AAAA,AAAAK,AAAAN,AAAAiM,AACMpC;AADN,AAAA,AAEYN,AAAI,AAAG,AAAGI,AAAMhB,AAAekB;AAF3C,AAAA,AAGY,AAACK,AAAOZ,AAAOC;AAH3B,AAAA,AAAAhJ,AAAAyL,AAIEzC;;AAJF,AAAA,AAAA0C,AAAA;;;;AAAA,AAAA,AAAAA,AAAA;;;;;AAAA;;;;;AAAA,AAAAzL,AAAA,AAAAC,AAAAuL,AAAA,AAAAE,AAAA,AAAAvL,AAAAoL;;AAAA,AAAAvL,AAAA,AAAAC,AAAAuL,AAAA;;;AAAA,AAAA,AAAA/Q,AAAA8Q,AACMlC;AADN,AAAA,AAEYN,AAAI,AAAG,AAAGI,AAAMhB,AAAekB;AAF3C,AAAA,AAGY,AAACK,AAAOZ,AAAOC;AAH3B,AAAAtQ,AAAA,AAAAiT,AAAA,AAAAtL,AAAAmL,AAIExC;;AAJF,AAAA,AAAA3I,AAAAmL;;;;;;AAAA;;;;;AAAA,AAAA;;;AAAA7H,AAAA,AAAA3F,AAAA,AAAAsF,AACa,AAACuI,AAAMzD;AADpB,AAAA,AAAAzE;AAAA,AAAAC,AAAAD,AAAA,AAAAiI,AAAA,AAAAvL,AAAAkL;;AAAA,AAAA,AAAAlL,AAAAkL;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAjM,AAAY,AAACuM,AAAM,AAAClM,AAAMoJ;;AAQ5B,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA+C,AAAAC,AAAWwD;;AAAX,AAAA,AAAAzD,AAAA;AAAA,AAAA,AAAAA,AAAAC,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAWqD;;AAAX,AAAA,AAAAvD,AAAA;AAAA,AAAA,AAAAG,AAAAF;AAAAE,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAAE;;;AAAA;AAAAC;;;AAAA;AAAAtC;;;;AAAA,AAAAzP,AAAAgS,AAAAN,AAAAC;;;;;AAAA,AAAA,AAAA,AAAA,AAAAM,AAAAC,AAAAC,AAAW6C;;AAAX,AAAA,AAAA/C,AAAA;AAAA,AAAA,AAAAvT,AAAA,AAAA0T,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAA1T,AAAAyT,AAAA,AAAA;AAAAE,AAAA,AAAA3T,AAAAyT,AAAA,AAAA;AAAA,AAAA,AAAAJ,AAAAA,AAAAE,AAAAG,AAAAC,AAAAN,AAAAE,AAAAG,AAAAC;AAAAL,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAQ,AAAAC,AAAAC,AAAWqC;;AAAX,AAAA,AAAAvC,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAE;;AAAA,AAAA,AAAAC,AAAAJ,AAAAE,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAtJ,AAAA,AAAA,AAAA0J,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjB,AAAA,AAAA,AAAAiB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhB,AAAA,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtD,AAAA,AAAAuC;;;AAAA,AAAA,AAAA,AAAA,AAAAgB,AAAWgC;;AAAX,AAAA,AAAAhC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAhB,AAAA,AAAAkB,AAAAlB,AAAA,AAAAmB;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAW4B;;AAAX,AAAA,AAAA5B,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAW0B;;AAAX,AAAA,AAAA1B,AAAA;AAAA,AAAA,AAAAxB,AAAAC,AAAAtC,AAAA4D,AAAArB,AAAAuB,AAAWyB;;;AAAX,AAAA,AAAA,AAAA,AAAAxB,AAAWwB;;AAAX,AAAA,AAAAxB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAApO,AAAA4M;;;AAAA,AAAA,AAAA,AAAA,AAAAyB,AAAWuB;;AAAX,AAAA,AAAAvB,AAAA;AAAA,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;AAAAA;;AAAA,AAAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAAF;AAAA,AAAA,AAAAF,AAAAG;;AAAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAWkB;;AAAX,AAAA,AAAAnB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAC,AAAA,AAAAlW,AAAA,AAAAiW,AAAA,AAAAC,AAAA,AAAAlW,AAAA,AAAAiW,AAAA,AAAAC,AAAA,AAAAlW,AAAA,AAAAiW,AAAA,AAAAC,AAAA,AAAAlW,AAAA,AAAAiW,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAWgB;;AAAX,AAAA,AAAAjB,AAAA;AAAA,AAAA,AAAA,AAAApT,AAAA,AAAA,AAAA,AAAA,AAAAqT;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAlT,AAAA,AAAA+S,AAAAV,AAAAW;;AAAA,AAAAlC,AAAAC,AAAAtC,AAAA4D,AAAA,AAAAc,AAAA,AAAAF,AAAAjC,AAAAgC,AAAA,AAAWgB;;;;AAAX,AAAA,AAAA,AAAA,AAAAZ,AAAAC,AAAArB,AAAWgC;;AAAX,AAAA,AAAAZ,AAAA;AAAA,AAAA,AAAAE,AAAAC;AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAAC,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAAxB,AAAAjB,AAAAtC,AAAA4D,AAAArB,AAAA,AAAWgD;;AAAX,AAAA,AAAAV,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAA1C,AAAAkB,AAAAvD,AAAA4D,AAAArB,AAAA,AAAWgD;;AAAX,AAAA,AAAAV,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAA1C,AAAAC,AAAAiB,AAAAK,AAAArB,AAAA,AAAWgD;;AAAX,AAAAlD,AAAAC,AAAAtC,AAAA4D,AAAA,AAAApU,AAAA+S,AAAAqC,AAAArB,AAAA,AAAWgC;;;;;;AAAX,AAAA,AAAA,AAAA,AAAAP,AAAWO;;AAAX,AAAA,AAAAP,AAAA;AAAA,AAAA,AAAAhR,AAAA,AAAA4F,AAAA,AAAA,AAAAqL,AAAA,AAAA5C,AAAA,AAAA,AAAA4C,AAAA,AAAA3C,AAAA,AAAA,AAAA2C,AAAA,AAAAjF,AAAA,AAAAuC;;;AAAA,AAAA,AAAA,AAAA,AAAA2C,AAAA3B,AAAWgC;;AAAX,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAA7C,AAAAC,AAAAtC,AAAAuD,AAAAhB,AAAAuB,AAAWyB;;;AAAX,AAAA,AAAA,AAAA,AAAAJ,AAAAC,AAAWG;;AAAX,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAAD;AAAA,AAAAD,AAAA,AAAApP,AAAAqP,AAAA,AAAA,AAAArP,AAAAqP,AAAA;;AAAA,AAAAnW,AAAAqW,AAAAH,AAAAC;;;;AAAA,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAC;AAAA,AAAA,AAAAxJ,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAuJ,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAD,AAAA;;;AAAA;;;AAAA,AAAWM,AAAU1D,AAAUC,AAAUtC;AAAzC,AAAA,AAAAuF,AAAA,AAAA,AAAA,AAAqBlD,AAAUC,AAAUtC;;;AAAzC;;;AAAA,AAAA2F,AAAWK;AAAX,AAAA,AAAAJ,AAAA,AAAAC,AAAA,AAAArB,AAAAmB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAAG,AAAAH;AAAA,AAAApU,AAAA,AAAAsU;;AAAAA;;;AAAA,AAAA,AAAAN,AAAA,AAAA,AAAAI,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjB,AAAAkB,AAAA;;;AAAAL,AAEA;;;AAAA,AAAMU;AAAN,AAGE,AAAA,AAAA,AAAA,AAACF;;AAEH;;;AAAA,AAAMG,AAEHC,AAAS5Y;AAFZ,AAGM4Y,AAAoB,AAAA,AAAA,AAACjV,AAAU3D;;AAErC,AAAA;;;AAAA,AAAAoC,AAAMyW;AAAN,AAAA,AAAAxW,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAArW;;;AAAA,AAAA,AAAA,AAAA,AAAMqW,AAEHD,AAAS5Y,AAAOiZ;AAFnB,AAGE,AAAI,AAACN,AAAmBC,AAAS5Y;AAE/B4Y;;AACA,AAAAM,AAA4CN;AAA5CM,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArW,AAAA,AAAAqW,AAAA,AAAA,AAAA,AAAA,AAAApW,AAAAC,AAAAmW,AAAAA;AAAA,AAAAlW,AAAAkW,AAAA,AAAcpE;AAAd,AAAA9R,AAAAkW,AAAA,AAAwBnE;AAAxB,AAAA/R,AAAAkW,AAAA,AAAkCzG;AAC5B0G,AAAI,AAAC/Q,AAAM0M;AACXA,AAAU,AAAC7S,AAAM6S,AAAU9U,AAAKmZ;AAChCpE,AAAU,AAAC9S,AAAM8S,AAAUoE,AAAInZ;AAC/BoZ,AAAM,AAAChM,AAAI0H,AAAUmE;AACrBrH,AAAW,AAAI,AAAC1M,AAAOkU,AACV,AAAClI,AACD,AAACpO,AAAMwP,AAAM,AAAClF,AAAIqF,AAAQ2G;AACvCxH,AAAW,AAAClQ,AAAO6P,AAAOK,AAAWwH;AACrC3G,AAAQ,AAACvR,AAAKuR,AAAQb;AAT5B,AAUE,AAAC4G,AAAW1D,AAAUC,AAAUtC;;;;AAhBtC,AAAA,AAAA,AAAMoG;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAA5V,AAAA2V;AAAAA,AAAA,AAAA1V,AAAA0V;AAAAE,AAAA,AAAA7V,AAAA2V;AAAAA,AAAA,AAAA1V,AAAA0V;AAAA,AAAA,AAAAxV,AAAA;AAAA,AAAA,AAAAA,AAAAyV,AAAAC,AAAAF;;;AAAA,AAkBA;;;;AAAA,AAAMO,AAGHT,AAASU,AAAQC;AAHpB,AAIE,AAAAC,AAAkCZ;AAAlCY,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3W,AAAA,AAAA2W,AAAA,AAAA,AAAA,AAAA,AAAA1W,AAAAC,AAAAyW,AAAAA;AAAA,AAAAxW,AAAAwW,AAAA,AAAc1E;AAAd,AAAA9R,AAAAwW,AAAA,AAAwB/G;AAClBgH,AAAK,AAAC3E,AAAAA,AAAAA,AAAUwE,AAAAA;AAChBI,AAAK,AAAC5E,AAAAA,AAAAA,AAAUyE,AAAAA;AAFtB,AAGE,AAACI,AACA,AAAM,AAAA/J,AAAK6J;AAAL,AAAA,AAAA7J;AAAU8J;;AAAV9J;;AAAN,AAAA,AACE,AAACwC,AAAO,AAACpP,AAAIyP,AAAQgH,AACbC;;AAEf;;;AAAA,AAAME,AAEHhB,AAASiB;AAFZ,AAGE,AAAAC,AAA4ClB;AAA5CkB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjX,AAAA,AAAAiX,AAAA,AAAA,AAAA,AAAA,AAAAhX,AAAAC,AAAA+W,AAAAA;AAAA,AAAA9W,AAAA8W,AAAA,AAAchF;AAAd,AAAA9R,AAAA8W,AAAA,AAAwB/E;AAAxB,AAAA/R,AAAA8W,AAAA,AAAkCrH;AAC5BgH,AAAK,AAAC3E,AAAAA,AAAAA,AAAU+E,AAAAA;AADtB,AAEO,AAAC7W,AAAIyP,AAAQgH,AACb1F,AACA,AAAA,AAAC3G,AAAI2H;;AAEd;;;AAAA,AAAMgF,AAEHnB;AAFH,AAGE,AAAA,AAAA,AAAIA,AAAoBvN","names":["loom.alg-generic/trace-path","preds","node","cljs.core.take_while","cljs.core/identity","cljs.core/iterate","loom.alg-generic/paths","path","this-node","cljs.core/peek","p1__35635#","cljs.core.filter","cljs.core/not-any?","edge","cljs.core._EQ_","cljs.core.partition","p1__35636#","cljs.core.mapcat","G__35638","G__35639","cljs.core.conj","cljs.core/cons","loom.alg-generic/trace-paths","start","p1__35645#","cljs.core.remove","G__35646","loom.alg-generic/preds->span","cljs.core.reduce","p__35654","vec__35655","cljs.core.nth","span","n","p","cljs.core.assoc","G__35658","G__35659","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","loom.alg-generic/pre-traverse","p__35669","map__35670","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq35661","G__35662","cljs.core/first","cljs.core/next","G__35663","self__4776__auto__","successors","seen","stack","temp__5735__auto__","cljs.core/contains?","step","cljs.core/pop","nbrs","cljs.core/LazySeq","cljs.core.into","loom.alg-generic/pre-edge-traverse","p__35695","map__35696","seq35686","G__35687","G__35688","nbrstack","temp__5733__auto__","nbr","parent","loom.alg-generic/pre-span","p__35712","map__35713","seq35705","G__35706","G__35707","return-seen","cljs.core/empty?","v","u","loom.alg-generic/post-traverse","p__35730","map__35731","seq35724","G__35725","G__35726","result","loom.alg-generic/post-edge-traverse","p__35740","map__35741","seq35737","G__35738","G__35739","edges","G__35750","loom.alg-generic/topsort-component","js/Error","loom.alg_generic.topsort_component","explored","us","cljs.core/seq","cljs.core/some","loom.alg-generic/bf-traverse","p__35781","map__35782","seq35774","G__35776","G__35777","f","when","or__4185__auto__","d","nbr-pred","cljs.core/constantly","queue","vec__35817","depth","p1__35767#","p1__35769#","G__35823","G__35824","G__35825","iter__4582__auto__","s__35829","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__35832","cljs.core/chunk-buffer","i__35831","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__35828","cljs.core/chunk-rest","cljs.core/rest","p1__35771#","p2__35772#","cljs.core/PersistentQueue","cljs.core/map?","s__35841","b__35843","i__35842","iter__35840","s","loom.alg-generic/bf-span","p__35866","map__35868","seq35861","G__35862","G__35863","cljs.core/last","loom.alg_generic.bf_traverse","_","pm","loom.alg-generic/bf-path","p__35879","map__35880","seq35873","G__35874","G__35875","G__35876","end","opts","cljs.core.merge","cljs.core/vector","p__35885","vec__35888","cljs.core/concat","cljs.core/reverse","loom.alg-generic/shared-keys","m1","m2","cljs.core.partial","cljs.core/keys","loom.alg-generic/bf-path-bi","outgoing","predecessors","loom.alg-generic/reverse-edges","successor-fn","nodes","coll","s__35899","xs__6292__auto__","iterys__4578__auto__","s__35901","b__35903","i__35902","iter__35900","fs__4579__auto__","cljs.core.concat","iter__35898","loom.alg-generic/conj-paths","from-map","to-map","matches","s__35912","s__35914","s__35916","b__35918","i__35917","iter__35915","iter__35913","iter__35911","from","cljs.core.map","to","cljs.core/vec","loom.alg-generic/bf-paths-bi","find-succs","find-preds","overlaps","q","p1__35925#","map-set-pairs","map","pairs","cljs.core/persistent!","p__35933","vec__35934","key","val","cljs.core.assoc_BANG_","cljs.core/transient","incoming","q1","cljs.core/List","q2","all","cljs.core/set","G__35946","loom.alg-generic/dijkstra-traverse","dist","loom.alg_generic.dijkstra_traverse","p__35968","vec__35969","state","pq","vec__35973","dist-su","fpq","p__35976","vec__35977","dist-suv","dist-sv","and__4174__auto__","cljs.core.disj","cljs.core/hash","cljs.core.sorted_set","loom.alg-generic/dijkstra-span","p__35983","vec__35984","vec__35987","cljs.core/assoc-in","cljs.core/second","loom.alg-generic/dijkstra-path-dist","vec__35994","end-state","p__35990","vec__35991","cljs.core.comp","loom.alg-generic/dijkstra-path","loom.alg-generic/bits-per-long","cljs.core/long","loom.alg-generic/bm-longs","bits","Math/ceil","loom.alg-generic/bm-new","cljs.core.long_array","loom.alg-generic/bm-copy","bm","size","loom.alg-generic/bm-set","bitmap","idx","x__4273__auto__","y__4274__auto__","new-bitmap","chunk","cljs.core/quot","offset","cljs.core/mod","mask","value","new-value","loom.alg-generic/bm-get","masked-value","loom.alg-generic/bm-or","seq36011","self__4777__auto__","bitmaps","cljs.core/max","seq__36014","chunk__36021","count__36022","i__36023","seq__36024","chunk__36026","count__36027","i__36028","vec__36072","c__4609__auto__","cljs.core/chunk-first","vec__36075","seq__36015","chunk__36017","count__36018","i__36019","vec__36084","vec__36087","cljs.core.map_indexed","cljs.core/list","loom.alg-generic/bm-get-indicies","s__36091","s__36093","b__36095","i__36094","iter__36092","iter__36090","cljs.core.range","this__4439__auto__","k__4440__auto__","this__4441__auto__","k36097","else__4442__auto__","G__36101","cljs.core/Keyword","node->idx","idx->node","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","ret__4461__auto__","p__36102","vec__36103","k__4462__auto__","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core/PersistentVector","G__36096","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","this__4435__auto__","h__4297__auto__","coll__4436__auto__","cljs.core/hash-unordered-coll","this36098","other36099","this__4448__auto__","k__4449__auto__","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__36106","cljs.core/keyword-identical?","expr__36107","this__4451__auto__","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core/-conj","loom.alg-generic/Ancestry","this__4482__auto__","writer__4483__auto__","cljs.core/-write","G__36100","extmap__4478__auto__","G__36109","cljs.core/record?","loom.alg-generic/->Ancestry","loom.alg-generic/map->Ancestry","loom.alg-generic/ancestry-new","loom.alg-generic/ancestry-contains?","ancestry","loom.alg-generic/ancestry-add","seq36110","G__36111","G__36112","parents","map__36113","nid","pidxs","loom.alg-generic/ancestor?","childer","parenter","map__36115","cidx","pidx","cljs.core/boolean","loom.alg-generic/ancestors","child","map__36117","loom.alg-generic/ancestry-nodes"],"sourcesContent":["(ns ^{:doc \"Graph algorithms for use on any type of graph\"\n      :author \"Justin Kramer\"}\n  loom.alg-generic\n  (:refer-clojure :exclude [ancestors]))\n\n#?(:clj (do (set! *warn-on-reflection* true)\n            ;(set! *unchecked-math* :warn-on-boxed)\n            ))\n\n;;;\n;;; Utility functions\n;;;\n\n(defn trace-path\n  \"Using a map of nodes-to-preds, traces a node's family tree back to the\n  source. Cycles are not accounted for.\"\n  [preds node]\n  (take-while identity (iterate preds node)))\n\n(defn paths\n  \"Returns a lazy seq of all non-looping path vectors starting with\n  [<start-node>]\"\n  [preds path]\n  (let [this-node (peek path)]\n    (->> (preds this-node)\n         (filter #(not-any? (fn [edge] (= edge [this-node %]))\n                            (partition 2 1 path)))\n         (mapcat #(paths preds (conj path %)))\n         (cons path))))\n\n(defn trace-paths\n  \"Given a function and a starting node, returns all possible paths\n  back to source. Cycles are not accounted for.\"\n  [preds start]\n  (remove #(preds (peek %)) (paths preds [start])))\n\n(defn preds->span\n  \"Converts a map of the form {node predecessor} to a spanning tree of the\n  form {node [successors]}\"\n  [preds]\n  (reduce\n   (fn [span [n p]]\n     (if p\n       (assoc span p (conj (span p []) n))\n       span))\n   {} preds))\n\n;;;\n;;; Depth-first traversal\n;;;\n\n(defn pre-traverse\n  \"Traverses a graph depth-first preorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  lazy seq of nodes.\"\n  [successors start & {:keys [seen] :or {seen #{}}}]\n  (letfn [(step [stack seen]\n            (when-let [node (peek stack)]\n              (if (contains? seen node)\n                (step (pop stack) seen)\n                (let [seen (conj seen node)\n                      nbrs (remove seen (successors node))]\n                  (lazy-seq\n                    (cons node\n                          (step (into (pop stack) nbrs)\n                                seen)))))))]\n    (step [start] seen)))\n\n(defn pre-edge-traverse\n  \"Traverses a graph depth-first preorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  lazy seq of edges, each edge being a vector [source-node dest-node].\n  Note that for undirected graphs each edge will be returned twice,\n  once for each direction.\"\n  [successors start & {:keys [seen] :or {seen #{}}}]\n  (letfn [(step [successors start nbrs stack nbrstack seen]\n    (if-let [nbr (first nbrs)]\n      (cons\n        [start nbr]\n        (lazy-seq\n          (let [seen (conj seen start)]\n            (if (seen nbr)\n              (step successors start (next nbrs) stack nbrstack seen)\n              (step successors nbr (successors nbr)\n                    (conj stack start) (conj nbrstack (next nbrs))\n                    seen)))))\n      (when-let [parent (peek stack)]\n        (recur successors parent (peek nbrstack)\n               (pop stack) (pop nbrstack) (conj seen start)))))]\n    (when-not (seen start)\n      (step successors start (successors start) [] [] (conj seen start)))))\n\n;; TODO: graph-seq, analog of tree-seq\n\n(defn pre-span\n  \"Returns a depth-first spanning tree of the form {node [successors]}\"\n  [successors start & {:keys [seen return-seen] :or {seen #{}}}]\n  (loop [seen seen\n         preds {start nil}\n         stack [start]]\n    (if (empty? stack)\n      ;; TODO: this is awkward, devise something better\n      (if return-seen\n        [(preds->span preds) seen]\n        (preds->span preds))\n      (let [v (peek stack)\n            seen (conj seen v)]\n        (if-let [u (first (remove seen (successors v)))]\n          (recur seen (assoc preds u v) (conj stack u))\n          (recur seen preds (pop stack)))))))\n\n(defn post-traverse\n  \"Traverses a graph depth-first postorder from start, successors\n  being a function that returns adjacent nodes. Returns a vector\"\n  [successors start & {:keys [seen return-seen] :or {seen #{}}}]\n  ;; For most graphs, being lazy wouldn't matter\n  (loop [seen seen\n         result []\n         stack [start]]\n    (if (empty? stack)\n      (if return-seen\n        [result seen]\n        result)\n      (let [v (peek stack)\n            seen (conj seen v)\n            nbrs (remove seen (successors v))]\n        (if (empty? nbrs)\n          (recur seen (conj result v) (pop stack))\n          (recur seen result (conj stack (first nbrs))))))))\n\n(defn post-edge-traverse\n  \"Traverses a graph depth-first postorder from start, successors being\n  a function that returns direct successors for the node. Returns a\n  seq of edges, each edge being a vector [source-node dest-node].\n  Note that for undirected graphs each edge will be returned twice,\n  once for each direction.\"\n  [successors start & {:keys [seen return-seen] :or {seen #{}}}]\n  (if (seen start)\n    (when return-seen\n      [nil seen])\n    (loop [start start\n          nbrs (successors start)\n          stack []\n          nbrstack []\n          seen seen\n          edges ()]\n      (let [seen (conj seen start)]\n        (if-let [nbr (first nbrs)]\n          (if (seen nbr)\n            (recur start (next nbrs) stack nbrstack seen (conj edges [start nbr]))\n            (recur nbr (successors nbr)\n                   (conj stack start) (conj nbrstack (next nbrs))\n                   seen (conj edges [start nbr])))\n          (if-let [parent (peek stack)]\n            (recur parent (peek nbrstack)\n                   (pop stack) (pop nbrstack) seen edges)\n            (if return-seen\n              [edges seen]\n              edges)))))))\n\n(defn topsort-component\n  \"Topological sort of a component of a (presumably) directed graph.\n  Returns nil if the graph contains any cycles. See loom.alg/topsort\n  for a complete topological sort\"\n  ([successors start]\n     (topsort-component successors start #{} #{}))\n  ([successors start seen explored]\n     (loop [seen seen\n            explored explored\n            result ()\n            stack [start]]\n       (if (empty? stack)\n         result\n         (let [v (peek stack)\n               seen (conj seen v)\n               us (remove explored (successors v))]\n           (if (seq us)\n             (when-not (some seen us)\n               (recur seen explored result (conj stack (first us))))\n             (recur seen (conj explored v) (conj result v) (pop stack))))))))\n\n;;;\n;;; Breadth-first traversal\n;;;\n\n(defn bf-traverse\n  \"Traverses a graph breadth-first from start, successors being a\n  function that returns adjacent nodes. When :f is provided, returns a\n  lazy seq of (f node predecessor-map depth) for each node traversed.\n  Otherwise, returns a lazy seq of the nodes. When :when is provided,\n  filters successors with (f neighbor predecessor depth).\"\n  [successors start & {:keys [f when seen]}]\n  (let [f (or f (fn [n p d] n))\n        nbr-pred (or when (constantly true))]\n    (letfn [(step [queue preds]\n              (when-let [[node depth] (peek queue)]\n                (cons\n                 (f node preds depth)\n                 (lazy-seq\n                  (let [nbrs (->> (successors node)\n                                  (remove #(contains? preds %))\n                                  (filter #(nbr-pred % node (inc depth))))]\n                    (step (into (pop queue) (for [nbr nbrs] [nbr (inc depth)]))\n                          (reduce #(assoc %1 %2 node) preds nbrs)))))))]\n      (step (conj #?(:clj clojure.lang.PersistentQueue/EMPTY\n                     :cljs cljs.core/PersistentQueue.EMPTY)\n                  [start 0])\n            (if (map? seen)\n              (assoc seen start nil)\n              (into {start nil} (for [s seen] [s nil])))))))\n\n(defn bf-span\n  \"Return a breadth-first spanning tree of the form {node\n  [successors]}\"\n  [successors start & {:keys [seen]}]\n  (preds->span\n   (last\n    (bf-traverse successors start\n                 :f (fn [_ pm _] pm)\n                 :seen seen))))\n\n(defn bf-path\n  \"Returns a path from start to end with the fewest hops (i.e. irrespective\n  of edge weights), successors being a function that returns adjacent nodes\"\n  [successors start end & {:as opts}]\n  (let [opts (merge opts {:f vector})]\n    (when-let [preds (some\n                      (fn [[_ pm _]] (when (pm end) pm))\n                      (apply bf-traverse successors start (apply concat opts)))]\n      (reverse (trace-path preds end)))))\n\n(defn- shared-keys\n  \"Returns a lazy-seq of the keys that exist in both m1 and m2\"\n  [m1 m2]\n  (if (< (count m2) (count m1))\n    (recur m2 m1)\n    (filter (partial contains? m2) (keys m1))))\n\n#?(:cljs\n   (defn bf-path-bi [outgoing predecessors start end]\n     (throw (js/Error. \"Unsupported operation `bf-path-bi`\")))\n   :clj\n   (defn bf-path-bi\n     \"Using a bidirectional breadth-first search, finds a path from start\n  to end with the fewest hops (i.e. irrespective of edge weights),\n  outgoing and predecessors being functions which return adjacent\n  nodes. Can be much faster than a unidirectional search on certain\n  types of graphs\"\n     [outgoing predecessors start end]\n     (let [done? (atom false)\n           preds1 (atom {})             ;from start to end\n           preds2 (atom {})             ;from end to start\n           search (fn [nbrs n preds]\n                    (dorun\n                     (take-while\n                      (fn [_] (not @done?))\n                      (bf-traverse\n                       nbrs n :f (fn [_ pm _] (reset! preds pm))))))\n           search1 (future (search outgoing start preds1))\n           search2 (future (search predecessors end preds2))\n           ;; TODO: watchers?\n           find-intersects #(shared-keys @preds1 @preds2)]\n       (loop [intersects (find-intersects)]\n         (if (or (seq intersects) (future-done? search1) (future-done? search2))\n           (do\n             (reset! done? true)\n             (cond\n               (seq intersects)\n               (let [intersect (apply min-key\n                                      #(+ (count (trace-path @preds1 %))\n                                          (count (trace-path @preds2 %)))\n                                      intersects)]\n                 (concat\n                  (reverse (trace-path @preds1 intersect))\n                  (rest (trace-path @preds2 intersect))))\n               (@preds1 end) (reverse (trace-path @preds1 end))\n               (@preds2 start) (trace-path @preds2 start)))\n           (recur (find-intersects)))))))\n\n(defn- reverse-edges [successor-fn nodes coll]\n  (for [node nodes\n        nbr (successor-fn node)\n        :when (not (contains? coll nbr))]\n    [nbr node]))\n\n(defn- conj-paths [from-map to-map matches]\n  (for [n matches\n        from (map reverse (trace-paths from-map n))\n        to (map rest (trace-paths to-map n))]\n    (vec (concat from to))))\n\n(defn bf-paths-bi\n  \"Using a bidirectional breadth-first search, returns all shortest\n  paths from start to end; predecessors is called on end and each\n  preceding node, successors is called on start, etc.\"\n  [successors predecessors start end]\n  (let [find-succs (partial reverse-edges successors)\n        find-preds (partial reverse-edges predecessors)\n        overlaps (fn [coll q] (seq (filter #(contains? coll %) q)))\n        map-set-pairs (fn [map pairs]\n                        (persistent! (reduce (fn [map [key val]]\n                                  (assoc! map key (conj (get map key #{}) val)))\n                                (transient map) pairs)))]\n    (loop [outgoing {start nil}\n           incoming {end nil}\n           q1 (list start)\n           q2 (list end)]\n      (when (and (seq q1) (seq q2))\n        (if (<= (count q1) (count q2))\n          (let [pairs (find-succs q1 outgoing)\n                outgoing (map-set-pairs outgoing pairs)\n                q1 (map first pairs)]\n            (if-let [all (overlaps incoming q1)]\n              (conj-paths outgoing incoming (set all))\n              (recur outgoing incoming q1 q2)))\n          (let [pairs (find-preds q2 incoming)\n                incoming (map-set-pairs incoming pairs)\n                q2 (map first pairs)]\n            (if-let [all (overlaps outgoing q2)]\n              (conj-paths outgoing incoming (set all))\n              (recur outgoing incoming q1 q2))))))))\n\n;; FIXME: Decide whether this can be optimized and is worth keeping\n#_(defn bf-path-bi2\n    \"Non-threaded version of bf-path-bi. Tends to be slower.\"\n    [outgoing predecessors start end]\n    (loop [preds {start nil}\n           succs {end nil}\n           q1 [start]\n           q2 [end]]\n      (when (and (seq q1) (seq q2))\n        (if (<= (count q1) (count q2))\n          (let [pairs (for [node q1 nbr (outgoing node)\n                            :when (not (contains? preds nbr))]\n                        [nbr node])\n                preds (into preds pairs)\n                q1 (map first pairs)]\n            (if-let [i (some #(when (contains? succs %) %) q1)]\n              (concat\n               (reverse (trace-path preds i))\n               (rest (trace-path succs i)))\n              (recur preds succs q1 q2)))\n          (let [pairs (for [node q2 nbr (predecessors node)\n                            :when (not (contains? succs nbr))]\n                        [nbr node])\n                succs (into succs pairs)\n                q2 (map first pairs)]\n            (if-let [i (some #(when (contains? preds %) %) q2)]\n              (concat\n               (reverse (trace-path preds i))\n               (rest (trace-path succs i)))\n              (recur preds succs q1 q2)))))))\n\n;;;\n;;; Dijkstra\n;;;\n\n(defn dijkstra-traverse\n  \"Returns a lazy-seq of [current-node state] where state is a map in the\n  format {node [distance predecessor]}. When f is provided, returns\n  a lazy-seq of (f node state) for each node\"\n  ([successors dist start]\n     (dijkstra-traverse successors dist start vector))\n  ([successors dist start f]\n     (letfn [(step [[state pq]]\n               (when-let [[dist-su _ u :as fpq] (first pq)]\n                 (cons\n                  (f u state)\n                  (lazy-seq\n                   (step\n                    (reduce\n                     (fn [[state pq] v]\n                       (let [dist-suv (+ dist-su (dist u v))\n                             dist-sv (first (state v))]\n                         (if (and dist-sv (>= dist-suv dist-sv))\n                           [state pq]\n                           (let [pq (if dist-sv\n                                      (disj pq [dist-sv (hash v) v])\n                                      pq)]\n                             [(assoc state v [dist-suv u])\n                              (conj pq [dist-suv (hash v) v])]))))\n                     [state (disj pq fpq)]\n                     (successors u)))))))]\n       (step [{start [0 nil]}\n              ;; Poor man's priority queue. Caveats:\n              ;; 1) Have to keep it in sync with current state\n              ;; 2) Have to include hash codes for non-Comparable items\n              ;; 3) O(logn) operations\n              ;; Tried clojure.contrib.priority-map but it wasn't any faster\n              (sorted-set [0 (hash start) start])]))))\n\n(defn dijkstra-span\n  \"Finds all shortest distances from start, where successors and dist\n  are functions called as (successors node) and (dist node1 node2).\n  Returns a map in the format {node {successor distance}}\"\n  [successors dist start]\n  (reduce\n   (fn [span [n [d p]]]\n     (if p\n       (assoc-in span [p n] d)\n       span))\n   {}\n   (second (last (dijkstra-traverse successors dist start)))))\n\n(defn dijkstra-path-dist\n  \"Finds the shortest path from start to end, where successors and dist\n  are functions called as (successors node) and (dist node1 node2).\n  Returns a vector: [path distance]\"\n  [successors dist start end]\n  (if-let [[_ end-state] (first (filter\n                                 (fn [[node _]] (= end node))\n                                 (dijkstra-traverse successors dist start)))]\n    [(reverse (trace-path (comp second end-state) end))\n     (first (end-state end))]))\n\n(defn dijkstra-path\n  \"Finds the shortest path from start to end, where successors and dist\n  are functions called as (successors node) and (dist node1 node2)\"\n  [successors dist start end]\n  (first (dijkstra-path-dist successors dist start end)))\n\n;; FIXME: Research proper way to do this\n#_(defn dijkstra-path-dist-bi\n    \"Finds a path -- not necessarily the shortest -- from start to end\n  birectionally, where successors and dist are functions called as\n  (successors node) and (dist node1 node2). Returns a vector: [path distance]\"\n    [successors dist start end]\n    ;; TODO: make this work better with directed graphs (predecessors fn)\n    (let [done? (atom false)\n          processed1 (atom #{})\n          processed2 (atom #{})\n          state1 (atom nil)\n          state2 (atom nil)\n          find-intersect (fn [] (some #(when (@processed1 %) %) @processed2))\n          search (fn [n processed state]\n                   (dorun\n                    (take-while\n                     (fn [_] (not @done?))\n                     (dijkstra-traverse successors dist n\n                                        #(do\n                                           (swap! processed conj %1)\n                                           (reset! state %2))))))\n          search1 (future (search start processed1 state1))\n          search2 (future (search end processed2 state2))]\n      (loop [intersect (find-intersect)]\n        (if (or intersect (future-done? search1))\n          (do\n            (prn intersect)\n            (reset! done? true)\n            (cond\n             intersect [(concat\n                         (reverse (trace-path (comp second @state1) intersect))\n                         (rest (trace-path (comp second @state2) intersect)))\n                        (+ (first (@state1 intersect))\n                           (first (@state2 intersect)))]\n             (@state1 end) [(reverse (trace-path (comp second @state1) end))\n                            (first (@state1 end))]\n             (@state2 start) [(trace-path (comp second @state2) start)\n                              (first (@state2 start))]))\n\n          (recur (find-intersect))))))\n\n;;;\n;;; Node-bitmap based fast DAG ancestry cache implementation\n;;;\n\n;;; Ancestry node-bitmap helper vars/fns\n\n(def bits-per-long (long #?(:clj 64 :cljs 32)))\n\n(defn bm-longs\n  \"Returns the number of longs required to store bits count bits in a bitmap.\"\n  [bits]\n  (long (Math/ceil (/ bits bits-per-long))))\n\n(defn bm-new\n  \"Create new empty bitmap.\"\n  ^longs []\n  (long-array 1))\n\n(defn- bm-copy ^longs [bm size]\n  #?(:clj (java.util.Arrays/copyOf ^longs bm ^Long size)\n     :cljs (.slice bm 0 size)))\n\n(defn bm-set\n  \"Set boolean state of bit in 'bitmap at 'idx to true.\"\n  ^longs [^longs bitmap idx]\n  (let [size (max (count bitmap) (bm-longs (inc idx)))\n        new-bitmap (bm-copy bitmap size) \n        chunk (quot idx bits-per-long)\n        offset (mod idx bits-per-long)\n        mask (bit-set 0 offset)\n        value (aget new-bitmap chunk)\n        new-value (bit-or value ^Long mask)]\n    (aset new-bitmap chunk new-value)\n    new-bitmap))\n\n(defn bm-get\n  \"Get boolean state of bit in 'bitmap at 'idx.\"\n  [^longs bitmap idx]\n  (when (<= (bm-longs (inc idx)) (count bitmap))\n    (let [chunk (quot idx bits-per-long)\n          offset (mod idx bits-per-long)\n          mask (bit-set 0 offset)\n          value (aget bitmap chunk)\n          masked-value (bit-and value mask)]\n      (not (zero? masked-value)))))\n\n(defn bm-or\n  \"Logically OR 'bitmaps together.\"\n  ^longs [& bitmaps]\n  (if (empty? bitmaps)\n    (bm-new)\n    (let [size (apply max (map count bitmaps))\n          new-bitmap (bm-copy (first bitmaps) size)]\n      (doseq [bitmap (rest bitmaps)\n              [idx value] (map-indexed list bitmap)\n              :let [masked-value (bit-or value (aget new-bitmap idx))]]\n        (aset new-bitmap idx masked-value))\n      new-bitmap)))\n\n(defn bm-get-indicies\n  \"Get the indicies of set bits in 'bitmap.\"\n  [^longs bitmap]\n  (for [chunk (range (count bitmap))\n        offset (range bits-per-long)\n        :let [idx (+ (* chunk bits-per-long) offset)]\n        :when (bm-get bitmap idx)]\n    idx))\n\n;;; Ancestry public API\n\n(defrecord Ancestry [node->idx idx->node bitmaps])\n\n(defn ancestry-new\n  \"Create a new, empty Ancestry cache.\"\n  []\n  (->Ancestry {} {} []))\n\n(defn ancestry-contains?\n  \"Finds if a 'node is contained in the 'ancestry cache.\"\n  [ancestry node]\n  (-> ancestry :node->idx (contains? node)))\n\n(defn ancestry-add\n  \"Adds a 'node and its 'parents associations to the 'ancestry cache.\"\n  [ancestry node & parents]\n  (if (ancestry-contains? ancestry node)\n    ;; TODO Should we throw instead of drop?\n    ancestry\n    (let [{:keys [node->idx idx->node bitmaps]} ancestry\n          nid (count node->idx)\n          node->idx (assoc node->idx node nid)\n          idx->node (assoc idx->node nid node)\n          pidxs (map node->idx parents)\n          new-bitmap (if (empty? pidxs)\n                       (bm-new)\n                       (apply bm-or (map bitmaps pidxs)))\n          new-bitmap (reduce bm-set new-bitmap pidxs)\n          bitmaps (conj bitmaps new-bitmap)]\n      (->Ancestry node->idx idx->node bitmaps))))\n\n(defn ancestor?\n  \"Finds if the 'parenter node is an ancestor of 'childer node for the given\n  'ancestry cache.\"\n  [ancestry childer parenter]\n  (let [{:keys [node->idx bitmaps]} ancestry\n        cidx (node->idx childer)\n        pidx (node->idx parenter)]\n    (boolean\n     (when (and cidx pidx)\n       (bm-get (get bitmaps cidx)\n               pidx)))))\n\n(defn ancestors\n  \"Returns all of the ancestors of 'child node.\"\n  [ancestry child]\n  (let [{:keys [node->idx idx->node bitmaps]} ancestry\n        cidx (node->idx child)]\n    (->> (get bitmaps cidx)\n         bm-get-indicies\n         (map idx->node))))\n\n(defn ancestry-nodes\n  \"Returns all of the nodes in an 'ancestry.\"\n  [ancestry]\n  (-> ancestry :node->idx keys))\n"]}