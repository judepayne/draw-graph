{"version":3,"sources":["kvlt/util.cljc"],"mappings":"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","names":["kvlt.util/map-keys","f","m","cljs.core.into","iter__4582__auto__","s__41741","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__41743","cljs.core/chunk-buffer","i__41742","vec__41746","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__41740","cljs.core/chunk-rest","vec__41749","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","kvlt.util/map-vals","s__41757","b__41759","i__41758","vec__41761","iter__41756","vec__41765","+none+","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","kvlt.util/update-when","seq41768","G__41769","cljs.core/next","G__41770","G__41771","self__4776__auto__","key","args","found","cljs.core.assoc","cljs.core.apply","kvlt.util/bidirectional-chan","p__41780","vec__41782","map__41785","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","seq41776","G__41777","G__41778","read-ch","write-ch","on-close","close?","js/kvlt","js/kvlt.util","js/kvlt.util.t_kvlt$util41789","kvlt.util/t_kvlt$util41789","_41791","meta41790","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","kvlt.util/->t_kvlt$util41789","_","handler","cljs.core.async.impl.protocols/take!","msg","cljs.core.async.impl.protocols/put!","cljs.core.async.impl.protocols/close!","kvlt.util/read-proxy-chan","p__41806","vec__41807","map__41810","seq41800","G__41801","G__41803","js/kvlt.util.t_kvlt$util41813","kvlt.util/t_kvlt$util41813","_41815","meta41814","kvlt.util/->t_kvlt$util41813","kvlt.util/pprint-str","x","clojure.string/trimr","sb__4720__auto__","goog.string/StringBuffer","*print-newline*-orig-val__41826","cljs.core/*print-newline*","*print-fn*-orig-val__41827","cljs.core/*print-fn*","*print-newline*-temp-val__41828","*print-fn*-temp-val__41829","x__4721__auto__","cljs.pprint.pprint","kvlt.util/doc-examples!","vvar","examples","cljs.core.alter_meta_BANG_","cljs.core/update","cljs.core/str","clojure.string.join","s__41831","b__41833","i__41832","vec__41837","iter__41830","vec__41841","before","after","G__41840","G__41844","cljs.core/chunk-first"],"sourcesContent":["(ns ^:no-doc kvlt.util\n  (:require\n   [clojure.string :as str]\n   #? (:clj  [clojure.core.async.impl.protocols :as p]\n       :cljs [cljs.core.async.impl.protocols :as p])\n   #? (:clj  [clojure.pprint :as pprint]\n       :cljs [cljs.pprint :as pprint]))\n  #? (:cljs (:require-macros [kvlt.util])))\n\n(defn map-keys [f m]\n  (into {} (for [[k v] m] [(f k) v])))\n\n(defn map-vals [f m]\n  (into {} (for [[k v] m] [k (f v)])))\n\n;; Taken from Plumbing\n(let [+none+ ::none]\n  (defn update-when [m key f & args]\n    (let [found (m key +none+)]\n      (if-not (identical? +none+ found)\n        (assoc m key (apply f found args))\n        m))))\n\n;; Taken from Chord, more or less\n(defn bidirectional-chan\n  [read-ch write-ch & [{:keys [on-close close?] :or {close? true}}]]\n  (reify\n    p/ReadPort\n    (take! [_ handler]\n      (p/take! read-ch handler))\n\n    p/WritePort\n    (put! [_ msg handler]\n      (p/put! write-ch msg handler))\n\n    p/Channel\n    (close! [_]\n      (when close?\n        (p/close! read-ch)\n        (p/close! write-ch))\n      (when on-close\n        (on-close)))))\n\n(defn read-proxy-chan [read-ch on-close & [{:keys [close?] :or {close? true}}]]\n  (reify\n    p/ReadPort\n    (take! [_ handler]\n      (p/take! read-ch handler))\n\n    p/Channel\n    (close! [_]\n      (on-close)\n      (when close?\n        (p/close! read-ch)))))\n\n(defn pprint-str [x]\n  (str/trimr (with-out-str (pprint/pprint x))))\n\n(defn doc-examples! [vvar examples]\n  (alter-meta!\n   vvar update :doc str\n   \"\\n\\n```clojure\\n\"\n   (str/join\n    \"\\n\\n\"\n    (for [[before after] examples]\n      (cond-> (pprint-str before)\n        after (str \"\\n  =>\\n\" (pprint-str after)))))\n   \"\\n```\"))\n\n#? (:clj\n    (defmacro fn-when [[binding] & body]\n      `(fn [~binding]\n         (when ~binding\n           ~@body))))\n\n#? (:clj\n    (defmacro with-doc-examples! [vvar & examples]\n      `(doc-examples! #'~vvar (quote ~examples))))\n"]}