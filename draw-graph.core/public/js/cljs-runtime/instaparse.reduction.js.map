{"version":3,"sources":["instaparse/reduction.cljc"],"mappings":"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","names":["instaparse.reduction/singleton?","s","cljs.core/seq","cljs.core/not","cljs.core/next","instaparse.reduction/red","parser","f","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","instaparse.reduction/raw-non-terminal-reduction","instaparse.reduction/HiccupNonTerminalReduction","key","instaparse.reduction/EnliveNonTerminalReduction","instaparse.reduction/reduction-types","instaparse.reduction/node-builders","tag","item","cljs.core/List","instaparse.reduction/standard-non-terminal-reduction","instaparse.reduction/apply-reduction","result","G__47662","cljs.core/Keyword","instaparse.auto-flatten-seq/EMPTY","instaparse.auto-flatten-seq/convert-afs-to-vec","instaparse.auto-flatten-seq/auto-flatten-seq","content","cljs.core/count","var_args","G__47665","instaparse.reduction/apply-standard-reductions","js/Error","grammar","instaparse.reduction.apply_standard_reductions.cljs$core$IFn$_invoke$arity$2","reduction-type","temp__5718__auto__","reduction","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__47670","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__47672","cljs.core/chunk-buffer","i__47671","vec__47678","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47669","cljs.core/chunk-rest","vec__47685","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","instaparse.util.throw_illegal_argument_exception.cljs$core$IFn$_invoke$arity$variadic","cljs.core/chunk-first"],"sourcesContent":["(ns instaparse.reduction\r\n  (:require [instaparse.auto-flatten-seq :as afs]\r\n            [instaparse.util :refer [throw-illegal-argument-exception]]))\r\n\r\n;; utilities\r\n\r\n(defn singleton? [s]\r\n  (and (seq s) (not (next s))))\r\n\r\n;; red is a reduction combinator for expert use only\r\n;; because it is used internally to control the tree tags that\r\n;; are displayed, so adding a different reduction would change\r\n;; that behavior.\r\n\r\n(defn red [parser f] (assoc parser :red f))\r\n\r\n;; Flattening and reductions\r\n\r\n(def raw-non-terminal-reduction {:reduction-type :raw})\r\n\r\n(defn HiccupNonTerminalReduction [key]\r\n  {:reduction-type :hiccup :key key})\r\n\r\n(defn EnliveNonTerminalReduction [key] \r\n  {:reduction-type :enlive, :key key})\r\n\r\n(def ^:constant reduction-types \r\n  {:hiccup HiccupNonTerminalReduction\r\n   :enlive EnliveNonTerminalReduction})\r\n                    \r\n(def ^:constant node-builders\r\n  ; A map of functions for building a node that only has one item\r\n  ; These functions are used in total-parse mode to build failure nodes\r\n  {:enlive (fn [tag item] {:tag tag :content (list item)})\r\n   :hiccup (fn [tag item] [tag item])})\r\n\r\n(def standard-non-terminal-reduction :hiccup)\r\n\r\n(defn apply-reduction [f result]\r\n  (case (:reduction-type f)\r\n    :raw (afs/conj-flat afs/EMPTY result)               \r\n    :hiccup (afs/convert-afs-to-vec (afs/conj-flat (afs/auto-flatten-seq [(:key f)]) result))\r\n    :enlive \r\n    (let [content (afs/conj-flat afs/EMPTY result)]\r\n      {:tag (:key f), :content (if (zero? (count content)) nil content)})\r\n    (f result)))\r\n    \r\n(defn apply-standard-reductions \r\n  ([grammar] (apply-standard-reductions standard-non-terminal-reduction grammar))\r\n  ([reduction-type grammar]\r\n    (if-let [reduction (reduction-types reduction-type)]\r\n      (into {} (for [[k v] grammar]\r\n                 (if (:red v) [k v]\r\n                   [k (assoc v :red (reduction k))])))\r\n      (throw-illegal-argument-exception\r\n        \"Invalid output format \" reduction-type \". Use :enlive or :hiccup.\"))))\r\n"]}