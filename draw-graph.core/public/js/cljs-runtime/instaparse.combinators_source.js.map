{"version":3,"sources":["instaparse/combinators_source.cljc"],"mappings":"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","names":["instaparse.combinators-source/Epsilon","instaparse.combinators-source/opt","parser","cljs.core._EQ_","instaparse.combinators-source/plus","instaparse.combinators-source/star","js/Error","instaparse.combinators-source/rep","m","n","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","instaparse.combinators-source/alt","seq52470","self__4777__auto__","cljs.core/seq","parsers","cljs.core/every?","cljs.core.partial","cljs.core/=","instaparse.reduction/singleton?","cljs.core/first","instaparse.combinators-source/ord2","parser1","parser2","G__52475","instaparse.combinators-source/ord","args-arr__4810__auto__","argseq__4811__auto__","seq52473","G__52474","cljs.core/next","self__4776__auto__","cljs.core.remove","cljs.core.apply","instaparse.combinators-source/cat","seq52477","instaparse.combinators-source/string","s","instaparse.combinators-source/string-ci","G__52487","instaparse.combinators-source/unicode-char","code-point","instaparse.combinators_source.unicode_char","lo","hi","instaparse.combinators-source/add-beginning-constraint","r","cljs.core/regexp?","js/RegExp","instaparse.util/regexp-flags","instaparse.combinators-source/regexp","cljs.core/re-pattern","instaparse.combinators-source/nt","instaparse.combinators-source/look","instaparse.combinators-source/neg","instaparse.combinators-source/hide","cljs.core.assoc","instaparse.combinators-source/hide-tag","instaparse.reduction/red","instaparse.reduction/raw-non-terminal-reduction","instaparse.combinators-source/hidden-tag?","instaparse.combinators-source/unhide-content","cljs.core.dissoc","G__52492","cljs.core.map","G__52497","G__52498","instaparse.combinators-source/unhide-all-content","grammar","cljs.core.into","iter__4582__auto__","s__52500","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__52502","cljs.core/chunk-buffer","i__52501","vec__52507","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__52499","cljs.core/chunk-rest","vec__52510","cljs.core/cons","cljs.core/rest","k","v","instaparse.combinators-source/unhide-tags","reduction-type","temp__5733__auto__","reduction","instaparse.reduction/reduction-types","s__52517","b__52519","i__52518","vec__52526","iter__52516","vec__52529","instaparse.util.throw_illegal_argument_exception","instaparse.combinators-source/unhide-all","s__52533","b__52535","i__52534","vec__52536","iter__52532","vec__52543","instaparse.combinators-source/auto-whitespace-parser","ws-parser","G__52547","cljs.core/Keyword","cljs.core.update_in","p1__52546#","G__52548","G__52549","G__52550","G__52551","instaparse.combinators_source.cat","instaparse.combinators-source/auto-whitespace","start","grammar-ws","start-ws","modified-grammar","s__52557","b__52559","i__52558","vec__52564","iter__52556","vec__52567","nt","final-grammar","cljs.core.merge","cljs.core/chunk-first"],"sourcesContent":["(ns instaparse.combinators-source\r\n  \"This is the underlying implementation of the various combinators.\"\r\n  (:refer-clojure :exclude [cat])\r\n  (:require [instaparse.reduction :refer [singleton? red\r\n                                          raw-non-terminal-reduction\r\n                                          reduction-types]]\r\n            [instaparse.util :refer [throw-illegal-argument-exception #?(:cljs regexp-flags)]]))\r\n\r\n;; Ways to build parsers\r\n\r\n(def Epsilon {:tag :epsilon})\r\n\r\n(defn opt \"Optional, i.e., parser?\"\r\n  [parser] \r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :opt :parser parser}))\r\n\r\n(defn plus \"One or more, i.e., parser+\"\r\n  [parser]\r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :plus :parser parser}))\r\n\r\n(defn star \"Zero or more, i.e., parser*\"\r\n  [parser] \r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :star :parser parser}))\r\n\r\n(defn rep \"Between m and n repetitions\"\r\n  [m n parser]\r\n  {:pre [(<= m n)]}\r\n  (if (= parser Epsilon) Epsilon\r\n    {:tag :rep :parser parser :min m :max n}))\r\n\r\n(defn alt \"Alternation, i.e., parser1 | parser2 | parser3 | ...\"\r\n  [& parsers] \r\n  (cond\r\n    (every? (partial = Epsilon) parsers) Epsilon\r\n    (singleton? parsers) (first parsers)\r\n    :else {:tag :alt :parsers parsers}))\r\n\r\n(defn- ord2 [parser1 parser2]\r\n  {:tag :ord :parser1 parser1 :parser2 parser2})\r\n\r\n(defn ord \"Ordered choice, i.e., parser1 / parser2\"\r\n  ([] Epsilon)\r\n  ([parser1 & parsers]\r\n    (let [parsers (if (= parser1 Epsilon)\r\n                    (remove #{Epsilon} parsers)\r\n                    parsers)]\r\n      (if (seq parsers)\r\n        (ord2 parser1 (apply ord parsers))\r\n        parser1))))\r\n\r\n(defn cat \"Concatenation, i.e., parser1 parser2 ...\"\r\n  [& parsers]\r\n  (if (every? (partial = Epsilon) parsers) Epsilon\r\n    (let [parsers (remove #{Epsilon} parsers)]\r\n      (if (singleton? parsers) (first parsers) ; apply vector reduction\r\n        {:tag :cat :parsers parsers}))))\r\n\r\n(defn string \"Create a string terminal out of s\" \r\n  [s] \r\n  (if (= s \"\") Epsilon\r\n    {:tag :string :string s}))\r\n\r\n(defn string-ci \"Create a case-insensitive string terminal out of s\" \r\n  [s] \r\n  (if (= s \"\") Epsilon\r\n      {:tag :string-ci :string s}))\r\n\r\n(defn unicode-char\r\n  \"Matches a Unicode code point or a range of code points\"\r\n  ([code-point]\r\n   (unicode-char code-point code-point))\r\n  ([lo hi]\r\n   (assert (<= lo hi) \"Character range minimum must be less than or equal the maximum\")\r\n   {:tag :char :lo lo :hi hi}))\r\n\r\n#?(:cljs\r\n   (defn- add-beginning-constraint\r\n     \"JavaScript regexes have no .lookingAt method, so in cljs we just\r\n  add a '^' character to the front of the regex.\"\r\n     [r]\r\n     (if (regexp? r)\r\n       (js/RegExp. (str \"^\" (.-source r)) (regexp-flags r))\r\n       r)))\r\n\r\n(defn regexp \"Create a regexp terminal out of regular expression r\"\r\n  [r]\r\n  (if (= r \"\") Epsilon\r\n      {:tag :regexp\r\n       :regexp (-> (re-pattern r)\r\n                   #?(:cljs add-beginning-constraint))}))\r\n\r\n(defn nt \"Refers to a non-terminal defined by the grammar map\"\r\n  [s] \r\n  {:tag :nt :keyword s})\r\n\r\n(defn look \"Lookahead, i.e., &parser\" \r\n  [parser] \r\n  {:tag :look :parser parser}) \r\n\r\n(defn neg \"Negative lookahead, i.e., !parser\"\r\n  [parser] \r\n  {:tag :neg :parser parser})\r\n\r\n(defn hide \"Hide the result of parser, i.e., <parser>\"\r\n  [parser] \r\n  (assoc parser :hide true))\r\n\r\n(defn hide-tag \"Hide the tag associated with this rule.  \r\n  Wrap this combinator around the entire right-hand side.\"  \r\n  [parser]\r\n  (red parser raw-non-terminal-reduction))\r\n\r\n; Ways to alter a parser with hidden information, unhiding that information\r\n\r\n(defn hidden-tag?\r\n  \"Tests whether parser was created with hide-tag combinator\"\r\n  [parser]\r\n  (= (:red parser) raw-non-terminal-reduction))\r\n\r\n(defn unhide-content\r\n  \"Recursively undoes the effect of hide on one parser\"\r\n  [parser]\r\n  (let [parser (if (:hide parser) (dissoc parser :hide) parser)]\r\n    (cond\r\n      (:parser parser) (assoc parser :parser (unhide-content (:parser parser)))\r\n      (:parsers parser) (assoc parser :parsers (map unhide-content (:parsers parser)))\r\n      (= (:tag parser) :ord) (assoc parser \r\n                                    :parser1 (unhide-content (:parser1 parser))\r\n                                    :parser2 (unhide-content (:parser2 parser)))\r\n      :else parser)))\r\n\r\n(defn unhide-all-content\r\n  \"Recursively undoes the effect of hide on all parsers in the grammar\"\r\n  [grammar]\r\n  (into {} (for [[k v] grammar]\r\n             [k (unhide-content v)])))\r\n\r\n(defn unhide-tags \r\n  \"Recursively undoes the effect of hide-tag\"\r\n  [reduction-type grammar]\r\n  (if-let [reduction (reduction-types reduction-type)]\r\n    (into {} (for [[k v] grammar]\r\n               [k (assoc v :red (reduction k))]))\r\n    (throw-illegal-argument-exception\r\n      \"Invalid output format \" reduction-type \". Use :enlive or :hiccup.\")))\r\n\r\n(defn unhide-all\r\n  \"Recursively undoes the effect of both hide and hide-tag\"\r\n  [reduction-type grammar]\r\n  (if-let [reduction (reduction-types reduction-type)]\r\n    (into {} (for [[k v] grammar]\r\n               [k (assoc (unhide-content v) :red (reduction k))]))\r\n    (throw-illegal-argument-exception\r\n      \"Invalid output format \" reduction-type \". Use :enlive or :hiccup.\")))\r\n\r\n\r\n;; New beta feature: automatically add whitespace\r\n\r\n(defn auto-whitespace-parser [parser ws-parser]\r\n  (case (:tag parser)\r\n    (:nt :epsilon) parser  \r\n    (:opt :plus :star :rep :look :neg) (update-in parser [:parser] auto-whitespace-parser ws-parser)\r\n    (:alt :cat) (assoc parser :parsers  \r\n                       (map #(auto-whitespace-parser % ws-parser) (:parsers parser)))\r\n    :ord (assoc parser \r\n                :parser1 (auto-whitespace-parser (:parser1 parser) ws-parser)\r\n                :parser2 (auto-whitespace-parser (:parser2 parser) ws-parser))\r\n    (:string :string-ci :regexp) \r\n    ; If the string/regexp has a reduction associated with it,\r\n    ; we need to \"lift\" that reduction out to the (cat whitespace string)\r\n    ; parser that is being created.\r\n    (if (:red parser)\r\n      (assoc (cat ws-parser (dissoc parser :red)) :red (:red parser))\r\n      (cat ws-parser parser))))\r\n\r\n(defn auto-whitespace [grammar start grammar-ws start-ws]\r\n  (let [ws-parser (hide (opt (nt start-ws)))\r\n        grammar-ws (assoc grammar-ws start-ws (hide-tag (grammar-ws start-ws)))\r\n        modified-grammar (into {} \r\n                               (for [[nt parser] grammar] \r\n                                 [nt (auto-whitespace-parser parser ws-parser)]))\r\n        final-grammar (assoc modified-grammar start \r\n                             (assoc (cat (dissoc (modified-grammar start) :red) \r\n                                         ws-parser)\r\n                                    :red (:red (modified-grammar start))))]\r\n    (merge final-grammar grammar-ws)))\r\n"]}