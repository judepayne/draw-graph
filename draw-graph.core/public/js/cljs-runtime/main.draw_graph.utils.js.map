{"version":3,"sources":["main/draw_graph/utils.cljs"],"mappings":";;;;;;AAOA,AAAKA,AAAI,AAAOC;AAKhB,AAAA,AAAgBC,AAAoBC,AAAIC;AAAxC,AACE,AAAIA;AACF,AAACC,AAAIC,AAAU,AAACC,AAAeJ;;AAC/B,AAACG,AAAU,AAACE,AAAML;;;AAEtB,AAAA,AAAMM,AAAcN;AAApB,AACE,AAAIA,AACA,AAAA,AAACD,AAGD,AAAA,AAAA,AAAA,AAACQ,AAED,AAAA,AAAA,AAACC,AAED,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA,AAED,AAAA,AAAA,AAACA,AAED,AAAA,AAAA,AAACA,AAED,AAAA,AAAA,AAACA,AAED,AAAA,AAAA,AAACD,AAEDE;;AAMN;;;AAAA,AAAMC,AAEHC;AAFH,AAGOA,AACA,AAACC,AACD,AAACC;;AAGR,AAAA,AAAMC,AACHC;AADH,AAEE,AAAYC,AAAQ,AAACC,AAAQF;;AAG/B,AAAA,AAAMG,AACHH;AADH,AAEE,AAAA,AAAA,AAACI,AAAQ,AAAQH,AAAQD","names":["main.draw-graph.utils/log","js/console","main.draw-graph.utils/parse-html->hiccup","val","snippet?","cljs.core.map.cljs$core$IFn$_invoke$arity$2","hickory.core/as-hiccup","hickory.core/parse-fragment","hickory.core/parse","main.draw-graph.utils/html->hiccup","clojure.string/replace-first","clojure.string/replace","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","main.draw-graph.utils/md->hiccup","markdown","markdown_to_hiccup.core.md__GT_hiccup.cljs$core$IFn$_invoke$arity$1","markdown-to-hiccup.core/component","main.draw-graph.utils/clj->json","ds","js/JSON","cljs.core/clj->js","main.draw-graph.utils/json->clj","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns main.draw-graph.utils\n  (:require\n   [hickory.core :refer [parse parse-fragment as-hiccup]]\n   [clojure.string :as s]\n   [markdown-to-hiccup.core :as md]\n   [cljs.reader :as reader]))\n\n(def log (.-log js/console))\n\n;; -------------------------\n;; Convert html string to hiccup\n\n(defn ^:private parse-html->hiccup [val snippet?]\n  (if snippet?\n    (map as-hiccup (parse-fragment val))\n    (as-hiccup (parse val))))\n\n(defn html->hiccup [val]\n  (-> val\n      (parse-html->hiccup true)\n      str\n      ;; remove outer parens ()\n      (s/replace-first #\"^\\((.*)\\)\" \"$1\")\n      ;; remove trailing \"\\n    \"      \n      (s/replace  #\"\\\"(\\s*\\\\n\\s*(\\w)*)*\\\"\" \"$2\")\n      ;; remove in string \"\\n    \"\n      (s/replace #\"\\\"(\\\\n\\s*)\" \"\\\"\")\n      (s/replace #\"(\\\\n\\s*)\\\"\" \"\\\"\")\n      ;; start every opening [ on new line\n      (s/replace #\"\\[\" \"\\n[\")\n      ;; remove empty {}\n      (s/replace #\" \\{\\}\" \"\")\n      ;; remove trailing whitespace and empty strings\n      (s/replace #\"([\\]\\}])(\\s*(\\\"\\s*\\\"\\s*)*)[\\n]\" \"$1\\n\")\n      ;; remove initial \\n\n      (s/replace-first #\"^\\n\" \"\")\n      ;; read into data structure\n      reader/read-string))\n\n\n;; -------------------------\n;; Convert markdown string to hiccup\n\n(defn md->hiccup\n  \"Converts markdown to hiccup\"\n  [markdown]\n  (->> markdown\n       (md/md->hiccup)\n       (md/component)))\n\n\n(defn clj->json\n  [ds]\n  (.stringify js/JSON (clj->js ds)))\n\n\n(defn json->clj\n  [ds]\n  (js->clj (.parse js/JSON ds) :keywordize-keys true))\n"]}