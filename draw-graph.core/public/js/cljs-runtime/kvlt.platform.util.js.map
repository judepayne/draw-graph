{"version":3,"sources":["kvlt/platform/util.cljs"],"mappings":";;;AAGA,AAAA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAAgBS;AAAtB,AAAA,AAAAP,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAA2BQ;AAA3B,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAgB,AAAIF,AAESC;;;AAHhC,AAAA,AAAA,AAAMV;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAQA,AAAA,AAAMQ,AAASC;AAAf,AAAkBA;;AAClB,AAAA,AAAMC,AAASD;AAAf,AAAkBA;;AAElB,AAAA,AAAME,AAAaC;AAAnB,AACE,AAAI,AAAK,AAAAC,AAAyB,AAACC,AAAE,AAACC,AAAKH,AAAGC,AAC1C,AAAK,AAAAG,AAAoB,AAACF,AAAE,AAACC,AAAKH,AAAGI;;AAE3C,AAAA,AAAMC,AAAiBC,AAAGC;AAA1B,AACE,AAAI,AAAK,AAAAH,AAAoB,AAACF,AAAE,AAACC,AAAKG,AAAIF;AACxC,AAAWE,AAAGC;;AACdD;;;AAEJ,AAAA,AAAME,AAAYX;AAAlB,AACE,AAACY,AAAqB,AAACC,AAAQ,AAAQC,AAAQd;;AAEjD,AAAA,AAAMe,AAAaZ;AAAnB,AACE,AAAYW,AAAQ,AAACE,AAAQb","names":["var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","kvlt.platform.util/exception->map","p__43599","vec__43600","cljs.core.nth","seq43597","G__43598","cljs.core/first","cljs.core/next","self__4776__auto__","e","hints","cljs.core.merge","kvlt.platform.util/gunzip","s","kvlt.platform.util/inflate","kvlt.platform.util/byte-array?","x","js/ArrayBuffer","cljs.core._EQ_","cljs.core/type","js/Buffer","kvlt.platform.util/byte-array->str","ba","encoding","kvlt.platform.util/parse-json","clojure.walk/keywordize-keys","cljs.core.js__GT_clj","js/JSON","kvlt.platform.util/encode-json","cljs.core/clj->js"],"sourcesContent":["(ns ^:no-doc kvlt.platform.util\n  (:require [clojure.walk :as walk]))\n\n(defn exception->map [e & [hints]]\n  (merge {:message (.. e -message)\n          :type    :http-error\n          :error   :http-error} hints))\n\n;; These functions oughtn't be invoked currently - accept-encoding\n;; isn't ever set on Node, and in the browser, the response will be\n;; silently decompressed.\n(defn gunzip  [s] s)\n(defn inflate [s] s)\n\n(defn byte-array? [x]\n  (or (and (exists? js/ArrayBuffer) (= (type x) js/ArrayBuffer))\n      (and (exists? js/Buffer) (= (type x) js/Buffer))))\n\n(defn byte-array->str [ba encoding]\n  (if (and (exists? js/Buffer) (= (type ba) js/Buffer))\n    (.toString ba encoding)\n    ba))\n\n(defn parse-json [s]\n  (walk/keywordize-keys (js->clj (.parse js/JSON s))))\n\n(defn encode-json [x]\n  (.stringify js/JSON (clj->js x)))\n"]}