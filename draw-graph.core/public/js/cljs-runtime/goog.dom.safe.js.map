{
"version":3,
"file":"goog.dom.safe.js",
"lineCount":367,
"mappings":"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",
"sources":["goog/dom/safe.js"],
"sourcesContent":["// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Type-safe wrappers for unsafe DOM APIs.\n *\n * This file provides type-safe wrappers for DOM APIs that can result in\n * cross-site scripting (XSS) vulnerabilities, if the API is supplied with\n * untrusted (attacker-controlled) input.  Instead of plain strings, the type\n * safe wrappers consume values of types from the goog.html package whose\n * contract promises that values are safe to use in the corresponding context.\n *\n * Hence, a program that exclusively uses the wrappers in this file (i.e., whose\n * only reference to security-sensitive raw DOM APIs are in this file) is\n * guaranteed to be free of XSS due to incorrect use of such DOM APIs (modulo\n * correctness of code that produces values of the respective goog.html types,\n * and absent code that violates type safety).\n *\n * For example, assigning to an element's .innerHTML property a string that is\n * derived (even partially) from untrusted input typically results in an XSS\n * vulnerability. The type-safe wrapper goog.dom.safe.setInnerHtml consumes a\n * value of type goog.html.SafeHtml, whose contract states that using its values\n * in a HTML context will not result in XSS. Hence a program that is free of\n * direct assignments to any element's innerHTML property (with the exception of\n * the assignment to .innerHTML in this file) is guaranteed to be free of XSS\n * due to assignment of untrusted strings to the innerHTML property.\n */\n\ngoog.provide('goog.dom.safe');\ngoog.provide('goog.dom.safe.InsertAdjacentHtmlPosition');\n\ngoog.require('goog.asserts');\ngoog.require('goog.dom.asserts');\ngoog.require('goog.functions');\ngoog.require('goog.html.SafeHtml');\ngoog.require('goog.html.SafeScript');\ngoog.require('goog.html.SafeStyle');\ngoog.require('goog.html.SafeUrl');\ngoog.require('goog.html.TrustedResourceUrl');\ngoog.require('goog.string.Const');\ngoog.require('goog.string.internal');\n\n\n/** @enum {string} */\ngoog.dom.safe.InsertAdjacentHtmlPosition = {\n  AFTERBEGIN: 'afterbegin',\n  AFTEREND: 'afterend',\n  BEFOREBEGIN: 'beforebegin',\n  BEFOREEND: 'beforeend'\n};\n\n\n/**\n * Inserts known-safe HTML into a Node, at the specified position.\n * @param {!Node} node The node on which to call insertAdjacentHTML.\n * @param {!goog.dom.safe.InsertAdjacentHtmlPosition} position Position where\n *     to insert the HTML.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to insert.\n */\ngoog.dom.safe.insertAdjacentHtml = function(node, position, html) {\n  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));\n};\n\n\n/**\n * Tags not allowed in goog.dom.safe.setInnerHtml.\n * @private @const {!Object<string, boolean>}\n */\ngoog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ = {\n  'MATH': true,\n  'SCRIPT': true,\n  'STYLE': true,\n  'SVG': true,\n  'TEMPLATE': true\n};\n\n\n/**\n * Whether assigning to innerHTML results in a non-spec-compliant clean-up. Used\n * to define goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse.\n *\n * <p>As mentioned in https://stackoverflow.com/questions/28741528, re-rendering\n * an element in IE by setting innerHTML causes IE to recursively disconnect all\n * parent/children connections that were in the previous contents of the\n * element. Unfortunately, this can unexpectedly result in confusing cases where\n * a function is run (typically asynchronously) on element that has since\n * disconnected from the DOM but assumes the presence of its children. A simple\n * workaround is to remove all children first. Testing on IE11 via\n * https://jsperf.com/innerhtml-vs-removechild/239, removeChild seems to be\n * ~10x faster than innerHTML='' for a large number of children (perhaps due\n * to the latter's recursive behavior), implying that this workaround would\n * not hurt performance and might actually improve it.\n * @return {boolean}\n * @private\n */\ngoog.dom.safe.isInnerHtmlCleanupRecursive_ =\n    goog.functions.cacheReturnValue(function() {\n      // `document` missing in some test frameworks.\n      if (goog.DEBUG && typeof document === 'undefined') {\n        return false;\n      }\n      var div = document.createElement('div');\n      div.innerHTML = '<div><div></div></div>';\n      // `firstChild` is null in Google Js Test.\n      if (goog.DEBUG && !div.firstChild) {\n        return false;\n      }\n      var innerChild = div.firstChild.firstChild;\n      div.innerHTML = '';\n      return !innerChild.parentElement;\n    });\n\n\n/**\n * Assigns HTML to an element's innerHTML property. Helper to use only here and\n * in soy.js.\n * @param {?Element} elem The element whose innerHTML is to be assigned to.\n * @param {string} html\n */\ngoog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse = function(elem, html) {\n  // See comment above goog.dom.safe.isInnerHtmlCleanupRecursive_.\n  if (goog.dom.safe.isInnerHtmlCleanupRecursive_()) {\n    while (elem.lastChild) {\n      elem.removeChild(elem.lastChild);\n    }\n  }\n  elem.innerHTML = html;\n};\n\n\n/**\n * Assigns known-safe HTML to an element's innerHTML property.\n * @param {!Element} elem The element whose innerHTML is to be assigned to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n * @throws {Error} If called with one of these tags: math, script, style, svg,\n *     template.\n */\ngoog.dom.safe.setInnerHtml = function(elem, html) {\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var tagName = elem.tagName.toUpperCase();\n    if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[tagName]) {\n      throw new Error(\n          'goog.dom.safe.setInnerHtml cannot be used to set content of ' +\n          elem.tagName + '.');\n    }\n  }\n\n  goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(\n      elem, goog.html.SafeHtml.unwrap(html));\n};\n\n\n/**\n * Assigns known-safe HTML to an element's outerHTML property.\n * @param {!Element} elem The element whose outerHTML is to be assigned to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n */\ngoog.dom.safe.setOuterHtml = function(elem, html) {\n  elem.outerHTML = goog.html.SafeHtml.unwrap(html);\n};\n\n\n/**\n * Safely assigns a URL a form element's action property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * anchor's href property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setFormElementAction(formEl, url);\n * which is a safe alternative to\n *   formEl.action = url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!Element} form The form element whose action property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setFormElementAction = function(form, url) {\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLFormElement(form).action =\n      goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to a button element's formaction property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * anchor's href property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setButtonFormAction(buttonEl, url);\n * which is a safe alternative to\n *   buttonEl.action = url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!Element} button The button element whose action property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setButtonFormAction = function(button, url) {\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLButtonElement(button).formAction =\n      goog.html.SafeUrl.unwrap(safeUrl);\n};\n/**\n * Safely assigns a URL to an input element's formaction property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * anchor's href property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setInputFormAction(inputEl, url);\n * which is a safe alternative to\n *   inputEl.action = url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!Element} input The input element whose action property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setInputFormAction = function(input, url) {\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLInputElement(input).formAction =\n      goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Sets the given element's style property to the contents of the provided\n * SafeStyle object.\n * @param {!Element} elem\n * @param {!goog.html.SafeStyle} style\n */\ngoog.dom.safe.setStyle = function(elem, style) {\n  elem.style.cssText = goog.html.SafeStyle.unwrap(style);\n};\n\n\n/**\n * Writes known-safe HTML to a document.\n * @param {!Document} doc The document to be written to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n */\ngoog.dom.safe.documentWrite = function(doc, html) {\n  doc.write(goog.html.SafeHtml.unwrap(html));\n};\n\n\n/**\n * Safely assigns a URL to an anchor element's href property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * anchor's href property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setAnchorHref(anchorEl, url);\n * which is a safe alternative to\n *   anchorEl.href = url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!HTMLAnchorElement} anchor The anchor element whose href property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setAnchorHref = function(anchor, url) {\n  goog.dom.asserts.assertIsHTMLAnchorElement(anchor);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n\n/**\n * Safely assigns a URL to an image element's src property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * image's src property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * @param {!HTMLImageElement} imageElement The image element whose src property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setImageSrc = function(imageElement, url) {\n  goog.dom.asserts.assertIsHTMLImageElement(imageElement);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    var allowDataUrl = /^data:image\\//i.test(url);\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\n  }\n  imageElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to a audio element's src property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * audio's src property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * @param {!HTMLAudioElement} audioElement The audio element whose src property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setAudioSrc = function(audioElement, url) {\n  goog.dom.asserts.assertIsHTMLAudioElement(audioElement);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    var allowDataUrl = /^data:audio\\//i.test(url);\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\n  }\n  audioElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to a video element's src property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * video's src property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * @param {!HTMLVideoElement} videoElement The video element whose src property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setVideoSrc = function(videoElement, url) {\n  goog.dom.asserts.assertIsHTMLVideoElement(videoElement);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    var allowDataUrl = /^data:video\\//i.test(url);\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\n  }\n  videoElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to an embed element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setEmbedSrc(embedEl, url);\n * which is a safe alternative to\n *   embedEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLEmbedElement} embed The embed element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setEmbedSrc = function(embed, url) {\n  goog.dom.asserts.assertIsHTMLEmbedElement(embed);\n  embed.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns a URL to a frame element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setFrameSrc(frameEl, url);\n * which is a safe alternative to\n *   frameEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLFrameElement} frame The frame element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setFrameSrc = function(frame, url) {\n  goog.dom.asserts.assertIsHTMLFrameElement(frame);\n  frame.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns a URL to an iframe element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setIframeSrc(iframeEl, url);\n * which is a safe alternative to\n *   iframeEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLIFrameElement} iframe The iframe element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setIframeSrc = function(iframe, url) {\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns HTML to an iframe element's srcdoc property.\n *\n * Example usage:\n *   goog.dom.safe.setIframeSrcdoc(iframeEl, safeHtml);\n * which is a safe alternative to\n *   iframeEl.srcdoc = html;\n * The latter can result in loading untrusted code.\n *\n * @param {!HTMLIFrameElement} iframe The iframe element whose srcdoc property\n *     is to be assigned to.\n * @param {!goog.html.SafeHtml} html The HTML to assign.\n */\ngoog.dom.safe.setIframeSrcdoc = function(iframe, html) {\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.srcdoc = goog.html.SafeHtml.unwrap(html);\n};\n\n\n/**\n * Safely sets a link element's href and rel properties. Whether or not\n * the URL assigned to href has to be a goog.html.TrustedResourceUrl\n * depends on the value of the rel property. If rel contains \"stylesheet\"\n * then a TrustedResourceUrl is required.\n *\n * Example usage:\n *   goog.dom.safe.setLinkHrefAndRel(linkEl, url, 'stylesheet');\n * which is a safe alternative to\n *   linkEl.rel = 'stylesheet';\n *   linkEl.href = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLLinkElement} link The link element whose href property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl|!goog.html.TrustedResourceUrl} url The URL\n *     to assign to the href property. Must be a TrustedResourceUrl if the\n *     value assigned to rel contains \"stylesheet\". A string value is\n *     sanitized with goog.html.SafeUrl.sanitize.\n * @param {string} rel The value to assign to the rel property.\n * @throws {Error} if rel contains \"stylesheet\" and url is not a\n *     TrustedResourceUrl\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {\n  goog.dom.asserts.assertIsHTMLLinkElement(link);\n  link.rel = rel;\n  if (goog.string.internal.caseInsensitiveContains(rel, 'stylesheet')) {\n    goog.asserts.assert(\n        url instanceof goog.html.TrustedResourceUrl,\n        'URL must be TrustedResourceUrl because \"rel\" contains \"stylesheet\"');\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\n  } else if (url instanceof goog.html.TrustedResourceUrl) {\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\n  } else if (url instanceof goog.html.SafeUrl) {\n    link.href = goog.html.SafeUrl.unwrap(url);\n  } else {  // string\n    // SafeUrl.sanitize must return legitimate SafeUrl when passed a string.\n    link.href =\n        goog.html.SafeUrl.sanitizeAssertUnchanged(url).getTypedStringValue();\n  }\n};\n\n\n/**\n * Safely assigns a URL to an object element's data property.\n *\n * Example usage:\n *   goog.dom.safe.setObjectData(objectEl, url);\n * which is a safe alternative to\n *   objectEl.data = url;\n * The latter can result in loading untrusted code unless setit is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLObjectElement} object The object element whose data property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setObjectData = function(object, url) {\n  goog.dom.asserts.assertIsHTMLObjectElement(object);\n  object.data = goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns a URL to a script element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setScriptSrc(scriptEl, url);\n * which is a safe alternative to\n *   scriptEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLScriptElement} script The script element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setScriptSrc = function(script, url) {\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.src = goog.html.TrustedResourceUrl.unwrap(url);\n\n  // If CSP nonces are used, propagate them to dynamically created scripts.\n  // This is necessary to allow nonce-based CSPs without 'strict-dynamic'.\n  var nonce = goog.getScriptNonce();\n  if (nonce) {\n    script.setAttribute('nonce', nonce);\n  }\n};\n\n\n/**\n * Safely assigns a value to a script element's content.\n *\n * Example usage:\n *   goog.dom.safe.setScriptContent(scriptEl, content);\n * which is a safe alternative to\n *   scriptEl.text = content;\n * The latter can result in executing untrusted code unless it is ensured that\n * the code is loaded from a trustworthy resource.\n *\n * @param {!HTMLScriptElement} script The script element whose content is being\n *     set.\n * @param {!goog.html.SafeScript} content The content to assign.\n */\ngoog.dom.safe.setScriptContent = function(script, content) {\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.text = goog.html.SafeScript.unwrap(content);\n\n  // If CSP nonces are used, propagate them to dynamically created scripts.\n  // This is necessary to allow nonce-based CSPs without 'strict-dynamic'.\n  var nonce = goog.getScriptNonce();\n  if (nonce) {\n    script.setAttribute('nonce', nonce);\n  }\n};\n\n\n/**\n * Safely assigns a URL to a Location object's href property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * loc's href property.  If url is of type string however, it is first sanitized\n * using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setLocationHref(document.location, redirectUrl);\n * which is a safe alternative to\n *   document.location.href = redirectUrl;\n * The latter can result in XSS vulnerabilities if redirectUrl is a\n * user-/attacker-controlled value.\n *\n * @param {!Location} loc The Location object whose href property is to be\n *     assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setLocationHref = function(loc, url) {\n  goog.dom.asserts.assertIsLocation(loc);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.href = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns the URL of a Location object.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and\n * passed to Location#assign. If url is of type string however, it is\n * first sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.assignHref(document.location, newUrl);\n * which is a safe alternative to\n *   document.location.assign(newUrl);\n * The latter can result in XSS vulnerabilities if newUrl is a\n * user-/attacker-controlled value.\n *\n * This has the same behaviour as setLocationHref, however some test\n * mock Location.assign instead of a property assignment.\n *\n * @param {!Location} loc The Location object which is to be assigned.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.assignLocation = function(loc, url) {\n  goog.dom.asserts.assertIsLocation(loc);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.assign(goog.html.SafeUrl.unwrap(safeUrl));\n};\n\n\n/**\n * Safely replaces the URL of a Location object.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and\n * passed to Location#replace. If url is of type string however, it is\n * first sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.replaceLocation(document.location, newUrl);\n * which is a safe alternative to\n *   document.location.replace(newUrl);\n * The latter can result in XSS vulnerabilities if newUrl is a\n * user-/attacker-controlled value.\n *\n * @param {!Location} loc The Location object which is to be replaced.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.replaceLocation = function(loc, url) {\n  goog.dom.asserts.assertIsLocation(loc);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.replace(goog.html.SafeUrl.unwrap(safeUrl));\n};\n\n\n/**\n * Safely opens a URL in a new window (via window.open).\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and passed in to\n * window.open.  If url is of type string however, it is first sanitized\n * using goog.html.SafeUrl.sanitize.\n *\n * Note that this function does not prevent leakages via the referer that is\n * sent by window.open. It is advised to only use this to open 1st party URLs.\n *\n * Example usage:\n *   goog.dom.safe.openInWindow(url);\n * which is a safe alternative to\n *   window.open(url);\n * The latter can result in XSS vulnerabilities if redirectUrl is a\n * user-/attacker-controlled value.\n *\n * @param {string|!goog.html.SafeUrl} url The URL to open.\n * @param {Window=} opt_openerWin Window of which to call the .open() method.\n *     Defaults to the global window.\n * @param {!goog.string.Const=} opt_name Name of the window to open in. Can be\n *     _top, etc as allowed by window.open().\n * @param {string=} opt_specs Comma-separated list of specifications, same as\n *     in window.open().\n * @param {boolean=} opt_replace Whether to replace the current entry in browser\n *     history, same as in window.open().\n * @return {Window} Window the url was opened in.\n */\ngoog.dom.safe.openInWindow = function(\n    url, opt_openerWin, opt_name, opt_specs, opt_replace) {\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  var win = opt_openerWin || window;\n  return win.open(\n      goog.html.SafeUrl.unwrap(safeUrl),\n      // If opt_name is undefined, simply passing that in to open() causes IE to\n      // reuse the current window instead of opening a new one. Thus we pass ''\n      // in instead, which according to spec opens a new window. See\n      // https://html.spec.whatwg.org/multipage/browsers.html#dom-open .\n      opt_name ? goog.string.Const.unwrap(opt_name) : '', opt_specs,\n      opt_replace);\n};\n\n\n/**\n * Parses the HTML as 'text/html'.\n * @param {!DOMParser} parser\n * @param {!goog.html.SafeHtml} html The HTML to be parsed.\n * @return {?Document}\n */\ngoog.dom.safe.parseFromStringHtml = function(parser, html) {\n  return goog.dom.safe.parseFromString(parser, html, 'text/html');\n};\n\n\n/**\n * Parses the string.\n * @param {!DOMParser} parser\n * @param {!goog.html.SafeHtml} content Note: We don't have a special type for\n *     XML od SVG supported by this function so we use SafeHtml.\n * @param {string} type\n * @return {?Document}\n */\ngoog.dom.safe.parseFromString = function(parser, content, type) {\n  return parser.parseFromString(goog.html.SafeHtml.unwrap(content), type);\n};\n\n\n/**\n * Safely creates an HTMLImageElement from a Blob.\n *\n * Example usage:\n *     goog.dom.safe.createImageFromBlob(blob);\n * which is a safe alternative to\n *     image.src = createObjectUrl(blob)\n * The latter can result in executing malicious same-origin scripts from a bad\n * Blob.\n * @param {!Blob} blob The blob to create the image from.\n * @return {!HTMLImageElement} The image element created from the blob.\n * @throws {!Error} If called with a Blob with a MIME type other than image/.*.\n */\ngoog.dom.safe.createImageFromBlob = function(blob) {\n  // Any image/* MIME type is accepted as safe.\n  if (!/^image\\/.*/g.test(blob.type)) {\n    throw new Error(\n        'goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.');\n  }\n  var objectUrl = window.URL.createObjectURL(blob);\n  var image = new Image();\n  image.onload = function() {\n    window.URL.revokeObjectURL(objectUrl);\n  };\n  image.src = objectUrl;\n  return image;\n};\n"],
"names":["goog","provide","require","dom","safe","InsertAdjacentHtmlPosition","AFTERBEGIN","AFTEREND","BEFOREBEGIN","BEFOREEND","insertAdjacentHtml","goog.dom.safe.insertAdjacentHtml","node","position","html","insertAdjacentHTML","SafeHtml","unwrap","SET_INNER_HTML_DISALLOWED_TAGS_","isInnerHtmlCleanupRecursive_","functions","cacheReturnValue","DEBUG","document","div","createElement","innerHTML","firstChild","innerChild","parentElement","unsafeSetInnerHtmlDoNotUseOrElse","goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse","elem","lastChild","removeChild","setInnerHtml","goog.dom.safe.setInnerHtml","asserts","ENABLE_ASSERTS","tagName","toUpperCase","Error","setOuterHtml","goog.dom.safe.setOuterHtml","outerHTML","setFormElementAction","goog.dom.safe.setFormElementAction","form","url","safeUrl","SafeUrl","sanitizeAssertUnchanged","assertIsHTMLFormElement","action","setButtonFormAction","goog.dom.safe.setButtonFormAction","button","assertIsHTMLButtonElement","formAction","setInputFormAction","goog.dom.safe.setInputFormAction","input","assertIsHTMLInputElement","setStyle","goog.dom.safe.setStyle","style","cssText","SafeStyle","documentWrite","goog.dom.safe.documentWrite","doc","write","setAnchorHref","goog.dom.safe.setAnchorHref","anchor","assertIsHTMLAnchorElement","href","setImageSrc","goog.dom.safe.setImageSrc","imageElement","assertIsHTMLImageElement","allowDataUrl","test","src","setAudioSrc","goog.dom.safe.setAudioSrc","audioElement","assertIsHTMLAudioElement","setVideoSrc","goog.dom.safe.setVideoSrc","videoElement","assertIsHTMLVideoElement","setEmbedSrc","goog.dom.safe.setEmbedSrc","embed","assertIsHTMLEmbedElement","TrustedResourceUrl","setFrameSrc","goog.dom.safe.setFrameSrc","frame","assertIsHTMLFrameElement","setIframeSrc","goog.dom.safe.setIframeSrc","iframe","assertIsHTMLIFrameElement","setIframeSrcdoc","goog.dom.safe.setIframeSrcdoc","srcdoc","setLinkHrefAndRel","goog.dom.safe.setLinkHrefAndRel","link","rel","assertIsHTMLLinkElement","string","internal","caseInsensitiveContains","assert","getTypedStringValue","setObjectData","goog.dom.safe.setObjectData","object","assertIsHTMLObjectElement","data","setScriptSrc","goog.dom.safe.setScriptSrc","script","assertIsHTMLScriptElement","nonce","getScriptNonce","setAttribute","setScriptContent","goog.dom.safe.setScriptContent","content","text","SafeScript","setLocationHref","goog.dom.safe.setLocationHref","loc","assertIsLocation","assignLocation","goog.dom.safe.assignLocation","assign","replaceLocation","goog.dom.safe.replaceLocation","replace","openInWindow","goog.dom.safe.openInWindow","opt_openerWin","opt_name","opt_specs","opt_replace","win","window","open","Const","parseFromStringHtml","goog.dom.safe.parseFromStringHtml","parser","parseFromString","goog.dom.safe.parseFromString","type","createImageFromBlob","goog.dom.safe.createImageFromBlob","blob","objectUrl","URL","createObjectURL","image","Image","onload","image.onload","revokeObjectURL"]
}
