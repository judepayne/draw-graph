{"version":3,"sources":["promesa/impl/promise.cljc"],"mappings":"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","names":["promesa.impl.promise/Promise","js/Promise.noConflict","cljs.core/PROTOCOL_SENTINEL","it","cb","p1__38855#","p1__38856#","p1__38857#","goog.object/set","promesa.impl.proto/IPromise","G__38875","promesa.impl.proto/-map","G__38876","G__38877","G__38878","promesa.impl.proto/-bind","G__38879","G__38880","G__38881","promesa.impl.proto/-catch","G__38882","G__38883","promesa.impl.promise/resolved","v","promesa.impl.promise/rejected","promesa.impl.proto/IPromiseFactory","G__38894","promesa.impl.proto/-promise","G__38895","G__38896","G__38903","G__38904","G__38905","G__38906","G__38907","G__38908","G__38909","G__38910","G__38911","G__38912","G__38913","G__38914","G__38915","G__38916","G__38917","func","p","js/Error","e","promesa.impl.promise/promise->str","promesa.impl.proto/-pending?","promesa.impl.proto/-rejected?","promesa.impl.proto/-extract","writer","opts","cljs.core/-write"],"sourcesContent":[";; Copyright (c) 2015-2016 Andrey Antukh <niwi@niwi.nz>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns promesa.impl.promise\n  (:require #?(:cljs [org.bluebird])\n            [promesa.impl.proto :as pt])\n  #?(:clj (:import java.util.concurrent.CompletableFuture\n                   java.util.concurrent.CompletionStage\n                   java.util.concurrent.TimeoutException\n                   java.util.concurrent.ExecutionException\n                   java.util.concurrent.CompletionException\n                   java.util.concurrent.Executor\n                   java.util.concurrent.Executors\n                   java.util.concurrent.ForkJoinPool\n                   java.util.function.Function\n                   java.util.function.Supplier)))\n\n;; --- Global Constants\n\n#?(:cljs\n   (def ^:const Promise (js/Promise.noConflict)))\n\n#?(:cljs\n   (.config Promise #js {:cancellation true\n                         :warnings false}))\n\n#?(:clj\n   (def ^:redef +executor+\n     (ForkJoinPool/commonPool)))\n\n;; --- Promise Impl\n\n#?(:cljs\n   (extend-type Promise\n     pt/ICancellable\n     (-cancel [it]\n       (.cancel it))\n     (-cancelled? [it]\n       (.isCancelled it))\n\n     pt/IPromise\n     (-map [it cb]\n       (.then it #(cb %)))\n     (-bind [it cb]\n       (.then it #(cb %)))\n     (-catch [it cb]\n       (.catch it #(cb %)))\n\n     pt/IState\n     (-extract [it]\n       (if (.isRejected it)\n         (.reason it)\n         (.value it)))\n     (-resolved? [it]\n       (.isFulfilled it))\n     (-rejected? [it]\n       (.isRejected it))\n     (-pending? [it]\n       (.isPending it))))\n\n(declare resolved)\n\n#?(:cljs\n   (extend-type default\n     pt/IPromise\n     (-map [it cb]\n       (pt/-map (resolved it) cb))\n     (-bind [it cb]\n       (pt/-bind (resolved it) cb))\n     (-catch [it cb]\n       (pt/-catch (resolved it) cb))))\n\n#?(:clj\n   (extend-type CompletableFuture\n     pt/ICancellable\n     (-cancel [it]\n       (.cancel it true))\n     (-cancelled? [it]\n       (.isCancelled it))\n\n     pt/IPromise\n     (-map [it cb]\n       (let [binds (clojure.lang.Var/getThreadBindingFrame)\n             func (reify Function\n                    (apply [_ v]\n                      (clojure.lang.Var/resetThreadBindingFrame binds)\n                      (cb v)))]\n         (.thenApplyAsync it ^Function func ^Executor +executor+)))\n\n     (-bind [it cb]\n       (let [binds (clojure.lang.Var/getThreadBindingFrame)\n             func (reify Function\n                    (apply [_ v]\n                      (clojure.lang.Var/resetThreadBindingFrame binds)\n                      (cb v)))]\n         (.thenComposeAsync it ^Function func ^Executor +executor+)))\n\n     (-catch [it cb]\n       (let [binds (clojure.lang.Var/getThreadBindingFrame)\n             func (reify Function\n                    (apply [_ e]\n                      (clojure.lang.Var/resetThreadBindingFrame binds)\n                      (if (instance? CompletionException e)\n                        (cb (.getCause ^Exception e))\n                        (cb e))))]\n         (.exceptionally it ^Function func)))\n\n     pt/IState\n     (-extract [it]\n       (try\n         (.getNow it nil)\n         (catch ExecutionException e\n           (.getCause e))\n         (catch CompletionException e\n           (.getCause e))))\n\n     (-resolved? [it]\n       (and (not (.isCompletedExceptionally it))\n            (not (.isCancelled it))\n            (.isDone it)))\n\n     (-rejected? [it]\n       (.isCompletedExceptionally it))\n\n     (-pending? [it]\n       (and (not (.isCompletedExceptionally it))\n            (not (.isCancelled it))\n            (not (.isDone it))))))\n\n;; --- Promise Factory Impl\n\n(defn resolved\n  [v]\n  #?(:cljs (.resolve Promise v)\n     :clj (let [p (CompletableFuture.)]\n            (.complete p v)\n            p)))\n\n(defn rejected\n  [v]\n  #?(:cljs (.reject Promise v)\n     :clj (let [p (CompletableFuture.)]\n            (.completeExceptionally p v)\n            p)))\n\n#?(:clj\n   (extend-protocol pt/IPromiseFactory\n     clojure.lang.Fn\n     (-promise [func]\n       (let [p (CompletableFuture.)\n             reject #(.completeExceptionally p %)\n             resolve #(.complete p %)]\n         (try\n           (func resolve reject)\n           (catch Throwable e\n             (reject e)))\n         p))\n\n     Throwable\n     (-promise [e]\n       (rejected e))\n\n     CompletionStage\n     (-promise [cs] cs)\n\n     Object\n     (-promise [v]\n       (resolved v))\n\n     nil\n     (-promise [v]\n       (resolved v)))\n\n   :cljs\n   (extend-protocol pt/IPromiseFactory\n     function\n     (-promise [func]\n       (Promise. func))\n\n     Promise\n     (-promise [p] p)\n\n     js/Error\n     (-promise [e]\n       (rejected e))\n\n     object\n     (-promise [v]\n       (resolved v))\n\n     number\n     (-promise [v]\n       (resolved v))\n\n     boolean\n     (-promise [v]\n       (resolved v))\n\n     string\n     (-promise [v]\n       (resolved v))\n\n     nil\n     (-promise [v]\n       (resolved v))))\n\n;; --- Pretty printing\n\n(defn promise->str\n  [p]\n  (str \"#<Promise[\"\n       (cond\n         (pt/-pending? p) \"~\"\n         (pt/-rejected? p) (str \"error=\" (pt/-extract p))\n         :else (str \"value=\" (pt/-extract p)))\n       \"]>\"))\n\n#?(:clj\n   (defmethod print-method java.util.concurrent.CompletionStage\n     [p ^java.io.Writer writer]\n     (.write writer ^String (promise->str p)))\n   :cljs\n   (extend-type Promise\n     IPrintWithWriter\n     (-pr-writer [p writer opts]\n       (-write writer (promise->str p)))))\n"]}