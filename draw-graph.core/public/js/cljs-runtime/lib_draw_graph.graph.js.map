{"version":3,"sources":["lib_draw_graph/graph.cljc"],"mappings":"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","names":["lib-draw-graph.graph/color-channels","rgb","lib-draw-graph.graph/hex","n","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","lib-draw-graph.graph/str->rgb","p__37083","map__37084","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq37080","G__37081","cljs.core/first","cljs.core/next","self__4776__auto__","s","blend-with","h","cljs.core/hash","rgb-blend","red","green","blue","lib-draw-graph.graph/edge-invisible?","g","n1","n2","style","loom.attr/attrs","and__4174__auto__","p1__37096#","cljs.core/some","cljs.core._EQ_","clojure.string.split","lib-draw-graph.graph/leaf?","succs","loom.graph/successors*","visible-succs","p1__37103#","cljs.core.filter","cljs.core/not","cljs.core/empty?","lib-draw-graph.graph/root?","opts","loom.graph/predecessors*","lib-draw-graph.graph/successors","p1__37122#","lib-draw-graph.graph/fff","nested","cljs.core/ffirst","lib-draw-graph.graph/group-map","seq37130","G__37131","m","grps","cljs.core.reduce","acc","cur","cljs.core.assoc","cljs.core/select-keys","cljs.core/rest","lib-draw-graph.graph/default-options","lib-draw-graph.graph/shape","lib-draw-graph.graph/fillcolor","color-key","temp__5733__auto__","ck","cl","lib-draw-graph.clustered/cluster-key","loom.graph/nodes","fexpr__37146","cljs.core.keyword","lib-draw-graph.graph/html-like-label?","cljs.core/count","cljs.core.subs","lib-draw-graph.graph/first-label","lbls","metadata","lbl","p1__37148#","v","fexpr__37153","lib-draw-graph.graph/composite-label","flbl","cljs.core/str","cljs.core.interpose","cljs.core.map","x","l","lib-draw-graph.graph/node-label","clojure.string/includes?","lib-draw-graph.graph/node-tooltip","temp__5735__auto__","tt","ks","cljs.core/keyword","a","c","cljs.core.conj","cljs.core/name","lib-draw-graph.graph/node-url","url","lib-draw-graph.graph/doub-slash-n","clojure.string/replace","lib-draw-graph.graph/node-descriptor","cljs.core.merge","cljs.core/map?","cljs.core.dissoc","lib-draw-graph.graph/maybe-show-constraint","edge-attr-map","show","lib-draw-graph.graph/edge-label","lib-draw-graph.graph/constraints","lib-draw-graph.graph/edge-descriptor","description","attr-map","desc","extra-loom.multigraph/extra-loom-graph?","edges","extra-loom.multigraph/edges-between","attr-fn","es","lib-draw-graph.graph/structure-opts","lib_draw_graph.graph.group_map","lib-draw-graph.graph/cluster-args","cljs.core.partial","lib-draw-graph.clustered/node->clusters","lib-draw-graph.clustered/merged-cluster-attr","y","lib-draw-graph.clustered/first-cluster-attr","lib-draw-graph.clustered/cluster-parent","lib-draw-graph.graph/get-rhizome-args","opts*","lib_draw_graph.util.deep_merge","lib-draw-graph.graph/graph->dot","succs-fn","rhi-args","rhizome.dot/graph->dot","cljs.core/concat","lib-draw-graph.graph/loomgraph->dot","p1__37187#","lib-draw-graph.graph/process-graph"],"sourcesContent":["(ns ^{:doc \"Defines functions for creating and Loom digraph from a csv file of edges,\n           displaying a digraph with flexible options and for providing a set of\n           analytics about a digraph. Note that the definition of structure-opts\n           needs to be updated when new graphviz options are added.\"\n      :author \"Jude Payne\"}\n    lib-draw-graph.graph\n    (:require [rhizome.dot                     :as rhidot]\n              [loom.graph                      :as loom.graph]\n              [extra-loom.multigraph           :as extra-loom]\n              [loom.attr                       :as loom.attr]\n              [clojure.string                  :as str]\n              [lib-draw-graph.clustered        :as clstr]\n              [lib-draw-graph.util             :as util]\n              #?@(:cljs [[goog.string :as gstring]])\n              #?@(:cljs [[goog.string.format]])))\n\n\n;; ---------------------\n;; Utility graph functions\n\n(defn ^:private color-channels\n  \"Returns a map of rgb values from a 24-bit number.\"\n  [rgb]\n  {:r (bit-shift-right (bit-and rgb 0xFF0000) 16)\n   :g (bit-shift-right (bit-and rgb 0x00FF00) 8)\n   :b (bit-and rgb 0x0000FF)})\n\n\n(defn ^:private hex\n  \"Convert an unsigned integer to a hex string representation.\"\n  [n]\n  #?(:clj (format \"%x\" n)\n     :cljs (.toString n 16)))\n\n\n(defn ^:private str->rgb\n  \"Converts a string to an rgb color value, blending with blend-with.\"\n  [s & {:keys [blend-with] :or {blend-with 0xBBFFBB}}]\n  (let [h (bit-shift-right (hash s) 8) ;;shift to 24-bit\n        rgb (color-channels h)\n        rgb-blend (color-channels blend-with)\n        red   (bit-shift-right (+ (:r rgb) (:r rgb-blend)) 1)\n        green (bit-shift-right (+ (:g rgb) (:g rgb-blend)) 1)\n        blue  (bit-shift-right (+ (:b rgb) (:b rgb-blend)) 1)]\n    (str \"#\" (hex red) (hex green) (hex blue))))\n\n\n(defn edge-invisible?\n  [g n1 n2]\n  (let [style (:style (loom.attr/attrs g n1 n2))]\n    (and style (some #(= \"invis\" %) (str/split style #\",\")))))\n\n\n(defn leaf? [g n]\n  (let [succs (loom.graph/successors* g n)\n        visible-succs (filter #(not (edge-invisible? g n %)) succs)]\n    (empty? visible-succs)))\n\n\n(defn root? [g opts n]\n  (and\n   (-> opts :env :show-roots?)\n   (empty? (loom.graph/predecessors* g n))))\n\n\n(defn successors\n  \"Takes into account invisible edges\"\n  [g n]\n  (let [succs (loom.graph/successors* g n)]\n    (filter #(not (edge-invisible? g n %)) succs)))\n\n\n(defn ^:private fff [nested] (first (ffirst nested)))\n\n\n(defn group-map\n  \"Groups m by the first in each of grps, selects the rest keys into\n  the new submap and continues through the rest of the groups.\n  e.g. (group-map {:graph-a 1 :graph-b 2 :node-c 4 :edge-a 5}\n                   [:graph :graph-a :graph-b] [:node :node-c])\n  => {:graph {:graph-a 1, :graph-b 2}, :node {:edge-a 5}}\"\n  [m & grps]\n  (reduce \n   (fn [acc cur]\n     (assoc acc (first cur) (select-keys m (rest cur))))\n   {}\n   grps))\n\n\n;; ---------------------\n;; Config for graph display, using Rhizome library\n\n\n(def default-options\n  {:graph\n   {:dpi 72\n    :layout \"dot\"\n    :splines \"lines\"\n    :overlap \"prism\"\n    :pad 0.2\n    :rankdir \"LR\"\n   ; :size \"4,4!\"\n   ; :ratio \"1.0\"\n    }\n   :node\n   {:style \"filled\"\n    :fontsize 10\n    :fixedsize \"true\"\n    :shape \"ellipse\"\n    :margin \"0.1\"}\n   :env\n   {:show-roots?  false\n   }})\n\n;; node functions\n\n(defn shape\n  \"Returns the shape of node n in g given options\"\n  [g opts n]\n  (cond\n    (root? g opts n) \"tripleoctagon\"\n    :else (-> opts :node :shape)))\n\n\n(defn fillcolor\n  \"Return the fillcolor for node n in g given an options\"\n  [g opts n]\n  ;; if cluster-on, use that key to generate node colours\n  ;; otherwise grab any node and use the first key in it\n  (let [color-key (if-let [ck (-> opts :env :color-on)]\n                    ck\n                    (if-let [cl (clstr/cluster-key g)] \n                      cl\n                      (fff (loom.graph/nodes g))))]\n    (str->rgb ((keyword color-key) n))))\n\n\n(defn html-like-label?\n  \"True is label is or starts with an html like label.\"\n  [s]\n  (when (and s (> (count s) 1))\n    (= \"<<\" (subs s 0 2))))\n\n\n(defn first-label\n  \"Gets the first valid label from the metadata, which can be a node or edge metadata.\"\n  [lbls metadata]\n  (let [lbls (str/split lbls #\"/\")\n        lbl (some #(let [v ((keyword %) metadata)]\n                     (if (= \"\" v) false v)) lbls)]\n    (if (nil? lbl) \"\" lbl)))\n\n\n(defn composite-label\n  \"Gets the composite label from the metadata, which can be a node or edge metadata.\"\n  [lbls metadata]\n  (let [lbls (str/split lbls #\"&\")\n        flbl (get metadata (keyword (first lbls)))\n        lbl (if (html-like-label? flbl)\n              flbl\n              (apply str flbl \"\\n\"\n                     (interpose \"\\n\"\n                                (map\n                                 (fn [x] \n                                   (let [l (get metadata (keyword x))]\n                                     (if (html-like-label? l)\n                                       \"\"  ;; filter out subsequent html-like labels\n                                       l)))\n                                 (rest lbls)))))]\n    (if (nil? lbl) \"\" lbl)))\n\n\n(defn node-label\n  \"Returns the label for the node n in g given options.\"\n  [g opts n]\n  (cond\n    (and (leaf? g n) (-> opts :env :hide-leaves?)) \"\"\n    :else (if-let [lbls (-> opts :node :label)]\n            (if (str/includes? lbls \"/\")\n              (first-label lbls n)\n              (composite-label lbls n))\n            \"\")))\n\n\n(defn node-tooltip\n  \"Returns the tooltip for the node n in g given options.\"\n  [g opts n]\n  (when-let [tt (-> opts :node :tooltip)]\n    (let [ks (map keyword (str/split tt #\"&\"))\n          tt (apply str (interpose\n                  \"\\n\"\n                  (reduce\n                   (fn [a c]\n                     (conj a (str (name c) \": \"(get n c))))\n                   []\n                   ks)))]\n      tt)))\n\n\n(defn node-url\n  \"Returns the url for the node n in g given options.\"\n  [g opts n]\n  (when-let [url (-> opts :node :url)]\n    (get n (keyword url))))\n\n\n;; cljs requires \\n to be supplied as \\\\n otherwise will split line\n;; whereas clj does not & will not. Use cljs fomrat but last minute\n;; replace for when run from clojure\n(defn doub-slash-n\n  [s]\n  (if (nil? s) nil\n      (str/replace s #\"\\\\\\\\n\" \"\\n\")))\n\n\n(defn ^:private node-descriptor\n  \"Returns map of attributes for the node from *display-conf*.\"\n  [g opts n]\n  (merge\n   (:node opts) ;;static attrs\n   ;; attrs result from functions..\n   (-> {}\n       (assoc :shape (shape g opts n))\n       (assoc :label (doub-slash-n (node-label g opts n)))\n       (assoc :fillcolor (fillcolor g opts n))\n       (assoc :tooltip  (node-tooltip g opts n))\n       (assoc :URL (node-url g opts n) :target \"_blank\"))\n   ;;per node attrs supplied by user\n   (if (and (root? g opts n) (map? (loom.attr/attrs g n)))\n     (dissoc (loom.attr/attrs g n) :shape)\n     (loom.attr/attrs g n))))\n\n\n(defn ^:private maybe-show-constraint [opts edge-attr-map]\n  (let [show (-> opts :env :show-constraints?)]\n    (when (and show (:constraint edge-attr-map))\n      {:style \"\" :color \"deeppink3\" :penwidth 4})))\n\n\n(defn edge-label\n  \"Returns the label for the edge n1 n2 in g given options.\"\n  [opts metadata]\n  (when-let [lbls (-> opts :edge :edge-label)]\n    (if (str/includes? lbls \"/\")\n      (first-label lbls metadata)\n      (composite-label lbls metadata))))\n\n\n(defn constraints\n  [opts]\n  (if (-> opts :env :constraint)\n    {:constraint true}\n    {:constraint false}))\n\n\n(defn ^:private edge-descriptor\n  \"Return map of attributes for the edge from *display-conf*\"\n  [g opts n1 n2]\n  (let [description (fn [attr-map]\n                      (let [metadata (:meta attr-map)]\n                        (merge\n                         (if (-> opts :edge :edge-label)\n                           {:xlabel (doub-slash-n (edge-label opts metadata)) :forcelabels true}\n                           nil)\n                         (constraints opts)\n                         ;; per edge attrs supplied by user\n                         (dissoc attr-map :meta)\n                         (maybe-show-constraint opts attr-map))))\n        desc (if (extra-loom/extra-loom-graph? g)\n               (let [edges (extra-loom/edges-between g n1 n2)\n                     attr-fn (fn [es]\n                               (reduce (fn [acc cur]\n                                         (conj acc (description (loom.attr/attrs g cur))))\n                                       []\n                                       es))]\n                 (attr-fn edges))\n               (description (loom.attr/attrs g n1 n2)))]\n    desc))\n\n\n;; NEEDS TO CHANGE WHEN NEW OPTS ADDED\n(defn structure-opts\n  \"structures the incoming opts map the same as default-options\"\n  [opts]\n  (group-map opts\n             [:graph :dpi :layout :pad :splines :sep :ranksep\n              :scale :overlap :nodesep :rankdir :concentrate :ratio]\n             [:node :shape :label :fontsize :style :fixedsize :tooltip :url :area]\n             [:env :hide-leaves? :show-roots? :color-on :constraint :show-constraints?]\n             [:edge :edge-label]))\n\n\n(defn- cluster-args\n  [g]\n  {\n   :node->clusters\n   (fn [n] ((partial clstr/node->clusters g (clstr/cluster-key g)) n))\n\n   :cluster->descriptor\n   (fn [n] (merge {:label n}\n                  (let [x (clstr/merged-cluster-attr g n :style)\n                        y (if (nil? x) {} x)]\n                    y)))\n\n   :cluster->ranks\n   (fn [n]\n     (clstr/first-cluster-attr g n :fix-ranks))\n\n   :cluster->parent\n   (partial clstr/cluster-parent g)})\n\n\n(defn ^:private get-rhizome-args\n  \"Returns the rhizome config (options) for a graph.\"\n  [g opts]\n  (let [opts* (util/deep-merge default-options (structure-opts opts))]\n    (merge\n     {\n      :options (:graph opts*) \n\n      :node->descriptor (partial node-descriptor g opts*)\n\n      :edge->descriptor (partial edge-descriptor g opts*)}\n\n     ;; merge in cluster argument when g is clustered\n     (when (clstr/cluster-key g)\n       (cluster-args g)))))\n\n\n;; -------------------------------------------------------------\n;; ****** Functions to convert Loom graphs using Rhizome  ******\n\n(defn graph->dot\n  \"Returns an dot representation of a graph.\"\n  [ks succs-fn rhi-args]\n  (-> (apply\n       rhidot/graph->dot ks succs-fn\n       (apply concat rhi-args))))\n\n\n(defn ^:private loomgraph->dot\n  \"converts loom graph to dot using rhizome\"\n  [g rhi-args]\n  (let [ks       (loom.graph/nodes g)\n        succs-fn #(loom.graph/successors* g %)]\n    (graph->dot ks succs-fn rhi-args)))\n\n\n;;--------------------\n;; public functions for producing dot\n\n(defn process-graph\n  \"Converts (Loom) graph to either a graph or an svg\"\n  [g opts]\n  (loomgraph->dot g (get-rhizome-args g opts)))\n\n"]}