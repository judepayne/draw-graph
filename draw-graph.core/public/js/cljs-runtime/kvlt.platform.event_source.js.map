{"version":3,"sources":["kvlt/platform/event_source.cljs"],"mappings":"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","names":["kvlt.platform.event-source/EventSource","js/EventSource","js/require","kvlt.platform.event-source/event->map","e","format","kvlt.event-source/format-event","cljs.core/not-empty","cljs.core.keyword","kvlt.platform.event-source/add-listeners!","source","chan","types","seq__46136","cljs.core/seq","chunk__46137","count__46138","i__46139","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","t","cljs.core/name","cljs.core.async.put_BANG_","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","kvlt.platform.event-source/request!","p__46186","vec__46188","map__46191","cljs.core.nth","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq46175","G__46176","self__4776__auto__","url","events","close?","or__4185__auto__","cljs.core.async.chan","_","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.async/close!","kvlt.util.read_proxy_chan"],"sourcesContent":["(ns ^:no-doc kvlt.platform.event-source\n  (:require [kvlt.event-source :refer [format-event]]\n            [cljs.core.async :as async]\n            [taoensso.timbre :as log]\n            [kvlt.util :as util]))\n\n(def EventSource\n  (if (exists? js/EventSource)\n    js/EventSource\n    (js/require \"eventsource\")))\n\n(defn event->map [e format]\n  (format-event\n   format\n   {:id   (not-empty (.. e -lastEventId))\n    :data (.. e -data)\n    :type (keyword (.. e -type))}))\n\n(defn add-listeners! [source chan types format]\n  (doseq [t types]\n    (.addEventListener\n     source\n     (name t)\n     (fn [e]\n       (when-not (async/put! chan (event->map e format))\n         (.close source))))))\n\n(defn request!\n  [url & [{:keys [events format chan close?]\n           :or {events #{:message} format :string close? true}}]]\n  (let [chan   (or chan (async/chan))\n        source (EventSource. url)]\n    (add-listeners! source chan events format)\n    (set! (.. source -onerror)\n          (fn [_]\n            (log/warn \"SSE error, closing source\" url)\n            (.close source)\n            (when close?\n              (async/close! chan))))\n    (util/read-proxy-chan chan #(.close source) {:close? close?})))\n"]}