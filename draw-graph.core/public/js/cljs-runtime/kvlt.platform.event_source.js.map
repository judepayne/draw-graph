{"version":3,"sources":["kvlt/platform/event_source.cljs"],"mappings":";;;;;;AAMA,AAAKA,AACH,AAAI,AAAAC,AACFA,AACA,AAAA,AAACC;AAEL,AAAA,AAAMC,AAAYC,AAAEC;AAApB,AACE,AAAAC,AACCD;AADDE,AAAA,AAAA,AAAA,AAAA,AAEQ,AAACE,AAAU,AAAIL,AACf,AAAIA,AACJ,AAACM,AAAQ,AAAIN;AAJrB,AAAA,AAAAE,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAMH,AAAA,AAAMG,AAAgBC,AAAOC,AAAKC,AAAMT;AAAxC,AACE,AAAAU,AAAA,AAAAC,AAAUF;AAAVG,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQS;AAAR,AAAA,AACE,AACChB,AACA,AAACiB,AAAKD,AACN;AAAKxB;AAAL,AACE,AAAU,AAAC0B,AAAWjB,AAAK,AAACV,AAAWC,AAAEC;AAAzC;;AAAA,AACE,AAAQO;;;;;AANf;AAAA,AAAAG;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAJ,AAAAD;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAAO,AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAA,AAAAS,AAAAT;AAAAO;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAI,AAAAX,AAAQa;AAAR,AAAA,AACE,AACChB,AACA,AAACiB,AAAKD,AACN;AAAKxB;AAAL,AACE,AAAU,AAAC0B,AAAWjB,AAAK,AAACV,AAAWC,AAAEC;AAAzC;;AAAA,AACE,AAAQO;;;;;AANf;AAAA,AAAA,AAAAe,AAAAZ;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAQF,AAAA,AAAA,AAAAgB,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AACHa;AADH,AAAA,AAAAX,AAAAD;AAAAE,AAAA,AAAAC,AAAAF,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAE,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAAJ,AAAAA;AAAA,AAAAK,AAAAL,AAAA,AAAA,AAAA,AACkBW;AADlB,AAAAN,AAAAL,AAAA,AAAA,AACyBnC;AADzB,AAAAyC,AAAAN,AAAA,AACgC3B;AADhC,AAAAgC,AAAAL,AAAA,AAAA,AACqCY;AADrC,AAGE,AAAMvC,AAAO,AAAAwC,AAAIxC;AAAJ,AAAA,AAAAwC;AAAAA;;AAAS,AAACC;;;AACjB1C,AAAO,AAAAZ,AAAckD;AAD3B,AAEE,AAACvC,AAAeC,AAAOC,AAAKsC,AAAO9C;;AACnC,AAAM,AAAIO,AACJ;AAAK2C;AAAL,AACE,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAsCR;;AAAtC,AAAA,AAAA;;AACA,AAAQtC;;AACR,AAAMwC;AAAN,AACE,AAACO,AAAa9C;;AADhB;;;;;AAER,AAAA,AAAC+C,AAAqB/C;;AAAtB,AAA4B,AAAQD;;AAApC,AAAA,AAAqDwC;;;AAZzD,AAAA,AAAA,AAAMf;;AAAN;AAAA,AAAA,AAAA,AAAAU,AAAMV;AAAN,AAAA,AAAAW,AAAA,AAAAtB,AAAAqB;AAAAA,AAAA,AAAApB,AAAAoB;AAAA,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAAD,AAAAD;;;AAAA","names":["kvlt.platform.event-source/EventSource","js/EventSource","js/require","kvlt.platform.event-source/event->map","e","format","G__41611","G__41612","kvlt.event-source/format-event","cljs.core/not-empty","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","kvlt.platform.event-source/add-listeners!","source","chan","types","seq__41615","cljs.core/seq","chunk__41616","count__41617","i__41618","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","t","cljs.core/name","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","kvlt.platform.event-source/request!","p__41630","vec__41631","map__41634","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq41628","G__41629","self__4717__auto__","url","events","close?","or__4131__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","_","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.async/close!","kvlt.util.read_proxy_chan.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns ^:no-doc kvlt.platform.event-source\n  (:require [kvlt.event-source :refer [format-event]]\n            [cljs.core.async :as async]\n            [taoensso.timbre :as log]\n            [kvlt.util :as util]))\n\n(def EventSource\n  (if (exists? js/EventSource)\n    js/EventSource\n    (js/require \"eventsource\")))\n\n(defn event->map [e format]\n  (format-event\n   format\n   {:id   (not-empty (.. e -lastEventId))\n    :data (.. e -data)\n    :type (keyword (.. e -type))}))\n\n(defn add-listeners! [source chan types format]\n  (doseq [t types]\n    (.addEventListener\n     source\n     (name t)\n     (fn [e]\n       (when-not (async/put! chan (event->map e format))\n         (.close source))))))\n\n(defn request!\n  [url & [{:keys [events format chan close?]\n           :or {events #{:message} format :string close? true}}]]\n  (let [chan   (or chan (async/chan))\n        source (EventSource. url)]\n    (add-listeners! source chan events format)\n    (set! (.. source -onerror)\n          (fn [_]\n            (log/warn \"SSE error, closing source\" url)\n            (.close source)\n            (when close?\n              (async/close! chan))))\n    (util/read-proxy-chan chan #(.close source) {:close? close?})))\n"]}