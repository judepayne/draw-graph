{"version":3,"sources":["shadow/cljs/devtools/client/browser.cljs"],"mappings":"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","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.browser","js/shadow.cljs.devtools.client.browser.active-modules-ref","shadow.cljs.devtools.client.browser/active-modules-ref","cljs.core/volatile!","js/shadow.cljs.devtools.client.browser.repl-ns-ref","shadow.cljs.devtools.client.browser/repl-ns-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.browser/module-loaded","name","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","js/shadow.cljs.devtools.client.browser.socket-ref","shadow.cljs.devtools.client.browser/socket-ref","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","shadow.cljs.devtools.client.browser/devtools-msg","seq35344","G__35345","cljs.core/first","cljs.core/next","self__4717__auto__","msg","args","js/console","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/ws-msg","temp__5718__auto__","cljs.core/deref","s","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/console.warn","js/shadow.cljs.devtools.client.browser.scripts-to-load","shadow.cljs.devtools.client.browser/scripts-to-load","shadow.cljs.devtools.client.browser/loaded?","js/goog.isProvided_","shadow.cljs.devtools.client.browser/goog-is-loaded?","js/$CLJS.SHADOW_ENV.isLoaded","shadow.cljs.devtools.client.browser/goog-base-rc","p__35354","map__35355","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/src-is-loaded?","resource-id","output-name","src","or__4131__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/module-is-active?","module","cljs.core/contains?","shadow.cljs.devtools.client.browser/script-eval","code","js/goog.globalEval","shadow.cljs.devtools.client.browser/do-js-load","sources","seq__35357","cljs.core/seq","chunk__35358","count__35359","i__35360","map__35367","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__35369","resource-name","js","js/$CLJS.SHADOW_ENV.setLoaded","shadow.cljs.devtools.client.browser.devtools_msg.cljs$core$IFn$_invoke$arity$variadic","shadow.cljs.devtools.client.env/before-load-src","shadow.cljs.devtools.client.browser/do-js-reload","complete-fn","failure-fn","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$4","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","fn-sym","shadow.cljs.devtools.client.browser/do-js-requires","js-requires","seq__35373","chunk__35374","count__35375","i__35376","js-ns","require-str","shadow.cljs.devtools.client.browser/load-sources","callback","cljs.core/empty?","G__35377","G__35378","G__35379","G__35380","G__35381","G__35382","goog.net.XhrIo/send","shadow.cljs.devtools.client.env/files-url","res","req","content","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__35384","map__35385","shadow.cljs.devtools.client.browser/handle-build-complete","info","reload-info","map__35387","compiled","warnings","iter__4523__auto__","s__35390","cljs.core/LazySeq","xs__6277__auto__","map__35395","iterys__4519__auto__","s__35392","c__4521__auto__","size__4522__auto__","b__35394","cljs.core/chunk-buffer","i__35393","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__35391","cljs.core/cons","cljs.core/rest","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__35389","cljs.core/not","warning","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","seq__35397","chunk__35398","count__35399","i__35400","map__35407","map__35409","line","column","w","shadow.cljs.devtools.client.env/autoload","shadow.cljs.devtools.client.hud/load-end-success","shadow.cljs.devtools.client.env/ignore-warnings","sources-to-get","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__35417","map__35418","rc","shadow.cljs.devtools.client.env/module-format","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__35414","map__35415","ns","p__35411","map__35412","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p1__35383#","shadow.cljs.devtools.client.hud/load-failure","shadow.cljs.devtools.client.browser/page-load-uri","js/goog.global.document","goog.Uri/parse","js/document.location.href","shadow.cljs.devtools.client.browser/match-paths","old","new","rel-new","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","clojure.string/starts-with?","node-uri","node-uri-resolved","node-abs","and__4120__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1","p__35420","map__35421","shadow.cljs.devtools.client.browser/handle-asset-watch","updates","seq__35423","chunk__35425","count__35426","i__35427","path","clojure.string/ends-with?","seq__35456","chunk__35459","count__35460","i__35461","seq__35470","chunk__35473","count__35474","i__35475","node","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","js/document.querySelectorAll","path-match","new-link","G__35467","G__35469","G__35480","G__35481","cljs.core.rand.cljs$core$IFn$_invoke$arity$0","goog.dom/insertSiblingAfter","goog.dom/removeNode","shadow.cljs.devtools.client.browser/get-ua-product","goog.userAgent.product/SAFARI","goog.userAgent.product/CHROME","goog.userAgent.product/FIREFOX","goog.userAgent.product/IE","shadow.cljs.devtools.client.browser/get-asset-root","loc","js/goog.Uri","cbp","js/CLOSURE_BASE_PATH","clojure.string/replace","shadow.cljs.devtools.client.browser/repl-error","e","js/console.error","shadow.cljs.devtools.client.env/repl-error","p__35485","map__35487","shadow.cljs.devtools.client.browser/repl-invoke","id","result","shadow.cljs.devtools.client.env/repl-call","js/eval","p__35491","map__35492","shadow.cljs.devtools.client.browser/repl-require","reload-namespaces","sources-to-load","p__35498","map__35499","provides","cljs.core/some","p__35507","map__35508","shadow.cljs.devtools.client.browser/repl-init","repl-state","p__35516","map__35517","shadow.cljs.devtools.client.browser/repl-set-ns","shadow.cljs.devtools.client.browser/close-reason-ref","p__35522","map__35523","shadow.cljs.devtools.client.browser/handle-message","type","shadow.cljs.devtools.client.hud/connection-error-clear!","G__35529","cljs.core/Keyword","shadow.cljs.devtools.client.hud/hud-warnings","shadow.cljs.devtools.client.hud/load-end","shadow.cljs.devtools.client.hud/hud-error","shadow.cljs.devtools.client.hud/hud-hide","shadow.cljs.devtools.client.hud/load-start","cljs.core/vreset!","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/publish!","shadow.cljs.devtools.client.browser/compile","text","G__35536","G__35537","G__35538","G__35539","G__35540","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/server-host","shadow.cljs.devtools.client.env/server-port","shadow.cljs.devtools.client.env/proc-id","actions","shadow.cljs.devtools.client.browser/heartbeat!","js/Date.now","js/setTimeout","shadow.cljs.devtools.client.browser/ws-connect","e35547","print-fn","cljs.core/*print-fn*","ws-url","shadow.cljs.devtools.client.env/ws-url","socket","js/WebSocket","shadow.cljs.devtools.client.env/process-ws-msg","js/goog","js/goog.constructNamespace_","shadow.cljs.devtools.client.env/set-print-fns!","shadow.cljs.devtools.client.hud/connection-error","shadow.cljs.devtools.client.env/reset-print-fns!","shadow.cljs.devtools.client.env/enabled","js/window.addEventListener","js/document","js/document.readyState"],"sourcesContent":["(ns shadow.cljs.devtools.client.browser\n  (:require\n    [cljs.reader :as reader]\n    [clojure.string :as str]\n    [goog.dom :as gdom]\n    [goog.userAgent.product :as product]\n    [goog.Uri]\n    [goog.net.XhrIo :as xhr]\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.cljs.devtools.client.console]\n    [shadow.cljs.devtools.client.hud :as hud]\n    ))\n\n(defonce active-modules-ref\n  (volatile! #{}))\n\n(defonce repl-ns-ref (atom nil))\n\n(defn module-loaded [name]\n  (vswap! active-modules-ref conj (keyword name)))\n\n(defonce socket-ref (volatile! nil))\n\n(defn devtools-msg [msg & args]\n  (.apply (.-log js/console) nil (into-array (into [(str \"%cshadow-cljs: \" msg) \"color: blue;\"] args))))\n\n(defn ws-msg [msg]\n  (if-let [s @socket-ref]\n    (.send s (pr-str msg))\n    (js/console.warn \"WEBSOCKET NOT CONNECTED\" (pr-str msg))))\n\n(defonce scripts-to-load (atom []))\n\n(def loaded? js/goog.isProvided_)\n\n(defn goog-is-loaded? [name]\n  (js/$CLJS.SHADOW_ENV.isLoaded name))\n\n(def goog-base-rc\n  [:shadow.build.classpath/resource \"goog/base.js\"])\n\n(defn src-is-loaded? [{:keys [resource-id output-name] :as src}]\n  ;; FIXME: don't like this special case handling, but goog/base.js will always be loaded\n  ;; but not as a separate file\n  (or (= goog-base-rc resource-id)\n      (goog-is-loaded? output-name)))\n\n(defn module-is-active? [module]\n  (contains? @active-modules-ref module))\n\n(defn script-eval [code]\n  (js/goog.globalEval code))\n\n(defn do-js-load [sources]\n  (doseq [{:keys [resource-id output-name resource-name js] :as src} sources]\n    ;; should really stop using this and rather maintain our own record\n    ;; but without this hot-reload will reload shadow-js files with each cycle\n    ;; since they don't set it\n    (js/$CLJS.SHADOW_ENV.setLoaded output-name)\n\n    (devtools-msg \"load JS\" resource-name)\n    (env/before-load-src src)\n    (script-eval (str js \"\\n//# sourceURL=\" resource-name))))\n\n(defn do-js-reload [msg sources complete-fn failure-fn]\n  (env/do-js-reload\n    (assoc msg\n      :log-missing-fn\n      (fn [fn-sym]\n        (devtools-msg (str \"can't find fn \" fn-sym)))\n      :log-call-async\n      (fn [fn-sym]\n        (devtools-msg (str \"call async \" fn-sym)))\n      :log-call\n      (fn [fn-sym]\n        (devtools-msg (str \"call \" fn-sym))))\n    #(do-js-load sources)\n    complete-fn\n    failure-fn))\n\n(defn do-js-requires\n  \"when (require '[\\\"some-str\\\" :as x]) is done at the REPL we need to manually call the shadow.js.require for it\n   since the file only adds the shadow$provide. only need to do this for shadow-js.\"\n  [js-requires]\n  (doseq [js-ns js-requires]\n    (let [require-str (str \"var \" js-ns \" = shadow.js.require(\\\"\" js-ns \"\\\");\")]\n      (script-eval require-str))))\n\n(defn load-sources [sources callback]\n  (if (empty? sources)\n    (callback [])\n    (xhr/send\n      (env/files-url)\n      (fn [res]\n        (this-as ^goog req\n          (let [content\n                (-> req\n                    (.getResponseText)\n                    (reader/read-string))]\n            (callback content)\n            )))\n      \"POST\"\n      (pr-str {:client :browser\n               :sources (into [] (map :resource-id) sources)})\n      #js {\"content-type\" \"application/edn; charset=utf-8\"})))\n\n(defn handle-build-complete [{:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled]}\n        info\n\n        warnings\n        (->> (for [{:keys [resource-name warnings] :as src} sources\n                   :when (not (:from-jar src))\n                   warning warnings]\n               (assoc warning :resource-name resource-name))\n             (distinct)\n             (into []))]\n\n    (doseq [{:keys [msg line column resource-name] :as w} warnings]\n      (js/console.warn (str \"BUILD-WARNING in \" resource-name \" at [\" line \":\" column \"]\\n\\t\" msg)))\n\n    (if-not env/autoload\n      (hud/load-end-success)\n      ;; load all files for current build:\n      ;; of modules that are active\n      ;; and are either not loaded yet\n      ;; or specifically marked for reload\n      (when (or (empty? warnings) env/ignore-warnings)\n        (let [sources-to-get\n              (->> sources\n                   (filter\n                     (fn [{:keys [module] :as rc}]\n                       (or (= \"js\" env/module-format)\n                           (module-is-active? module))))\n                   ;; don't reload namespaces that have ^:dev/never-reload meta\n                   (remove (fn [{:keys [ns]}]\n                             (contains? (:never-load reload-info) ns)))\n                   (filter\n                     (fn [{:keys [ns resource-id] :as src}]\n                       (or (contains? (:always-load reload-info) ns)\n                           (not (src-is-loaded? src))\n                           (and (contains? compiled resource-id)\n                                ;; never reload files from jar\n                                ;; they can't be hot-swapped so the only way they get re-compiled\n                                ;; is if they have warnings, which we can't to anything about\n                                (not (:from-jar src))))))\n                   (into []))]\n\n          (if-not (seq sources-to-get)\n            (hud/load-end-success)\n            (do (when-not (seq (get-in msg [:reload-info :after-load]))\n                  (devtools-msg \"reloading code but no :after-load hooks are configured!\"\n                    \"https://shadow-cljs.github.io/docs/UsersGuide.html#_lifecycle_hooks\"))\n                (load-sources sources-to-get #(do-js-reload msg % hud/load-end-success hud/load-failure)))\n            ))))))\n\n;; capture this once because the path may change via pushState\n(def ^goog page-load-uri\n  (when js/goog.global.document\n    (goog.Uri/parse js/document.location.href)))\n\n(defn match-paths [old new]\n  (if (= \"file\" (.getScheme page-load-uri))\n    ;; new is always an absolute path, strip first /\n    ;; FIXME: assuming that old is always relative\n    (let [rel-new (subs new 1)]\n      (when (or (= old rel-new)\n                (str/starts-with? old (str rel-new \"?\")))\n        rel-new))\n    ;; special handling for browsers including relative css\n    (let [^goog node-uri (goog.Uri/parse old)\n          node-uri-resolved (.resolve page-load-uri node-uri)\n          node-abs (.getPath ^goog node-uri-resolved)]\n\n      (and (or (= (.hasSameDomainAs page-load-uri node-uri))\n               (not (.hasDomain node-uri)))\n           (= node-abs new)\n           new))))\n\n(defn handle-asset-watch [{:keys [updates] :as msg}]\n  (doseq [path updates\n          ;; FIXME: could support images?\n          :when (str/ends-with? path \"css\")]\n    (doseq [node (array-seq (js/document.querySelectorAll \"link[rel=\\\"stylesheet\\\"]\"))\n            :let [path-match (match-paths (.getAttribute node \"href\") path)]\n            :when path-match]\n\n      (let [new-link\n            (doto (.cloneNode node true)\n              (.setAttribute \"href\" (str path-match \"?r=\" (rand))))]\n\n        (devtools-msg \"load CSS\" path-match)\n        (gdom/insertSiblingAfter new-link node)\n        (gdom/removeNode node)\n        ))))\n\n;; from https://github.com/clojure/clojurescript/blob/master/src/main/cljs/clojure/browser/repl.cljs\n;; I don't want to pull in all its other dependencies just for this function\n(defn get-ua-product []\n  (cond\n    product/SAFARI :safari\n    product/CHROME :chrome\n    product/FIREFOX :firefox\n    product/IE :ie))\n\n(defn get-asset-root []\n  (let [loc (js/goog.Uri. js/document.location.href)\n        cbp (js/goog.Uri. js/CLOSURE_BASE_PATH)\n        s (.toString (.resolve loc cbp))]\n    ;; FIXME: stacktrace starts with file:/// but resolve returns file:/\n    ;; how does this look on windows?\n    (str/replace s #\"^file:/\" \"file:///\")\n    ))\n\n(defn repl-error [e]\n  (js/console.error \"repl/invoke error\" e)\n  (-> (env/repl-error e)\n      (assoc :ua-product (get-ua-product)\n             :asset-root (get-asset-root))))\n\n(defn repl-invoke [{:keys [id js]}]\n  (let [result (env/repl-call #(js/eval js) repl-error)]\n    (-> result\n        (assoc :id id)\n        (ws-msg))))\n\n(defn repl-require [{:keys [id sources reload-namespaces js-requires] :as msg}]\n  (let [sources-to-load\n        (->> sources\n             (remove (fn [{:keys [provides] :as src}]\n                       (and (src-is-loaded? src)\n                            (not (some reload-namespaces provides)))))\n             (into []))]\n\n    (load-sources\n      sources-to-load\n      (fn [sources]\n        (do-js-load sources)\n        (when (seq js-requires)\n          (do-js-requires js-requires))\n        (ws-msg {:type :repl/require-complete :id id})\n        ))))\n\n(defn repl-init [{:keys [repl-state id]}]\n  (load-sources\n    ;; maybe need to load some missing files to init REPL\n    (->> (:repl-sources repl-state)\n         (remove src-is-loaded?)\n         (into []))\n    (fn [sources]\n      (do-js-load sources)\n      (ws-msg {:type :repl/init-complete :id id})\n      (devtools-msg \"REPL session start successful\"))))\n\n(defn repl-set-ns [{:keys [id ns]}]\n  (ws-msg {:type :repl/set-ns-complete :id id :ns ns}))\n\n(def close-reason-ref (volatile! nil))\n\n;; FIXME: core.async-ify this\n(defn handle-message [{:keys [type] :as msg}]\n  ;; (js/console.log \"ws-msg\" msg)\n  (hud/connection-error-clear!)\n  (case type\n    :asset-watch\n    (handle-asset-watch msg)\n\n    :repl/invoke\n    (repl-invoke msg)\n\n    :repl/require\n    (repl-require msg)\n\n    :repl/set-ns\n    (repl-set-ns msg)\n\n    :repl/init\n    (repl-init msg)\n\n    :repl/session-start\n    (repl-init msg)\n\n    :build-complete\n    (do (hud/hud-warnings msg)\n        (handle-build-complete msg))\n\n    :build-failure\n    (do (hud/load-end)\n        (hud/hud-error msg))\n\n    :build-init\n    (hud/hud-warnings msg)\n\n    :build-start\n    (do (hud/hud-hide)\n        (hud/load-start))\n\n    :pong\n    nil\n\n    :client/stale\n    (vreset! close-reason-ref \"Stale Client! You are not using the latest compilation output!\")\n\n    :client/no-worker\n    (vreset! close-reason-ref (str \"watch for build \\\"\" env/build-id \"\\\" not running\"))\n\n    :custom-msg\n    (env/publish! (:payload msg))\n\n    ;; default\n    :ignored))\n\n(defn compile [text callback]\n  (xhr/send\n    (str \"http\" (when env/ssl \"s\") \"://\" env/server-host \":\" env/server-port \"/worker/compile/\" env/build-id \"/\" env/proc-id \"/browser\")\n    (fn [res]\n      (this-as ^goog req\n        (let [actions\n              (-> req\n                  (.getResponseText)\n                  (reader/read-string))]\n          (when callback\n            (callback actions)))))\n    \"POST\"\n    (pr-str {:input text})\n    #js {\"content-type\" \"application/edn; charset=utf-8\"}))\n\n(defn heartbeat! []\n  (when-let [s @socket-ref]\n    (.send s (pr-str {:type :ping :v (js/Date.now)}))\n    (js/setTimeout heartbeat! 30000)))\n\n\n(defn ws-connect []\n  (try\n    (let [print-fn\n          cljs.core/*print-fn*\n\n          ws-url\n          (env/ws-url :browser)\n\n          socket\n          (js/WebSocket. ws-url)]\n\n      (vreset! socket-ref socket)\n\n      (set! (.-onmessage socket)\n        (fn [e]\n          (env/process-ws-msg (. e -data) handle-message)\n          ))\n\n      (set! (.-onopen socket)\n        (fn [e]\n          (hud/connection-error-clear!)\n          (vreset! close-reason-ref nil)\n          ;; :module-format :js already patches provide\n          (when (= \"goog\" env/module-format)\n            ;; patch away the already declared exception\n            (set! (.-provide js/goog) js/goog.constructNamespace_))\n\n          (env/set-print-fns! ws-msg)\n\n          (devtools-msg \"WebSocket connected!\")\n          ))\n\n      (set! (.-onclose socket)\n        (fn [e]\n          ;; not a big fan of reconnecting automatically since a disconnect\n          ;; may signal a change of config, safer to just reload the page\n          (devtools-msg \"WebSocket disconnected!\")\n          (hud/connection-error (or @close-reason-ref \"Connection closed!\"))\n          (vreset! socket-ref nil)\n          (env/reset-print-fns!)\n          ))\n\n      (set! (.-onerror socket)\n        (fn [e]\n          (hud/connection-error \"Connection failed!\")\n          (devtools-msg \"websocket error\" e)))\n\n      (js/setTimeout heartbeat! 30000))\n    (catch :default e\n      (devtools-msg \"WebSocket setup failed\" e))))\n\n(when ^boolean env/enabled\n  ;; disconnect an already connected socket, happens if this file is reloaded\n  ;; pretty much only for me while working on this file\n  (when-let [s @socket-ref]\n    (devtools-msg \"connection reset!\")\n    (set! (.-onclose s) (fn [e]))\n    (.close s)\n    (vreset! socket-ref nil))\n\n  ;; for /browser-repl in case the page is reloaded\n  ;; otherwise the browser seems to still have the websocket open\n  ;; when doing the reload\n  (js/window.addEventListener \"beforeunload\"\n    (fn []\n      (when-let [s @socket-ref]\n        (.close s))))\n\n  ;; async connect so other stuff while loading runs first\n  (if (and js/document (= \"loading\" js/document.readyState))\n    (js/window.addEventListener \"DOMContentLoaded\" ws-connect)\n    (js/setTimeout ws-connect 10)))\n"]}