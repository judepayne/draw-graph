{
"version":3,
"file":"goog.i18n.uchar.js",
"lineCount":119,
"mappings":"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",
"sources":["goog/i18n/uchar.js"],
"sourcesContent":["// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Collection of utility functions for Unicode character.\n *\n */\n\ngoog.provide('goog.i18n.uChar');\n\n\n// Constants for handling Unicode supplementary characters (surrogate pairs).\n\n\n/**\n * The minimum value for Supplementary code points.\n * @type {number}\n * @private\n */\ngoog.i18n.uChar.SUPPLEMENTARY_CODE_POINT_MIN_VALUE_ = 0x10000;\n\n\n/**\n * The highest Unicode code point value (scalar value) according to the Unicode\n * Standard.\n * @type {number}\n * @private\n */\ngoog.i18n.uChar.CODE_POINT_MAX_VALUE_ = 0x10FFFF;\n\n\n/**\n * Lead surrogate minimum value.\n * @type {number}\n * @private\n */\ngoog.i18n.uChar.LEAD_SURROGATE_MIN_VALUE_ = 0xD800;\n\n\n/**\n * Lead surrogate maximum value.\n * @type {number}\n * @private\n */\ngoog.i18n.uChar.LEAD_SURROGATE_MAX_VALUE_ = 0xDBFF;\n\n\n/**\n * Trail surrogate minimum value.\n * @type {number}\n * @private\n */\ngoog.i18n.uChar.TRAIL_SURROGATE_MIN_VALUE_ = 0xDC00;\n\n\n/**\n * Trail surrogate maximum value.\n * @type {number}\n * @private\n */\ngoog.i18n.uChar.TRAIL_SURROGATE_MAX_VALUE_ = 0xDFFF;\n\n\n/**\n * The number of least significant bits of a supplementary code point that in\n * UTF-16 become the least significant bits of the trail surrogate. The rest of\n * the in-use bits of the supplementary code point become the least significant\n * bits of the lead surrogate.\n * @type {number}\n * @private\n */\ngoog.i18n.uChar.TRAIL_SURROGATE_BIT_COUNT_ = 10;\n\n\n/**\n * Gets the U+ notation string of a Unicode character. Ex: 'U+0041' for 'A'.\n * @param {string} ch The given character.\n * @return {string} The U+ notation of the given character.\n */\ngoog.i18n.uChar.toHexString = function(ch) {\n  const chCode = goog.i18n.uChar.toCharCode(ch);\n  const chCodeStr = 'U+' +\n      goog.i18n.uChar.padString_(chCode.toString(16).toUpperCase(), 4, '0');\n\n  return chCodeStr;\n};\n\n\n/**\n * Gets a string padded with given character to get given size.\n * @param {string} str The given string to be padded.\n * @param {number} length The target size of the string.\n * @param {string} ch The character to be padded with.\n * @return {string} The padded string.\n * @private\n */\ngoog.i18n.uChar.padString_ = function(str, length, ch) {\n  while (str.length < length) {\n    str = ch + str;\n  }\n  return str;\n};\n\n\n/**\n * Gets Unicode value of the given character.\n * @param {string} ch The given character, which in the case of a supplementary\n * character is actually a surrogate pair. The remainder of the string is\n * ignored.\n * @return {number} The Unicode value of the character.\n */\ngoog.i18n.uChar.toCharCode = function(ch) {\n  return goog.i18n.uChar.getCodePointAround(ch, 0);\n};\n\n\n/**\n * Gets a character from the given Unicode value. If the given code point is not\n * a valid Unicode code point, null is returned.\n * @param {number} code The Unicode value of the character.\n * @return {?string} The character corresponding to the given Unicode value.\n */\ngoog.i18n.uChar.fromCharCode = function(code) {\n  if (code == null ||\n      !(code >= 0 && code <= goog.i18n.uChar.CODE_POINT_MAX_VALUE_)) {\n    return null;\n  }\n  if (goog.i18n.uChar.isSupplementaryCodePoint(code)) {\n    // First, we split the code point into the trail surrogate part (the\n    // TRAIL_SURROGATE_BIT_COUNT_ least significant bits) and the lead surrogate\n    // part (the rest of the bits, shifted down; note that for now this includes\n    // the supplementary offset, also shifted down, to be subtracted off below).\n    const leadBits = code >> goog.i18n.uChar.TRAIL_SURROGATE_BIT_COUNT_;\n    const trailBits = code &\n        // A bit-mask to get the TRAIL_SURROGATE_BIT_COUNT_ (i.e. 10) least\n        // significant bits. 1 << 10 = 0x0400. 0x0400 - 1 = 0x03FF.\n        ((1 << goog.i18n.uChar.TRAIL_SURROGATE_BIT_COUNT_) - 1);\n\n    // Now we calculate the code point of each surrogate by adding each offset\n    // to the corresponding base code point.\n    const leadCodePoint = leadBits +\n        (goog.i18n.uChar.LEAD_SURROGATE_MIN_VALUE_ -\n         // Subtract off the supplementary offset, which had been shifted down\n         // with the rest of leadBits. We do this here instead of before the\n         // shift in order to save a separate subtraction step.\n         (goog.i18n.uChar.SUPPLEMENTARY_CODE_POINT_MIN_VALUE_ >>\n          goog.i18n.uChar.TRAIL_SURROGATE_BIT_COUNT_));\n    const trailCodePoint =\n        trailBits + goog.i18n.uChar.TRAIL_SURROGATE_MIN_VALUE_;\n\n    // Convert the code points into a 2-character long string.\n    return String.fromCharCode(leadCodePoint) +\n        String.fromCharCode(trailCodePoint);\n  }\n  return String.fromCharCode(code);\n};\n\n\n/**\n * Returns the Unicode code point at the specified index.\n *\n * If the char value specified at the given index is in the leading-surrogate\n * range, and the following index is less than the length of `string`, and\n * the char value at the following index is in the trailing-surrogate range,\n * then the supplementary code point corresponding to this surrogate pair is\n * returned.\n *\n * If the char value specified at the given index is in the trailing-surrogate\n * range, and the preceding index is not before the start of `string`, and\n * the char value at the preceding index is in the leading-surrogate range, then\n * the negated supplementary code point corresponding to this surrogate pair is\n * returned.\n *\n * The negation allows the caller to differentiate between the case where the\n * given index is at the leading surrogate and the one where it is at the\n * trailing surrogate, and thus deduce where the next character starts and\n * preceding character ends.\n *\n * Otherwise, the char value at the given index is returned. Thus, a leading\n * surrogate is returned when it is not followed by a trailing surrogate, and a\n * trailing surrogate is returned when it is not preceded by a leading\n * surrogate.\n *\n * @param {string} string The string.\n * @param {number} index The index from which the code point is to be retrieved.\n * @return {number} The code point at the given index. If the given index is\n * that of the start (i.e. lead surrogate) of a surrogate pair, returns the code\n * point encoded by the pair. If the given index is that of the end (i.e. trail\n * surrogate) of a surrogate pair, returns the negated code pointed encoded by\n * the pair.\n */\ngoog.i18n.uChar.getCodePointAround = function(string, index) {\n  const charCode = string.charCodeAt(index);\n  if (goog.i18n.uChar.isLeadSurrogateCodePoint(charCode) &&\n      index + 1 < string.length) {\n    const trail = string.charCodeAt(index + 1);\n    if (goog.i18n.uChar.isTrailSurrogateCodePoint(trail)) {\n      // Part of a surrogate pair.\n      return /** @type {number} */ (\n          goog.i18n.uChar.buildSupplementaryCodePoint(charCode, trail));\n    }\n  } else if (goog.i18n.uChar.isTrailSurrogateCodePoint(charCode) && index > 0) {\n    const lead = string.charCodeAt(index - 1);\n    if (goog.i18n.uChar.isLeadSurrogateCodePoint(lead)) {\n      // Part of a surrogate pair.\n      const codepoint = /** @type {number} */ (\n          goog.i18n.uChar.buildSupplementaryCodePoint(lead, charCode));\n      return -codepoint;\n    }\n  }\n  return charCode;\n};\n\n\n/**\n * Determines the length of the string needed to represent the specified\n * Unicode code point.\n * @param {number} codePoint\n * @return {number} 2 if codePoint is a supplementary character, 1 otherwise.\n */\ngoog.i18n.uChar.charCount = function(codePoint) {\n  return goog.i18n.uChar.isSupplementaryCodePoint(codePoint) ? 2 : 1;\n};\n\n\n/**\n * Determines whether the specified Unicode code point is in the supplementary\n * Unicode characters range.\n * @param {number} codePoint\n * @return {boolean} Whether then given code point is a supplementary character.\n */\ngoog.i18n.uChar.isSupplementaryCodePoint = function(codePoint) {\n  return codePoint >= goog.i18n.uChar.SUPPLEMENTARY_CODE_POINT_MIN_VALUE_ &&\n      codePoint <= goog.i18n.uChar.CODE_POINT_MAX_VALUE_;\n};\n\n\n/**\n * Gets whether the given code point is a leading surrogate character.\n * @param {number} codePoint\n * @return {boolean} Whether the given code point is a leading surrogate\n * character.\n */\ngoog.i18n.uChar.isLeadSurrogateCodePoint = function(codePoint) {\n  return codePoint >= goog.i18n.uChar.LEAD_SURROGATE_MIN_VALUE_ &&\n      codePoint <= goog.i18n.uChar.LEAD_SURROGATE_MAX_VALUE_;\n};\n\n\n/**\n * Gets whether the given code point is a trailing surrogate character.\n * @param {number} codePoint\n * @return {boolean} Whether the given code point is a trailing surrogate\n * character.\n */\ngoog.i18n.uChar.isTrailSurrogateCodePoint = function(codePoint) {\n  return codePoint >= goog.i18n.uChar.TRAIL_SURROGATE_MIN_VALUE_ &&\n      codePoint <= goog.i18n.uChar.TRAIL_SURROGATE_MAX_VALUE_;\n};\n\n\n/**\n * Composes a supplementary Unicode code point from the given UTF-16 surrogate\n * pair. If leadSurrogate isn't a leading surrogate code point or trailSurrogate\n * isn't a trailing surrogate code point, null is returned.\n * @param {number} lead The leading surrogate code point.\n * @param {number} trail The trailing surrogate code point.\n * @return {?number} The supplementary Unicode code point obtained by decoding\n * the given UTF-16 surrogate pair.\n */\ngoog.i18n.uChar.buildSupplementaryCodePoint = function(lead, trail) {\n  if (goog.i18n.uChar.isLeadSurrogateCodePoint(lead) &&\n      goog.i18n.uChar.isTrailSurrogateCodePoint(trail)) {\n    const shiftedLeadOffset =\n        (lead << goog.i18n.uChar.TRAIL_SURROGATE_BIT_COUNT_) -\n        (goog.i18n.uChar.LEAD_SURROGATE_MIN_VALUE_\n         << goog.i18n.uChar.TRAIL_SURROGATE_BIT_COUNT_);\n    const trailOffset = trail - goog.i18n.uChar.TRAIL_SURROGATE_MIN_VALUE_ +\n        goog.i18n.uChar.SUPPLEMENTARY_CODE_POINT_MIN_VALUE_;\n    return shiftedLeadOffset + trailOffset;\n  }\n  return null;\n};\n"],
"names":["goog","provide","i18n","uChar","SUPPLEMENTARY_CODE_POINT_MIN_VALUE_","CODE_POINT_MAX_VALUE_","LEAD_SURROGATE_MIN_VALUE_","LEAD_SURROGATE_MAX_VALUE_","TRAIL_SURROGATE_MIN_VALUE_","TRAIL_SURROGATE_MAX_VALUE_","TRAIL_SURROGATE_BIT_COUNT_","toHexString","goog.i18n.uChar.toHexString","ch","chCode","toCharCode","chCodeStr","padString_","toString","toUpperCase","goog.i18n.uChar.padString_","str","length","goog.i18n.uChar.toCharCode","getCodePointAround","fromCharCode","goog.i18n.uChar.fromCharCode","code","isSupplementaryCodePoint","leadBits","trailBits","leadCodePoint","trailCodePoint","String","goog.i18n.uChar.getCodePointAround","string","index","charCode","charCodeAt","isLeadSurrogateCodePoint","trail","isTrailSurrogateCodePoint","buildSupplementaryCodePoint","lead","codepoint","charCount","goog.i18n.uChar.charCount","codePoint","goog.i18n.uChar.isSupplementaryCodePoint","goog.i18n.uChar.isLeadSurrogateCodePoint","goog.i18n.uChar.isTrailSurrogateCodePoint","goog.i18n.uChar.buildSupplementaryCodePoint","shiftedLeadOffset","trailOffset"]
}
