{"version":3,"sources":["kvlt/core.cljc"],"mappings":"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","names":["kvlt.core/default-middleware","kvlt.middleware/decompress","kvlt.middleware/as","kvlt.middleware.params/form","kvlt.middleware.params/short-form","kvlt.middleware.params/query","kvlt.middleware.params/short-query","kvlt.middleware/port","kvlt.middleware/method","kvlt.middleware/default-method","kvlt.middleware/accept","kvlt.middleware/accept-encoding","kvlt.middleware/keyword-headers","kvlt.middleware/lower-case-headers","kvlt.middleware/content-type","kvlt.middleware/default-content-type","kvlt.middleware/body-type-hint","kvlt.middleware/basic-auth","kvlt.middleware/oauth-token","kvlt.middleware/url","kvlt.middleware/error","kvlt.core/request*","p1__36002#","p2__36001#","cljs.core.reduce","kvlt.platform.http/request!","kvlt.core/quiet!","taoensso.timbre/merge-config!","kvlt.core/request!","req","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","kvlt.core/websocket!","p__36005","vec__36006","map__36009","cljs.core.nth","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq36003","G__36004","cljs.core/first","cljs.core/next","self__4776__auto__","url","read-chan","write-chan","close?","format","opts","kvlt.platform.websocket.request_BANG_","kvlt.core/event-source!","p__36030","vec__36031","map__36034","seq36012","G__36013","events","as","chan","kvlt.platform.event_source.request_BANG_"],"sourcesContent":["(ns kvlt.core\n  (:require [kvlt.platform.http :as platform.http]\n            [kvlt.platform.websocket :as platform.websocket]\n            [kvlt.platform.event-source :as platform.event-source]\n            [kvlt.middleware :as mw]\n            [kvlt.middleware.params :as mw.params]\n            [taoensso.timbre :as log]))\n\n(def ^:no-doc default-middleware\n  [mw/decompress\n   mw/as\n\n   mw.params/form\n   mw.params/short-form\n   mw.params/query\n   mw.params/short-query\n\n   mw/port\n   mw/method\n   mw/default-method\n   mw/accept\n   mw/accept-encoding\n   mw/keyword-headers\n   mw/lower-case-headers\n   mw/content-type\n   mw/default-content-type\n   mw/body-type-hint\n   mw/basic-auth\n   mw/oauth-token\n   mw/url\n\n   mw/error])\n\n(def ^:private request* (reduce #(%2 %1) platform.http/request! default-middleware))\n\n(defn quiet! \"Disable request/response logging\" []\n  (log/merge-config! {:ns-blacklist [\"kvlt.*\"]}))\n\n(defn request!\n  \"Issues the HTTP request described by the given map, returning a\n  promise resolving to a map describing the response, or rejected with\n  an `ExceptionInfo` instance having a similar map associated with it.\n  See [[kvlt.middleware/error]] for more details of the error\n  conditions & behaviour.\n\n  This function applies a variety of middleware to\n  `kvlt.platform.http/request!`, in order to transform the input map\n  into something Ring-like - and to perform similar transformations to\n  the response.\"\n  [req]\n  (request* req))\n\n(defn websocket!\n  \"Initiates a websocket connection with the given \\\"ws:\\\" or \\\"wss:\\\"\n  URL and returns a promise resolving to a `core.async` channel.  If a\n  connection cannot be established, the promise'll be rejected with an\n  `ExceptionInfo` instance.\n\n  Reads and writes on the resulting channel are delegated to distinct\n  read/write channels - the \\\"read\\\" side being by default an\n  unbuffered channel populated with messages from the websocket, and\n  the \\\"write\\\" side, also unbuffered, being drained into the\n  websocket itself.  The `read-chan` and `write-chan` options can be\n  specified to e.g. apply a transducer to incoming/outgoing values.\n\n  Closing the returned channel terminates the websocket connection,\n  and will close the underlying read & write channels (unless `close?`\n  is false, in which event it'll close neither).  The channel will be\n  closed (and the same `close?` behaviour applied) if a transport\n  error occurs after the connection has been established.\"\n  [url & [{:keys [read-chan write-chan close? format] :as opts}]]\n  (platform.websocket/request! url opts))\n\n(defn event-source!\n  \"[Server-sent Events](https://html.spec.whatwg.org/multipage/comms.html#server-sent-events) client.\n\n  Initiates a long-lived HTTP connection with `url`, placing maps\n  representing incoming events onto a `core.async` channel.\n\n  By default, only events of type `:message` will be considered (per\n  spec).  To listen to a set of specific event types, `events` (a set\n  of keywords) may be specified.\n\n  The returned channel, when closed, will terminate the underlying SSE\n  connection.  By default, the channel is unbuffered - though an\n  arbitrary channel can be passed in via `chan` - and will be closed\n  when the connection channel closes (or on error), unless `close?` is\n  false.  On error, the connection will not be automatically\n  re-established.\n\n  `as` is some symbolic value (defaulting to `:string` - no-op) which\n  is used as [[kvlt.event-source/format-event]]'s dispatch value.  ```\n  \"\n  [url & [{:keys [events as chan close?]\n           :or {events #{:message}\n                as     :string\n                close? true}}]]\n  (platform.event-source/request!\n   url {:events events\n        :format as\n        :chan   chan\n        :close? close?}))\n"]}