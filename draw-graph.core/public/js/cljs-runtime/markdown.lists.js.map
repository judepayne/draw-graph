{"version":3,"sources":["markdown/lists.cljc"],"mappings":"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","names":["markdown.lists/close-lists","lists","clojure.string.join","iter__4582__auto__","s__40840","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__40842","cljs.core/chunk-buffer","i__40841","vec__40847","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__40839","cljs.core/chunk-rest","vec__40859","cljs.core/first","cljs.core/cons","cljs.core/rest","list-type","cljs.core/name","markdown.lists/add-row","row-type","num-indents","indents","content","state","lists-to-close","p1__40874#","cljs.core.take_while","cljs.core/second","cljs.core/reverse","remaining-lists","cljs.core/vec","cljs.core.drop_last","cljs.core.apply","cljs.core/str","cljs.core.assoc","cljs.core/last","cljs.core.conj","cljs.core.update_in","cljs.core/conj","cljs.core._EQ_","markdown.lists/ul","text","vec__40881","cljs.core.partial","cljs.core/=","clojure.string/trim","markdown.common/*substring*","or__4185__auto__","markdown.common/make-heading","markdown.lists/ol","vec__40884","cljs.core.drop_while","cljs.core/not=","p__40887","map__40888","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","markdown.lists/li","codeblock","last-line-empty?","eof","and__4174__auto__","clojure.string/blank?","cljs.core.dissoc","cljs.core/not","trimmed","in-list?","cljs.core/re-find","cljs.core/not-empty","cljs.core/chunk-first"],"sourcesContent":["(ns markdown.lists\n  (:require [clojure.string :as string]\n            [markdown.common :refer [*substring* make-heading]]))\n\n(defn close-lists [lists]\n  (string/join\n    (for [[list-type] lists]\n      (str \"</li></\" (name list-type) \">\"))))\n\n(defn add-row [row-type list-type num-indents indents content state]\n  (if list-type\n    (cond\n      (< num-indents indents)\n      (let [lists-to-close  (take-while #(> (second %) num-indents) (reverse (:lists state)))\n            remaining-lists (vec (drop-last (count lists-to-close) (:lists state)))]\n\n        [(apply str (close-lists lists-to-close) \"</li><li>\" content)\n         (assoc state :lists (if (> num-indents (second (last remaining-lists)))\n                               (conj remaining-lists [row-type num-indents])\n                               remaining-lists))])\n\n      (> num-indents indents)\n      [(str \"<\" (name row-type) \"><li>\" content)\n       (update-in state [:lists] conj [row-type num-indents])]\n\n      (= num-indents indents)\n      [(str \"</li><li>\" content) state])\n\n    [(str \"<\" (name row-type) \"><li>\" content)\n     (assoc state :lists [[row-type num-indents]])]))\n\n(defn ul [text state]\n  (let [[list-type indents] (last (:lists state))\n        num-indents (count (take-while (partial = \\space) text))\n        content     (string/trim (*substring* text (inc num-indents)))]\n    (add-row :ul list-type num-indents indents (or (make-heading content false) content) state)))\n\n(defn ol [text state]\n  (let [[list-type indents] (last (:lists state))\n        num-indents (count (take-while (partial = \\space) text))\n        content     (string/trim (string/join (drop-while (partial not= \\space) (string/trim text))))]\n    (add-row :ol list-type num-indents indents (or (make-heading content false) content) state)))\n\n(defn li [text {:keys [codeblock last-line-empty? eof lists] :as state}]\n  (cond\n\n    (and last-line-empty? (string/blank? text))\n    [(str (close-lists (reverse lists)) text)\n     (-> state (dissoc :lists) (assoc :last-line-empty? false))]\n\n    (and lists codeblock)\n    [text state]\n\n    (and (not eof)\n         lists\n         (string/blank? text))\n    [text (assoc state :last-line-empty? false :eof false)]\n\n    :else\n    (let [indents  (if last-line-empty? 0 (count (take-while (partial = \\space) text)))\n          trimmed  (string/trim text)\n          in-list? (:lists state)]\n      (cond\n        (re-find #\"^[\\*\\+-] \" trimmed)\n        (ul (if in-list? text trimmed) state)\n\n        (re-find #\"^[0-9]+\\. \" trimmed)\n        (ol (if in-list? text trimmed) state)\n\n        (pos? indents)\n        [text state]\n\n        (and (or eof last-line-empty?)\n             (not-empty lists))\n        [(close-lists (reverse lists))\n         (assoc state :lists [] :buf text)]\n\n        :else\n        [text state]))))\n"]}