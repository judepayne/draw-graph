{"version":3,"sources":["clojure/data/xml/js/name.cljs"],"mappings":";;;;AAIA,AAAKA,AACH,AAACC,AAAQ,AAAA,AAACC,AAAQC;AAEpB,AAAA,AAAMC,AAAYC;AAAlB,AACE,AAACC,AAAsBD;;AAEzB,AAAA,AAAME,AAAYC;AAAlB,AACE,AAACC,AAAsBD;;AAEzB,AAAA,AAAA,AAAAE,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAC;AAAAC,AAAA;AAAAC,AAEE;AAAcK;AAAd,AACE,AAAAC,AAAkB,AAACrB,AAAAA,AAAAA,AAAYoB,AAAAA;AAA/B,AAAAE,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAASE;AAAT,AAAAD,AAAAD,AAAA,AAAA,AAAWG;AAAX,AACEA;;;AAJN,AAAA,AAAAd,AAAAE,AAAAE,AAAAC;;AAAA,AAAAC,AAAAC;AAAAC,AAAA;AAAAC,AAKE;AAAYC;AAAZ,AACE,AAAAK,AAAgB,AAACzB,AAAAA,AAAAA,AAAYoB,AAAAA;AAA7B,AAAAE,AAAAG,AAAA,AAAA,AAAOF;AAAP,AAAAD,AAAAG,AAAA,AAAA,AAASjB;AAAT,AAAAc,AAAAG,AAAA,AAAA,AAAaF;AAAb,AACEf;;;AAPN,AAAA,AAAAE,AAAAM,AAAAE,AAAAC","names":["clojure.data.xml.js.name/parse-qname","cljs.core/memoize","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/re-matches","clojure.data.xml.js.name/decode-uri","ns","js/decodeURIComponent","clojure.data.xml.js.name/encode-uri","uri","js/encodeURIComponent","goog.object/set","clojure.data.xml.protocols/AsQName","G__50183","clojure.data.xml.protocols/qname-local","G__50184","G__50185","G__50190","clojure.data.xml.protocols/qname-uri","G__50191","G__50192","s","vec__50187","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","local","vec__50193"],"sourcesContent":["(ns clojure.data.xml.js.name\n  (:require [clojure.data.xml.protocols :refer [AsQName qname-uri qname-local]]\n            [clojure.string :as str]))\n\n(def parse-qname\n  (memoize (partial re-matches #\"(?:\\{([^}]+)\\})?([^{]*)\")))\n\n(defn decode-uri [ns]\n  (js/decodeURIComponent ns))\n\n(defn encode-uri [uri]\n  (js/encodeURIComponent uri))\n\n(extend-protocol AsQName\n  string\n  (qname-local [s]\n    (let [[_ _ local] (parse-qname s)]\n      local))\n  (qname-uri [s]\n    (let [[_ uri _] (parse-qname s)]\n      uri)))\n"]}