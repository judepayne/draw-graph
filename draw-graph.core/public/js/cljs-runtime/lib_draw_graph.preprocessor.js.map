{"version":3,"sources":["lib_draw_graph/preprocessor.cljc"],"mappings":"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","names":["lib-draw-graph.preprocessor/submap?","sub","m","cljs.core._EQ_","cljs.core/select-keys","cljs.core/keys","lib-draw-graph.preprocessor/find-node","g","part-node","cljs.core.reduce","acc","cur","cljs.core/reduced","loom.graph/nodes","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","lib-draw-graph.preprocessor/subgraph","p__37260","map__37261","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq37253","G__37254","cljs.core/first","cljs.core/next","G__37255","self__4776__auto__","n","part-node?","node","loom.graph/digraph","p1__37252#","loom.alg-generic/pre-edge-traverse","loom.graph/successors*","lib-draw-graph.preprocessor/leaves","p1__37266#","cljs.core.filter","lib-draw-graph.graph/leaf?","lib-draw-graph.preprocessor/parents-of","nodes","prnts","loom.graph/predecessors*","p1__37267#","cljs.core/not","lib-draw-graph.graph/edge-invisible?","cljs.core.dedupe","p1__37268#","cljs.core.mapcat","visible-parents","lib-draw-graph.preprocessor/remove-levels","clustered?","lib-draw-graph.clustered/clustered?","grph","nds","lvls","next-gen","grph*","lib-draw-graph.clustered/remove-nodes","loom.graph/remove-nodes*","lib-draw-graph.preprocessor/eager-stateful-dfs","successors","start","f","init","vertices","explored","frontier","state","cljs.core/empty?","v","cljs.core/peek","neighbours","cljs.core.conj","cljs.core.into","cljs.core/pop","cljs.core.remove","cljs.core.assoc","lib-draw-graph.preprocessor/update-rank","next","mx","x","y","x__4273__auto__","y__4274__auto__","lib-draw-graph.preprocessor/ranks","roots","lib-draw-graph.util/roots","cljs.core/zipmap","cljs.core.repeat","cljs.core.partial","lib-draw-graph.util/successors-not-self","lib-draw-graph.preprocessor/fmap","cljs.core/empty","iter__4582__auto__","s__37281","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__37283","cljs.core/chunk-buffer","i__37282","vec__37287","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__37280","cljs.core/chunk-rest","vec__37292","cljs.core/cons","cljs.core/rest","k","lib-draw-graph.preprocessor/fmap*","p1__37295#","cljs.core/map?","lib-draw-graph.preprocessor/rank-info","ranks","r","cljs.core/group-by","cljs.core.map","p__37300","vec__37301","cljs.core/second","p1__37297#","lib-draw-graph.preprocessor/max-ranked-nodes","info","cljs.core/sorted-map-by","cljs.core/>","m'","cljs.core/flatten","cljs.core/vals","cljs.core.take","lib-draw-graph.preprocessor/min-ranked-nodes","cljs.core/sorted-map","lib-draw-graph.preprocessor/cluster-edges","lib-draw-graph.preprocessor/edges-between","ce-uppers","ce-lowers","clstr1","clstr2","edges","loom.graph/edges","clstr1s","lib-draw-graph.clustered/cluster-descendants","clojure.string/trim","clstr2s","clstr1s-mins","p1__37314#","clstr2s-maxs","p1__37315#","clstr-edges","s__37318","xs__6292__auto__","iterys__4578__auto__","s__37320","b__37322","i__37321","iter__37319","fs__4579__auto__","cljs.core.concat","iter__37317","cljs.core/some","lib-draw-graph.preprocessor/get-rank-info","cluster-on","rks","ri","lib-draw-graph.preprocessor/add-stack","stack","cluster-edge-nums","p1__37326#","cljs.core.partition","edges'","p1__37327#","edges'-f","edges'-t","loom.graph/add-edges","loom.attr/add-attr-to-edges","lib-draw-graph.preprocessor/add-invisible-cluster-edges","opts","lib-draw-graph.clustered/cluster-key","edge-nums","lib-draw-graph.util/parse-int","g'","p__37333","vec__37334","c1","c2","lib-draw-graph.preprocessor/sort-clusters-by-rank","clusters","r'","p__37345","vec__37346","vs","cljs.core/val","old-ranks","clstrs","items-at","matched","clojure.set.intersection","unmatched","clojure.set.difference","lib-draw-graph.preprocessor/rankseq->edges","rankseq","p__37353","vec__37354","srcs","dests","s__37362","s__37364","b__37366","i__37365","iter__37363","iter__37361","lib-draw-graph.preprocessor/filter-edge-graph","old-edge-graph","sorted-clusters","new-edges","p__37377","vec__37379","lib-draw-graph.clustered/add-cluster-edge","lib-draw-graph.clustered/delete-edge-graph","lib-draw-graph.preprocessor/filter-graph","p__37386","map__37387","seq37383","G__37384","G__37385","sql","filter-edges?","filter-fn","cljs.core/complement","sqlpred.core.sql_pred","filtered-nodes","loom.graph/remove-nodes","edges-to-check","edge","cljs.core.not_EQ_","loom.attr/attr","filtered-edges","loom.graph/remove-edges","lib-draw-graph.preprocessor/paths","start-subs","end-subs","start-nodes","lib_draw_graph.preprocessor.filter_graph","end-nodes","combins","s__37415","s__37417","b__37419","i__37418","iter__37416","iter__37414","s","e","paths","p1__37398#","loom.alg-generic/bf-path","lib-draw-graph.graph/successors","cljs.core/nil?","nds-compl","loom.graph.remove_nodes","lib-draw-graph.preprocessor/same-ranks","p__37425","vec__37426","vec__37429","_","inner","lib-draw-graph.preprocessor/fix-ranks","same","p__37433","vec__37434","lib-draw-graph.clustered/add-attr-to-cluster","cljs.core/chunk-first"],"sourcesContent":["(ns ^{:doc \"Processing functions for Loom graphs.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.preprocessor\n  (:require [loom.graph                     :as loom.graph]\n            [extra-loom.multigraph          :as extra-loom]\n            [loom.alg-generic               :as loom.gen]\n            [loom.attr                      :as loom.attr]\n            [lib-draw-graph.clustered       :as clstr]\n            [lib-draw-graph.graph           :as graph]\n            [clojure.set                    :as set]\n            [clojure.string                 :as str]\n            [lib-draw-graph.util            :as util]\n            [sqlpred.core                   :as sql]))\n\n\n;; -----------\n;; Functions to manipulate the graph\n\n(defn submap?\n  \"Checks whether m contains all entries in sub.\"\n  [sub m]\n  (= sub (select-keys m (keys sub))))\n\n\n(defn find-node\n  \"Checks if part-node is part of one of the nodes in the graph. Both part-node\n  and the nodes in the graph must be in map format. e.g. part-node {:id 12} and\n  a node in the graph {:id 12 :name ....}. Returns the first node matched or nil.\"\n  [g part-node]\n  (reduce\n   (fn [acc cur]\n     (if (submap? part-node cur)\n       (reduced cur)\n       nil))\n   (loom.graph/nodes g)))\n\n\n(defn subgraph\n  \"Returns a sub(di)graph of g going depth first from the first occurrence of\n   the (part) node n.\"\n  [g n\n   & {:keys [part-node?] :or {part-node? false}}]\n  (let [node (if part-node? (find-node g n) n)]\n    (apply loom.graph/digraph\n           (loom.gen/pre-edge-traverse #(loom.graph/successors* g %) node))))\n\n\n(defn leaves\n  \"Returns the leaves in the graph.\"\n  [g]\n  (filter #(graph/leaf? g %) (loom.graph/nodes g)))\n\n\n(defn parents-of\n  \"Returns the nodes that are parents of nodes.\"\n  [g nodes]\n  (letfn [(visible-parents [g n]\n            (let [prnts (loom.graph/predecessors* g n)]\n              (filter #(not (graph/edge-invisible? g % n)) prnts)))]\n    (dedupe (mapcat #(visible-parents g %) nodes))))\n\n\n(defn remove-levels\n  \"Removes the n lowest levels from the graph.\"\n  [g n]\n  (let [clustered? (clstr/clustered? g)]\n    (loop [grph g\n           nds (leaves g)\n           lvls n]\n      (if (zero? lvls)\n        grph\n        (let [next-gen (parents-of grph nds)\n              grph* (if clustered?\n                      (:graph (clstr/remove-nodes grph nds))\n                      (loom.graph/remove-nodes* grph nds))]\n          (recur grph* next-gen (dec lvls)))))))\n\n\n\n;; Thanks: http://hueypetersen.com/posts/2013/06/25/graph-traversal-with-clojure/\n(defn eager-stateful-dfs\n  \"Eager depth first search that collects state as it goes.\n   successors is a function of 1 arg that returns successors of node passed.\n   start is the starting node.\n   init is a map of initial state.\n   f is a function of 3 args: current state (map), current nodes and one of its children.\"\n  [successors start f init]\n  (loop [vertices [] explored #{start} frontier [start] state init]\n    (if (empty? frontier)\n      state\n      (let [v (peek frontier)\n            neighbours (successors v)]\n        (recur\n          (conj vertices v)\n          (into explored neighbours)\n          (into (pop frontier) (remove explored neighbours))\n          (reduce (fn [acc cur] (assoc acc cur (f acc v cur))) state neighbours))))))\n\n\n(defn update-rank\n  \"Returns rank for the next (node) given state map.\"\n  [state node next]\n  (let [mx (fn [x y] (if (nil? x) y (max x y)))]\n    (mx (get state next) (inc (get state node)))))\n\n\n\n(defn ranks\n  \"Returns ranks for each node in g. 0-indexed.\"\n  [g]\n  (let [roots (util/roots g)\n        init (zipmap roots (repeat 0))]\n    ;; we need to use successors-not-self or the dfs will incorrectly increase the rank of\n    ;; nodes that have edges to themselves, causing them to have a rank one higher\n    ;; than other nodes and leading to an incorrect set of cluster edges.\n    (reduce\n     (fn [acc cur]\n       (eager-stateful-dfs (partial util/successors-not-self g)\n                           cur\n                           update-rank\n                           acc))\n     init\n     roots)))\n\n\n(defn fmap [f m] (into (empty m) (for [[k v] m] [k (f v)])))\n\n\n(defn fmap*\n  \"Applies f to every value in nested map.\"\n  [f m]\n  (fmap #(if (map? %)\n           (fmap* f %)\n           (f %))\n        m))\n\n\n(defn rank-info\n  \"Organizes ranks by k. k is usually a cluster.\"\n  [ranks k]\n  (let [r  (->> ranks\n                (group-by (fn [n] (get (first n) k)))\n                (into {} (map (fn [[k v]] [k (group-by second v)]))))]\n    (fmap* #(map first %) r)))\n\n\n(defn max-ranked-nodes\n  \"Returns seq of nodes at the max rank for the k. k is usually a cluster.\"\n  [info k n]\n  (let [m (into (sorted-map-by >) (get info k))\n        m' (flatten (vals m))]\n    (take n m')))\n\n\n(defn min-ranked-nodes\n  \"Returns seq of nodes at the min rank for the k. k is usually a cluster.\"\n  [info k n]\n  (let [m (into (sorted-map) (get info k))\n        m' (flatten (vals m))]\n    (take n m')))\n\n\n(def cluster-edges\n  ;; meta data about cluster edges. Keep. used below\n  {16 [4 4]\n   12 [4 3]\n   9 [3 3]\n   6 [3 2]\n   4 [2 2]\n   2 [2 1]\n   1 [1 1]})\n\n\n(defn edges-between\n  \"Returns a set of edges between all of the min ranked nodes of clstr1\n   and one of the max ranked nodes in clstr2. edges already in the graph\n   are returned marked with :constraint\"\n  [g info ce-uppers ce-lowers clstr1 clstr2]\n  (let [edges (loom.graph/edges g)\n        clstr1s (clstr/cluster-descendants g (str/trim clstr1))\n        clstr2s (clstr/cluster-descendants g (str/trim clstr2))\n        clstr1s-mins (mapcat #(max-ranked-nodes info % ce-uppers) clstr1s)\n        clstr2s-maxs (mapcat #(min-ranked-nodes info % ce-lowers) clstr2s)\n        clstr-edges (for [x clstr1s-mins\n                          y clstr2s-maxs]\n                      [x y (if (some #{[x y]} edges) :constraint)])]\n    clstr-edges))\n\n\n(defn get-rank-info\n  [g cluster-on]\n  (let [rks (ranks g)\n        ri (rank-info rks cluster-on)]\n    ri))\n\n\n(defn add-stack\n  \"Adds a stack of clusters to the graph. cluster-edge-nums is a 2-vector where\n   the first is the number of nodes in the upper cluster and the second the lower.\"\n  [g ri stack cluster-edge-nums]\n  (let [edges (mapcat\n               #(apply edges-between g ri\n                       (first cluster-edge-nums) (second cluster-edge-nums) %)\n               (partition 2 1 stack))\n        ;;separate edges marked with :constraint from those that are not.\n        edges' (group-by #(= :constraint (nth % 2)) edges)\n        edges'-f (get edges' false)\n        edges'-t (get edges' true)]\n    (-> (apply loom.graph/add-edges g edges'-f) ;; don't add :constraint edges\n        (loom.attr/add-attr-to-edges :style \"invis\" edges'-f)\n        ;; for edges marked with :constraint, set the :constraint in the attrs\n        (loom.attr/add-attr-to-edges :constraint true edges'-f))))\n\n\n(defn add-invisible-cluster-edges\n  [g opts edges]\n  (let [ri (get-rank-info g (clstr/cluster-key g))\n        ;; look up vector of cluster edges nums or use [2 2] as a default\n        edge-nums (get cluster-edges (util/parse-int (-> opts :num-cluster-edges)) [2 2])\n        g' (reduce (fn [acc [c1 c2]]\n                     (add-stack acc ri [c1 c2] edge-nums))\n                   g\n                   edges)]\n    g'))\n\n\n(defn sort-clusters-by-rank\n  \"Takes the ranks from an old graph and a subset of clusters and returns\n   the clusters in rank order.\"\n  [ranks clusters]\n  (let [r' (into [] (vals (reduce (fn [acc [k vs]]\n                                    (assoc acc k (into #{} (map first vs))))\n                                  {}\n                                  (group-by val ranks))))]\n   (loop [old-ranks r'\n           acc []\n           clstrs clusters]\n      (if (empty? old-ranks)\n        acc\n        (let [items-at (first old-ranks)\n              matched (set/intersection clstrs items-at)\n              unmatched (set/difference clstrs items-at)]\n          (if (empty? matched)\n            (recur (rest old-ranks) acc clstrs)\n            (recur (rest old-ranks) (conj acc matched) unmatched)))))))\n\n\n(defn rankseq->edges\n  [rankseq]\n  (mapcat\n   (fn [[srcs dests]] (for [x srcs y dests] [x y]))\n   (partition 2 1 rankseq)))\n\n\n(defn filter-edge-graph\n  \"Filter's the graph's edge-graph to just supplied clusters.\"\n  [g clusters]\n  (let [old-edge-graph (-> g :clusters :edge-graph)\n        old-ranks (ranks old-edge-graph)\n        sorted-clusters (sort-clusters-by-rank old-ranks clusters)\n        new-edges (rankseq->edges sorted-clusters)]\n    (reduce (fn [acc [c1 c2]]\n                           (-> acc\n                               (clstr/add-cluster-edge c1 c2)))\n            (clstr/delete-edge-graph g)\n            new-edges)))\n\n\n(defn filter-graph\n  \"Returns a filtered graph where nodes where is not a submap are filtered out.\"\n  [g sql & {:keys [filter-edges?] :or {filter-edges? true}}]\n  (let [filter-fn (complement\n                   (sql/sql-pred sql\n                                 :keywordize-keys? true\n                                 :skip-missing? true))\n        filtered-nodes (filter filter-fn\n                               (loom.graph/nodes g))\n        g' (if (clstr/clustered? g)\n             (clstr/remove-nodes g filtered-nodes)\n             (apply loom.graph/remove-nodes g filtered-nodes))]\n     (if filter-edges?\n       (let [edges-to-check (filter   ;; don't filter out any invis/ scaffolding edges\n                             (fn [edge] (not= (loom.attr/attr g' edge :style) \"invis\"))\n                             (loom.graph/edges g'))\n             filtered-edges  (filter\n                              (fn [edge]\n                                (filter-fn (loom.attr/attr g' edge :meta)))\n                              edges-to-check)]\n        (apply loom.graph/remove-edges g' filtered-edges))\n      g')))\n\n\n(defn paths\n  \"Returns a graph with only nodes on paths between start filtering term and the end.\"\n  [g start-subs end-subs]\n  (let [start-nodes (loom.graph/nodes (filter-graph g start-subs :filter-edges? false))\n        end-nodes (loom.graph/nodes (filter-graph g end-subs :filter-edges? false))\n        combins (for [s start-nodes\n                      e end-nodes]\n                  [s e])\n        paths (map\n               #(apply loom.gen/bf-path (partial graph/successors g) %)\n               combins)\n        nds (remove nil? (into #{} (flatten paths)))\n        nds-compl (set/difference (loom.graph/nodes g) nds)]\n    (if (clstr/clustered? g)\n      (clstr/remove-nodes g nds-compl)\n      (loom.graph/remove-nodes g nds-compl))))\n\n\n(defn same-ranks\n  [info]\n  \"Filters down to just the ranks that need to be fixed.\"\n  (into {}\n        (map\n         (fn [[k v]]\n           (let [[_ inner] (vals v)]\n             (when (> (count inner) 1)\n               {k (vals v)})))\n         info)))\n\n\n(defn fix-ranks\n  [g cluster-on]\n  (let [same (same-ranks (get-rank-info g cluster-on))]\n    (reduce\n     (fn [acc [k v]]\n       (clstr/add-attr-to-cluster acc k :fix-ranks v ))\n     g\n     same)))\n\n"]}