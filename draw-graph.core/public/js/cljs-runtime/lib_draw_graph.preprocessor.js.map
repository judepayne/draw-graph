{"version":3,"sources":["lib_draw_graph/preprocessor.cljc"],"mappings":"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","names":["lib-draw-graph.preprocessor/submap?","sub","m","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","cljs.core/keys","lib-draw-graph.preprocessor/find-node","g","part-node","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","acc","cur","cljs.core/reduced","loom.graph/nodes","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lib-draw-graph.preprocessor/subgraph","p__36111","map__36112","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq36105","G__36106","cljs.core/first","cljs.core/next","G__36107","self__4717__auto__","n","part-node?","node","loom.graph/digraph","p1__36104#","loom.alg-generic/pre-edge-traverse","loom.graph/successors*","lib-draw-graph.preprocessor/leaves","p1__36118#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.graph/leaf?","lib-draw-graph.preprocessor/parents-of","nodes","prnts","loom.graph/predecessors*","p1__36119#","cljs.core/not","lib-draw-graph.graph/edge-invisible?","cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1","p1__36120#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","visible-parents","lib-draw-graph.preprocessor/remove-levels","clustered?","lib-draw-graph.clustered/clustered?","grph","nds","lvls","next-gen","grph*","lib-draw-graph.clustered/remove-nodes","loom.graph/remove-nodes*","lib-draw-graph.preprocessor/eager-stateful-dfs","successors","start","f","init","vertices","explored","frontier","state","cljs.core/empty?","v","cljs.core/peek","neighbours","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/pop","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","lib-draw-graph.preprocessor/update-rank","next","mx","x","y","x__4219__auto__","y__4220__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/ranks","roots","lib-draw-graph.util/roots","cljs.core/zipmap","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.util/successors-not-self","lib-draw-graph.preprocessor/fmap","cljs.core/empty","iter__4523__auto__","s__36150","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__36152","cljs.core/chunk-buffer","i__36151","vec__36160","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36149","cljs.core/chunk-rest","vec__36167","cljs.core/cons","cljs.core/rest","k","lib-draw-graph.preprocessor/fmap*","p1__36171#","cljs.core/map?","lib-draw-graph.preprocessor/rank-info","ranks","r","cljs.core/group-by","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__36174","vec__36175","cljs.core/second","p1__36173#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/max-ranked-nodes","info","cljs.core/sorted-map-by","cljs.core/>","m'","cljs.core/flatten","cljs.core/vals","cljs.core.take.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/min-ranked-nodes","cljs.core/sorted-map","lib-draw-graph.preprocessor/cluster-edges","lib-draw-graph.preprocessor/edges-between","ce-uppers","ce-lowers","clstr1","clstr2","edges","loom.graph/edges","clstr1s","lib-draw-graph.clustered/cluster-descendants","clojure.string/trim","clstr2s","clstr1s-mins","p1__36192#","clstr2s-maxs","p1__36193#","clstr-edges","s__36196","xs__6277__auto__","iterys__4519__auto__","s__36198","b__36200","i__36199","iter__36197","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__36195","cljs.core/some","lib-draw-graph.preprocessor/get-rank-info","cluster-on","rks","ri","lib-draw-graph.preprocessor/add-stack","stack","cluster-edge-nums","p1__36220#","cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic","cljs.core.partition.cljs$core$IFn$_invoke$arity$3","edges'","p1__36222#","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","edges'-f","edges'-t","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","loom.graph/add-edges","loom.attr/add-attr-to-edges","lib-draw-graph.preprocessor/add-invisible-cluster-edges","opts","lib-draw-graph.clustered/cluster-key","edge-nums","lib-draw-graph.util/parse-int","g'","p__36235","vec__36238","c1","c2","lib-draw-graph.preprocessor/sort-clusters-by-rank","clusters","r'","p__36241","vec__36244","vs","cljs.core/val","old-ranks","clstrs","items-at","matched","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","unmatched","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/rankseq->edges","rankseq","p__36255","vec__36256","srcs","dests","s__36260","s__36262","b__36264","i__36263","iter__36261","iter__36259","lib-draw-graph.preprocessor/filter-edge-graph","old-edge-graph","sorted-clusters","new-edges","p__36269","vec__36270","lib-draw-graph.clustered/add-cluster-edge","lib-draw-graph.clustered/delete-edge-graph","lib-draw-graph.preprocessor/filter-graph","p__36278","map__36279","seq36274","G__36275","G__36276","sql","filter-edges?","filter-fn","cljs.core/complement","sqlpred.core.sql_pred.cljs$core$IFn$_invoke$arity$variadic","filtered-nodes","loom.graph/remove-nodes","edges-to-check","p__36287","vec__36288","src","dst","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","loom.attr.attr.cljs$core$IFn$_invoke$arity$4","filtered-edges","p__36291","vec__36292","G__36295","loom.graph/remove-edges","lib-draw-graph.preprocessor/paths","start-subs","end-subs","start-nodes","lib_draw_graph.preprocessor.filter_graph.cljs$core$IFn$_invoke$arity$variadic","end-nodes","combins","s__36304","s__36306","b__36308","i__36307","iter__36305","iter__36303","s","e","paths","p1__36301#","loom.alg-generic/bf-path","lib-draw-graph.graph/successors","cljs.core/nil?","nds-compl","loom.graph.remove_nodes.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.preprocessor/same-ranks","p__36313","vec__36318","vec__36321","_","inner","lib-draw-graph.preprocessor/fix-ranks","same","p__36326","vec__36327","lib-draw-graph.clustered/add-attr-to-cluster","cljs.core/chunk-first"],"sourcesContent":["(ns ^{:doc \"Processing functions for Loom graphs.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.preprocessor\n  (:require [loom.graph                     :as loom.graph]\n            [loom.alg-generic               :as loom.gen]\n            [loom.alg                       :as loom.alg]\n            [loom.attr                      :as loom.attr]\n            [lib-draw-graph.clustered       :as clstr]\n            [lib-draw-graph.graph           :as graph]\n            [clojure.set                    :as set]\n            [clojure.string                 :as str]\n            [lib-draw-graph.util            :as util]\n            [sqlpred.core                   :as sql]))\n\n\n;; -----------\n;; Functions to manipulate the graph\n\n(defn submap?\n  \"Checks whether m contains all entries in sub.\"\n  [sub m]\n  (= sub (select-keys m (keys sub))))\n\n\n(defn find-node\n  \"Checks if part-node is part of one of the nodes in the graph. Both part-node\n  and the nodes in the graph must be in map format. e.g. part-node {:id 12} and\n  a node in the graph {:id 12 :name ....}. Returns the first node matched or nil.\"\n  [g part-node]\n  (reduce\n   (fn [acc cur]\n     (if (submap? part-node cur)\n       (reduced cur)\n       nil))\n   (loom.graph/nodes g)))\n\n\n(defn subgraph\n  \"Returns a sub(di)graph of g going depth first from the first occurrence of\n   the (part) node n.\"\n  [g n\n   & {:keys [part-node?] :or {part-node? false}}]\n  (let [node (if part-node? (find-node g n) n)]\n    (apply loom.graph/digraph\n           (loom.gen/pre-edge-traverse #(loom.graph/successors* g %) node))))\n\n\n(defn leaves\n  \"Returns the leaves in the graph.\"\n  [g]\n  (filter #(graph/leaf? g %) (loom.graph/nodes g)))\n\n\n(defn parents-of\n  \"Returns the nodes that are parents of nodes.\"\n  [g nodes]\n  (letfn [(visible-parents [g n]\n            (let [prnts (loom.graph/predecessors* g n)]\n              (filter #(not (graph/edge-invisible? g % n)) prnts)))]\n    (dedupe (mapcat #(visible-parents g %) nodes))))\n\n\n(defn remove-levels\n  \"Removes the n lowest levels from the graph.\"\n  [g n]\n  (let [clustered? (clstr/clustered? g)]\n    (loop [grph g\n           nds (leaves g)\n           lvls n]\n      (if (zero? lvls)\n        grph\n        (let [next-gen (parents-of grph nds)\n              grph* (if clustered?\n                      (:graph (clstr/remove-nodes grph nds))\n                      (loom.graph/remove-nodes* grph nds))]\n          (recur grph* next-gen (dec lvls)))))))\n\n\n\n;; Thanks: http://hueypetersen.com/posts/2013/06/25/graph-traversal-with-clojure/\n(defn eager-stateful-dfs\n  \"Eager depth first search that collects state as it goes.\n   successors is a function of 1 arg that returns successors of node passed.\n   start is the starting node.\n   init is a map of initial state.\n   f is a function of 3 args: current state (map), current nodes and one of its children.\"\n  [successors start f init]\n  (loop [vertices [] explored #{start} frontier [start] state init]\n    (if (empty? frontier)\n      state\n      (let [v (peek frontier)\n            neighbours (successors v)]\n        (recur\n          (conj vertices v)\n          (into explored neighbours)\n          (into (pop frontier) (remove explored neighbours))\n          (reduce (fn [acc cur] (assoc acc cur (f acc v cur))) state neighbours))))))\n\n\n(defn update-rank\n  \"Returns rank for the next (node) given state map.\"\n  [state node next]\n  (let [mx (fn [x y] (if (nil? x) y (max x y)))]\n    (mx (get state next) (inc (get state node)))))\n\n\n\n(defn ranks\n  \"Returns ranks for each node in g. 0-indexed.\"\n  [g]\n  (let [roots (util/roots g)\n        init (zipmap roots (repeat 0))]\n    ;; we need to use successors-not-self or the dfs will incorrectly increase the rank of\n    ;; nodes that have edges to themselves, causing them to have a rank one higher\n    ;; than other nodes and leading to an incorrect set of cluster edges.\n    (reduce\n     (fn [acc cur]\n       (eager-stateful-dfs (partial util/successors-not-self g)\n                           cur\n                           update-rank\n                           acc))\n     init\n     roots)))\n\n\n(defn fmap [f m] (into (empty m) (for [[k v] m] [k (f v)])))\n\n\n(defn fmap*\n  \"Applies f to every value in nested map.\"\n  [f m]\n  (fmap #(if (map? %)\n           (fmap* f %)\n           (f %))\n        m))\n\n\n(defn rank-info\n  \"Organizes ranks by k. k is usually a cluster.\"\n  [ranks k]\n  (let [r  (->> ranks\n                (group-by (fn [n] (get (first n) k)))\n                (into {} (map (fn [[k v]] [k (group-by second v)]))))]\n    (fmap* #(map first %) r)))\n\n\n(defn max-ranked-nodes\n  \"Returns seq of nodes at the max rank for the k. k is usually a cluster.\"\n  [info k n]\n  (let [m (into (sorted-map-by >) (get info k))\n        m' (flatten (vals m))]\n    (take n m')))\n\n\n(defn min-ranked-nodes\n  \"Returns seq of nodes at the min rank for the k. k is usually a cluster.\"\n  [info k n]\n  (let [m (into (sorted-map) (get info k))\n        m' (flatten (vals m))]\n    (take n m')))\n\n\n(def cluster-edges\n  ;; meta data about cluster edges. Keep. used below\n  {16 [4 4]\n   12 [4 3]\n   9 [3 3]\n   6 [3 2]\n   4 [2 2]\n   2 [2 1]\n   1 [1 1]})\n\n\n(defn edges-between\n  \"Returns a set of edges between all of the min ranked nodes of clstr1\n   and one of the max ranked nodes in clstr2. edges already in the graph\n   are returned marked with :constraint\"\n  [g info ce-uppers ce-lowers clstr1 clstr2]\n  (let [edges (loom.graph/edges g)\n        clstr1s (clstr/cluster-descendants g (str/trim clstr1))\n        clstr2s (clstr/cluster-descendants g (str/trim clstr2))\n        clstr1s-mins (mapcat #(max-ranked-nodes info % ce-uppers) clstr1s)\n        clstr2s-maxs (mapcat #(min-ranked-nodes info % ce-lowers) clstr2s)\n        clstr-edges (for [x clstr1s-mins\n                          y clstr2s-maxs]\n                      [x y (if (some #{[x y]} edges) :constraint)])]\n    clstr-edges))\n\n\n(defn get-rank-info\n  [g cluster-on]\n  (let [rks (ranks g)\n        ri (rank-info rks cluster-on)]\n    ri))\n\n\n(defn add-stack\n  \"Adds a stack of clusters to the graph. cluster-edge-nums is a 2-vector where\n   the first is the number of nodes in the upper cluster and the second the lower.\"\n  [g ri stack cluster-edge-nums]\n  (let [edges (mapcat\n               #(apply edges-between g ri\n                       (first cluster-edge-nums) (second cluster-edge-nums) %)\n               (partition 2 1 stack))\n        ;;separate edges marked with :constraint from those that are not.\n        edges' (group-by #(= :constraint (nth % 2)) edges)\n        edges'-f (get edges' false)\n        edges'-t (get edges' true)]\n    (-> (apply loom.graph/add-edges g edges'-f) ;; don't add :constraint edges\n        (loom.attr/add-attr-to-edges :style \"invis\" edges'-f)\n        ;; for edges marked with :constraint, set the :constraint in the attrs\n        (loom.attr/add-attr-to-edges :constraint true edges'-f))))\n\n\n(defn add-invisible-cluster-edges\n  [g opts edges]\n  (let [ri (get-rank-info g (clstr/cluster-key g))\n        ;; look up vector of cluster edges nums or use [2 2] as a default\n        edge-nums (get cluster-edges (util/parse-int (-> opts :num-cluster-edges)) [2 2])\n        g' (reduce (fn [acc [c1 c2]]\n                     (add-stack acc ri [c1 c2] edge-nums))\n                   g\n                   edges)]\n    g'))\n\n\n(defn sort-clusters-by-rank\n  \"Takes the ranks from an old graph and a subset of clusters and returns\n   the clusters in rank order.\"\n  [ranks clusters]\n  (let [r' (into [] (vals (reduce (fn [acc [k vs]]\n                                    (assoc acc k (into #{} (map first vs))))\n                                  {}\n                                  (group-by val ranks))))]\n   (loop [old-ranks r'\n           acc []\n           clstrs clusters]\n      (if (empty? old-ranks)\n        acc\n        (let [items-at (first old-ranks)\n              matched (set/intersection clstrs items-at)\n              unmatched (set/difference clstrs items-at)]\n          (if (empty? matched)\n            (recur (rest old-ranks) acc clstrs)\n            (recur (rest old-ranks) (conj acc matched) unmatched)))))))\n\n\n(defn rankseq->edges\n  [rankseq]\n  (mapcat\n   (fn [[srcs dests]] (for [x srcs y dests] [x y]))\n   (partition 2 1 rankseq)))\n\n\n(defn filter-edge-graph\n  \"Filter's the graph's edge-graph to just supplied clusters.\"\n  [g clusters]\n  (let [old-edge-graph (-> g :clusters :edge-graph)\n        old-ranks (ranks old-edge-graph)\n        sorted-clusters (sort-clusters-by-rank old-ranks clusters)\n        new-edges (rankseq->edges sorted-clusters)]\n    (reduce (fn [acc [c1 c2]]\n                           (-> acc\n                               (clstr/add-cluster-edge c1 c2)))\n            (clstr/delete-edge-graph g)\n            new-edges)))\n\n\n(defn filter-graph\n  \"Returns a filtered graph where nodes where is not a submap are filtered out.\"\n  [g sql & {:keys [filter-edges?] :or {filter-edges? true}}]\n  (let [filter-fn (complement\n                   (sql/sql-pred sql\n                                 :keywordize-keys? true\n                                 :skip-missing? true))\n        filtered-nodes (filter filter-fn\n                               (loom.graph/nodes g))\n        g' (if (clstr/clustered? g)\n             (clstr/remove-nodes g filtered-nodes)\n             (apply loom.graph/remove-nodes g filtered-nodes))]\n     (if filter-edges?\n       (let [edges-to-check (filter   ;; don't filter out any invis/ scaffolding edges\n                             (fn [[src dst]] (not= (loom.attr/attr g' src dst :style) \"invis\"))\n                             (loom.graph/edges g'))\n             filtered-edges  (filter\n                              (fn [[src dst]]\n                                (filter-fn (loom.attr/attr g' src dst :meta)))\n                              edges-to-check)]\n        (apply loom.graph/remove-edges g' filtered-edges))\n      g')))\n\n\n(defn paths\n  \"Returns a graph with only nodes on paths between start filtering term and the end.\"\n  [g start-subs end-subs]\n  (let [start-nodes (loom.graph/nodes (filter-graph g start-subs :filter-edges? false))\n        end-nodes (loom.graph/nodes (filter-graph g end-subs :filter-edges? false))\n        combins (for [s start-nodes\n                      e end-nodes]\n                  [s e])\n        paths (map\n               #(apply loom.gen/bf-path (partial graph/successors g) %)\n               combins)\n        nds (remove nil? (into #{} (flatten paths)))\n        nds-compl (set/difference (loom.graph/nodes g) nds)]\n    (if (clstr/clustered? g)\n      (clstr/remove-nodes g nds-compl)\n      (loom.graph/remove-nodes g nds-compl))))\n\n\n(defn same-ranks\n  [info]\n  \"Filters down to just the ranks that need to be fixed.\"\n  (into {}\n        (map\n         (fn [[k v]]\n           (let [[_ inner] (vals v)]\n             (when (> (count inner) 1)\n               {k (vals v)})))\n         info)))\n\n\n(defn fix-ranks\n  [g cluster-on]\n  (let [same (same-ranks (get-rank-info g cluster-on))]\n    (reduce\n     (fn [acc [k v]]\n       (clstr/add-attr-to-cluster acc k :fix-ranks v ))\n     g\n     same)))\n\n"]}