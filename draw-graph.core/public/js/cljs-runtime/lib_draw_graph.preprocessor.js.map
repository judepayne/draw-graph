{"version":3,"sources":["lib_draw_graph/preprocessor.cljc"],"mappings":"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","names":["lib-draw-graph.preprocessor/submap?","sub","m","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","cljs.core/keys","lib-draw-graph.preprocessor/parse-num","s","e36089","n","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","lib-draw-graph.util/err","js/Error","e","lib-draw-graph.preprocessor/find-node","g","part-node","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","acc","cur","cljs.core/reduced","loom.graph/nodes","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lib-draw-graph.preprocessor/subgraph","p__36106","map__36107","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq36100","G__36101","cljs.core/first","cljs.core/next","G__36102","self__4717__auto__","part-node?","node","loom.graph/digraph","p1__36099#","loom.alg-generic/pre-edge-traverse","loom.graph/successors*","lib-draw-graph.preprocessor/leaves","p1__36113#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.graph/leaf?","lib-draw-graph.preprocessor/parents-of","nodes","prnts","loom.graph/predecessors*","p1__36117#","cljs.core/not","lib-draw-graph.graph/edge-invisible?","cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1","p1__36118#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","visible-parents","lib-draw-graph.preprocessor/remove-levels","clustered?","lib-draw-graph.clustered/clustered?","grph","nds","lvls","next-gen","grph*","lib-draw-graph.clustered/remove-nodes","loom.graph/remove-nodes*","lib-draw-graph.preprocessor/eager-stateful-dfs","successors","start","f","init","vertices","explored","frontier","state","cljs.core/empty?","v","cljs.core/peek","neighbours","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/pop","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","lib-draw-graph.preprocessor/update-rank","next","mx","x","y","x__4219__auto__","y__4220__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/predecessors-not-self","predec","p1__36143#","lib-draw-graph.preprocessor/successors-not-self","succs","p1__36145#","lib-draw-graph.preprocessor/ranks","p1__36152#","root?","roots","cljs.core/zipmap","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/fmap","cljs.core/empty","iter__4523__auto__","s__36164","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__36166","cljs.core/chunk-buffer","i__36165","vec__36176","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36163","cljs.core/chunk-rest","vec__36181","cljs.core/cons","cljs.core/rest","k","lib-draw-graph.preprocessor/fmap*","p1__36184#","cljs.core/map?","lib-draw-graph.preprocessor/rank-info","ranks","r","cljs.core/group-by","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__36195","vec__36196","cljs.core/second","p1__36192#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/max-ranked-nodes","info","cljs.core/sorted-map-by","cljs.core/>","m'","cljs.core/flatten","cljs.core/vals","cljs.core.take.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/min-ranked-nodes","cljs.core/sorted-map","lib-draw-graph.preprocessor/cluster-edges","lib-draw-graph.preprocessor/edges-between","ce-uppers","ce-lowers","clstr1","clstr2","edges","loom.graph/edges","clstr1s","lib-draw-graph.clustered/cluster-descendants","clstr2s","clstr1s-mins","p1__36204#","clstr2s-maxs","p1__36205#","s__36210","xs__6277__auto__","iterys__4519__auto__","s__36212","b__36214","i__36213","iter__36211","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__36209","cljs.core/some","lib-draw-graph.preprocessor/get-rank-info","cluster-on","rks","ri","lib-draw-graph.preprocessor/add-stack","stack","cluster-edge-nums","p1__36223#","cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic","cljs.core.partition.cljs$core$IFn$_invoke$arity$3","edges'","p1__36227#","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","edges'-f","edges'-t","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","loom.graph/add-edges","loom.attr/add-attr-to-edges","lib-draw-graph.preprocessor/add-invisible-cluster-edges","opts","lib-draw-graph.clustered/cluster-key","edge-nums","g'","p__36236","vec__36237","c1","c2","lib-draw-graph.preprocessor/sort-clusters-by-rank","clusters","r'","p__36240","vec__36241","vs","cljs.core/val","old-ranks","clstrs","items-at","matched","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","unmatched","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","lib-draw-graph.preprocessor/rankseq->edges","rankseq","p__36248","vec__36250","srcs","dests","s__36254","s__36256","b__36258","i__36257","iter__36255","iter__36253","lib-draw-graph.preprocessor/filter-edge-graph","old-edge-graph","sorted-clusters","new-edges","p__36261","vec__36262","lib-draw-graph.clustered/add-cluster-edge","lib-draw-graph.clustered/delete-edge-graph","lib-draw-graph.preprocessor/*part-sep*","lib-draw-graph.preprocessor/split-parts","clojure.string.split.cljs$core$IFn$_invoke$arity$3","lib-draw-graph.preprocessor/*group*","lib-draw-graph.preprocessor/remove-first-and-last","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","lib-draw-graph.preprocessor/equality-match?","term-k","term-v","item","choice?","cljs.core/re-matches","clojure.string.split.cljs$core$IFn$_invoke$arity$2","or__4131__auto__","lib-draw-graph.preprocessor/inequality-match?","op","v-item","G__36278","lib-draw-graph.preprocessor/sub-matches?","term","cljs.core/contains?","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","lib-draw-graph.preprocessor/filter-graph","p__36298","map__36299","seq36293","G__36294","G__36295","sql","filter-edges?","filter-fn","cljs.core/complement","sqlpred.core.sql_pred.cljs$core$IFn$_invoke$arity$variadic","filtered-nodes","loom.graph/remove-nodes","edges-to-check","p__36304","vec__36305","src","dst","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","loom.attr.attr.cljs$core$IFn$_invoke$arity$4","filtered-edges","p__36310","vec__36311","G__36314","loom.graph/remove-edges","lib-draw-graph.preprocessor/paths","start-subs","end-subs","start-nodes","lib_draw_graph.preprocessor.filter_graph.cljs$core$IFn$_invoke$arity$variadic","end-nodes","combins","s__36318","s__36320","b__36322","i__36321","iter__36319","iter__36317","paths","p1__36315#","loom.alg-generic/bf-path","lib-draw-graph.graph/successors","cljs.core/nil?","nds-compl","loom.graph.remove_nodes.cljs$core$IFn$_invoke$arity$variadic","lib-draw-graph.preprocessor/same-ranks","p__36329","vec__36331","vec__36335","_","inner","lib-draw-graph.preprocessor/fix-ranks","same","p__36342","vec__36344","lib-draw-graph.clustered/add-attr-to-cluster","cljs.core/chunk-first"],"sourcesContent":["(ns ^{:doc \"Processing functions for Loom graphs.\"\n      :author \"Jude Payne\"}\n  lib-draw-graph.preprocessor\n  (:require [loom.graph                     :as loom.graph]\n            [loom.alg-generic               :as loom.gen]\n            [loom.alg                       :as loom.alg]\n            [loom.attr                      :as loom.attr]\n            [lib-draw-graph.clustered       :as clstr]\n            [lib-draw-graph.graph           :as graph]\n            [clojure.set                    :as set]\n            [clojure.string                 :as str]\n            [lib-draw-graph.util            :as util]\n            [sqlpred.core                   :as sql]))\n\n\n;; -----------\n;; Functions to manipulate the graph\n\n(defn submap?\n  \"Checks whether m contains all entries in sub.\"\n  [sub m]\n  (= sub (select-keys m (keys sub))))\n\n\n(defn parse-num [s]\n  (try\n    (let [n #?(:clj (clojure.edn/read-string s)\n               :cljs (cljs.reader/read-string s))]\n      (if (number? n) n (throw (util/err \"Both terms in an inequality filter must be numbers.\"))))\n    #? (:clj (catch Exception e (throw (util/err \"Both terms in an inequality filter must be numbers.\")))\n        :cljs (catch js/Error e (throw (util/err \"Both terms in an inequality filter must be numbers.\"))))))\n\n\n(defn find-node\n  \"Checks if part-node is part of one of the nodes in the graph. Both part-node\n  and the nodes in the graph must be in map format. e.g. part-node {:id 12} and\n  a node in the graph {:id 12 :name ....}. Returns the first node matched or nil.\"\n  [g part-node]\n  (reduce\n   (fn [acc cur]\n     (if (submap? part-node cur)\n       (reduced cur)\n       nil))\n   (loom.graph/nodes g)))\n\n\n(defn subgraph\n  \"Returns a sub(di)graph of g going depth first from the first occurrence of\n   the (part) node n.\"\n  [g n\n   & {:keys [part-node?] :or {part-node? false}}]\n  (let [node (if part-node? (find-node g n) n)]\n    (apply loom.graph/digraph\n           (loom.gen/pre-edge-traverse #(loom.graph/successors* g %) node))))\n\n\n(defn leaves\n  \"Returns the leaves in the graph.\"\n  [g]\n  (filter #(graph/leaf? g %) (loom.graph/nodes g)))\n\n\n(defn parents-of\n  \"Returns the nodes that are parents of nodes.\"\n  [g nodes]\n  (letfn [(visible-parents [g n]\n            (let [prnts (loom.graph/predecessors* g n)]\n              (filter #(not (graph/edge-invisible? g % n)) prnts)))]\n    (dedupe (mapcat #(visible-parents g %) nodes))))\n\n\n(defn remove-levels\n  \"Removes the n lowest levels from the graph.\"\n  [g n]\n  (let [clustered? (clstr/clustered? g)]\n    (loop [grph g\n           nds (leaves g)\n           lvls n]\n      (if (zero? lvls)\n        grph\n        (let [next-gen (parents-of grph nds)\n              grph* (if clustered?\n                      (:graph (clstr/remove-nodes grph nds))\n                      (loom.graph/remove-nodes* grph nds))]\n          (recur grph* next-gen (dec lvls)))))))\n\n\n\n;; Thanks: http://hueypetersen.com/posts/2013/06/25/graph-traversal-with-clojure/\n(defn eager-stateful-dfs\n  \"Eager depth first search that collects state as it goes.\n   successors is a function of 1 arg that returns successors of node passed.\n   start is the starting node.\n   init is a map of initial state.\n   f is a function of 3 args: current state (map), current nodes and one of its children.\"\n  [successors start f init]\n  (loop [vertices [] explored #{start} frontier [start] state init]\n    (if (empty? frontier)\n      state\n      (let [v (peek frontier)\n            neighbours (successors v)]\n        (recur\n          (conj vertices v)\n          (into explored neighbours)\n          (into (pop frontier) (remove explored neighbours))\n          (reduce (fn [acc cur] (assoc acc cur (f acc v cur))) state neighbours))))))\n\n\n(defn update-rank\n  \"Returns rank for the next (node) given state map.\"\n  [state node next]\n  (let [mx (fn [x y] (if (nil? x) y (max x y)))]\n    (mx (get state next) (inc (get state node)))))\n\n\n(defn predecessors-not-self\n  \"Returns predecessors not including self\"\n  [g n]\n  (let [predec (loom.graph/predecessors* g n)]\n    (filter #(not (= n %)) predec)))\n\n\n(defn successors-not-self\n  \"Returns successors not including self\"\n  [g n]\n  (let [succs (loom.graph/successors* g n)]\n    (filter #(not (= n %)) succs)))\n\n\n(defn ranks\n  \"Returns ranks for each node in g. 0-indexed.\"\n  [g]\n  (let [root? #(empty? (predecessors-not-self g %))\n        roots (filter root? (loom.graph/nodes g))\n        init (zipmap roots (repeat 0))]\n    ;; we need to use successors-not-self or the dfs will incorrectly increase the rank of\n    ;; nodes that have edges to themselves, causing them to have a rank one higher\n    ;; than other nodes and leading to an incorrect set of cluster edges.\n    (reduce\n     (fn [acc cur]\n       (eager-stateful-dfs (partial successors-not-self g)\n                           cur\n                           update-rank\n                           acc))\n     init\n     roots)))\n\n\n(defn fmap [f m] (into (empty m) (for [[k v] m] [k (f v)])))\n\n\n(defn fmap*\n  \"Applies f to every value in nested map.\"\n  [f m]\n  (fmap #(if (map? %)\n           (fmap* f %)\n           (f %))\n        m))\n\n\n(defn rank-info\n  \"Organizes ranks by k. k is usually a cluster.\"\n  [ranks k]\n  (let [r  (->> ranks\n                (group-by (fn [n] (get (first n) k)))\n                (into {} (map (fn [[k v]] [k (group-by second v)]))))]\n    (fmap* #(map first %) r)))\n\n\n(defn max-ranked-nodes\n  \"Returns seq of nodes at the max rank for the k. k is usually a cluster.\"\n  [info k n]\n  (let [m (into (sorted-map-by >) (get info k))\n        m' (flatten (vals m))]\n    (take n m')))\n\n\n(defn min-ranked-nodes\n  \"Returns seq of nodes at the min rank for the k. k is usually a cluster.\"\n  [info k n]\n  (let [m (into (sorted-map) (get info k))\n        m' (flatten (vals m))]\n    (take n m')))\n\n\n(def cluster-edges\n  ;; meta data about cluster edges. Keep. used below\n  {16 [4 4]\n   12 [4 3]\n   9 [3 3]\n   6 [3 2]\n   4 [2 2]\n   2 [2 1]\n   1 [1 1]})\n\n\n(defn edges-between\n  \"Returns a set of edges between all of the min ranked nodes of clstr1\n   and one of the max ranked nodes in clstr2. edges already in the graph\n   are returned marked with :constraint\"\n  [g info ce-uppers ce-lowers clstr1 clstr2]\n  (let [edges (loom.graph/edges g)\n        clstr1s (clstr/cluster-descendants g clstr1)\n        clstr2s (clstr/cluster-descendants g clstr2)\n        clstr1s-mins (mapcat #(max-ranked-nodes info % ce-uppers) clstr1s)\n        clstr2s-maxs (mapcat #(min-ranked-nodes info % ce-lowers) clstr2s)]\n    (for [x clstr1s-mins\n          y clstr2s-maxs]\n      [x y (if (some #{[x y]} edges) :constraint)])))\n\n\n(defn get-rank-info\n  [g cluster-on]\n  (let [rks (ranks g)\n        ri (rank-info rks cluster-on)]\n    ri))\n\n\n(defn add-stack\n  \"Adds a stack of clusters to the graph. cluster-edge-nums is a 2-vector where\n   the first is the number of nodes in the upper cluster and the second the lower.\"\n  [g ri stack cluster-edge-nums]\n  (let [edges (mapcat\n               #(apply edges-between g ri\n                       (first cluster-edge-nums) (second cluster-edge-nums) %)\n               (partition 2 1 stack))\n        ;;separate edges marked with :constraint from those that are not.\n        edges' (group-by #(= :constraint (nth % 2)) edges)\n        edges'-f (get edges' false)\n        edges'-t (get edges' true)]\n    (-> (apply loom.graph/add-edges g edges'-f) ;; don't add :constraint edges\n        (loom.attr/add-attr-to-edges :style \"invis\" edges'-f)\n        ;; for edges marked with :constraint, set the :constraint in the attrs\n        (loom.attr/add-attr-to-edges :constraint true edges'-f))))\n\n\n(defn add-invisible-cluster-edges\n  [g opts edges]\n  (let [ri (get-rank-info g (clstr/cluster-key g))\n        ;; look up vector of cluster edges nums or use [2 2] as a default\n        edge-nums (get cluster-edges (parse-num (-> opts :num-cluster-edges)) [2 2])\n        g' (reduce (fn [acc [c1 c2]]\n                     (add-stack acc ri [c1 c2] edge-nums))\n                   g\n                   edges)]\n    g'))\n\n\n(defn sort-clusters-by-rank\n  \"Takes the ranks from an old graph and a subset of clusters and returns\n   the clusters in rank order.\"\n  [ranks clusters]\n  (let [r' (into [] (vals (reduce (fn [acc [k vs]]\n                                    (assoc acc k (into #{} (map first vs))))\n                                  {}\n                                  (group-by val ranks))))]\n   (loop [old-ranks r'\n           acc []\n           clstrs clusters]\n      (if (empty? old-ranks)\n        acc\n        (let [items-at (first old-ranks)\n              matched (set/intersection clstrs items-at)\n              unmatched (set/difference clstrs items-at)]\n          (if (empty? matched)\n            (recur (rest old-ranks) acc clstrs)\n            (recur (rest old-ranks) (conj acc matched) unmatched)))))))\n\n\n(defn rankseq->edges\n  [rankseq]\n  (mapcat\n   (fn [[srcs dests]] (for [x srcs y dests] [x y]))\n   (partition 2 1 rankseq)))\n\n\n(defn filter-edge-graph\n  \"Filter's the graph's edge-graph to just supplied clusters.\"\n  [g clusters]\n  (let [old-edge-graph (-> g :clusters :edge-graph)\n        old-ranks (ranks old-edge-graph)\n        sorted-clusters (sort-clusters-by-rank old-ranks clusters)\n        new-edges (rankseq->edges sorted-clusters)]\n    (reduce (fn [acc [c1 c2]]\n                           (-> acc\n                               (clstr/add-cluster-edge c1 c2)))\n            (clstr/delete-edge-graph g)\n            new-edges)))\n\n\n(def ^:dynamic *part-sep* #\"[^=:<>(<=)(>=)]+|[=:<>(<=)(>=)]\")   \n(defn split-parts [s] (str/split s *part-sep* -1)) ;; -1 to catch trailing empties\n\n(def ^:dynamic *group* #\"\\[.*\\]\")\n\n\n(defn remove-first-and-last [s]\n  (subs s 1 (dec (count s))))\n\n\n(defn equality-match?\n  \"takes a term key and term value (which may represent a choice in the form\n   [a or b or c] and assesses whether the key and value (or one of the values) is a\n   submap of item.\"\n  [term-k term-v item]\n  (let [choice? (some? (re-matches *group* term-v))]\n    (if (not choice?)\n      (submap? {term-k term-v} item)\n      (let [opts (str/split (remove-first-and-last term-v) #\" or \")]\n        (reduce \n         (fn [acc cur] (or acc (submap? {term-k cur} item)))\n         false\n         opts)))))\n\n\n(defn inequality-match?\n  \"takes a term key, an op and term value and assessing whether the value of the\n   key in the item matches the condition.\"\n  [term-k op term-v item]\n  (let [v (parse-num term-v)\n        v-item (parse-num (term-k item))]\n    (when (not (number? v-item)) (throw (util/err \"internal oops!\")))\n    (case op\n      \">\" (> v-item v)\n      \"<\" (< v-item v)\n      \">=\" (>= v-item v)\n      \"<=\" (<= v-item v)\n      (throw (util/err (str op \" is not a valid comparison operator.\"))))))\n\n\n(defn sub-matches?\n  [term item]\n  (if (not (contains? item (keyword (first term))))\n    true\n    (let [op (second term)]\n      (cond\n        (or (= \"=\" op) (= \":\" op)) (equality-match? (keyword (first term)) (nth term 2) item)\n        (or (= \">\" op)\n            (= \"<\" op)\n            (= \">=\" op)\n            (= \"<=\" op)) (inequality-match? (keyword (first term)) (second term) (nth term 2) item)\n        :else (throw (util/err (str op \" is not a valid comparison operator.\")))))))\n\n\n(defn filter-graph\n  \"Returns a filtered graph where nodes where is not a submap are filtered out.\"\n  [g sql & {:keys [filter-edges?] :or {filter-edges? true}}]\n  (let [filter-fn (complement\n                   (sql/sql-pred sql\n                                 :keywordize-keys? true\n                                 :skip-missing? true))\n        filtered-nodes (filter filter-fn\n                               (loom.graph/nodes g))\n        g' (if (clstr/clustered? g)\n             (clstr/remove-nodes g filtered-nodes)\n             (apply loom.graph/remove-nodes g filtered-nodes))]\n     (if filter-edges?\n       (let [edges-to-check (filter   ;; don't filter out any invis/ scaffolding edges\n                             (fn [[src dst]] (not= (loom.attr/attr g' src dst :style) \"invis\"))\n                             (loom.graph/edges g'))\n             filtered-edges  (filter\n                              (fn [[src dst]]\n                                (filter-fn (loom.attr/attr g' src dst :meta)))\n                              edges-to-check)]\n        (apply loom.graph/remove-edges g' filtered-edges))\n      g')))\n\n\n(defn paths\n  \"Returns a graph with only nodes on paths between start filtering term and the end.\"\n  [g start-subs end-subs]\n  (let [start-nodes (loom.graph/nodes (filter-graph g start-subs :filter-edges? false))\n        end-nodes (loom.graph/nodes (filter-graph g end-subs :filter-edges? false))\n        combins (for [s start-nodes\n                      e end-nodes]\n                  [s e])\n        paths (map\n               #(apply loom.gen/bf-path (partial graph/successors g) %)\n               combins)\n        nds (remove nil? (into #{} (flatten paths)))\n        nds-compl (set/difference (loom.graph/nodes g) nds)]\n    (if (clstr/clustered? g)\n      (clstr/remove-nodes g nds-compl)\n      (loom.graph/remove-nodes g nds-compl))))\n\n\n(defn same-ranks\n  [info]\n  \"Filters down to just the ranks that need to be fixed.\"\n  (into {}\n        (map\n         (fn [[k v]]\n           (let [[_ inner] (vals v)]\n             (when (> (count inner) 1)\n               {k (vals v)})))\n         info)))\n\n\n(defn fix-ranks\n  [g cluster-on]\n  (let [same (same-ranks (get-rank-info g cluster-on))]\n    (reduce\n     (fn [acc [k v]]\n       (clstr/add-attr-to-cluster acc k :fix-ranks v ))\n     g\n     same)))\n\n"]}