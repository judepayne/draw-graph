{"version":3,"sources":["markdown/core.cljs"],"mappings":"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","names":["p__36475","map__36476","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","markdown.core/init-transformer","replacement-transformers","custom-transformers","inhibit-separator","html","line","next-line","state","*inhibit-separator*-orig-val__36478","*inhibit-separator*-temp-val__36479","markdown.common/*inhibit-separator*","vec__36480","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","text","new-state","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__36483","vec__36485","transformer","G__36488","G__36489","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","or__4131__auto__","cljs.core.into.cljs$core$IFn$_invoke$arity$2","markdown.transformers/transformer-vector","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","markdown.core/format","seq36491","G__36493","cljs.core/first","cljs.core/next","self__4717__auto__","fmt","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","goog.string/format","markdown.core/parse-references","lines","cljs.core/deref","references","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","seq__36495","cljs.core/seq","chunk__36496","count__36497","i__36498","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","markdown.links/parse-reference-link","markdown.core/parse-footnotes","footnotes","seq__36501","chunk__36502","count__36503","i__36504","markdown.links/parse-footnote-link","markdown.core/parse-metadata","vec__36508","metadata","p1__36507#","cljs.core/split-with","cljs.core/not-empty","markdown.transformers/parse-metadata-headers","markdown.core/md-to-html-string*","params","*substring*-orig-val__36511","*formatter*-orig-val__36512","*substring*-temp-val__36513","*formatter*-temp-val__36514","markdown.common/*substring*","s","n","cljs.core/str","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","markdown.transformers/*formatter*","vec__36515","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc","js/goog.string.StringBuffer","G__36521","vec__36522","seq__36523","first__36524","vec__36540","seq__36541","first__36542","more","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__36543","G__36544","G__36545","G__36546","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__36547","G__36548","G__36549","G__36550","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/empty?","G__36551","G__36552","G__36553","G__36554","markdown.transformers/footer","markdown.core/md->html","seq36555","G__36556","markdown.core/md->html-with-meta","seq36558","G__36559","markdown.core/mdToHtml","seq36560","self__4718__auto__","markdown.core/mdToHtmlWithMeta","seq36561"],"sourcesContent":["(ns markdown.core\n  (:require [markdown.common\n             :refer [*substring* *inhibit-separator*]]\n            [markdown.links\n             :refer [parse-reference parse-reference-link parse-footnote-link]]\n            [markdown.transformers\n             :refer [transformer-vector footer parse-metadata-headers]]))\n\n\n(defn- init-transformer [{:keys [replacement-transformers custom-transformers inhibit-separator]}]\n  (fn [html line next-line state]\n    (binding [*inhibit-separator* inhibit-separator]\n      (let [[text new-state]\n            (reduce\n              (fn [[text state] transformer]\n                (transformer text (assoc state :next-line next-line)))\n              [line state]\n              (or replacement-transformers\n                  (into transformer-vector custom-transformers)))]\n        (.append html text)\n        new-state))))\n\n(defn format \"Removed from cljs.core 0.0-1885, Ref. http://goo.gl/su7Xkj\"\n  [fmt & args] (apply goog.string/format fmt args))\n\n(defn parse-references [lines]\n  (let [references (atom {})]\n    (doseq [line lines]\n      (parse-reference-link line references))\n    @references))\n\n(defn parse-footnotes [lines]\n  (let [footnotes (atom {:next-fn-id 1 :processed {} :unprocessed {}})]\n    (doseq [line lines]\n      (parse-footnote-link line footnotes))\n    @footnotes))\n\n(defn parse-metadata [lines]\n  (let [[metadata lines] (split-with #(not-empty (.trim %)) lines)]\n    [(parse-metadata-headers metadata) lines]))\n\n(defn md-to-html-string*\n  \"processes input text line by line and outputs an HTML string\"\n  [text params]\n  (binding [markdown.common/*substring* (fn [s n] (apply str (drop n s)))\n            markdown.transformers/*formatter* format]\n    (let [params      (when params (apply (partial assoc {}) params))\n          lines       (.split (str text \"\\n\") \"\\n\")\n          html        (goog.string.StringBuffer. \"\")\n          references  (when (:reference-links? params) (parse-references lines))\n          footnotes   (when (:footnotes? params) (parse-footnotes lines))\n          [metadata lines] (if (:parse-meta? params) (parse-metadata lines) [nil lines])\n          transformer (init-transformer params)]\n      (loop [[line & more] lines\n             state (merge {:clojurescript    true\n                           :references       references\n                           :footnotes        footnotes\n                           :last-line-empty? true}\n                          params)]\n        (let [line  (if (:skip-next-line? state) \"\" line)\n              state\n              (if (:buf state)\n                (transformer html\n                             (:buf state)\n                             (:next-line state)\n                             (-> state\n                                 (dissoc :buf :lists :next-line)\n                                 (assoc :last-line-empty? true)))\n                state)]\n          (if (not-empty more)\n            (recur more\n                   (assoc (transformer html line (first more) (dissoc state :skip-next-line?))\n                     :last-line-empty? (empty? line)))\n            (transformer (.append html (footer (:footnotes state))) line \"\" (assoc state :eof true)))))\n      {:metadata metadata :html (.toString html)})))\n\n(defn md->html [text & params]\n  (:html (md-to-html-string* text params)))\n\n(defn md->html-with-meta [text & params]\n  (md-to-html-string* text (into [:parse-meta? true] params)))\n\n(defn ^:export mdToHtml\n  \"Js accessible wrapper\"\n  [& params]\n  (apply md->html params))\n\n(defn ^:export mdToHtmlWithMeta\n  \"Js accessible wrapper\"\n  [& params]\n  (apply md->html-with-meta params))\n"]}