{"version":3,"sources":["taoensso/timbre.cljs"],"mappings":"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","names":["cljs.core/vector?","taoensso.encore/encore-version","taoensso.encore/assert-min-encore-version","var_args","G__41556","taoensso.timbre/default-output-fn","js/Error","data","taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$2","opts","map__41557","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__41558","no-stacktrace?","stacktrace-fonts","level","?err","msg_","?ns-str","hostname_","timestamp_","?line","clojure.string/upper-case","cljs.core/name","or__4131__auto__","cljs.core/force","temp__5720__auto__","err","taoensso.timbre/stacktrace","taoensso.timbre/println-appender","taoensso.timbre.appenders.core/println-appender","taoensso.timbre/console-appender","taoensso.timbre.appenders.core/console-appender","taoensso.timbre/example-config","G__41561","js/taoensso","js/taoensso.timbre","js/taoensso.timbre.*config*","taoensso.timbre/*config*","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","taoensso.timbre/swap-config!","seq41562","G__41563","cljs.core/first","cljs.core/next","self__4717__auto__","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","taoensso.timbre/set-config!","m","_old","taoensso.timbre/merge-config!","old","taoensso.encore.nested_merge.cljs$core$IFn$_invoke$arity$variadic","taoensso.timbre/set-level!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","taoensso.timbre/-levels-vec","taoensso.timbre/-levels-set","cljs.core/set","taoensso.timbre/-levels-map","cljs.core/zipmap","cljs.core.range.cljs$core$IFn$_invoke$arity$0","taoensso.timbre/valid-level?","x","taoensso.timbre/valid-level","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/level>=","y","G__41564","G__41565","taoensso.timbre/-compile-ns-filter","taoensso.encore/memoize_","taoensso.encore/compile-ns-filter","taoensso.timbre/ns-filter","whitelist","blacklist","?ns","fexpr__41566","G__41568","taoensso.timbre/may-log?","taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3","?config","config","min-level","cljs.core.get.cljs$core$IFn$_invoke$arity$3","and__4120__auto__","G__41575","G__41576","G__41577","taoensso.timbre/str-join","xs","taoensso.encore.str_join.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","taoensso.encore/nil->str","cljs.core/record?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/taoensso.timbre.get-rate-limiter","taoensso.timbre/get-rate-limiter","appender-id","specs","taoensso.encore/limiter","taoensso.timbre/*context*","taoensso.timbre/next-vargs","v","cljs.core/count","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/vargs->margs","msg-type","vargs","vec__41578","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","auto-error?","G__41581","G__41582","taoensso.encore/kw-identical?","msg-fmt?","G__41583","G__41584","v0","taoensso.encore/error?","?msg-fmt","vec__41585","cljs.core/Delay","G__41588","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","taoensso.encore/format*","taoensso.truss.impl/-invar-violation!","?meta","cljs.core/map?","cljs.core/meta","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","vec__41589","G__41592","G__41594","taoensso.timbre/-log!","?file","vargs_","?base-data","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","callsite-id","cljs.core/deref","instant","taoensso.encore/now-dt","context","margs","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","fexpr__41595","cljs.core/hash","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","?data","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","acc","mf","result","cljs.core/reduced","output-fn1","cljs.core/reduce-kv","_","id","appender","G__41596","G__41597","G__41598","rate-limit-specs","rate-limit-okay?","cljs.core/empty?","rl-fn","cljs.core/not","G__41600","map__41601","async?","apfn","output-fn","G__41605","G__41606","output_","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","temp__5718__auto__","mfn","G__41608","taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/console-?appender","taoensso.timbre/ordered-levels","taoensso.timbre/log?","taoensso.timbre/logging-enabled?","compile-time-ns","taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/str-println","seq41609","self__4718__auto__","cljs.core/seq"],"sourcesContent":["(ns taoensso.timbre\n  \"Simple, flexible logging for Clojure/Script. No XML.\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n       \n           \n                               \n                                    \n                                                      \n                                                       \n\n        \n  (:require\n   [clojure.string  :as str]\n   [taoensso.encore :as enc :refer () :refer-macros (have have?)]\n   [taoensso.timbre.appenders.core :as core-appenders])\n\n        \n  (:require-macros\n   [taoensso.timbre :as timbre-macros :refer ()]))\n\n(if (vector? taoensso.encore/encore-version)\n  (enc/assert-min-encore-version [2 67 2])\n  (enc/assert-min-encore-version  2.67))\n\n;;;; Config\n\n     \n                           \n                               \n                                           \n                                                    \n                                                                                 \n\n(declare stacktrace)\n(defn default-output-fn\n  \"Default (fn [data]) -> string output fn.\n  Use`(partial default-output-fn <opts-map>)` to modify default opts.\"\n  ([     data] (default-output-fn nil data))\n  ([opts data] ; For partials\n   (let [{:keys [no-stacktrace? stacktrace-fonts]} opts\n         {:keys [level ?err #_vargs msg_ ?ns-str hostname_\n                 timestamp_ ?line]} data]\n     (str\n                                         \n                                         \n       (str/upper-case (name level))  \" \"\n       \"[\" (or ?ns-str \"?\") \":\" (or ?line \"?\") \"] - \"\n       (force msg_)\n       (when-not no-stacktrace?\n         (when-let [err ?err]\n           (str \"\\n\" (stacktrace err opts))))))))\n\n;;; Alias core appenders here for user convenience\n(declare default-err default-out)\n                                                             \n                                                          \n       (def println-appender core-appenders/println-appender)\n       (def console-appender core-appenders/console-appender)\n\n(def example-config\n  \"Example (+default) Timbre v4 config map.\n\n  APPENDERS\n    An appender is a map with keys:\n      :min-level       ; Level keyword, or nil (=> no minimum level)\n      :enabled?        ;\n      :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n      :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\n      :output-fn       ; Optional override for inherited (fn [data]) -> string\n      :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _}\n      :ns-whitelist    ; Optional, stacks with active config's whitelist\n      :ns-blacklist    ; Optional, stacks with active config's blacklist\n      :middleware-fn   ; Optional, stacks with active config's middleware\n      :fn              ; (fn [data]) -> side effects, with keys described below\n\n    An appender's fn takes a single data map with keys:\n      :config          ; Entire config map (this map, etc.)\n      :appender-id     ; Id of appender currently dispatching\n      :appender        ; Entire map of appender currently dispatching\n      :instant         ; Platform date (java.util.Date or js/Date)\n      :level           ; Keyword\n      :error-level?    ; Is level e/o #{:error :fatal}?\n      :?ns-str         ; String,  or nil\n      :?file           ; String,  or nil\n      :?line           ; Integer, or nil ; Waiting on CLJ-865\n      :?err            ; First-arg platform error, or nil\n      :vargs           ; Vector of raw args\n      :output_         ; Forceable - final formatted output string created\n                       ; by calling (output-fn <this-data-map>)\n      :msg_            ; Forceable - args as a string\n      :timestamp_      ; Forceable - string\n      :hostname_       ; Forceable - string (clj only)\n      :output-fn       ; (fn [data]) -> formatted output string\n                       ; (see `default-output-fn` for details)\n      :context         ; *context* value at log time (see `with-context`)\n\n      **NB** - any keys not specifically documented here should be\n      considered private / subject to change without notice.\n\n  MIDDLEWARE\n    Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\n    transform the data map dispatched to appender fns. If any middleware\n    returns nil, NO dispatch will occur (i.e. the event will be filtered).\n\n  The `example-config` source code contains further settings and details.\n  See also `set-config!`, `merge-config!`, `set-level!`.\"\n\n  {:level :debug  ; e/o #{:trace :debug :info :warn :error :fatal :report}\n\n   ;; TODO Consider switching to `:ns-pattern` to match Tufte?\n   ;; Control log filtering by namespaces/patterns. Useful for turning off\n   ;; logging in noisy libraries, etc.:\n   :ns-whitelist  [] #_[\"my-app.foo-ns\"]\n   :ns-blacklist  [] #_[\"taoensso.*\"]\n\n   :middleware [] ; (fns [data]) -> ?data, applied left->right\n\n                        \n                                ; {:pattern _ :locale _ :timezone _}\n\n   :output-fn default-output-fn ; (fn [data]) -> string\n\n   :appenders\n        \n                                               \n                                                         \n     \n\n         \n   {;; :println (println-appender {})\n    :console (console-appender {})}})\n\n(comment\n  (set-config! example-config)\n  (infof \"Hello %s\" \"world :-)\"))\n\n(enc/defonce ^:dynamic *config* \"See `example-config` for info.\" example-config)\n                                                                                  \n                                            \n                                                                   \n\n(defn swap-config! [f & args]\n         (set!                   *config* (apply f *config* args))\n                                                 )\n\n(defn   set-config! [m] (swap-config! (fn [_old] m)))\n(defn merge-config! [m] (swap-config! (fn [old] (enc/nested-merge old m))))\n\n(defn     set-level! [level] (swap-config! (fn [m] (assoc m :level level))))\n                                   \n                                                              \n\n(comment (set-level! :info) *config*)\n\n;;;; Levels\n;; Note that for historical reasons we don't make a distinction\n;; between form \"level\"s and config \"min-level\"s.\n\n(def ^:const -levels-vec [:trace :debug :info :warn :error :fatal :report])\n(def ^:const -levels-set (set    -levels-vec))\n(def ^:const -levels-map (zipmap -levels-vec (next (range))))\n\n(defn valid-level? [x] (if (-levels-set x) true false))\n(defn valid-level  [x]\n  (or (-levels-set x)\n      (throw (ex-info \"Invalid Timbre logging level\" {:given x}))))\n\n(defn level>= [x y]\n  (>= ^long (-levels-map (valid-level x))\n      ^long (-levels-map (valid-level y))))\n\n(comment (qb 1e6 (level>= :info :debug))) ; 81.25\n\n;;;; Namespace filtering\n\n(def ^:private -compile-ns-filter (enc/memoize_ enc/compile-ns-filter))\n(def ^:private          ns-filter\n  \"Returns true iff given ns passes white/black lists.\"\n  (enc/memoize_\n    (fn [whitelist blacklist ?ns]\n      ((-compile-ns-filter whitelist blacklist) ?ns))))\n\n(comment\n  (qb 1e6 (ns-filter [\"foo.*\"] [\"foo.baz\"] \"foo.bar\")) ; 238.33\n  (ns-filter nil nil \"\")\n  (ns-filter nil nil nil))\n\n;;;; Combo filtering\n\n     \n                                 \n                                                        \n                                                              \n                                                                 \n                               \n                                                           \n                            \n\n     \n                                     \n                                                             \n       \n                                                                             \n                                      \n\n                         \n                                                                                      \n                                                                                       \n                                                                                               \n                                                                                               \n                                                 \n\n                                           \n                                      \n      \n        \n                      \n                                 \n                                                                        \n                                                \n\n                          \n                                                                     \n                                                \n\n(defn                       ^boolean may-log?\n  \"Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config\"\n  ([level                ] (may-log? level nil     nil))\n  ([level ?ns-str        ] (may-log? level ?ns-str nil))\n  ([level ?ns-str ?config]\n   (let [config    (or  ?config *config*)\n         min-level (get  config :level :report)]\n     (and\n       (level>= level min-level)\n       (ns-filter\n         (get config :ns-whitelist)\n         (get config :ns-blacklist)\n         ?ns-str)\n       true))))\n\n(comment (qb 1e5 (may-log? :info))) ; 34.13\n\n;;;; Utils\n\n(declare get-hostname)\n\n(enc/compile-if (do enc/str-join true) ; Encore v2.29.1+ with transducers\n  (defn- str-join [xs]\n    (enc/str-join \" \"\n      (map\n        (fn [x]\n          (let [x (enc/nil->str x)] ; Undefined, nil -> \"nil\"\n            (cond\n              (record?          x) (pr-str x)\n              ;; (enc/lazy-seq? x) (pr-str x) ; Dubious?\n              :else x))))\n      xs))\n  (defn- str-join [xs] (str/join \" \"                 (filter identity xs))))\n\n(comment\n  (defrecord MyRec [x])\n  (str-join [\"foo\" (MyRec. \"foo\")]))\n\n     \n                                \n                                                                      \n\n(comment (get-agent :my-appender))\n\n(defonce ^:private get-rate-limiter\n  (enc/memoize_ (fn [appender-id specs] (enc/limiter specs))))\n\n(comment (def rf (get-rate-limiter :my-appender [[10 5000]])))\n\n;;;; Internal logging core\n\n(def ^:dynamic *context*\n  \"General-purpose dynamic logging context. Context will be included in\n  appender data map at logging time.\"\n  nil)\n\n                                       \n                                         \n\n(defn-   next-vargs [v] (if (> (count v) 1) (subvec v 1) []))\n(defn- vargs->margs\n  \"Transforms raw vargs -> {:?err _ :?meta _ ...}, extracting:\n  * Special error or ^:meta {} (experimental, undocumented) v0\n  * Message format string\n  * Message string delay\"\n  [?err msg-type vargs]\n  (let [auto-error? (enc/kw-identical? ?err :auto)\n        msg-fmt?    (enc/kw-identical? msg-type :f)\n        [v0] vargs]\n\n    (if (and auto-error? (enc/error? v0))\n      (let [vargs    (next-vargs vargs)\n            ?msg-fmt (if msg-fmt? (let [[v0] vargs] v0) nil)\n            vargs    (if msg-fmt? (next-vargs vargs) vargs)\n            msg_     (delay\n                      (case msg-type\n                        nil \"\"\n                        :p  (str-join                            vargs)\n                        :f  (enc/format* (have string? ?msg-fmt) vargs)))]\n\n        {:?err v0 :?meta nil :?msg-fmt ?msg-fmt :msg_ msg_ :vargs vargs})\n\n      (let [?meta    (if (and (map? v0) (:meta (meta v0))) v0 nil)\n            ?err     (or (:err ?meta) (if auto-error? nil ?err))\n            ?meta    (dissoc ?meta :err)\n            vargs    (if ?meta (next-vargs vargs) vargs)\n            ?msg-fmt (if msg-fmt? (let [[v0] vargs] v0) nil)\n            vargs    (if msg-fmt? (next-vargs vargs) vargs)\n            msg_     (delay\n                      (case msg-type\n                        nil \"\"\n                        :p  (str-join                            vargs)\n                        :f  (enc/format* (have string? ?msg-fmt) vargs)))]\n\n        {:?err ?err :?meta ?meta :?msg-fmt ?msg-fmt :msg_ msg_ :vargs vargs}))))\n\n(comment\n  (let [ex (Exception. \"ex\")]\n    (qb 10000\n      (vargs->margs :auto :f [\"fmt\" :a :b :c])\n      (vargs->margs :auto :p [ex    :a :b :c])\n      (vargs->margs :auto :p [^:meta {:foo :bar} :a :b :c])\n      (vargs->margs :auto :p [       {:foo :bar} :a :b :c])\n      (vargs->margs :auto :p [ex])\n      (vargs->margs :auto :p [^:meta {:err ex}   :a :b :c])))\n  ;; [2.79 2.51 6.13 1.65 1.94 6.2]\n  (infof                                 \"Hi %s\" \"steve\")\n  (infof ^:meta {:hash :bar}             \"Hi %s\" \"steve\")\n  (infof ^:meta {:err (Exception. \"ex\")} \"Hi %s\" \"steve\"))\n\n(defn -log! \"Core low-level log fn. Implementation detail!\"\n\n  ;; TODO Temp workaround for\n  ;; https://github.com/fzakaria/slf4j-timbre/issues/20 and similar AOT tools\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_ ?base-data]\n   ;; (throw (ex-info \"Invalid internal Timbre call. Please try run `lein clean` to clear out-of-date build artifacts.\" {}))\n   (-log! config level ?ns-str ?file ?line msg-type ?err vargs_\n     ?base-data nil))\n\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_\n    ?base-data callsite-id]\n\n  (when (may-log? level ?ns-str config)\n    (let [instant (enc/now-dt)\n          context *context*\n          vargs   @vargs_\n\n          ;; {:keys [?err ?meta ?msg-fmt msg_ vargs]}:\n          margs (vargs->margs ?err msg-type vargs)\n          data\n          (merge\n           ?base-data\n           margs\n           {:instant instant\n            :level   level\n            :context context\n            :config  config ; Entire config!\n            :?ns-str ?ns-str\n            :?file   ?file\n            :?line   ?line\n                                                         \n            :error-level? (#{:error :fatal} level)\n\n            ;; Uniquely identifies a particular logging call for purposes of\n            ;; rate limiting, etc.\n            :hash_ ; TODO Undocumented (experimental)\n            (delay\n             (hash\n              ;; Nb excl. instant\n              [callsite-id ; Only useful for direct macro calls\n               (:?msg-fmt margs)\n               (get-in margs [:?meta :hash] ; Explicit hash provided\n                 (:vargs margs))]))\n\n            ;; :?err     <from-margs>\n            ;; :?meta    <from-margs> ; TODO Undocumented (experimental)\n            ;; :?msg-fmt <from-margs> ; TODO Undocumented (experimental)\n            ;; :msg_     <from-margs>\n            ;; :vargs    <from-margs>\n\n            ;;; Deprecated\n            :?err_  (delay (:?err  margs))\n            :vargs_ (delay (:vargs margs))})\n\n          ?data\n          (reduce ; Apply middleware: data->?data\n            (fn [acc mf]\n              (let [result (mf acc)]\n                (if (nil? result)\n                  (reduced nil)\n                  result)))\n            data\n            (:middleware config))]\n\n      (when-let [data ?data] ; Not filtered by middleware\n        (let [;; Optimization: try maximize output+timestamp sharing\n              ;; between appenders\n              output-fn1 (enc/memoize_ (get config :output-fn default-output-fn))\n                                                                                                    \n                                   ; (fn [timestamp-opts]) -> Shared delay\n                   \n                           \n                         \n                       \n                                                               \n                            \n                                                 \n                                                                       \n                                         ]\n\n          (reduce-kv\n           (fn [_ id appender]\n             (when (and (:enabled? appender)\n                        (level>= level (or (:min-level appender) :trace)))\n\n               ;; Appender ns filter stacks with main config's ns filter:\n               (when (ns-filter (:ns-whitelist appender)\n                                (:ns-blacklist appender)\n                                ?ns-str)\n\n                 (let [rate-limit-specs (:rate-limit appender)\n                       rate-limit-okay?\n                       (or\n                        (empty? rate-limit-specs)\n                        (let [rl-fn (get-rate-limiter id rate-limit-specs)]\n                          (not (rl-fn (force (:hash_ data))))))]\n\n                   (when rate-limit-okay?\n                     (let [{:keys [async?] apfn :fn} appender\n\n                           output-fn\n                           (let [f (:output-fn appender)]\n                             (if (or (nil? f) (enc/kw-identical? f :inherit))\n                               output-fn1\n                               f))\n\n                                           \n                                \n                                                                 \n                                                                                   \n                                                                     \n                                                                             \n\n                           output_\n                           (delay\n                            (output-fn\n                                                                       \n                                    data))\n\n                           data\n                           (conj data\n                             {:appender-id id\n                              :appender    appender\n                              :output-fn   output-fn\n                              :output_     output_\n                                                                })\n\n                           ?data ; Final data prep before going to appender\n                           (if-let [mfn (:middleware-fn appender)]\n                             (mfn data)\n                             data)]\n\n                       (when-let [data ?data] ; Not filtered by middleware\n\n                         ;; NB Unless `async?`, we currently allow appenders\n                         ;; to throw since it's not particularly obvious\n                         ;; how/where we should report problems. Throwing\n                         ;; early seems preferable to just silently dropping\n                         ;; errors. In effect, we currently require appenders\n                         ;;  to take responsibility over appropriate trapping.\n\n                                (apfn data)\n                              \n                                   \n                                                                         \n                                       )))))))\n           nil\n           (:appenders config))))))\n  nil))\n\n(comment\n  (-log! *config* :info nil nil nil :p :auto\n    (delay [(do (println \"hi\") :x) :y]) nil \"callsite-id\"))\n\n                                                      \n\n                                              \n                                                     \n\n                                                     \n                                                \n                                                                             \n\n                                                            \n                                         \n                                \n                                                        \n                                                        \n                                                \n                                     \n                                                       \n                                                    \n                                                            \n                                 \n                                             \n                                               \n\n                                                            \n\n                                                                            \n                                                                             \n                                     \n                       \n                                                                     \n                                                \n\n                                                                     \n                                                         \n\n(comment\n  (log! :info :p [\"foo\"])\n  (macroexpand '(log! :info :p [\"foo\"]))\n  (macroexpand '(log! :info :p [\"foo\"] {:?line 42})))\n\n;;;; Benchmarking\n\n(comment\n  (set-level! :debug)\n  (may-log? :trace)\n  (with-level :trace (log? :trace))\n  (qb 10000\n    (may-log? :trace)\n    (may-log? :trace \"foo\")\n    (tracef \"foo\")\n    (when false \"foo\"))\n  ;; [1.38 1.42 2.08 0.26]\n\n                                                \n                                                                            \n\n  (with-sole-appender {:enabled? true :fn (fn [data] nil)}\n    (qb 10000 (info \"foo\"))) ; ~74.58 ; Time to delays ready\n\n  (with-sole-appender {:enabled? true :fn (fn [data] (force (:output_ data)))}\n    (qb 10000 (info \"foo\"))) ; ~136.68 ; Time to output ready\n  )\n\n;;;; Main public API-level stuff\n;; TODO Have a bunch of cruft here trying to work around CLJ-865 to some extent\n\n;;; Log using print-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n;;; Log using format-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n(comment\n  (infof \"hello %s\" \"world\")\n  (infof (Exception.) \"hello %s\" \"world\")\n  (infof (Exception.)))\n\n                                    \n                               \n        \n                             \n                                               \n\n                                                \n                               \n        \n                             \n                                            \n                    \n\n                                                                              \n\n                                                                                           \n                                                                                           \n                                                                                           \n\n     \n                                     \n                                                    \n               \n               \n                   \n                                        \n                                                                \n                                   \n\n                                              \n                                            \n                                                                                  \n\n(comment\n  (log-errors             (/ 0))\n  (log-and-rethrow-errors (/ 0))\n  (logged-future          (/ 0))\n  (handle-uncaught-jvm-exceptions!))\n\n                                             \n                                  \n                         \n                             \n                                                            \n                                                                           \n\n                                 \n                 \n\n             \n                                                                             \n                                                                       \n                                                                                \n                                                                                \n                                                                                \n                                                                                 \n\n                                    \n(comment ((fn foo [x y] (get-env)) 5 10))\n\n     \n                  \n                 \n                                       \n                                                                        \n                                                                         \n                                            \n    \n                                       \n                                                                        \n                                                                         \n                                           \n\n                                          \n                                                    \n                                             \n\n;;;; Misc public utils\n\n     \n                            \n                                        \n                                                                   \n                                                                   \n                                                                   \n                                    \n                                                                 \n\n                                                                \n                                                                \n                                    \n                                                           \n\n     \n                    \n                                                               \n                                                           \n                                                      \n\n                                                                    \n                                                                             \n                                                                           \n                                                           \n                      \n                                                            \n         \n\n                                                     \n                                  \n                                                                     \n\n(comment (get-hostname))\n\n     \n                                       \n                                                          \n           \n\n(defn stacktrace\n  ([err     ] (stacktrace err nil))\n  ([err opts]\n          (str err) ; TODO Alternatives?\n        \n                                                       \n                                                  \n                                  \n                                \n                 \n                         \n                                     \n\n                                     \n                                        \n                                              \n                                               ))\n\n(comment (stacktrace (Exception. \"Boo\") {:stacktrace-fonts {}}))\n\n                                                     \n                      \n                                                                 \n                                               \n\n;;;; Deprecated\n\n(enc/deprecated\n         (def console-?appender core-appenders/console-appender)\n  (def ordered-levels -levels-vec)\n  (def log? may-log?)\n  (defn logging-enabled? [level compile-time-ns] (may-log? level (str compile-time-ns)))\n  (defn str-println      [& xs] (str-join xs))\n                                                                              \n                                                                              \n                                        \n                   \n                                           \n                                                  \n                                                          \n                                                                      )\n\n;;;;;;;;;;;; This file autogenerated from src/taoensso/timbre.cljx\n"]}