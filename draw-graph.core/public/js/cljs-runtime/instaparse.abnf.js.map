{"version":3,"sources":["instaparse/abnf.cljc"],"mappings":";;;;;;;;;;AAeA;;;;;;;;AAAA,AAAeA;AASf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AACK,AAAA,AAACC,AACH,AAAA,AAACA,AACA,AAAA,AAACA,AACH,AAAA,AAACC,AACC,AAAA,AAACA,AACF,AAAA,AAACD,AACC,AAAA,AAACA,AACA,AAAA,AAACC,AACD,AAAA,AAACD,AACH,AAAA,AAACC,AACH,AAAA,AAACA,AACC,AAACC,AAAI,AAACA,AAAI,AAAA,AAACD,AAAiB,AAAA,AAACA,AACxB,AAACE,AACC,AAACC,AAAI,AAAA,AAACH,AACD,AAACC,AAAI,AAAA,AAACD,AAAiB,AAAA,AAACA,AACnC,AAAA,AAACD,AACJ,AAAA,AAACC,AACE,AAAA,AAACD,AACH,AAACE,AAAI,AAAA,AAACD,AACD,AAAA,AAACA;AAEd,AAAA,AAAKI;AAyCL,AAAA,AAAKC;AASL,AAAA,AAAKC;AAmCF,AAAKC,AAAY,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAA,AAAA,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAA,AAAA,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAA,AAAA,AAAA,AAAAS,AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAEpB,AAAA,AAAA,AAAAE,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACDI;AADL,AAEE,AACE,AAAA,AAACC,AAAM,AAACC,AAAOF;AAAO,AAAAG,AAAgBH;AAAhB,AAAAI,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAAUG;AAAV,AAAAF,AAAAD,AAAA,AAAA,AAAYI;AAAZ,AACE,AAACC,AAAaH,AAAGE;;AAF3C,AAGQ,AAACE,AAAMC,AAAI,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAf,AAAAa;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAC,AAAAH;AAAA,AAAAI,AA6yE8B,AAAAoH,AAAAxH;AA7yE9BK,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AACE,AAACX,AAAauB;;AADhB,AAAA,AAAAV,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAf;;AAAA,AAAAY,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAhB,AAAMmB;AAAN,AAAA,AAAAF,AAAA,AAAAH,AAAA,AAAAI,AAAAlB,AACE,AAACJ,AAAauB;;;AADhB;;;;AAAA,AAAA;;AAAA,AAAA,AAAApB,AAAQX;;;;;;AAL7B,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAQA;;;AAAA,AAAMmC,AAEHC,AAAEC;AAFL,AAGE,AAAA,AAACC,AACK,AAAAxB,AAAA,AAAAyB;AAAA,AAAA,AAAAvB,AAAA,AAAA;AAAA,AAAA,AAAAuB,AAAAA;;AAAA,AAAA,AAAAtB,AAAA,AAAAf,AAAAqC;AAAA,AAAA,AAAAtB;AAAA,AAAA,AAAAsB,AAAAtB;AAAA,AAAA,AAAA,AAAAC,AAAAqB;AAAA,AAAApB,AAsyE2C,AAAAoH,AAAAhG;AAtyE3CnB,AAAA,AAAAC,AAAAF;AAAAqB,AAAA,AAAAjB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAqB,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAArB;AAAA,AAAA,AAAAK,AAAAN,AAAAsB,AAAME;AAAN,AAAA,AACY,AAACC,AAAUR,AAAEO;AADzB,AAAA,AAAAjB,AAAAc,AAAA,AAEGG,AAAE,AAACP,AAAAA,AAAAA,AAAEO,AAAAA;;AAFR,AAAA,AAAAF,AAAA;;;;AAAA,AAAA,AAAAA,AAAA;;;;;AAAA;;;;;AAAA,AAAAd,AAAA,AAAAC,AAAAY,AAAA,AAAAE,AAAA,AAAAZ,AAAAS;;AAAA,AAAAZ,AAAA,AAAAC,AAAAY,AAAA;;;AAAA,AAAA,AAAAT,AAAAQ,AAAMI;AAAN,AAAA,AACY,AAACC,AAAUR,AAAEO;AADzB,AAAAX,AAAA,AAAA,AAAAU,AAAA,AAAAT,AAAAM,AAEGI,AAAE,AAACP,AAAAA,AAAAA,AAAEO,AAAAA;;AAFR,AAAA,AAAAV,AAAAM;;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAzB,AAAQuB;;;AAIhB;;;AAAA,AAAMQ,AAEHC;AAFH,AAGE,AAACtD,AACC,AAAC2C,AAAQtD,AAAU,AAACkE,AAAS,AAACC,AAAOC,AAAW,AAACC,AAAKJ,AACtDA;;AAEJ;;;AAAA,AAAMK,AAEHC;AAFH,AAGE,AAAChD,AAAE,AAAA,AAAMgD,AAAGC;;AAEd,AAAA,AAAMC,AAAyBC,AAAGC;AAAlC,AACE,AAAMC,AAAa,AAACN,AAAUI;AACxBG,AAAa,AAACP,AAAUK;AAD9B,AAEE,AACE,AAAKC,AAAaC;AAClB,AAACC,AAAS,AAAC3E,AAAI,AAAA,AAAC4E,AAAOL,AAAS,AAAA,AAACK,AAAOJ;;AAF1C,AAGEC;AACA,AAACE,AAAS,AAAC3E,AAAI,AAAA,AAAC4E,AAAOL,AAASC;;AAJlC,AAKEE;AACA,AAACC,AAAS,AAAC3E,AAAIuE,AAAG,AAAA,AAACK,AAAOJ;;AAN5B,AAQE,AAACxE,AAAIuE,AAAGC;;;;;;AAOX,AAAKK,AAAUC;AAElB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKI,AAGa,AAAKE,AAAIC,AAoCnBmB;AApCU,AAAA,AAAgBpB,AAAI,AAACT,AAASU;AAmCvCkB,AAKI;AAAOI;AAAP,AACE,AAAA,AAAC9B,AAAU,AAACjD,AAAM4D,AAAImB;;;AADjBA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AA3CpB,AAESxB;AAFTJ;AAAA,AAOoB,AAAInF;AACF,AAAC6F,AAAG,AAACH,AAAQ,AAACC,AAA0B,AAAAR,AAACnD,AAAM4D;;AAC/C,AAACC,AAAG,AAACH,AAAQ,AAAAP,AAACnD,AAAM4D;;;;AAT1CT;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAAA;AAAAC;AAAA,AAoDS,AAACH,AAAU,AAAAG,AAACpD,AAAM4D;;;AApD3BR;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAyCa;AAAO2B;AAAP,AACE,AAAA,AAACC,AAAY,AAAChF,AAAM4D,AAAImB;;;AADnBA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AALTR,AACFG,AAUI;AAAOK;AAAP,AACE,AAAA,AAAC9B,AAAU,AAACjD,AAAM4D,AAAImB;;;AADjBA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AApCJjB,AACE7D,AAWH,AAiBJ,AAAC4E,AAAK3G,AAAO4G,AASZ3F,AACAA;;AAhBOgF;AAXJ,AAYIA;;AAXAD,AAAOC;AADX,AAEI,AACE,AAACC,AAAOF;AAAQ,AAAC7F,AAAK8F;;AADxB,AAEE,AAAA,AAAC3E,AAAE,AAACiB,AAAMyD;AAAW,AAACG,AAAI,AAAA,AAAMH,AAAQ,AAAA,AAAOA,AAAQC;;AAFzD,AAGE,AAAA,AAAC3E,AAAE,AAAA,AAAM0E;AAAW,AAACI,AAAKH;;AAH5B,AAIE,AAAA,AAAC3E,AAAE,AAAA,AAAO0E;AAAW,AAACK,AAAIJ;;AAJ5B,AAKQ,AAACE,AAAI,AAAAG,AAAI,AAAA,AAAMN;AAAV,AAAA,AAAAM;AAAAA;;AAAA;;AACA,AAAAA,AAAI,AAAA,AAAON;AAAX,AAAA,AAAAM;AAAAA;;AAC4BC;;AAC5BN;;;;;;;AATbD,AAAOC;;;AAAPD;;AAAAA,AAAOC;;;;;;;;AAxB1B;AAAAd;AAAA,AAImB,AAAIrF;AACF,AAAC0F,AAAQ,AAACC,AAA0B,AAAAN,AAACrD,AAAM4D;;AAC3C,AAACF,AAAQ,AAAAL,AAACrD,AAAM4D;;;;AANrCP;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAaW;AAAOU;AAAP,AACE,AAAAC,AAAM,AAACvD,AAAMsD;AAAb,AAAA,AAAAC;AAAA;AACI,AACE,AAAA,AAACxE,AAAE,AAAC2B,AAAM4C;AADZ;;AAAA,AAAA,AAAA,AAAA,AAEc,AAAC5C,AAAM4C,AAAc,AAAC5C,AAAM4C;;;;;AAH9C;AAII,AACE,AAAA,AAACvE,AAAE,AAAC2B,AAAM4C;AADZ,AAAA,AAC+B,AAACtE,AAAOsE;;AADvC,AAAA,AAAA,AAEc,AAAC5C,AAAM4C;;;;;AANzB;AAAA,AAAA,AAAA,AAOU,AAAC5C,AAAM4C,AAAc,AAAA,AAACpE,AAAIoE;;;;AAPpC,AAAA,AAAAE,AAAA,AAAA,AAAAD;;;;;AADKD;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAgCL,AAMD5E;AANQ4F;AAAP,AACE,AAAC9B,AAAU,AAACjD,AAAM4D,AAAImB;;;AADjBA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;AASpB,AAAA,AAAME,AACHC;AADH,AAEE,AAACjD,AAAW,AAACjC,AAAMmF,AAAWzC,AAAwBwC;;AAExD,AAAA;;;;;;AAAA,AAAArG,AAAMuG;AAAN,AAAA,AAAAtG,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsG,AAAA,AAAA,AAAA,AAAAnG;;;AAAA,AAAA,AAAA,AAAA,AAAAoG,AAAMD,AAKHQ;AALH,AAAA,AAAAN,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAtF,AAAAuD,AAAA+B,AAAAA;AAAAA,AAKeO;AALf,AAME,AAAAC,AAAUE;AAAVD,AAA0C,AAAA,AAAA,AAAYF;AAAtD,AAAA,AAAAE,AAAUC;;AAAV,AAAA,AACE,AAAMC,AAAK,AAAA,AAAA,AAACC,AAAUxH,AAA6BkH;AAAnD,AACE,AACE,AAAWO,AAAuBF;AAClC,AAAA,AAACG,AAEC,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAC;AAAAC,AAAAC;AAAAC,AAAA;AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAR,AAAAQ;;AAAA,AAAA,AAAAL,AAAAG;;AAAA,AAAAD,AAAAE;;AAAA,AAAA,AAAc,AAACE,AAAQb;AAAvB,AAAA,AAAAS,AAAAD;;AAAA,AAAAD,AAAAD;;AAAA,AAAAF;;;AAJJ,AAKE,AAAA,AAAC7G,AAAe,AAACuH,AAAOd;AACxB,AAACe,AAAY1D,AAAiB,AAACnC,AAAM8E;;AANvC,AAQQ,AAAChB,AAAmB,AAAC+B,AAAY1D,AAAiB2C;;;;AAV9D,AAAA,AAAAH,AAAUE;;;AANZ,AAAA,AAAA,AAAMZ;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA,AAAAtE,AAAAqE;AAAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAAA,AAAAF,AAAAD;;;AAAA,AAkBA,AAAA,AAAMyB,AAAcrB,AAAKsB;AAAzB,AACE,AAAMC,AAAU,AAAA,AAAA,AAACjB,AAAUxH,AAAsBkH;AAAjD,AACE,AAAI,AAAWO,AAAuBgB;AACpC,AAAA,AAACf,AAEC,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAc,AAAAZ;AAAAa,AAAAX;AAAAY,AAAA;AAAAC,AAAA,AAAAV;AAAA,AAAA,AAAAR,AAAAQ;;AAAA,AAAA,AAAAL,AAAAc;;AAAA,AAAAZ,AAAAa;;AAAA,AAAA,AAAc,AAACT,AAAQK;AAAvB,AAAA,AAAAT,AAAAW;;AAAA,AAAAb,AAAAY;;AAAA,AAAAf;;;AACF,AAAMnB,AAAM,AAAC8B,AAAY1D,AAAiB6D;AACpCjF,AAAY,AAAC+C,AAAmBC;AAChCsC,AAAiB,AAACrG,AAAM,AAACA,AAAM,AAACA,AAAM+D;AAF5C,AAAA,AAAA,AAAA,AAAA,AAGY,AAACuC,AAAkB,AAACC,AAA8BR,AAAchF,AACvDsF,AACHN","names":["instaparse.abnf/*case-insensitive*","instaparse.abnf/abnf-core","instaparse.combinators-source/regexp","instaparse.combinators-source/string","instaparse.combinators_source.alt","instaparse.combinators-source/star","instaparse.combinators_source.cat","instaparse.abnf/abnf-grammar-common","instaparse.abnf/abnf-grammar-clj-only","instaparse.abnf/abnf-grammar-cljs-only","instaparse.abnf/abnf-parser","cljs.core/List","cljs.core.merge","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","instaparse.abnf/get-char-combinator","seq54761","self__4777__auto__","cljs.core/seq","nums","cljs.core._EQ_","cljs.core/second","vec__54772","cljs.core.nth","lo","_","hi","instaparse.combinators_source.unicode_char","cljs.core.apply","instaparse.combinators-source/cat","iter__4582__auto__","s__54776","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__54778","cljs.core/chunk-buffer","i__54777","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__54775","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","n","instaparse.abnf/project","m","ks","cljs.core.into","s__54787","b__54789","i__54788","iter__54786","k","cljs.core/contains?","instaparse.abnf/merge-core","grammar-map","cljs.core.distinct","cljs.core.mapcat","instaparse.cfg/seq-nt","cljs.core/vals","instaparse.abnf/hide-tag?","p","instaparse.reduction/raw-non-terminal-reduction","instaparse.abnf/alt-preserving-hide-tag","p1","p2","hide-tag-p1?","hide-tag-p2?","instaparse.combinators-source/hide-tag","cljs.core.dissoc","instaparse.abnf/parse-int","js/parseInt","rest__54797#","rest__54798#","rest__54796#","instaparse.abnf/abnf-transformer","cljs.core/hash-map","tag","rule","cljs.core.keyword","clojure.string/upper-case","cljs.core/str","instaparse.combinators-source/nt","instaparse.combinators-source/alt","items","G__54801","js/Error","repeat","element","cljs.core/empty?","instaparse.combinators-source/rep","instaparse.combinators-source/plus","instaparse.combinators-source/opt","or__4185__auto__","js/Infinity","instaparse.combinators-source/hide","instaparse.combinators-source/look","instaparse.combinators-source/neg","cljs.core.comp","instaparse.cfg/process-regexp","cs","instaparse.cfg/string+","instaparse.abnf/rules->grammar-map","rules","cljs.core/merge-with","instaparse.abnf/abnf","p__54808","map__54809","cljs.core/PROTOCOL_SENTINEL","seq54806","G__54807","cljs.core/next","self__4776__auto__","spec","opts","*case-insensitive-literals*-orig-val__54811","*case-insensitive-literals*-temp-val__54813","instaparse.cfg/*case-insensitive-literals*","tree","instaparse.gll/parse","instaparse.gll/Failure","instaparse.util.throw_runtime_exception","sb__4720__auto__","goog.string/StringBuffer","*print-newline*-orig-val__54814","cljs.core/*print-newline*","*print-fn*-orig-val__54815","cljs.core/*print-fn*","*print-newline*-temp-val__54816","*print-fn*-temp-val__54817","x__4721__auto__","cljs.core.println","cljs.core/ffirst","instaparse.transform/transform","instaparse.abnf/build-parser","output-format","rule-tree","*print-newline*-orig-val__54819","*print-fn*-orig-val__54820","*print-newline*-temp-val__54821","*print-fn*-temp-val__54822","start-production","instaparse.cfg/check-grammar","instaparse.reduction.apply_standard_reductions","cljs.core/chunk-first"],"sourcesContent":["(ns instaparse.abnf\r\n  \"This is the context free grammar that recognizes ABNF notation.\"\r\n  (:refer-clojure :exclude [cat])\r\n  (:require [instaparse.transform :as t]\r\n            [instaparse.cfg :as cfg]\r\n            [instaparse.gll :as gll]\r\n            [instaparse.reduction :as red]\r\n            [instaparse.util :refer [throw-runtime-exception]]\r\n            [instaparse.combinators-source :refer\r\n             [Epsilon opt plus star rep alt ord cat string-ci string\r\n              string-ci regexp nt look neg hide hide-tag unicode-char]]\r\n            #?(:cljs [goog.string.format])\r\n            [clojure.walk :as walk])\r\n  #?(:cljs (:require-macros [instaparse.abnf :refer [precompile-cljs-grammar]])))\r\n\r\n(def ^:dynamic *case-insensitive*\r\n  \"This is normally set to false, in which case the non-terminals\r\nare treated as case-sensitive, which is NOT the norm\r\nfor ABNF grammars. If you really want case-insensitivity,\r\nbind this to true, in which case all non-terminals\r\nwill be converted to upper-case internally (which\r\nyou'll have to keep in mind when transforming).\"\r\n  false)\r\n\r\n(def abnf-core\r\n  {:ALPHA (regexp \"[a-zA-Z]\")\r\n   :BIT (regexp \"[01]\")\r\n   :CHAR (regexp \"[\\\\u0001-\\\\u007F]\")\r\n   :CR (string \"\\u000D\")\r\n   :CRLF (string \"\\u000D\\u000A\")\r\n   :CTL (regexp \"[\\\\u0000-\\\\u001F|\\\\u007F]\")\r\n   :DIGIT (regexp \"[0-9]\")\r\n   :DQUOTE (string \"\\u0022\")\r\n   :HEXDIG (regexp \"[0-9a-fA-F]\")\r\n   :HTAB (string \"\\u0009\")\r\n   :LF (string \"\\u000A\")\r\n   :LWSP (alt (alt (string \"\\u0020\") (string \"\\u0009\")) ;WSP\r\n              (star\r\n                (cat (string \"\\u000D\\u000A\") ;CRLF\r\n                     (alt (string \"\\u0020\") (string \"\\u0009\"))))) ;WSP\r\n   :OCTET (regexp \"[\\\\u0000-\\\\u00FF]\")\r\n   :SP (string \"\\u0020\")\r\n   :VCHAR (regexp \"[\\\\u0021-\\\\u007E]\")\r\n   :WSP (alt (string \"\\u0020\")     ;SP\r\n             (string \"\\u0009\"))})  ;HTAB\r\n\r\n(def abnf-grammar-common\r\n  \"\r\n<rulelist> = <opt-whitespace> (rule | hide-tag-rule)+;\r\nrule = rulename-left <defined-as> alternation <opt-whitespace>;\r\nhide-tag-rule = hide-tag <defined-as> alternation <opt-whitespace>;\r\nrulename-left = rulename;\r\nrulename-right = rulename;\r\n<hide-tag> = <'<' opt-whitespace> rulename-left <opt-whitespace '>'>;\r\ndefined-as = <opt-whitespace> ('=' | '=/') <opt-whitespace>;\r\nalternation = concatenation (<opt-whitespace '/' opt-whitespace> concatenation)*;\r\nconcatenation = repetition (<whitespace> repetition)*;\r\nrepetition = [repeat] <opt-whitespace> element;\r\nrepeat = NUM | (NUM? '*' NUM?);\r\n<element> = rulename-right | group | hide | option | char-val | num-val\r\n          | look | neg | regexp;\r\nlook = <'&' opt-whitespace> element;\r\nneg = <'!' opt-whitespace> element;\r\n<group> = <'(' opt-whitespace> alternation <opt-whitespace ')'>;\r\noption = <'[' opt-whitespace> alternation <opt-whitespace ']'>;\r\nhide = <'<' opt-whitespace> alternation <opt-whitespace '>'>;\r\nchar-val = <'\\\\u0022'> #'[\\\\u0020-\\\\u0021\\\\u0023-\\\\u007E]'* <'\\\\u0022'> (* double-quoted strings *)\r\n         | <'\\\\u0027'> #'[\\\\u0020-\\\\u0026\\u0028-\\u007E]'* <'\\\\u0027'>;  (* single-quoted strings *)\r\n<num-val> = <'%'> (bin-val | dec-val | hex-val);\r\nbin-val = <'b'> bin-char\r\n          [ (<'.'> bin-char)+ | ('-' bin-char) ];\r\nbin-char = ('0' | '1')+;\r\ndec-val = <'d'> dec-char\r\n          [ (<'.'> dec-char)+ | ('-' dec-char) ];\r\ndec-char = DIGIT+;\r\nhex-val = <'x'> hex-char\r\n          [ (<'.'> hex-char)+ | ('-' hex-char) ];\r\nhex-char = HEXDIG+;\r\nNUM = DIGIT+;\r\n<DIGIT> = #'[0-9]';\r\n<HEXDIG> = #'[0-9a-fA-F]';\r\n\r\n\r\n(* extra entrypoint to be used by the abnf combinator *)\r\n<rules-or-parser> = rulelist | alternation;\r\n  \")\r\n\r\n(def abnf-grammar-clj-only\r\n  \"\r\n<rulename> = #'[a-zA-Z][-a-zA-Z0-9]*(?x) #identifier';\r\nopt-whitespace = #'\\\\s*(?:;.*?(?:\\\\u000D?\\\\u000A\\\\s*|$))*(?x) # optional whitespace or comments';\r\nwhitespace = #'\\\\s+(?:;.*?\\\\u000D?\\\\u000A\\\\s*)*(?x) # whitespace or comments';\r\nregexp = #\\\"#'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*'(?x) #Single-quoted regexp\\\"\r\n       | #\\\"#\\\\\\\"[^\\\\\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\\\\\"\\\\\\\\]*)*\\\\\\\"(?x) #Double-quoted regexp\\\"\r\n\")\r\n\r\n(def abnf-grammar-cljs-only\r\n  \"\r\n<rulename> = #'[a-zA-Z][-a-zA-Z0-9]*';\r\nopt-whitespace = #'\\\\s*(?:;.*?(?:\\\\u000D?\\\\u000A\\\\s*|$))*';\r\nwhitespace = #'\\\\s+(?:;.*?\\\\u000D?\\\\u000A\\\\s*)*';\r\nregexp = #\\\"#'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*'\\\"\r\n       | #\\\"#\\\\\\\"[^\\\\\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\\\\\"\\\\\\\\]*)*\\\\\\\"\\\"\r\n\")\r\n\r\n#?(:clj\r\n   (defmacro precompile-cljs-grammar\r\n     []\r\n     (let [combinators (red/apply-standard-reductions \r\n                         :hiccup (cfg/ebnf (str abnf-grammar-common\r\n                                                abnf-grammar-cljs-only)))]\r\n       (walk/postwalk\r\n         (fn [form]\r\n           (cond\r\n             ;; Lists cannot be evaluated verbatim\r\n             (seq? form)\r\n             (list* 'list form)\r\n\r\n             ;; Regexp terminals are handled differently in cljs\r\n             (= :regexp (:tag form))\r\n             `(merge (regexp ~(str (:regexp form)))\r\n                     ~(dissoc form :tag :regexp))\r\n\r\n             :else form))\r\n         combinators))))\r\n\r\n#?(:clj\r\n   (def abnf-parser (red/apply-standard-reductions \r\n                      :hiccup (cfg/ebnf (str abnf-grammar-common\r\n                                             abnf-grammar-clj-only))))\r\n   :cljs\r\n   (def abnf-parser (precompile-cljs-grammar)))\r\n\r\n(defn get-char-combinator\r\n  [& nums]\r\n  (cond\r\n    (= \"-\" (second nums)) (let [[lo _ hi] nums]\r\n                            (unicode-char lo hi))\r\n    :else (apply cat (for [n nums]\r\n                       (unicode-char n)))))\r\n\r\n(defn project\r\n  \"Restricts map to certain keys\"\r\n  [m ks]\r\n  (into {}\r\n        (for [k ks\r\n              :when (contains? m k)]\r\n          [k (m k)])))\r\n          \r\n(defn merge-core\r\n  \"Merges abnf-core map in with parsed grammar map\"\r\n  [grammar-map]\r\n  (merge\r\n    (project abnf-core (distinct (mapcat cfg/seq-nt (vals grammar-map))))\r\n    grammar-map))\r\n\r\n(defn hide-tag?\r\n  \"Tests whether parser was constructed with hide-tag\"\r\n  [p]\r\n  (= (:red p) red/raw-non-terminal-reduction))\r\n\r\n(defn alt-preserving-hide-tag [p1 p2]\r\n  (let [hide-tag-p1? (hide-tag? p1)\r\n        hide-tag-p2? (hide-tag? p2)]\r\n    (cond\r\n      (and hide-tag-p1? hide-tag-p2?)\r\n      (hide-tag (alt (dissoc p1 :red) (dissoc p2 :red)))\r\n      hide-tag-p1?\r\n      (hide-tag (alt (dissoc p1 :red) p2))\r\n      hide-tag-p2?\r\n      (hide-tag (alt p1 (dissoc p2 :red)))\r\n      :else\r\n      (alt p1 p2))))\r\n\r\n#?(:clj\r\n   (defn parse-int\r\n     ([string] (Integer/parseInt string))\r\n     ([string radix] (Integer/parseInt string radix)))\r\n   :cljs\r\n   (def parse-int js/parseInt))\r\n        \r\n(def abnf-transformer\r\n  {   \r\n   :rule hash-map\r\n   :hide-tag-rule (fn [tag rule] {tag (hide-tag rule)})\r\n   :rulename-left #(if *case-insensitive*\r\n                     (keyword (clojure.string/upper-case (apply str %&)))\r\n                     (keyword (apply str %&)))\r\n   :rulename-right #(if *case-insensitive*\r\n                      (nt (keyword (clojure.string/upper-case (apply str %&))))\r\n                      (nt (keyword (apply str %&))))\r\n   ; since rulenames are case insensitive, convert it to upper case internally to be consistent\r\n   :alternation alt\r\n   :concatenation cat\r\n   :repeat (fn [& items]\r\n             (case (count items)\r\n               1 (cond\r\n                   (= (first items) \"*\") {}                         ; *\r\n                   :else {:low (first items), :high (first items)}) ; x\r\n               2 (cond\r\n                   (= (first items) \"*\") {:high (second items)}     ; *x\r\n                   :else {:low (first items)})                      ; x*\r\n               3 {:low (first items), :high (nth items 2)}))        ; x*y\r\n                 \r\n   :repetition (fn \r\n                 ([repeat element]\r\n                   (cond\r\n                     (empty? repeat) (star element)\r\n                     (= (count repeat) 2) (rep (:low repeat) (:high repeat) element)\r\n                     (= (:low repeat) 1) (plus element)\r\n                     (= (:high repeat) 1) (opt element)\r\n                     :else (rep (or (:low repeat) 0)\r\n                                (or (:high repeat) #?(:clj Double/POSITIVE_INFINITY\r\n                                                      :cljs js/Infinity))\r\n                                element)))\r\n                 ([element]\r\n                   element))\r\n   :option opt\r\n   :hide hide\r\n   :look look\r\n   :neg neg\r\n   :regexp (comp regexp cfg/process-regexp)\r\n   :char-val (fn [& cs]\r\n               (cfg/string+ (apply str cs) true))\r\n   :bin-char (fn [& cs]\r\n               (parse-int (apply str cs) 2))\r\n   :dec-char (fn [& cs]\r\n               (parse-int (apply str cs)))\r\n   :hex-char (fn [& cs]\r\n               (parse-int (apply str cs) 16))\r\n   :bin-val get-char-combinator\r\n   :dec-val get-char-combinator\r\n   :hex-val get-char-combinator\r\n   :NUM #(parse-int (apply str %&))})\r\n\r\n(defn rules->grammar-map\r\n  [rules]\r\n  (merge-core (apply merge-with alt-preserving-hide-tag rules)))\r\n\r\n(defn abnf\r\n  \"Takes an ABNF grammar specification string and returns the combinator version.\r\nIf you give it the right-hand side of a rule, it will return the combinator equivalent.\r\nIf you give it a series of rules, it will give you back a grammar map.   \r\nUseful for combining with other combinators.\"\r\n  [spec & {:as opts}]\r\n  (binding [cfg/*case-insensitive-literals* (:string-ci opts :default)]\r\n    (let [tree (gll/parse abnf-parser :rules-or-parser spec false)]\r\n      (cond\r\n        (instance? instaparse.gll.Failure tree)\r\n        (throw-runtime-exception\r\n          \"Error parsing grammar specification:\\n\"\r\n          (with-out-str (println tree)))\r\n        (= :alternation (ffirst tree))\r\n        (t/transform abnf-transformer (first tree))\r\n\r\n        :else (rules->grammar-map (t/transform abnf-transformer tree))))))\r\n\r\n(defn build-parser [spec output-format]\r\n  (let [rule-tree (gll/parse abnf-parser :rulelist spec false)]\r\n    (if (instance? instaparse.gll.Failure rule-tree)\r\n      (throw-runtime-exception\r\n        \"Error parsing grammar specification:\\n\"\r\n        (with-out-str (println rule-tree)))\r\n      (let [rules (t/transform abnf-transformer rule-tree)\r\n            grammar-map (rules->grammar-map rules)\r\n            start-production (first (first (first rules)))] \r\n        {:grammar (cfg/check-grammar (red/apply-standard-reductions output-format grammar-map))\r\n         :start-production start-production\r\n         :output-format output-format}))))\r\n\r\n"]}