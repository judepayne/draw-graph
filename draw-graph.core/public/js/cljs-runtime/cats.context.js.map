{"version":3,"sources":["cats/context.cljc"],"mappings":";;;AA6BA,AAAA,AAAeA;AAEf,AAAA,AAAMC,AAEKC;AAFX,AAGW,AAAO,AAAA,AAACC,AAAQD;;AAG3B;;;;AAAA,AAAME,AAGHC;AAHH,AAIE,AAAA,AAAA,AAAA,AAAsBA;AAAtB,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAsBD;AAAtB;;AAAA,AAAA,AAAA,AAAsBA;AAAtB,AAAAE,AAAYC,AAAUH;;AAAtB;;;;AAAA,AAAAE,AAAYC,AAAUH;;;AAoBxB,AAAA;;;;AAAA,AAAAI,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAKG,AAAM,AAAA,AAAMX;AAAZ,AACE,AAAA,AAACC;;AADH;;AAEAD;;;AAPH,AAAA,AAAA,AAAMW,AAQFN;AARJ,AASG,AACE,AAAK,AAAA,AAAML;AACXA;;AAFF,AAIE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAYM,AAAAA,AAAaR,AAAAA,AAAAA,AAAAA,AAAAA;AACzB,AAACS,AAAeT;;AALlB,AAQE,AAACJ,AACA,AAAA,AAAA;;;;;;AAlBN,AAAA,AAAA,AAAMU;;AAAN,AAqBA,AAAA;;;AAAA,AAAAF,AAAMW;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAGDI;AAHL,AAIE,AAACC,AAAMd,AAAMa;;;AAJf,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA","names":["cats.context/*context*","cats.context/throw-illegal-argument","text","cljs.core.ex_info","cats.context/context?","v","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cats.protocols/Context","var_args","G__43665","cats.context/infer","js/Error","cats.protocols/Contextual","cats.protocols/-get-context","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","cats.context/get-current","seq43667","self__4777__auto__","cljs.core/seq","args","cljs.core.apply"],"sourcesContent":[";; Copyright (c) 2014-2016 Andrey Antukh <niwi@niwi.nz>\n;; Copyright (c) 2014-2016 Alejandro G\u00f3mez <alejandro@dialelo.com>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns cats.context\n  \"A cats context management.\"\n  (:require [cats.protocols :as p]))\n\n(def ^:dynamic *context* nil)\n\n(defn throw-illegal-argument\n  {:no-doc true :internal true}\n  [^String text]\n  #?(:cljs (throw (ex-info text {}))\n     :clj  (throw (IllegalArgumentException. text))))\n\n(defn context?\n  \"Returnt `true` if the provided value satisfies\n  the Context protocol.\"\n  [v]\n  (satisfies? p/Context v))\n\n#?(:clj\n   (defmacro with-context\n     \"Set current context to specific monad.\"\n     [ctx & body]\n     `(do\n        (when-not (context? ~ctx)\n          (throw-illegal-argument\n           \"The provided context does not implements Context.\"))\n        (binding [*context* ~ctx]\n          ~@body))))\n\n#?(:clj\n   (defmacro with-monad\n     \"Semantic alias for `with-context`.\"\n     [ctx & body]\n     `(with-context ~ctx\n        ~@body)))\n\n(defn infer\n  \"Given an optional value infer its context. If context is already set, it\n  is returned as is without any inference operation.\"\n  {:no-doc true}\n  ([]\n   (when (nil? *context*)\n     (throw-illegal-argument \"No context is set.\"))\n   *context*)\n  ([v]\n   (cond\n     (not (nil? *context*))\n     *context*\n\n     (satisfies? p/Contextual v)\n     (p/-get-context v)\n\n     :else\n     (throw-illegal-argument\n      (str \"No context is set and it can not be automatically \"\n           \"resolved from provided value\")))))\n\n(defn get-current\n  \"Deprecated alias to `infer`.\"\n  {:deprecated true}\n  [& args]\n  (apply infer args))\n\n\n"]}