{"version":3,"sources":["main/draw_graph/home.cljs"],"mappings":"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","names":["main.draw-graph.home/log","js/console","main.draw-graph.home/default-svg-text","main.draw-graph.home/local-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","main.draw-graph.examples/default-options","main.draw-graph.home/options","reagent.core/cursor","main.draw-graph.home/svg","main.draw-graph.home/processing","main.draw-graph.home/error","main.draw-graph.home/warn","main.draw-graph.home/local-dot","main.draw-graph.home/region","main.draw-graph.home/pan-zoom","main.draw-graph.file/file-reader-listen","e","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","main.draw-graph.home/update-ace","main.draw-graph.home/*produce-dot-locally*","main.draw-graph.home/find-region","cljs.core/deref","main.draw-graph.ip/region","x","cljs.core/reset!","err","js/console.log","main.draw-graph.home/url-Europe","main.draw-graph.home/url-US","main.draw-graph.home/lambda-url","G__52413","main.draw-graph.home/remove-empty-strings","m","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/complement","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/last","main.draw-graph.home/->csv1","main.draw-graph.home/->dot","main.draw-graph.home/dot->svg","data","main.draw-graph.home/post","url","json-data","promesa.core/bind","p__52416","map__52421","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","promesa.core/promise","status","body","promesa.core.catch$.cljs$core$IFn$_invoke$arity$2","kvlt.core/request!","G__52415","fexpr__52414","cljs.core/ex-data","main.draw-graph.home/->svg","fexpr__52424","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","main.draw-graph.home/reset-pan-zoom","js/svgPanZoom","main.draw-graph.home/put-svg","data*","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","main.draw-graph.home/put-error","message","main.draw-graph.home/put-warn","main.draw-graph.home/put-result","result","main.draw-graph.home/process-remotely","main.draw-graph.utils/clj->json","promesa.core/map","main.draw-graph.utils/json->clj","promesa.core.error.cljs$core$IFn$_invoke$arity$2","error","main.draw-graph.home/prom-viz","dot","G__52433","fexpr__52432","main.draw-graph.home/local-dot->svg","g","opts","dot'","clojure.string/replace","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","lib-draw-graph.processor/postprocess-svg","main.draw-graph.home/lambda-dot->svg","main.draw-graph.home/process-locally","in","e52437","lib-draw-graph.processor/csv->g","js/Error","g'","e52438","lib-draw-graph.processor/preprocess-graph","lib-draw-graph.processor/g->dot","main.draw-graph.home/get-svg","main.draw-graph.home/->js","var-name","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","main.draw-graph.home/invoke","seq52439","G__52440","cljs.core/first","cljs.core/next","self__4717__auto__","function-name","args","fun","js/eval","main.draw-graph.home/set-value","id","val","js/document","main.draw-graph.home/fixed-select","p1__52451#","seq52452","G__52453","G__52454","G__52455","path","a","tabIndex","options","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update-in","iter__4523__auto__","s__52464","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__52466","cljs.core/chunk-buffer","i__52465","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__52463","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","p1__52472#","main.draw-graph.home/text-input","p1__52473#","main.draw-graph.home/wide-text-input","main.draw-graph.home/myace","main.draw-graph.home/ace-editor","value","reagent.core/create-class","this","node","reagent.core/dom-node","ace-instance","js/ace","cljs.core/assoc","cursor","main.draw-graph.home/load-example-data","ex-fn","example","p1__52482#","main.draw-graph.home/example-dropdown","main.draw-graph.home/click-upload-csv-hidden","main.draw-graph.home/load-button","main.draw-graph.file/file-reader-put","p1__52483#","main.draw-graph.home/data-input","main.draw-graph.home/first-line","s","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","main.draw-graph.home/headers","reagent.ratom/make-reaction","main.draw-graph.home/node-label","p1__52485#","main.draw-graph.home/cluster-on","s__52487","b__52489","i__52488","iter__52486","p1__52490#","main.draw-graph.home/color-on","s__52492","b__52494","i__52493","iter__52491","main.draw-graph.home/tooltip","p1__52495#","main.draw-graph.home/url","s__52497","b__52499","i__52498","iter__52496","main.draw-graph.home/edgelabels","main.draw-graph.home/filtergraph","main.draw-graph.home/paths","main.draw-graph.home/elide-levels","main.draw_graph.home.fixed_select.cljs$core$IFn$_invoke$arity$variadic","main.draw-graph.home/show-roots","cljs.core/not","main.draw-graph.home/show-constraints","main.draw-graph.home/pp?","main.draw-graph.home/pp-clusters","main.draw-graph.home/anneal-bias","main.draw-graph.home/pp-cluster-sep","main.draw-graph.home/pp-font","main.draw-graph.home/cluster-edges-num","main.draw-graph.home/layout","main.draw-graph.home/rankdir","main.draw-graph.home/shape","main.draw-graph.home/fixedsize","main.draw-graph.home/splines","main.draw-graph.home/nodesep","main.draw-graph.home/ranksep","main.draw-graph.home/concentrate","main.draw-graph.home/overlap","main.draw-graph.home/scale","main.draw-graph.home/constraint","main.draw-graph.home/row","label","ctrl","tooltip","main.draw-graph.home/label-row","main.draw-graph.home/empty-row","main.draw-graph.home/toggle","k","v1","v2","fexpr__52516","main.draw-graph.home/disp-opts-state","main.draw-graph.home/disp-opts-hdr","state","main.draw-graph.home/left-disp-opts1","main.draw-graph.home/middle-disp-opts1","main.draw-graph.home/right-disp-opts1","main.draw-graph.home/left-disp-opts2","main.draw-graph.home/middle-disp-opts2","main.draw-graph.home/right-disp-opts2","main.draw-graph.home/go-button","main.draw-graph.home/go-button-loading","main.draw-graph.home/process-button","main.draw-graph.home/save-button","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","main.draw_graph.file.save_svg.cljs$core$IFn$_invoke$arity$variadic","main.draw-graph.home/controls","main.draw-graph.home/local-remote-state","main.draw-graph.home/local-remote","main.draw-graph.home/home-page","cljs.core/chunk-first"],"sourcesContent":["(ns main.draw-graph.home\n  (:require\n   [reagent.core             :refer [atom cursor create-class dom-node]]\n   [reagent.ratom            :refer [reaction make-reaction]]\n   [cljs.core.async          :refer [put! chan <! >!]]\n   [accountant.core          :as accountant]\n   [kvlt.core                :as kvlt]\n   [promesa.core             :as p]\n   [promesa.async-cljs       :refer-macros [async]]\n   [clojure.string           :as string]\n   [main.draw-graph.utils    :as utils]\n   [main.draw-graph.examples :as examples]\n   [lib-draw-graph.processor :as processor]\n   [lib-draw-graph.parser    :as parser]\n   [lib-draw-graph.clustered :as clstr]\n   [main.draw-graph.file     :as file]\n   [clojure.data.xml         :as xml]\n   [lib-draw-graph.svg       :as svg]\n   [main.draw-graph.ip       :as ip]\n;   [svg-pan-zoom :refer [svgPanZoom]]\n;   [\"viz.js/full.render.js\"  :as viz.js] ;; compilation error for this module\n   )\n  (:require-macros [cljs.core.async.macros :refer [go go-loop]]))\n\n\n\n(def log (.-log js/console))\n\n;; -------------------------\n;; State\n\n(def default-svg-text \"<div/>\")   ;; html to inject when svg is empty\n\n;; atom to store the page's state\n(def local-state (atom {:options examples/default-options\n                        :processing false\n                        :local-dot true\n                        :error \"\"\n                        :warn \"\"\n                        :svg default-svg-text\n                        :data \"\"\n                        :region nil}))\n;; various cursors over the atom\n(def options (cursor local-state [:options]))\n(def svg (cursor local-state [:svg]))\n(def processing (cursor local-state [:processing]))\n(def error (cursor local-state [:error]))\n(def warn (cursor local-state [:warn]))\n(def local-dot (cursor local-state [:local-dot]))\n(def region (cursor local-state [:region]))\n\n;; -------------------------\n;; Initialise the file reader\n\n(declare update-ace)\n(def pan-zoom (atom nil))\n\n\n(file/file-reader-listen (fn [e] \n                           (do (swap! local-state merge e)\n                               (update-ace))))\n\n\n;; -------------------------\n;; Processing\n\n;; determines whether dot is produced locally or in the lambda\n(def ^:dynamic *produce-dot-locally* true)\n\n\n(defn find-region []\n  (when (nil? @region)\n    (ip/region (fn [x] (reset! region x))\n               (fn [err] (js/console.log err)))))\n\n\n(def url-Europe \"https://0j6kjsk388.execute-api.eu-west-2.amazonaws.com/beta\")\n(def url-US \"https://u4jlt3tmhe.execute-api.us-east-1.amazonaws.com/beta\")\n\n\n(defn lambda-url []\n  (case @region\n    \"Europe\"  url-Europe\n    url-US))\n\n\n(defn remove-empty-strings\n  \"removes items from map where Value is an empty string\"\n  [m]\n  (into {} (filter (complement (comp #{\"\"} last)) m)))\n\n\n(defn ->csv1 []\n  {:display-options (remove-empty-strings (:options @local-state))\n   :data (:data @local-state)\n   :format-in \"csv\"\n   :format-out \"svg\"})\n\n\n(defn ->dot []\n  {:display-options (remove-empty-strings (:options @local-state))\n   :data (:data @local-state)})\n\n\n(defn dot->svg [data]\n  {:data data\n   :format-in \"dot\"\n   :format-out \"svg\"})\n\n\n(defn post [url json-data]\n  (p/alet [{:keys [status body]}\n           (p/await (p/catch (kvlt/request! {:url url\n                                             :method :post\n                                             :body json-data\n                                             :content-type :json\n                                             :accept :json})\n                        (fn [e] ((ex-data e) :type))))]\n          body))\n\n\n(defn ->svg [json-data]\n  ((partial post (lambda-url)) json-data))\n\n\n\n(defn reset-pan-zoom [] \n  (reset! pan-zoom nil)\n  (reset! pan-zoom (js/svgPanZoom. \"#item11\")))\n\n\n(defn put-svg [data]\n  (let [data* (if (= data \"null\") default-svg-text data)])\n  (reset! processing false)\n  (reset! svg data))\n\n\n(defn put-error [message]\n  (reset! processing false)\n  (reset! svg \"\")\n  (reset! error message))\n\n\n(defn put-warn [message]\n  (reset! processing false)\n  (reset! warn message))\n\n\n(defn put-result [result]  \n  (when (:svg result) (reset! svg (:svg result)))\n  (when (:error result) (reset! error (:error result)))\n  (when (:warn result) (reset! warn (:warn result)))\n  (reset! processing false))\n\n\n(defn process-remotely []\n  (->> \n   (->svg (utils/clj->json (->csv1)))\n   (p/map utils/json->clj)\n   (p/map put-result)\n   (p/error (fn [error] (put-error (.-message error))))))\n\n\n(defn prom-viz [dot]\n  (p/alet [result (p/await (p/catch\n                     ;          (viz.js/Viz dot)\n                               1\n                               (fn [e] ((ex-data e) :type))))]\n    result))\n\n\n(defn local-dot->svg [g opts dot]\n  ;; use viz.js\n  (let [dot' (string/replace dot #\"\\\\\\\\n\" \"\\n\")]\n    (->>\n     (prom-viz dot')\n     (p/map (partial processor/postprocess-svg g opts))\n     (p/map put-svg)\n     (p/error (fn [error] (put-error (.-message error)))))))\n\n\n(defn lambda-dot->svg [g opts dot]\n  ;; use AWS lambda\n  (->> (->svg (utils/clj->json (dot->svg dot)))\n           (p/map utils/json->clj)\n           (p/map :svg)\n           (p/map (partial processor/postprocess-svg g opts))\n           (p/map put-svg)\n           (p/error (fn [error] (put-error (.-message error))))))\n\n\n(defn process-locally []\n  (do\n    (reset! processing true)\n    (reset! error \"\")\n    (reset! warn \"\")\n    (let [in (->csv1)\n          opts (:display-options in)\n          g (try\n              (processor/csv->g in)\n              (catch js/Error e\n                (do\n                  (reset! svg \"\")\n                  (put-error (str  e)))))\n          g' (try\n               (processor/preprocess-graph g opts)\n               (catch js/Error e\n                (do\n                  (reset! svg \"\")\n                  (put-error (str  e)))))\n          dot (processor/g->dot in g')]\n      (if @local-dot\n        (local-dot->svg g' opts dot)\n        (lambda-dot->svg g' opts dot)))))\n\n\n(defn get-svg []\n  (if *produce-dot-locally*\n    (process-locally)\n    (process-remotely)))\n\n\n;; -------------------------\n;; Controls input\n\n;; ---- Utility functions\n\n;; thanks: https://stackoverflow.com/questions/23345663/call-a-clojurescript-function-by-string-name/30892955#30892955\n(defn ->js [var-name]\n      (-> var-name\n          (string/replace #\"/\" \".\")\n          (string/replace #\"-\" \"_\")))\n\n\n(defn invoke [function-name & args]\n      (let [fun (js/eval (->js function-name))]\n           (apply fun args)))\n\n\n(defn set-value [id val]\n  (if (some? val)\n    (set! (-> js/document (.getElementById id) (.-value)) val)))\n\n\n(defn fixed-select [path a tabIndex & options]\n  [:select\n   {:field :list :id (last path)\n    :values (get-in @a path)\n    :value (get-in @local-state path)\n    :tabIndex tabIndex\n    :on-change #(swap! local-state update-in path\n                       (fn [e] (-> % .-target .-value)))}\n   (for [x options] [:option {:key x} x])])\n\n\n(defn text-input [path a tabIndex]\n [:input\n   {:type :text :id (last path)\n    :value (get-in @a path)\n    :tabIndex tabIndex\n    :on-change #(swap! local-state update-in path\n                       (fn [e] (-> % .-target .-value)))}])\n\n\n(defn wide-text-input [path a tabIndex]\n [:input.wide\n   {:type :text :id (last path)\n    :value (get-in @a path)\n    :tabIndex tabIndex\n    :on-change #(swap! local-state update-in path\n                       (fn [e] (-> % .-target .-value)))}])\n\n\n;; ---- Main inputs\n\n(def myace (atom nil))\n\n\n(defn ace-editor [value]\n  (create-class\n   {:display-name \"ace editor\"\n\n    :component-did-mount\n    (fn [this]\n      (js/console.log \"mounted\")\n      (let [node (dom-node this)\n            ace-instance (.edit js/ace \"editor\")]\n        (reset! myace ace-instance)\n        (.setTheme ace-instance \"ace/theme/textmate\")\n        (.setMode (.. ace-instance -session) \"ace/mode/tcl\")\n        (.. ace-instance\n            (on \"change\" #(swap! value assoc :data (.getValue ace-instance))))))\n\n    :reagent-render\n    (fn []\n      [:div {:id \"editor\"} ])}))\n\n\n(defn update-ace []\n  (let [ace-instance @myace\n        cursor (.getCursorPositionScreen ace-instance)]\n    (.setValue ace-instance (:data @local-state) cursor)))\n\n\n\n\n(defn load-example-data [ex-fn]\n  (let [example (invoke ex-fn)]\n    (swap! local-state assoc :options (:options example))\n    (swap! local-state merge {:data (:data example) :data-filename \"\"})))\n\n\n(defn example-dropdown []\n  [:select {:tabIndex 1\n            :on-change #(do (load-example-data (.. % -target -value))\n                            (update-ace))}  \n   [:option {:value nil} \"-\"]  \n   [:option {:value \"main.draw-graph.examples/example1\"} \"Friendship graph\"]\n   [:option {:value \"main.draw-graph.examples/example2\"} \"Two facing trees\"]\n   [:option {:value \"main.draw-graph.examples/example3\"} \"Two trees\"]\n   [:option {:value \"main.draw-graph.examples/example4\"} \"CERN email connections\"]\n   [:option {:value \"main.draw-graph.examples/example5\"} \"Circular tree\"]\n   [:option {:value \"main.draw-graph.examples/example6\"} \"cluster layout\"]\n   [:option {:value \"main.draw-graph.examples/example7\"} \"complex cluster layout\"]\n   [:option {:value \"main.draw-graph.examples/example8\"} \"Architecture diagram\"]\n   [:option {:value \"main.draw-graph.examples/example9\"} \"Complex architecture diagram\"]]) \n\n\n(defn click-upload-csv-hidden [e]\n  ;;click the hidden file input button\n  ;; need for the two buttons with input[type=\"file'] because you\n  ;; can't satisfactorily style an input[type=\"file\"] button\n  (.click (.getElementById js/document \"upload-csv-hidden\")))\n\n\n(defn load-button []\n  [:div\n   [:button {:id \"upload-csv\"\n             :tabIndex 2\n             :on-click click-upload-csv-hidden\n             :title \"Upload a csv in 'csv1' format. see help\"}\n    \"Load csv\"]\n   [:input {:id \"upload-csv-hidden\"\n            :type \"file\"\n            :accept \".csv\"\n            :on-change file/file-reader-put}]])\n\n\n(defn data-input [value]\n  [:div\n   [:textarea {\n               :id \"tweak-box\"\n               :tabIndex 3\n               :rows 20\n  ;            :cols 42\n               :wrap \"soft\"\n               :spellCheck \"false\"\n               :autoComplete \"on\"\n               :autoCapitalize \"off\"\n               :autoCorrect \"off\"\n               :value (:data @value)\n               :on-change #(swap! value\n                                  assoc\n                                  :data\n                                  (-> % .-target .-value))}]])\n\n\n;; For the dynamic dropdowns\n\n;; -- Cluster-on dropdown needs to be more dynamic--\n(defn first-line [s]\n  (js->clj (.split (subs (aget (.split s \"\\n\") 0) 2) \":\")))\n\n\n;; a reaction to capture the headers in the data file\n(def headers\n  (reaction (first-line (:data @local-state))))\n\n\n;; ----end----- For the dynamic dropdowns\n\n\n;; Controls: MUST be laid out in TAB ORDER\n\n(defn node-label [] (text-input [:options :label] local-state 4))\n\n\n(defn cluster-on []\n  [:select.form-control\n   {:field :list :id :cluster-on\n    :value (:cluster-on @options)\n    :tabIndex 5\n    :on-change #(swap! local-state update-in [:options :cluster-on]\n                       (fn [e] (-> % .-target .-value)))}\n   (if (= \"\" (first @headers))\n     [:option {:key \"none\" :value \"\"} \"-\"]\n     (cons [:option {:key \"none\" :value \"\"} \"-\"]\n           (for [x @headers] [:option {:key x} x])))])\n\n\n(defn color-on []\n  [:select.form-control\n   {:field :list :id :color-on\n    :value (:color-on @options)\n    :tabIndex 6\n    :on-change #(swap! local-state update-in [:options :color-on]\n                       (fn [e] (-> % .-target .-value)))}\n   (if (= \"\" (first @headers))\n     [:option {:key \"none\" :value \"\"} \"-\"]\n     (cons [:option {:key \"none\" :value \"\"} \"-\"]\n           (for [x @headers] [:option {:key x} x])))])\n\n\n(defn tooltip [] (text-input [:options :tooltip] local-state 7))\n\n\n(defn url []\n  [:select.form-control\n   {:field :list :id :url\n    :value (:url @options)\n    :tabIndex 8\n    :on-change #(swap! local-state update-in [:options :url]\n                       (fn [e] (-> % .-target .-value)))}\n   (if (= \"\" (first @headers))\n     [:option {:key \"none\" :value \"\"} \"-\"]\n     (cons [:option {:key \"none\" :value \"\"} \"-\"]\n           (for [x @headers] [:option {:key x} x])))])\n\n\n(defn edgelabels [] (text-input [:options :edge-label] local-state 9))\n\n\n(defn filtergraph [] (text-input [:options :filter-graph] local-state 10))\n\n\n(defn paths [] (wide-text-input [:options :paths] local-state 11))\n\n\n(defn elide-levels [] (fixed-select [:options :elide] local-state 12 \"0\" \"1\" \"2\" \"3\" \"4\") )\n\n\n(defn show-roots []\n  [:input {:type :checkbox :id :show-roots?\n           :checked (:show-roots? @options)\n           :tabIndex 13\n           :on-change #(swap! local-state update-in [:options :show-roots?] not)}])\n\n\n(defn show-constraints []\n  [:input {:type :checkbox :id :show-constraints?\n           :checked (:show-constraints? @options)\n           :tabIndex 14\n           :on-change #(swap! local-state update-in [:options :show-constraints?] not)}])\n\n\n(defn pp? []\n  [:input {:type :checkbox :id :pp?\n           :checked (-> @options :post-process?)\n           :tabIndex 15\n           :on-change #(swap! local-state update-in\n                              [:options :post-process?] not)}])\n\n\n(defn pp-clusters []\n  [:div\n   [:a.lbl (str \\u2191)]\n   [:input {:type :checkbox :id :pp-clusters-top?\n            :checked (-> @options :pp-clusters :y)\n            :tab-index 16\n            :on-change #(swap! local-state update-in\n                               [:options :pp-clusters :y] not)}]\n   [:a.lbl (str \\u00A0 \\u00A0 \\u00A0 \\u00A0 \\u2193)]\n   [:input {:type :checkbox :id :pp-clusters-bottom?\n            :checked (-> @options :pp-clusters :h)\n            :tabIndex 17\n            :on-change #(swap! local-state update-in\n                               [:options :pp-clusters :h] not)}]\n   [:a.lbl (str \\u00A0 \\u00A0 \\u2190)]\n   [:input {:type :checkbox :id :pp-clusters-left?\n            :checked (-> @options :pp-clusters :x)\n            :tabIndex 18\n            :on-change #(swap! local-state update-in\n                               [:options :pp-clusters :x] not)}]\n   [:a.lbl (str \\u00A0 \\u00A0 \\u2192)]\n   [:input {:type :checkbox :id :pp-clusters-right?\n            :checked (-> @options :pp-clusters :w)\n            :tabIndex 19\n            :on-change #(swap! local-state update-in\n                               [:options :pp-clusters :w] not)}]])\n\n\n(defn anneal-bias [] (fixed-select [:options :pp-anneal-bias] local-state 20\n                                   \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"10\" \"11\" \"12\"))\n\n\n(defn pp-cluster-sep [] (text-input [:options :pp-cluster-sep] local-state 21))\n\n\n(defn pp-font [] (text-input [:options :pp-font] local-state 22))\n\n\n(defn cluster-edges-num []\n  (fixed-select [:options :num-cluster-edges] local-state 23\n                                   \"1\" \"2\" \"4\" \"5\" \"6\" \"9\" \"12\" \"16\"))\n\n\n(defn layout [] (fixed-select [:options :layout] local-state 24\n                              \"dot\" \"neato\" \"fdp\" \"circo\" \"twopi\"))\n\n(defn rankdir [] (fixed-select [:options :rankdir] local-state 25 \"LR\" \"TB\" \"RL\" \"BT\"))\n\n\n(defn shape [] (fixed-select [:options :shape] local-state 26\n                             \"ellipse\" \"rect\" \"circle\" \"egg\" \"diamond\" \"octagon\" \"square\"\n                             \"folder\" \"cylinder\" \"plaintext\"))\n\n\n(defn fixedsize [] (fixed-select [:options :fixedsize] local-state 27\n                                  \"true\" \"false\" \"shape\"))\n\n\n(defn splines [] (fixed-select [:options :splines] local-state 28\n                               \"line\" \"spline\" \"none\" \"polyline\" \"ortho\" \"curved\"))\n\n\n(defn nodesep [] (text-input [:options :nodesep] local-state 29))\n\n\n(defn ranksep [] (text-input [:options :ranksep] local-state 30))\n\n\n(defn concentrate [] (fixed-select [:options :concentrate] local-state 31\n                                   \"false\" \"true\"))\n\n\n(defn overlap [] (fixed-select [:options :overlap] local-state 32\n                               \"true\" \"false\" \"scale\" \"scalexy\" \"compress\" \"vpsc\"\n                               \"orthoxy\" \"ipsep\"))\n\n\n(defn scale [] (text-input [:options :scale] local-state 33))\n\n\n(defn constraint [] (fixed-select [:options :constraint] local-state 34 \"true\" \"false\"))\n\n\n\n;; ---- Options layout\n\n(defn row [label ctrl tooltip]\n  [:div [:div.lbl label]\n        [:div {:class \"tooltip\"} ctrl\n         [:span {:class \"tooltiptext\"} tooltip]]])\n\n\n(defn label-row [label]\n  [:div [:a.lbl.row-sep label]])\n\n\n(defn empty-row []\n  [:div [:a.lbl.row-label (str \\u00A0)]])  ;; \\00A0 = &nbsp\n\n\n(defn toggle [a k v1 v2]\n    (if (= (@a k) v1)\n      (swap! a assoc k v2)\n      (swap! a assoc k v1)))\n\n\n(def disp-opts-state\n  (atom {:local-class \"hidden\"\n         :wrapper-class \"wrapper controls wrapper-collapsed\"\n         :lbl \"show\"}))\n\n\n(defn disp-opts-hdr [state]\n  (fn []\n    [:div.item6\n     [:div.opts-hdr\n      {:on-click #(do\n                    (toggle state :lbl \"show\" \"hide\")\n                    (toggle state :local-class \"hidden\" \"visible\")\n                    (toggle state :wrapper-class \"wrapper controls wrapper-collapsed\"\n                            \"wrapper controls\")\n                    (update-ace))}\n      \"Options\" [:a.lbl.show-hide (:lbl @state)]]]))\n\n\n(defn left-disp-opts1 [state]\n  (fn []\n    [:div.controls1l {:class (:local-class @state)}\n     (label-row \"draw-graph\")\n     (row \"node labels\" [node-label] \"The header key to use for the node label\")\n     (row \"node tooltips\" [tooltip] \"The header key to use for tooltips embedded in the final svg\")\n     (row \"filter graph\" [filtergraph] \"Filters the graph - good for zooming in\")\n     (row \"elide lower levels\" [elide-levels] \"Hide <n> lowest levels in the graph\")\n     (row \"post process\" [pp?] \"Post Procees the svg: anneal clusters and font replacement\")\n     (row \"anneal cluster separation\" [pp-cluster-sep] \"How close clusters are allowed to get in pixels during annealing\")\n]))\n\n\n(defn middle-disp-opts1 [state]\n  (fn []\n    [:div.controls1m {:class (:local-class @state)} \n     (empty-row)\n     (row \"cluster on\" [cluster-on] \"The header key to cluster the graph on\")\n     (row \"node URL\" [url] \"The header key to use as an embedded link in the final svg\")\n     (row \"paths\" [paths] \"Filter the graph by paths through it. see help page.\")\n     (row \"highlight roots\" [show-roots] \"Highlights the roots of the graph\")\n     (row \"anneal expand clusters\" [pp-clusters] \"Controls which dimensions of clusters are expanded in post processing\")\n     (row \"font\" [pp-font] \"The name of the replacement font to use in post processing\")    \n     (empty-row) (empty-row)\n]))\n\n\n(defn right-disp-opts1 [state]\n  (fn []\n    [:div.controls1r {:class (:local-class @state)} \n     (empty-row)\n     (row \"color on\" [color-on] \"The header key to vary node coloration by\")\n     (row \"edges labels\" [edgelabels] \"Edge meta key to use as an edge label\")\n     (empty-row) (empty-row)\n     (row \"highlight constraints\" [show-constraints] \"Highlights all (rank) constraining edges, including ordinarily invisible generated cluster edges. For debugging layouts\")\n     (row \"anneal bias\" [anneal-bias] \"Favors left-right cluster expansion by this factor in TB/ BT layouts, ditto for top bottom in LR/ RL layouts\")\n     (row \"cluster edges num\" [cluster-edges-num] \"number of invisible edges to create between nodes in two clusters that have a cluster edge. See Help page for further information.\")\n]))\n\n(defn left-disp-opts2 [state]\n  (fn []\n    [:div.controls2l {:class (:local-class @state)} \n     (label-row \"graphviz\")     \n     (row \"layout\" [layout] \"The Graphviz layout algorithm\")\n     (row \"(node) fixedsize\" [fixedsize] \"Nodes fixed in size or varied according to contents\")\n     (row \"nodesep\" [nodesep] \"Separation between nodes in inches\")     \n     (row \"overlap\" [overlap] \"Determines how Graphviz removes overlapping edges\")\n     \n]))\n\n(defn middle-disp-opts2 [state]\n  (fn []\n    [:div.controls2m {:class (:local-class @state)} \n     (empty-row)\n     (row \"rankdir\" [rankdir] \"The layout direction e.g. TB mean Top Bottom etc\")\n     (row \"splines\" [splines] \"Controls the form of the edges in the graph\")\n     (row \"ranksep\" [ranksep] \"Separation between ranks in inches\")\n     (row \"scale\" [scale] \"Scales the graph up by this factor\")   \n     \n]))\n\n(defn right-disp-opts2 [state]\n  (fn []\n    [:div.controls2r {:class (:local-class @state)} \n     (empty-row)\n     (row \"node shape\" [shape] \"The shape used for nodes\")\n     (empty-row) (empty-row)\n     (row \"concentrate (edges)\" [concentrate] \"Merge edges with a common end point\")\n     (row \"edge constraints\" [constraint] \"Sets whether edges influence rank in dot layouts\")\n\n]))\n\n\n\n\n;; ---- Control buttons\n;; Define two different go button states\n;; For normal state before a request is sent off\n(defn go-button []\n  [:button {:id \"go-button\" :on-click get-svg}\n   \"draw-graph\"])\n\n;; and while the request is being processed\n(defn go-button-loading []\n  [:button {:id \"go-button\"}\n   [:i.fa.fa-circle-o-notch.fa-spin] \" processing\"])\n\n;; process button flips between the 2 states\n(defn process-button []\n  (fn []\n    (if @processing\n        [go-button-loading] [go-button])))\n\n(defn save-button []\n  (fn []\n    (if (not= @svg default-svg-text)\n      [:button {:id \"save-button\"\n                :on-click #(if (not= @svg default-svg-text)\n                             (file/save-svg svg (:data-filename @local-state)\n                                            (:layout @options)) (:cluster-on @options))}\n       \"Save image\"]\n      [:button {:id \"save-button-disabled\"} \"Save image\"])))\n\n;; -------------------------\n;; Controls\n\n(defn controls [state]\n  (fn []\n    [:div {:class (:wrapper-class @state)}\n     [:div.item3\n      [:div [load-button]]\n      [:div \"or enter the data\"]]\n     [:div.item4 [:label {:id \"file-name\"} (:data-filename @local-state)]]\n     [:div.item5 {:id \"editor\"}\n      [ace-editor local-state]\n      ] ;;need to get id editor in earlier .getDomNode current node perhaps\n     [disp-opts-hdr state]\n     [left-disp-opts1 state]\n     [middle-disp-opts1 state]\n     [right-disp-opts1 state]\n     [left-disp-opts2 state]\n     [middle-disp-opts2 state]\n     [right-disp-opts2 state]\n     [:div.item9 [process-button]]\n     [:div.item10 [save-button]]\n     [:div#item11 {:dangerouslySetInnerHTML {:__html @svg}}]]))\n\n\n;; -------------------------\n;; Local remote\n\n(def local-remote-state\n  (atom {:lbl \"  local\"\n         :class \"local\"}))\n\n(defn local-remote [state]\n  (fn []\n    [:a.local-remote\n     {:on-click #(do\n                   (toggle state :lbl \"  local\" \"  remote\")\n                   (toggle state :class \"local\" \"remote\")\n                   (toggle local-state :local-dot true false))}\n     [:span {:class (:class @state)} (:lbl @state)]]))\n\n;; -------------------------\n;; Page\n\n\n\n(defn home-page []\n  (find-region)\n  [:div.page\n   [:link {:href \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" :rel \"stylesheet\"}]\n   [:div.wrapper-banner\n    [:div.site-banner.banner1 \"draw-graph\" [local-remote local-remote-state]]\n    [:div.banner2.controls \"Examples  \" [example-dropdown]]]\n   ;[:p {:font-size \"0.9em;\"} \"Network diagrams from csv files\"]\n   [:div.main [controls disp-opts-state]]\n;   @local-state\n   [:div.warn @warn]\n   [:div.error @error]])\n"]}