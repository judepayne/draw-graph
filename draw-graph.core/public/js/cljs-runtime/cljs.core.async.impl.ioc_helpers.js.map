{"version":3,"sources":["cljs/core/async/impl/ioc_helpers.cljs"],"mappings":"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","names":["cljs.core.async.impl.ioc-helpers/FN-IDX","cljs.core.async.impl.ioc-helpers/STATE-IDX","cljs.core.async.impl.ioc-helpers/VALUE-IDX","cljs.core.async.impl.ioc-helpers/BINDINGS-IDX","cljs.core.async.impl.ioc-helpers/EXCEPTION-FRAMES","cljs.core.async.impl.ioc-helpers/CURRENT-EXCEPTION","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/aset-object","arr","idx","o","cljs.core.async.impl.ioc-helpers/aget-object","cljs.core.async.impl.ioc-helpers/finished?","state-array","cljs.core/keyword-identical?","cljs.core.async.impl.ioc-helpers/fn-handler","f","js/cljs","js/cljs.core","js/cljs.core.async","js/cljs.core.async.impl","js/cljs.core.async.impl.ioc-helpers","js/cljs.core.async.impl.ioc-helpers.t_cljs$core$async$impl$ioc_helpers33721","cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers33721","_33723","meta33722","cljs.core/PROTOCOL_SENTINEL","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","cljs.core.async.impl.ioc-helpers/->t_cljs$core$async$impl$ioc_helpers33721","_","cljs.core.async.impl.ioc-helpers/run-state-machine","state","fexpr__33745","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","e33749","js/Object","ex","cljs.core.async.impl.ioc-helpers/take!","blk","c","temp__5733__auto__","cb","x","statearr-33750","statearr-33755","cljs.core/deref","cljs.core.async.impl.ioc-helpers/put!","val","ret-val","statearr-33756","statearr-33757","cljs.core.async.impl.ioc-helpers/return-chan","value","this__4439__auto__","k__4440__auto__","this__4441__auto__","k33764","else__4442__auto__","G__33771","cljs.core/Keyword","catch-block","catch-exception","finally-block","continue-block","prev","cljs.core.get","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce","ret__4461__auto__","p__33774","vec__33775","k__4462__auto__","cljs.core.nth","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__33763","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","coll__4436__auto__","cljs.core/hash-unordered-coll","this33765","other33766","cljs.core._EQ_","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__33807","expr__33808","cljs.core.assoc","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","cljs.core.async.impl.ioc-helpers/ExceptionFrame","this__4482__auto__","cljs.core/List","writer__4483__auto__","G__33767","extmap__4478__auto__","G__33824","cljs.core/record?","cljs.core.async.impl.ioc-helpers/->ExceptionFrame","cljs.core.async.impl.ioc-helpers/map->ExceptionFrame","cljs.core.async.impl.ioc-helpers/add-exception-frame","statearr-33825","cljs.core.async.impl.ioc-helpers/process-exception","exception-frame","exception","and__4174__auto__","cljs.core/not","statearr-33829","statearr-33832","statearr-33836","statearr-33841","statearr-33848","js/Error"],"sourcesContent":["(ns cljs.core.async.impl.ioc-helpers\n  (:require [cljs.core.async.impl.protocols :as impl])\n  (:require-macros [cljs.core.async.impl.ioc-macros :as ioc]))\n\n(def ^:const FN-IDX 0)\n(def ^:const STATE-IDX 1)\n(def ^:const VALUE-IDX 2)\n(def ^:const BINDINGS-IDX 3)\n(def ^:const EXCEPTION-FRAMES 4)\n(def ^:const CURRENT-EXCEPTION 5)\n(def ^:const USER-START-IDX 6)\n\n(defn aset-object [arr idx o]\n  (aget arr idx o))\n\n(defn aget-object [arr idx]\n  (aget arr idx))\n\n\n(defn finished?\n  \"Returns true if the machine is in a finished state\"\n  [state-array]\n  (keyword-identical? (aget state-array STATE-IDX) :finished))\n\n(defn- fn-handler\n  [f]\n  (reify\n   impl/Handler\n   (active? [_] true)\n   (blockable? [_] true)\n   (commit [_] f)))\n\n\n(defn run-state-machine [state]\n  ((aget-object state FN-IDX) state))\n\n(defn run-state-machine-wrapped [state]\n  (try\n    (run-state-machine state)\n    (catch js/Object ex\n      (impl/close! ^not-native (aget-object state USER-START-IDX))\n      (throw ex))))\n\n(defn take! [state blk ^not-native c]\n  (if-let [cb (impl/take! c (fn-handler\n                                   (fn [x]\n                                     (ioc/aset-all! state VALUE-IDX x STATE-IDX blk)\n                                     (run-state-machine-wrapped state))))]\n    (do (ioc/aset-all! state VALUE-IDX @cb STATE-IDX blk)\n        :recur)\n    nil))\n\n(defn put! [state blk ^not-native c val]\n  (if-let [cb (impl/put! c val (fn-handler (fn [ret-val]\n                                             (ioc/aset-all! state VALUE-IDX ret-val STATE-IDX blk)\n                                             (run-state-machine-wrapped state))))]\n    (do (ioc/aset-all! state VALUE-IDX @cb STATE-IDX blk)\n        :recur)\n    nil))\n\n(defn return-chan [state value]\n  (let [^not-native c (aget state USER-START-IDX)]\n           (when-not (nil? value)\n             (impl/put! c value (fn-handler (fn [] nil))))\n           (impl/close! c)\n           c))\n\n(defrecord ExceptionFrame [catch-block\n                           ^Class catch-exception\n                           finally-block\n                           continue-block\n                           prev])\n\n(defn add-exception-frame [state catch-block catch-exception finally-block continue-block]\n  (ioc/aset-all! state\n                 EXCEPTION-FRAMES\n                 (->ExceptionFrame catch-block\n                                   catch-exception\n                                   finally-block\n                                   continue-block\n                                   (aget-object state EXCEPTION-FRAMES))))\n\n(defn process-exception [state]\n  (let [exception-frame (aget-object state EXCEPTION-FRAMES)\n        catch-block (:catch-block exception-frame)\n        catch-exception (:catch-exception exception-frame)\n        exception (aget-object state CURRENT-EXCEPTION)]\n    (cond\n     (and exception\n          (not exception-frame))\n     (throw exception)\n\n     (and exception\n          catch-block\n          (or (= :default catch-exception)\n              (instance? catch-exception exception)))\n     (ioc/aset-all! state\n                    STATE-IDX\n                    catch-block\n                    VALUE-IDX\n                    exception\n                    CURRENT-EXCEPTION\n                    nil\n                    EXCEPTION-FRAMES\n                    (assoc exception-frame\n                      :catch-block nil\n                      :catch-exception nil))\n\n\n     (and exception\n          (not catch-block)\n          (not (:finally-block exception-frame)))\n\n     (do (ioc/aset-all! state\n                        EXCEPTION-FRAMES\n                        (:prev exception-frame))\n         (recur state))\n\n     (and exception\n          (not catch-block)\n          (:finally-block exception-frame))\n     (ioc/aset-all! state\n                    STATE-IDX\n                    (:finally-block exception-frame)\n                    EXCEPTION-FRAMES\n                    (assoc exception-frame\n                      :finally-block nil))\n\n     (and (not exception)\n          (:finally-block exception-frame))\n     (do (ioc/aset-all! state\n                        STATE-IDX\n                        (:finally-block exception-frame)\n                        EXCEPTION-FRAMES\n                        (assoc exception-frame\n                          :finally-block nil)))\n\n     (and (not exception)\n          (not (:finally-block exception-frame)))\n     (do (ioc/aset-all! state\n                   STATE-IDX\n                   (:continue-block exception-frame)\n                   EXCEPTION-FRAMES\n                   (:prev exception-frame)))\n\n     :else (throw (js/Error. \"No matching clause\")))))\n"]}