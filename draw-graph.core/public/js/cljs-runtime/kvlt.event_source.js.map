{"version":3,"sources":["kvlt/event_source.cljc"],"mappings":";;;;AAIA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA;;;;;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAUS;AAAVR,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAOE;AAAKE,AAAOC;AAAZ,AAAmBD;;AAPrB,AAAAN,AAAAL,AAAAE,AAAAC,AAAAC;;;AASA,AAAAM,AAAA,AAAA,AAAkCG,AAAEC;AAApC,AAAuCA;;AACvC,AAAAJ,AAAA,AAAA,AAAkCG,AAAEC;AAApC,AAAuC,AAACC,AAAgBD;;AACxD,AAAAJ,AAAA,AAAA,AAAkCG,AAAEC;AAApC,AAAuC,AAACE,AAAWF","names":["js/kvlt","js/kvlt.event-source","js/kvlt.event-source.format-event","method-table__4613__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__40309","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","kvlt.event-source/format-event","format","event","_","e","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","kvlt.platform.util/parse-json"],"sourcesContent":["(ns kvlt.event-source\n  (:require [#?(:clj clojure.edn :cljs cljs.reader) :as edn]\n            [kvlt.platform.util :refer [parse-json]]))\n\n(defmulti format-event\n  \"Dispatching on the (first) `format` param (corresponding\n  to [[kvlt.core/event-source!]]'s `:format` param), transform an incoming event\n  prior to placement on the source's channel.\n\n  Implementations receive (and are expected to return the event map) not only\n  its body.\"\n  (fn [format event] format))\n\n(defmethod format-event :default [_ e] e)\n(defmethod format-event :edn     [_ e] (edn/read-string e))\n(defmethod format-event :json    [_ e] (parse-json e))\n"]}