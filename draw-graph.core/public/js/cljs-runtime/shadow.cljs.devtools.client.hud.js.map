{"version":3,"sources":["shadow/cljs/devtools/client/hud.cljs"],"mappings":"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","names":["js/goog.define","shadow.cljs.devtools.client.hud/show-progress","shadow.cljs.devtools.client.hud/show-warnings","shadow.cljs.devtools.client.hud/show-errors","shadow.cljs.devtools.client.hud/open-file","file","line","column","js/console.log","req","shadow.xhr.chan","shadow.cljs.devtools.client.env/get-url-base","c__33891__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__33892__auto__","switch__33701__auto__","state_38744","state_val_38745","statearr-38747","cljs.core.async.impl.ioc-helpers/take!","inst_38698","inst_38709","inst_38710","cljs.core/not","statearr-38749","statearr-38750","statearr-38751","statearr-38753","inst_38712","inst_38713","inst_38714","inst_38715","cljs.core/PROTOCOL_SENTINEL","inst_38716","statearr-38754","statearr-38755","inst_38736","statearr-38756","statearr-38757","inst_38726","cljs.core.apply","cljs.core/hash-map","statearr-38759","inst_38699","statearr-38760","statearr-38761","statearr-38762","inst_38720","statearr-38763","statearr-38764","inst_38738","cljs.core.async.impl.ioc-helpers/return-chan","inst_38729","inst_38730","cljs.core.get","inst_38731","statearr-38765","statearr-38766","statearr-38767","inst_38734","statearr-38768","statearr-38769","inst_38723","statearr-38770","statearr-38771","statearr-38772","state-machine__33702__auto__","ret-value__33703__auto__","result__33704__auto__","cljs.core/keyword-identical?","e38774","js/Object","ex__33705__auto__","statearr-38775","cljs.core.async.impl.ioc-helpers/process-exception","state__33893__auto__","statearr-38776","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/console.warn","var_args","G__38779","shadow.cljs.devtools.client.hud/dom-insert","js/Error","node","shadow.cljs.devtools.client.hud.dom_insert","js/document.body","where","el","shadow.dom/dom-node","id","cljs.core/seq","temp__5739__auto__","x","shadow.dom.by_id","shadow.dom/remove","shadow.dom.append","shadow.cljs.devtools.client.hud/hud-id","shadow.cljs.devtools.client.hud/load-id","shadow.cljs.devtools.client.hud/logo-svg","cljs.core/Delay","s-path","shadow.dom.svg","shadow.cljs.devtools.client.hud/load-start","cljs.core/deref","shadow.cljs.devtools.client.hud/load-end-success","container-el","shadow.animate/start","shadow.animate.transition","state_38796","state_val_38797","inst_38784","inst_38786","inst_38787","inst_38788","inst_38789","inst_38790","cljs.core/PersistentHashMap","inst_38791","statearr-38798","inst_38793","inst_38794","statearr-38799","statearr-38800","e38801","statearr-38803","statearr-38805","cljs.core.async/timeout","shadow.cljs.devtools.client.hud/load-end","shadow.cljs.devtools.client.hud/hud-hide","d","shadow.cljs.devtools.client.hud/source-line-styles","shadow.cljs.devtools.client.hud/source-highlight-styles","cljs.core.assoc","shadow.cljs.devtools.client.hud/source-line-html","start-idx","lines","styles","iter__4582__auto__","s__38809","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__38811","cljs.core/chunk-buffer","i__38810","vec__38812","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__38808","cljs.core/chunk-rest","vec__38816","cljs.core/first","cljs.core/cons","cljs.core/rest","idx","text","cljs.core.map_indexed","cljs.core/vector","goog.string/format","shadow.cljs.devtools.client.hud/sep-length","G__38820","shadow.cljs.devtools.client.hud/sep-line","shadow.cljs.devtools.client.hud.sep_line","label","offset","sep-len","js/Math.max","len","sep","c","cljs.core.repeat","clojure.string.join","p__38823","map__38824","shadow.cljs.devtools.client.hud/file-link","resource-name","warning","e","shadow.dom.ev_stop","p__38827","map__38828","shadow.cljs.devtools.client.hud/html-for-warning","msg","source-excerpt","map__38830","before","after","arrow-idx","or__4185__auto__","p__38837","map__38844","shadow.cljs.devtools.client.hud/hud-warnings","type","info","map__38846","sources","sources-with-warnings","cljs.core.remove","p1__38836#","cljs.core.filter","cljs.core.into","s__38850","xs__6292__auto__","map__38855","iterys__4578__auto__","s__38852","b__38854","i__38853","iter__38851","fs__4579__auto__","cljs.core.concat","iter__38849","warnings","p__38860","map__38861","shadow.cljs.devtools.client.hud/hud-error","report","shadow.cljs.devtools.client.hud/connection-error-id","shadow.cljs.devtools.client.hud/connection-error-clear!","shadow.cljs.devtools.client.hud/connection-error","shadow.cljs.devtools.client.hud/load-failure","error","task","remaining","js/console.error","cljs.core/chunk-first"],"sourcesContent":["(ns shadow.cljs.devtools.client.hud\n  (:require\n    [shadow.dom :as dom]\n    [shadow.xhr :as xhr]\n    [shadow.animate :as anim]\n    [shadow.cljs.devtools.client.env :as env]\n    [cljs.core.async :as async :refer (go)]\n    [goog.string.format]\n    [goog.string :refer (format)]\n    [clojure.string :as str]))\n\n(goog-define show-progress true)\n\n(goog-define show-warnings true)\n\n(goog-define show-errors true)\n\n(defn open-file [file line column]\n  (js/console.log \"opening file\" file line column)\n\n  (let [req\n        (xhr/chan :POST\n          (str (env/get-url-base) \"/api/open-file\")\n          {:file file\n           :line line\n           :column column}\n          {:with-credentials false\n           :body-only true})]\n    (go (when-some [{:keys [exit] :as result} (<! req)]\n          (when-not (zero? exit)\n            (js/console.warn \"file open failed\" result))\n          ))))\n\n(defn dom-insert\n  ([node]\n   (dom-insert js/document.body node))\n  ([where node]\n   (let [el (dom/dom-node node)\n         id (.-id el)]\n     (assert (seq id))\n     (when-some [x (dom/by-id id)]\n       (dom/remove x))\n     (dom/append where el)\n     )))\n\n(def hud-id \"shadow-hud-container\")\n\n(def load-id \"shadow-hud-loading-container\")\n\n(def logo-svg\n  (delay\n    (let [s-path\n          \"M247.183941,141.416413 C247.183941,74.7839971 148.383423,78.9723529 148.383423,141.416413 C148.383423,203.860473 265.090698,171.864644 265.090698,248.900057 C265.090698,325.93547 135,325.851749 135,251.708304\"]\n      (dom/svg\n        {:id \"shadow-cljs-logo\"\n         :version \"1.1\"\n         :viewBox \"0 0 400 400\"\n         :style {:display \"block\"}\n         :height \"60px\"\n         :width \"60px\"}\n        [:title \"shadow-cljs\"]\n        [:defs\n         [:mask#shadow-cljs-logo-mask {:fill \"#fff\"}\n          [:circle {:r \"200\" :cy \"200\" :cx \"200\"}]]]\n        [:g\n         {:fill-rule \"evenodd\"\n          :fill \"none\"\n          :stroke-width \"0\"\n          :stroke \"none\"\n          :mask \"url(#shadow-cljs-logo-mask)\"}\n\n         [:g.circles\n          [:circle.blue {:r \"200\" :cy \"200\" :cx \"200\" :fill \"#4F80DF\"}]\n          [:circle.light-blue {:r \"71.5\" :cy \"200\" :cx \"370\" :fill \"#89B4FF\"}]\n          [:circle.dark-green {:r \"180\" :cy \"360\" :cx \"60\" :fill \"#40B400\"}]\n          [:circle.light-green {:r \"129\" :cy \"320\" :cx \"280\" :fill \"#76E013\"}]\n          [:animateTransform\n           {:attributeType \"xml\"\n            :attributeName \"transform\"\n            :type \"rotate\"\n            :from \"0 200 200\"\n            :to \"360 200 200\"\n            :dur \"3s\"\n            :repeatCount \"indefinite\"}]]\n\n         ;; S shadow\n         [:g {:transform \"translate(10,10)\"}\n          [:path\n           {:stroke-linecap \"square\"\n            :stroke-width \"16\"\n            :stroke \"#aaa\"\n            :d s-path}]]\n         ;; S\n         [:path\n          {:stroke-linecap \"square\"\n           :stroke-width \"16\"\n           :stroke \"#FFFFFF\"\n           :d s-path}]\n         ]))))\n\n(defn load-start []\n  (when show-progress\n    (dom-insert\n      [:div {:id load-id\n             :style {:position \"fixed\"\n                     :pointer-events \"none\"\n                     :left \"0px\"\n                     :bottom \"20px\"\n                     :z-index \"10000\"}}\n       [:div {:style {:background \"#eee\"\n                      :border-top-right-radius \"40px\"\n                      :border-bottom-right-radius \"40px\"\n                      :box-shadow \"2px 2px 10px #aaa\"\n                      :padding \"10px\"}}\n        @logo-svg]])))\n\n(defn load-end-success []\n  (when show-progress\n    (when-some [container-el (dom/by-id load-id)]\n      (let [el (.-firstChild container-el)]\n        (anim/start 500 {el (anim/transition :background \"#eee\" \"#40B400\" \"ease-out\")})\n        (go (<! (async/timeout 250))\n            (<! (anim/start 250 {el (anim/transition :opacity \"1\" \"0\" \"ease-in\")}))\n            (dom/remove container-el)\n\n            )))))\n\n(defn load-end []\n  (when-some [el (dom/by-id load-id)]\n    (dom/remove el)))\n\n(defn hud-hide []\n  (when-some [d (dom/by-id hud-id)]\n    (dom/remove d)))\n\n(def source-line-styles\n  {:padding \"0\"\n   :margin \"0\"})\n\n(def source-highlight-styles\n  (assoc source-line-styles\n    :font-weight \"bold\"))\n\n(defn source-line-html\n  [start-idx lines styles]\n  (->> (for [[idx text] (map-indexed vector lines)]\n         [:pre {:style styles} (format \"%4d | %s\" (+ 1 idx start-idx) text)])))\n\n(def sep-length 80)\n\n(defn sep-line\n  ([]\n   (sep-line \"\" 0))\n  ([label offset]\n   (let [sep-len (js/Math.max sep-length offset)\n         len (count label)\n\n         sep\n         (fn [c]\n           (->> (repeat c \"-\")\n                (str/join \"\")))]\n     (str (sep offset) label (sep (- sep-len (+ offset len)))))))\n\n(defn file-link [{:keys [resource-name file line column] :as warning}]\n  (if-not file\n    [:span resource-name]\n\n    [:span {:style {:text-decoration \"underline\"\n                    :color \"blue\"\n                    :cursor \"pointer\"}\n            :on {:click (fn [e]\n                          (dom/ev-stop e)\n                          (open-file file line column)\n                          )}}\n\n     resource-name]))\n\n(defn html-for-warning [{:keys [resource-name msg file line column source-excerpt] :as warning}]\n  [:div {:style {:border \"2px solid #ccc\"\n\n                 :margin-bottom \"10px\"}}\n\n   [:div {:style {:line-height \"16px\"\n                  :background-color \"#fadb64\"\n                  :padding \"10px\"\n                  :font-size \"1.2em\"\n                  :font-weight \"bold\"}}\n    [:span \"WARNING in \"]\n    (file-link warning)]\n\n   (when source-excerpt\n     (let [{:keys [start-idx before line after]} source-excerpt]\n       [:div {:style {:padding \"10px 10px\"\n                      :background-color \"#fff\"\n                      :border-top \"2px solid #ccc\"}}\n        (source-line-html start-idx before source-line-styles)\n        (source-line-html (+ start-idx (count before)) [line] source-highlight-styles)\n        (let [arrow-idx (+ 6 (or column 1))]\n          [:pre {:style source-highlight-styles} (sep-line \"^\" arrow-idx)])\n        [:div {:style {:font-weight \"bold\" :font-size \"1.2em\" :padding \"10px 0\"}} msg]\n        [:pre {:style source-highlight-styles} (sep-line)]\n        (source-line-html (+ start-idx (count before) 1) after source-line-styles)]\n       ))])\n\n(defn hud-warnings [{:keys [type info] :as msg}]\n  (let [{:keys [sources]}\n        info\n\n        sources-with-warnings\n        (->> sources\n             (remove :from-jar)\n             (filter #(seq (:warnings %)))\n             (into []))]\n\n    (when (seq sources-with-warnings)\n      ;; TODO: fancy transition from logo to warnings\n      (load-end)\n      (when show-warnings\n        (dom-insert\n          [:div\n           {:id hud-id\n            :style {:position \"fixed\"\n                    :z-index \"10000\"\n                    :left \"0px\"\n                    :bottom \"0px\"\n                    :right \"0px\"\n                    :display \"flex\"\n                    :flex-direction \"column\"\n                    :color \"#000\"\n                    :font-family \"monospace\"\n                    :font-size \"12px\"}}\n           [:div {:style {:align-self \"flex-end\"\n                          :background \"#fff\"\n                          :border \"2px solid #ccc\"\n                          :border-bottom \"0px\"\n                          :cursor \"pointer\"\n                          :padding \"6px\"\n                          :margin-bottom \"-2px\"\n                          :z-index \"10000\"}\n                  :on {:click hud-hide}}\n            \"Close\"]\n           [:div {:style {:background \"#fff\"\n                          :border-top \"2px solid #ccc\"\n                          :flex \"1\"\n                          :max-height \"300px\"\n                          :padding \"10px 10px 0\"\n                          :overflow \"auto\"}}\n            (for [{:keys [warnings]} sources-with-warnings\n                  warning warnings]\n              (html-for-warning warning))]])))))\n\n(defn hud-error [{:keys [report] :as msg}]\n  (when show-errors\n    (dom-insert\n      [:div\n       {:id hud-id\n        :style {:position \"fixed\"\n                :left \"0px\"\n                :top \"0px\"\n                :bottom \"0px\"\n                :right \"0px\"\n                :color \"#000\"\n                :background-color \"#fff\"\n                :border \"5px solid red\"\n                :z-index \"10000\"\n                :padding \"20px\"\n                :overflow \"auto\"\n                :font-family \"monospace\"\n                :font-size \"12px\"}}\n       [:div {:style \"color: red; margin-bottom: 10px; font-size: 2em;\"} \"Compilation failed!\"]\n       [:pre report]])))\n\n(def connection-error-id \"shadow-connection-error\")\n\n(defn connection-error-clear! []\n  (when-some [x (dom/by-id connection-error-id)]\n    (dom/remove x)))\n\n(defn connection-error [msg]\n  (when show-errors\n    (dom-insert\n      [:div {:id connection-error-id\n             :style {:position \"fixed\"\n                     :pointer-events \"none\"\n                     :left \"0px\"\n                     :bottom \"20px\"\n                     :z-index \"10000\"}}\n       [:div {:style {:background \"#c00\"\n                      :border-top-right-radius \"40px\"\n                      :border-bottom-right-radius \"40px\"\n                      :box-shadow \"2px 2px 10px #aaa\"\n                      :padding \"10px\"\n                      :font-family \"monospace\"\n                      :font-size \"14px\"\n                      :font-weight \"bold\"\n                      :color \"#fff\"}}\n        (str \"shadow-cljs - \" msg)\n        ]])))\n\n(defn load-failure [error task remaining]\n  (load-end)\n  (js/console.error \"reload-failed\" error)\n  (connection-error (str \"[reload failed] \" (.-message error))))"]}