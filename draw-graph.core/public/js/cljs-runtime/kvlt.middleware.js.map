{"version":3,"sources":["kvlt/middleware.cljc"],"mappings":"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","names":["var_args","G__35761","kvlt.middleware/header","js/Error","p__35762","map__35763","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","hs","resp","k","and__4174__auto__","cljs.core/some","cljs.core/name","m","v","cljs.core.update","h","cljs.core.dissoc","cljs.core.assoc","p__35784","map__35786","kvlt.middleware/body->string","body","kvlt.platform.util/byte-array->str","kvlt.middleware.util/charset","kvlt.middleware.header","js/kvlt","js/kvlt.middleware","js/kvlt.middleware.from-content-type","method-table__4672__auto__","cljs.core.atom","prefer-table__4673__auto__","method-cache__4674__auto__","cached-hierarchy__4675__auto__","hierarchy__4676__auto__","fexpr__35795","cljs.core/MultiFn","cljs.core.symbol","kvlt.middleware/from-content-type","kvlt.middleware.util.__GT_content_type","cljs.core.keyword","cljs.reader.read_string","p__35810","map__35812","kvlt.platform.util/parse-json","kvlt.middleware/hint->body-type","x","cljs.core/Keyword","cljs.core._EQ_","cljs.core/namespace","kvlt.middleware.util.__GT_mw","kvlt.middleware/body-type-hint","p__35820","map__35821","req","temp__5733__auto__","t","cljs.core/meta","cljs.core/keys","kvlt.util/doc-examples!","kvlt.middleware/content-type","p__35848","map__35849","type","character-encoding","map__35854","content-type","G__35855","G__35859","kvlt.middleware/accept","p__35864","map__35865","accept","kvlt.middleware/as-key","js/kvlt.middleware.as-type","fexpr__35878","kvlt.middleware/as-type","p__35882","map__35883","p__35886","map__35887","kvlt.platform.util/byte-array?","p__35892","map__35893","headers","kvlt.middleware/parsing-error","e","error","kvlt.platform.util.exception__GT_map","G__35896","cljs.core/not","cljs.core.merge","p1__35897#","kvlt.middleware/as","e35904","kvlt.middleware/accept-encoding","p__35905","map__35906","cljs.core/coll?","clojure.string.join","cljs.core.map","kvlt.middleware/method","p__35908","map__35909","kvlt.middleware/port","p__35919","map__35920","port","kvlt.middleware/url","p__35922","map__35923","url","kvlt.middleware.util/parse-url","kvlt.middleware/default-content-type","or__4185__auto__","kvlt.middleware/keyword-headers","clojure.walk/stringify-keys","clojure.walk/keywordize-keys","p1__35926#","kvlt.middleware/lower-case","G__35927","clojure.string/lower-case","p1__35928#","p1__35929#","kvlt.middleware/lower-case-headers","kvlt.util/map-keys","kvlt.middleware/basic-auth","p__35930","map__35931","basic-auth","kvlt.middleware.util/basic-auth","kvlt.middleware/oauth-token","p__35937","map__35938","oauth-token","p1__35940#","kvlt.middleware/default-method","js/kvlt.middleware.decompress-body","fexpr__35941","kvlt.middleware/decompress-body","p__35944","map__35947","map__35948","kvlt.middleware/lift-content-encoding","content-encoding","cljs.core/dissoc","p__35952","map__35956","kvlt.platform.util/gunzip","p__35961","map__35962","kvlt.platform.util/inflate","kvlt.middleware/decompress","G__35972","kvlt.middleware/unexceptional-status?","kvlt.middleware/status->reason","kvlt.middleware/error","p__35980","map__35981","message","status","cause","reason","cljs.core.ex_info"],"sourcesContent":["(ns kvlt.middleware\n  (:require [#?(:clj clojure.edn :cljs cljs.reader) :as edn]\n            [kvlt.middleware.util :as util #? (:clj :refer :cljs :refer-macros) [defmw]]\n            [kvlt.util #? (:clj :refer :cljs :refer-macros) [with-doc-examples!]]\n            [kvlt.platform.util :as platform.util]\n            [clojure.set :as set]\n            [clojure.walk :as walk]\n            [clojure.string :as str]\n            [cats.core :as m]\n            [kvlt.util :refer [map-keys]]))\n\n(defn ^:no-doc header\n  ([{hs :headers :as resp} k]\n   (and hs (some hs [k (name k)])))\n  ([m k v]\n   (update m :headers\n           (fn [h]\n             (-> h\n                 (dissoc k (name k))\n                 (assoc (name k) v))))))\n\n(defn- body->string [{:keys [body] :as resp}]\n  (platform.util/byte-array->str\n   body (util/charset (header resp :content-type))))\n\n(defmulti from-content-type\n  \"Used by [[as]] to transform an incoming response.  Dispatches on\n  `:content-type`' header, as a namespace-qualified\n  keyword (e.g. `:application/edn`).  The input and output are the\n  top-level response map, not only the response body.\n\n  The default implementation (i.e. unrecognized content-type) returns\n  the response map unmodified.\"\n  (fn [resp]\n    (-> resp (header :content-type) util/->content-type keyword)))\n\n(defmethod from-content-type :default [resp]\n  resp)\n(defmethod from-content-type :application/edn [resp]\n  (assoc resp :body (edn/read-string (body->string resp))))\n(defmethod from-content-type :application/json [{:keys [body] :as resp}]\n  (assoc resp :body (platform.util/parse-json (body->string resp))))\n\n(defn- hint->body-type [x]\n  (when (and (keyword? x) (= \"kvlt.body\" (namespace x)))\n    (keyword (name x))))\n\n(defmw body-type-hint\n  \"Look for a body with a `:kvlt.body/`-prefixed metadata key, setting\n  the request's `:type` and `:form-params` keys\n  accordingly (e.g. `:body ^:kvlt/edn {:x 1}`)\"\n  ^{:has :body}\n  (fn [{:keys [body] :as req}]\n    (if-let [t (->> body meta keys (some hint->body-type))]\n      (-> req\n          (assoc  :type (keyword t) :form-params body)\n          (dissoc :body))\n      req)))\n\n(with-doc-examples! body-type-hint\n  [{:method :post\n    :body ^:kvlt.body/edn [1 2 3]}\n   {:method :post\n    :form-params [1 2 3]\n    :type :edn}])\n\n(defmw content-type\n  \"Turn request's `:content-type` (or `:type`), if any, and\n   `:character-encoding`, if any, into a \\\"content-type\\\" header & leave\n   top-level `:content-type` key in place. \"\n  (fn [{:keys [type body character-encoding] :as req}]\n    (let [{:keys [content-type] :as req}\n          (cond-> req type (assoc :content-type type))]\n      (cond-> req\n        content-type\n        (header :content-type\n                (util/->content-type content-type character-encoding))))))\n\n(with-doc-examples!\n  content-type\n  [{:content-type \"text/html\"\n    :character-encoding \"US-ASCII\"}\n   {:headers {:content-type \"text/html; charset=US-ASCII\"}\n    :content-type \"text/html\"}])\n\n(defmw accept\n  \"Turn request's `:accept` value, if any, into an \\\"accept\\\" header &\n  remove the top-level key.\"\n  ^{:has :accept :removing :accept}\n  (fn [{:keys [accept] :as req}]\n    (header req :accept (util/->content-type accept))))\n\n(with-doc-examples! accept\n  [{:accept :edn} {:headers {\"accept\" \"application/edn\"}}])\n\n(defn- as-key [resp]\n  (-> resp meta :kvlt/request :as))\n\n(defmulti ^:no-doc as-type as-key)\n(defmethod as-type :string [{:keys [body] :as resp}]\n  #? (:clj\n      (update resp :body platform.util/byte-array->str\n              (util/charset (header resp :content-type)))\n      :cljs resp))\n\n(defmethod as-type :byte-array [{:keys [body] :as resp}]\n  (assert\n   (platform.util/byte-array? body)\n   \"For platform-specific reasons, :as :byte-array is special-cased in\n  kvlt.platform.http/request\")\n  resp)\n(defmethod as-type :auto [resp] (from-content-type resp))\n(defmethod as-type :default [{:keys [headers] :as resp}]\n  (let [t    (header resp :content-type)\n        resp (assoc resp :orig-content-type t)]\n    (from-content-type\n     (header resp :content-type (util/->content-type (as-key resp))))))\n\n(defn- parsing-error [resp e]\n  (let [error (platform.util/exception->map\n               e {:error :middleware-error\n                  :type  :middleware-error})]\n    (cond-> resp\n      (not (resp :error)) (merge error))))\n\n(defmw as\n  \"Response body type conversion --- `:string` `:byte-array` `:auto` `:json` `:edn` etc..\n\n  See [[from-content-type]] for custom conversions.\"\n  #(merge {:as :string} %)\n  (fn [resp]\n    (try\n      (as-type resp)\n      (catch #? (:clj Exception :cljs js/Error) e\n        (parsing-error resp e)))))\n\n(defmw accept-encoding\n  \"Convert the `:accept-encoding` option (keyword/str, or collection of) to an\n  acceptable `Accept-Encoding` header.\n\n  This middleware is not likely to have any effect in a browser\n  environment.\"\n  ^{:has :accept-encoding :removing :accept-encoding}\n  (fn [{v :accept-encoding :as req}]\n    (header\n     req\n     :accept-encoding\n     (if (coll? v)\n       (str/join \", \" (map name v))\n       (name v)))))\n\n(with-doc-examples! accept-encoding\n  [{:accept-encoding :origami}\n   {:headers {:accept-encoding \"origami\"}}]\n  [{:accept-encoding [:a :b]}\n   {:headers {:accept-encoding \"a, b\"}}])\n\n(defmw method\n  \"Rename request's `:method` key to `:request-method`\"\n  ^{:has :method :removing :method}\n  (fn [{m :method :as req}]\n    (assoc req :request-method m)))\n\n(defmw port\n  \"Rename request's `:port` key to `:server-port`\"\n  ^{:has :port :removing :port}\n  (fn [{port :port :as req}]\n    (assoc req :server-port port)))\n\n(with-doc-examples! method\n  [{:method :get} {:request-method :get}])\n\n(defmw url\n  \"Turn request's `:url` value, if any, into top-level `:scheme`,\n  `:server-name`, `:server-port`, `:uri`, `:query-string`, and\n  `:user-info` keys\"\n  ^{:has :url :removing :url}\n  (fn [{url :url :as req}]\n    (merge req (util/parse-url url))))\n\n(with-doc-examples! url\n  [{:url \"ftp://localhost:9/x?x=1\"}\n   {:scheme :ftp\n    :server-name \"localhost\"\n    :server-port 9\n    :uri \"/x\"\n    :user-info nil\n    :query-string \"x=1\"}])\n\n(defmw default-content-type\n  \"Add `:content-type` key having value `:text/plain`, if no `:content-type` present.\n\n  Assumes placement before [[content-type]].\"\n  (fn [req]\n    (if (and (req :body) (not (or (req :content-type) (header req :content-type))))\n      (assoc req :content-type :text/plain)\n      req)))\n\n(defmw keyword-headers\n  \"Convert keys within request's `:headers` value to strings, and\nresponse's `:headers` values to keywords. \"\n  [:headers walk/stringify-keys]\n  [:headers walk/keywordize-keys])\n\n(def ^:private lower-case\n  #(cond-> (str/lower-case (name %)) (keyword? %) keyword))\n\n(defmw lower-case-headers\n  \"Convert keys within request & response's `:headers` value to lower\n  case.\"\n  [:headers #(map-keys lower-case %)]\n  [:headers #(map-keys lower-case %)])\n\n(defmw basic-auth\n  \"Convert `:basic-auth` values (vector or map) into an\n `:authorization` header.\"\n  ^{:has :basic-auth :removing :basic-auth}\n  (fn [{:keys [basic-auth] :as req}]\n    (header req :authorization (util/basic-auth basic-auth))))\n\n(with-doc-examples! basic-auth\n  [{:basic-auth [\"user\" \"pass\"]} {:headers {:authorization \"Basic ...\"}}]\n  [{:basic-auth {:username \"user\" :password \"pass\"}}\n   {:headers {:authorization \"Basic ...\"}}])\n\n(defmw oauth-token\n  \"Convert `:oauth-token` value into an `:authorization` header\"\n  ^{:has :oauth-token :removing :oauth-token}\n  (fn [{:keys [oauth-token] :as req}]\n    (header req :authorization (str \"Bearer \" oauth-token))))\n\n(with-doc-examples! oauth-token\n  [{:oauth-token \"xyz\"} {:headers {:authorization \"Bearer xyz\"}}])\n\n(defmw default-method\n  \"Merge request map with `{:method :get}`.\n\n  Assumes placement before [[method]].\"\n  #(merge {:method :get} %))\n\n(with-doc-examples! default-method\n  [{} {:method :get}])\n\n(defmulti decompress-body\n  \"Dispatch on the response's `:content-encoding` header value.\n  Clojure implementations exist for \\\"gzip\\\" and \\\"deflate\\\".\"\n  (fn [resp]\n    (and (:body resp) (header resp :content-encoding))))\n\n(defn ^:no-doc lift-content-encoding [{{:strs [content-encoding]} :headers :as resp}]\n  (-> resp\n      (assoc :orig-content-encoding content-encoding)\n      (update :headers dissoc \"content-encoding\")))\n\n(defmethod decompress-body \"gzip\" [{:keys [body] :as resp}]\n  (let [body (platform.util/gunzip body)]\n    (lift-content-encoding (assoc resp :body body))))\n\n(defmethod decompress-body \"deflate\" [{:keys [body] :as resp}]\n  (let [body (platform.util/inflate body)]\n    (lift-content-encoding (assoc resp :body body))))\n\n(defmethod decompress-body :default [resp]\n  (lift-content-encoding resp))\n\n(defmw decompress\n  \"Response body decompression.  Defaults request's \\\"Accept-Encoding\\\" header.\n  Can be disabled per-request via `:decompress-body? false'\"\n  ^{:removing :accept-encoding}\n  (fn [req]\n    (cond-> req\n      (and (not (false? (req :decompress-body?)))\n           (not (header req :accept-encoding)))\n      (header :accept-encoding \"gzip, deflate\")))\n  (fn [resp]\n    #? (:clj  (let [decomp? (-> resp meta :kvlt/request :decompress-body? false? not)]\n                (cond-> resp (and decomp? (not-empty (resp :body))) decompress-body))\n        :cljs resp)))\n\n(def ^:no-doc unexceptional-status?\n  #{200 201 202 203 204 205 206 207 300 301 302 303 304 307})\n\n(def ^:no-doc status->reason\n  {100 :continue\n   101 :switching-protocols\n   200 :ok\n   201 :created\n   202 :accepted\n   203 :non-authoritative-information\n   204 :no-content\n   205 :reset-content\n   206 :partial-content\n   300 :multiple-choices\n   301 :moved-permanently\n   302 :found\n   303 :see-other\n   304 :not-modified\n   305 :use-proxy\n   307 :temporary-redirect\n   400 :bad-request\n   401 :unauthorized\n   402 :payment-required ;; serious business\n   403 :forbidden\n   404 :not-found\n   405 :method-not-allowed\n   406 :not-acceptable\n   407 :proxy-authentication-required\n   408 :request-timeout\n   409 :conflict\n   410 :gone\n   411 :length-required\n   412 :precondition-failed\n   413 :request-entity-too-large\n   414 :request-uri-too-large\n   415 :unsupported-media-type\n   416 :requested-range-not-satisfiable\n   417 :expectation-failed\n   500 :internal-server-error\n   501 :not-implemented\n   502 :bad-gateway\n   503 :service-unavailable\n   504 :gateway-timeout\n   505 :http-version-not-supported})\n\n(defmw error\n  \"Turn error responses into `ExceptionInfo` instances, with the full\n  response map as the attached data.  Additionally, a `:reason`\n  value (e.g. `:service-unavailable`) will be used to augment the\n  `:status` key.\n\n  For uniformity, `:type` is provided as an alias for `:reason`, e.g.\"\n  nil\n  (fn [{:keys [message status cause error] :as resp}]\n    (let [reason (status->reason status error)]\n      (if (and (not error) (unexceptional-status? status))\n        (assoc resp :reason reason)\n        (ex-info message\n                 (assoc resp\n                   :error  (or error reason)\n                   :type   reason\n                   :reason reason)\n                 cause)))))\n\n(with-doc-examples! error\n  [{:status  500\n    :reason  :internal-server-error\n    :type    :internal-server-error\n    :cause   error?\n    :headers ...}])\n"]}