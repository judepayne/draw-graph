["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Infinity",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$loom.alg","~:imports",null,"~:requires",["^ ","~$loom.alg-generic","^<","~$loom.graph","^=","~$clj.set","~$clojure.set","~$gen","^<","~$flow","~$loom.flow","~$tailrecursion.priority-map","^C","^?","^?","^B","^B","~$pm","^C","~$graph","^="],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$directed?","^=","~$weighted?","^=","~$edges","^=","~$add-nodes","^=","~$add-edges","^=","~$out-degree","^=","~$trace-path","^<","~$preds->span","^<","~$successors","^=","~$transpose","^=","~$predecessors","^=","~$in-degree","^=","~$weight","^=","~$nodes","^=","^E","^=","~$digraph","^="],"~:defs",["^ ","~$relax-edges",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","~:line",189,"~:column",8,"~:end-line",189,"~:end-column",19,"~:private",true,"~:arglists",["~#list",["~$quote",["^16",[["~$g","~$start","~$estimates"]]]]],"~:doc","Performs edge relaxation on all edges in weighted directed graph"],"^14",true,"^8","~$loom.alg/relax-edges","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",19,"~:method-params",["^16",[["~$g","^18","^19"]]],"~:protocol-impl",null,"~:arglists-meta",["^16",[null,null]],"^11",1,"~:variadic?",false,"^10",189,"~:ret-tag",["^7",[null,"~$any"]],"^12",189,"~:max-fixed-arity",3,"~:fn-var",true,"^15",["^16",["^17",["^16",[["~$g","^18","^19"]]]]],"^1:","Performs edge relaxation on all edges in weighted directed graph"],"~$degeneracy-ordering",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",663,"^11",7,"^12",663,"^13",26,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns sequence of vertices in degeneracy order."],"^8","~$loom.alg/degeneracy-ordering","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",26,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",663,"^1@",["^7",["~$clj","~$cljs.core/IVector"]],"^12",663,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns sequence of vertices in degeneracy order."],"~$pre-span",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",41,"^11",7,"^12",41,"^13",15,"^15",["^16",["^17",["^16",[["~$g"],["~$g","^18"]]]]],"^1:","Returns a depth-first spanning tree of the form {node [successors]}","~:top-fn",["^ ","^1?",false,"~:fixed-arity",2,"^1B",2,"^1<",["^16",[["~$g"],["~$g","^18"]]],"^15",["^16",[["~$g"],["~$g","^18"]]],"^1>",["^16",[null,null]]]],"^8","~$loom.alg/pre-span","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",15,"^1I",["^ ","^1?",false,"^1J",2,"^1B",2,"^1<",["^16",[["~$g"],["~$g","^18"]]],"^15",["^16",[["~$g"],["~$g","^18"]]],"^1>",["^16",[null,null]]],"^1<",["^16",[["~$g"],["~$g","^18"]]],"^1=",null,"^1J",2,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"~:methods",[["^ ","^1J",1,"^1?",false,"~:tag",["^7",["^1A","~$clj-nil"]]],["^ ","^1J",2,"^1?",false,"^1M",["^7",[null,"^1G","^1A"]]]],"^10",41,"^12",41,"^1B",2,"^1C",true,"^15",["^16",[["~$g"],["~$g","^18"]]],"^1:","Returns a depth-first spanning tree of the form {node [successors]}"],"~$bf-all-pairs-shortest-paths",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",324,"^11",7,"^12",324,"^13",34,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Uses bf-span on each node in the graph."],"^8","~$loom.alg/bf-all-pairs-shortest-paths","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",34,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",324,"^1@",["^7",[null,"^1A"]],"^12",324,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Uses bf-span on each node in the graph."],"~$subgraph?",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",764,"^11",7,"^12",764,"^13",16,"^15",["^16",["^17",["^16",[["~$g1","~$g2"]]]]],"^1:","Returns true iff g1 is a subgraph of g2. An undirected graph is never\n  considered as a subgraph of a directed graph and vice versa."],"^8","~$loom.alg/subgraph?","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",16,"^1<",["^16",[["^1R","^1S"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",764,"^1@","~$boolean","^12",764,"^1B",2,"^1C",true,"^15",["^16",["^17",["^16",[["^1R","^1S"]]]]],"^1:","Returns true iff g1 is a subgraph of g2. An undirected graph is never\n  considered as a subgraph of a directed graph and vice versa."],"~$density",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",393,"^11",7,"^12",393,"^13",14,"^15",["^16",["^17",["^16",[["~$g","~$&",["^ ","~:keys",["~$loops"],"~:or",["^ ","^1X",false]]]]]]],"^1:","Return the density of graph g","^1I",["^ ","^1?",true,"^1J",1,"^1B",1,"^1<",[["^16",["~$g",["^ ","^1W",["^1X"],"^1Y",["^ ","^1X",false]]]]],"^15",["^16",[["~$g","~$&",["^ ","^1W",["^1X"],"^1Y",["^ ","^1X",false]]]]],"^1>",["^16",[null]]]],"^8","~$loom.alg/density","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",14,"^1I",["^ ","^1?",true,"^1J",1,"^1B",1,"^1<",[["^16",["~$g",["^ ","^1W",["^1X"],"^1Y",["^ ","^1X",false]]]]],"^15",["^16",[["~$g","~$&",["^ ","^1W",["^1X"],"^1Y",["^ ","^1X",false]]]]],"^1>",["^16",[null]]],"^1<",[["^16",["~$g",["^ ","^1W",["^1X"],"^1Y",["^ ","^1X",false]]]]],"^1=",null,"^1J",1,"^1>",["^16",[null]],"^11",1,"^1?",true,"^1L",[["^ ","^1J",1,"^1?",true,"^1M","~$number"]],"^10",393,"^1@","^1A","^12",393,"^1B",1,"^1C",true,"^15",["^16",[["~$g","~$&",["^ ","^1W",["^1X"],"^1Y",["^ ","^1X",false]]]]],"^1:","Return the density of graph g"],"~$bellman-ford",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",217,"^11",7,"^12",217,"^13",19,"^15",["^16",["^17",["^16",[["~$g","^18"]]]]],"^1:","Given a weighted, directed graph G = (V, E) with source start,\n   the Bellman-Ford algorithm produces map of single source shortest\n   paths and their costs if no negative-weight cycle that is reachable\n   from the source exists, and false otherwise, indicating that no\n   solution exists."],"^8","~$loom.alg/bellman-ford","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",19,"^1<",["^16",[["~$g","^18"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",217,"^1@",["^7",["^1U","^1G"]],"^12",217,"^1B",2,"^1C",true,"^15",["^16",["^17",["^16",[["~$g","^18"]]]]],"^1:","Given a weighted, directed graph G = (V, E) with source start,\n   the Bellman-Ford algorithm produces map of single source shortest\n   paths and their costs if no negative-weight cycle that is reachable\n   from the source exists, and false otherwise, indicating that no\n   solution exists."],"~$astar-dist",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",650,"^11",7,"^12",650,"^13",17,"^15",["^16",["^17",["^16",[["~$g","~$src","~$target","~$heur"]]]]],"^1:","Returns the length of the shortest path between src and target using\n    the A* algorithm"],"^8","~$loom.alg/astar-dist","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",17,"^1<",["^16",[["~$g","^23","^24","^25"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",650,"^1@",["^7",[null,"^1A"]],"^12",650,"^1B",4,"^1C",true,"^15",["^16",["^17",["^16",[["~$g","^23","^24","^25"]]]]],"^1:","Returns the length of the shortest path between src and target using\n    the A* algorithm"],"~$distinct-edges",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",410,"^11",7,"^12",410,"^13",21,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns the distinct edges of g. Only useful for undirected graphs"],"^8","~$loom.alg/distinct-edges","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",21,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",410,"^1@",["^7",["^1A","^1N"]],"^12",410,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns the distinct edges of g. Only useful for undirected graphs"],"~$bk",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",704,"^11",8,"^12",704,"^13",10,"^14",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","An iterative implementation of Bron-Kerbosch using degeneracy ordering\n  at the outer loop and max-degree vertex pivoting in the inner loop."],"^14",true,"^8","~$loom.alg/bk","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",10,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",704,"^1@",["^7",["~$seq","^1F"]],"^12",704,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","An iterative implementation of Bron-Kerbosch using degeneracy ordering\n  at the outer loop and max-degree vertex pivoting in the inner loop."],"~$bipartite?",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",455,"^11",7,"^12",455,"^13",17,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns true if g is bipartite"],"^8","~$loom.alg/bipartite?","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",17,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",455,"^1@","^1U","^12",455,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns true if g is bipartite"],"~$greedy-coloring",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",496,"^11",7,"^12",496,"^13",22,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Greedily color the vertices of a graph using the first-fit heuristic.\n  Returns a map of nodes to colors (0, 1, ...)."],"^8","~$loom.alg/greedy-coloring","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",22,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",496,"^1@",["^7",["^1F","~$cljs.core/IMap"]],"^12",496,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Greedily color the vertices of a graph using the first-fit heuristic.\n  Returns a map of nodes to colors (0, 1, ...)."],"~$dijkstra-path-dist",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",158,"^11",7,"^12",158,"^13",25,"^15",["^16",["^17",["^16",[["~$g","^18","~$end"]]]]],"^1:","Finds the shortest path from start to end. Returns a vector:\n  [path distance]"],"^8","~$loom.alg/dijkstra-path-dist","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",25,"^1<",["^16",[["~$g","^18","^2B"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",158,"^1@",["^7",["^1G","^1N"]],"^12",158,"^1B",3,"^1C",true,"^15",["^16",["^17",["^16",[["~$g","^18","^2B"]]]]],"^1:","Finds the shortest path from start to end. Returns a vector:\n  [path distance]"],"~$scc",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",365,"^11",7,"^12",365,"^13",10,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns the strongly-connected components of directed graph g as a vector of\n  vectors. Uses Kosaraju's algorithm."],"^8","~$loom.alg/scc","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",10,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",365,"^1@","^1F","^12",365,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns the strongly-connected components of directed graph g as a vector of\n  vectors. Uses Kosaraju's algorithm."],"~$bipartite-sets",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",460,"^11",7,"^12",460,"^13",21,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns two sets of nodes, one for each color of the bipartite coloring,\n  or nil if g is not bipartite"],"^8","~$loom.alg/bipartite-sets","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",21,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",460,"^1@",["^7",[null,"^1A","^1N"]],"^12",460,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns two sets of nodes, one for each color of the bipartite coloring,\n  or nil if g is not bipartite"],"~$loners",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",402,"^11",7,"^12",402,"^13",13,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns nodes with no connections to other nodes (i.e., isolated nodes)"],"^8","~$loom.alg/loners","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",13,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",402,"^1@","~$cljs.core/LazySeq","^12",402,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns nodes with no connections to other nodes (i.e., isolated nodes)"],"~$traverse-all",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",20,"^11",8,"^12",20,"^13",20,"^14",true,"^15",["^16",["^17",["^16",[["^U","~$traverse"]]]]]],"^14",true,"^8","~$loom.alg/traverse-all","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",20,"^1<",["^16",[["^U","^2L"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",20,"^1@","^1F","^12",20,"^1B",2,"^1C",true,"^15",["^16",["^17",["^16",[["^U","^2L"]]]]]],"~$longest-shortest-path",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",267,"^11",7,"^12",267,"^13",28,"^15",["^16",["^17",["^16",[["~$g","^18"]]]]],"^1:","Finds the longest shortest path beginning at start, using Dijkstra's\n  algorithm if the graph is weighted, breadth-first search otherwise."],"^8","~$loom.alg/longest-shortest-path","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",28,"^1<",["^16",[["~$g","^18"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",267,"^1@",["^7",[null,"^2;","~$cljs.core/IList","^1A"]],"^12",267,"^1B",2,"^1C",true,"^15",["^16",["^17",["^16",[["~$g","^18"]]]]],"^1:","Finds the longest shortest path beginning at start, using Dijkstra's\n  algorithm if the graph is weighted, breadth-first search otherwise."],"~$neighbor-colors",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",473,"^11",8,"^12",473,"^13",23,"^14",true,"^15",["^16",["^17",["^16",[["~$g","~$node","~$coloring"]]]]],"^1:","Given a putative coloring of a graph, returns the colors of all the\n  neighbors of a given node."],"^14",true,"^8","~$loom.alg/neighbor-colors","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",23,"^1<",["^16",[["~$g","^2R","^2S"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",473,"^1@",["^7",["^1F","^1A","~$cljs.core/ISet","~$cljs.core/MetaFn","^1N"]],"^12",473,"^1B",3,"^1C",true,"^15",["^16",["^17",["^16",[["~$g","^2R","^2S"]]]]],"^1:","Given a putative coloring of a graph, returns the colors of all the\n  neighbors of a given node."],"~$dag?",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",254,"^11",7,"^12",254,"^13",11,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns true if g is a directed acyclic graph"],"^8","~$loom.alg/dag?","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",11,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",254,"^1@","^1U","^12",254,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns true if g is a directed acyclic graph"],"~$prim-mst-edges",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",554,"^11",7,"^12",554,"^13",21,"^15",["^16",["^17",["^16",[["~$wg"],["^2Z","~$n","~$h","~$visited","~$acc"]]]]],"^1:","An edge-list of an minimum spanning tree along with weights that\n  represents an MST of the given graph. Returns the MST edge-list\n  for un-weighted graphs.","^1I",["^ ","^1?",false,"^1J",5,"^1B",5,"^1<",["^16",[["^2Z"],["^2Z","~$n","~$h","^2[","^30"]]],"^15",["^16",[["^2Z"],["^2Z","~$n","~$h","^2[","^30"]]],"^1>",["^16",[null,null]]]],"^8","~$loom.alg/prim-mst-edges","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",21,"^1I",["^ ","^1?",false,"^1J",5,"^1B",5,"^1<",["^16",[["^2Z"],["^2Z","~$n","~$h","^2[","^30"]]],"^15",["^16",[["^2Z"],["^2Z","~$n","~$h","^2[","^30"]]],"^1>",["^16",[null,null]]],"^1<",["^16",[["^2Z"],["^2Z","~$n","~$h","^2[","^30"]]],"^1=",null,"^1J",5,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^1L",[["^ ","^1J",1,"^1?",false,"^1M",["^7",["^1A","^2J"]]],["^ ","^1J",5,"^1?",false]],"^10",554,"^12",554,"^1B",5,"^1C",true,"^15",["^16",[["^2Z"],["^2Z","~$n","~$h","^2[","^30"]]],"^1:","An edge-list of an minimum spanning tree along with weights that\n  represents an MST of the given graph. Returns the MST edge-list\n  for un-weighted graphs."],"~$shortest-path",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",259,"^11",7,"^12",259,"^13",20,"^15",["^16",["^17",["^16",[["~$g","^18","^2B"]]]]],"^1:","Finds the shortest path from start to end in graph g, using Dijkstra's\n  algorithm if the graph is weighted, breadth-first search otherwise."],"^8","~$loom.alg/shortest-path","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",20,"^1<",["^16",[["~$g","^18","^2B"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",259,"^1@",["^7",["^1A","^1N"]],"^12",259,"^1B",3,"^1C",true,"^15",["^16",["^17",["^16",[["~$g","^18","^2B"]]]]],"^1:","Finds the shortest path from start to end in graph g, using Dijkstra's\n  algorithm if the graph is weighted, breadth-first search otherwise."],"~$bk-gen",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",686,"^11",8,"^12",686,"^13",14,"^14",true,"^15",["^16",["^17",["^16",[["~$g",["~$r","~$p","~$x"],"~$stack"]]]]]],"^14",true,"^8","~$loom.alg/bk-gen","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",14,"^1<",["^16",[["~$g","~$p__39196","^35"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",686,"^1@","^1A","^12",686,"^1B",3,"^1C",true,"^15",["^16",["^17",["^16",[["~$g",["~$r","~$p","~$x"],"^35"]]]]]],"~$init-estimates",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",197,"^11",8,"^12",197,"^13",22,"^14",true,"^15",["^16",["^17",["^16",[["^E","^18"]]]]],"^1:","Initializes path cost estimates and paths from source to all vertices,\n   for Bellman-Ford algorithm"],"^14",true,"^8","~$loom.alg/init-estimates","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",22,"^1<",["^16",[["^E","^18"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",197,"^1@","^1G","^12",197,"^1B",2,"^1C",true,"^15",["^16",["^17",["^16",[["^E","^18"]]]]],"^1:","Initializes path cost estimates and paths from source to all vertices,\n   for Bellman-Ford algorithm"],"~$maximal-cliques",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",756,"^11",7,"^12",756,"^13",22,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Enumerate the maximal cliques using Bron-Kerbosch."],"^8","~$loom.alg/maximal-cliques","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",22,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",756,"^1@",["^7",["^2;","^1F"]],"^12",756,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Enumerate the maximal cliques using Bron-Kerbosch."],"~$connected-components",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",340,"^11",7,"^12",340,"^13",27,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns the connected components of graph g as a vector of vectors. If g\n  is directed, returns the weakly-connected components."],"^8","~$loom.alg/connected-components","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",27,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",340,"^1@",["^7",["^1A","^1N"]],"^12",340,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns the connected components of graph g as a vector of vectors. If g\n  is directed, returns the weakly-connected components."],"~$johnson",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",301,"^11",7,"^12",301,"^13",14,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Finds all-pairs shortest paths using Bellman-Ford to remove any negative edges before\n  using Dijkstra's algorithm to find the shortest paths from each vertex to every other.\n  This algorithm is efficient for sparse graphs.\n\n  If the graph is unweighted, a default weight of 1 will be used. Note that it is more efficient\n  to use breadth-first spans for a graph with a uniform edge weight rather than Dijkstra's algorithm.\n  Most callers should use shortest-paths and allow the most efficient implementation be selected\n  for the graph."],"^8","~$loom.alg/johnson","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",14,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",301,"^1@",["^7",[null,"^1U","^1A"]],"^12",301,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Finds all-pairs shortest paths using Bellman-Ford to remove any negative edges before\n  using Dijkstra's algorithm to find the shortest paths from each vertex to every other.\n  This algorithm is efficient for sparse graphs.\n\n  If the graph is unweighted, a default weight of 1 will be used. Note that it is more efficient\n  to use breadth-first spans for a graph with a uniform edge weight rather than Dijkstra's algorithm.\n  Most callers should use shortest-paths and allow the most efficient implementation be selected\n  for the graph."],"~$connected?",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",360,"^11",7,"^12",360,"^13",17,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns true if g is connected"],"^8","~$loom.alg/connected?","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",17,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",360,"^1@","^1U","^12",360,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns true if g is connected"],"~$relax-edge",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",178,"^11",8,"^12",178,"^13",18,"^14",true,"^15",["^16",["^17",["^16",[[["~$u","~$v","~:as","~$edge"],"^T",["~$costs","~$paths","^3C","^19"]]]]]],"^1:","If there's a shorter path from s to v via u,\n    update our map of estimated path costs and\n   map of paths from source to vertex v"],"^14",true,"^8","~$loom.alg/relax-edge","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",18,"^1<",["^16",[["~$p__38991","^T","~$p__38992"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",178,"^1@",["^7",[null,"^1G"]],"^12",178,"^1B",3,"^1C",true,"^15",["^16",["^17",["^16",[[["~$u","~$v","^3C","^3D"],"^T",["^3E","^3F","^3C","^19"]]]]]],"^1:","If there's a shorter path from s to v via u,\n    update our map of estimated path costs and\n   map of paths from source to vertex v"],"~$bf-path",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",122,"^11",7,"^12",122,"^13",14,"^15",["^16",["^17",["^16",[["~$g","^18","^2B","~$&","~$opts"]]]]],"^1:","Returns a path from start to end with the fewest hops (i.e. irrespective\n  of edge weights)","^1I",["^ ","^1?",true,"^1J",3,"^1B",3,"^1<",[["^16",["~$g","^18","^2B","^3K"]]],"^15",["^16",[["~$g","^18","^2B","~$&","^3K"]]],"^1>",["^16",[null]]]],"^8","~$loom.alg/bf-path","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",14,"^1I",["^ ","^1?",true,"^1J",3,"^1B",3,"^1<",[["^16",["~$g","^18","^2B","^3K"]]],"^15",["^16",[["~$g","^18","^2B","~$&","^3K"]]],"^1>",["^16",[null]]],"^1<",[["^16",["~$g","^18","^2B","^3K"]]],"^1=",null,"^1J",3,"^1>",["^16",[null]],"^11",1,"^1?",true,"^1L",[["^ ","^1J",3,"^1?",true,"^1M","^1A"]],"^10",122,"^1@","^1A","^12",122,"^1B",3,"^1C",true,"^15",["^16",[["~$g","^18","^2B","~$&","^3K"]]],"^1:","Returns a path from start to end with the fewest hops (i.e. irrespective\n  of edge weights)"],"~$bf-path-bi",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",128,"^11",7,"^12",128,"^13",17,"^15",["^16",["^17",["^16",[["~$g","^18","^2B"]]]]],"^1:","Using a bidirectional breadth-first search, finds a path from start to\n  end with the fewest hops (i.e. irrespective of edge weights). Can be much\n  faster than a unidirectional search on certain types of graphs"],"^8","~$loom.alg/bf-path-bi","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",17,"^1<",["^16",[["~$g","^18","^2B"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",128,"^1@","~$ignore","^12",128,"^1B",3,"^1C",true,"^15",["^16",["^17",["^16",[["~$g","^18","^2B"]]]]],"^1:","Using a bidirectional breadth-first search, finds a path from start to\n  end with the fewest hops (i.e. irrespective of edge weights). Can be much\n  faster than a unidirectional search on certain types of graphs"],"~$dijkstra-traverse",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",137,"^11",7,"^12",137,"^13",24,"^15",["^16",["^17",["^16",[["~$g"],["~$g","^18"],["~$g","^18","~$f"]]]]],"^1:","Returns a lazy-seq of [current-node state] where state is a map in\n  the format {node [distance predecessor]}. When f is provided,\n  returns a lazy-seq of (f node state) for each node","^1I",["^ ","^1?",false,"^1J",3,"^1B",3,"^1<",["^16",[["~$g"],["~$g","^18"],["~$g","^18","~$f"]]],"^15",["^16",[["~$g"],["~$g","^18"],["~$g","^18","~$f"]]],"^1>",["^16",[null,null,null]]]],"^8","~$loom.alg/dijkstra-traverse","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",24,"^1I",["^ ","^1?",false,"^1J",3,"^1B",3,"^1<",["^16",[["~$g"],["~$g","^18"],["~$g","^18","~$f"]]],"^15",["^16",[["~$g"],["~$g","^18"],["~$g","^18","~$f"]]],"^1>",["^16",[null,null,null]]],"^1<",["^16",[["~$g"],["~$g","^18"],["~$g","^18","~$f"]]],"^1=",null,"^1J",3,"^1>",["^16",[null,null,null]],"^11",1,"^1?",false,"^1L",[["^ ","^1J",1,"^1?",false,"^1M","^1A"],["^ ","^1J",2,"^1?",false,"^1M","^1A"],["^ ","^1J",3,"^1?",false,"^1M","^1A"]],"^10",137,"^12",137,"^1B",3,"^1C",true,"^15",["^16",[["~$g"],["~$g","^18"],["~$g","^18","~$f"]]],"^1:","Returns a lazy-seq of [current-node state] where state is a map in\n  the format {node [distance predecessor]}. When f is provided,\n  returns a lazy-seq of (f node state) for each node"],"~$astar-path",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",598,"^11",7,"^12",598,"^13",17,"^15",["^16",["^17",["^16",[["~$g","^23","^24","^25"],["~$g","^23","^24","^25","~$q","~$explored"]]]]],"^1:","Returns the shortest path using A* algorithm. Returns a map of predecessors.","^1I",["^ ","^1?",false,"^1J",6,"^1B",6,"^1<",["^16",[["~$g","^23","^24","^25"],["~$g","^23","^24","^25","~$q","^3S"]]],"^15",["^16",[["~$g","^23","^24","^25"],["~$g","^23","^24","^25","~$q","^3S"]]],"^1>",["^16",[null,null]]]],"^8","~$loom.alg/astar-path","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",17,"^1I",["^ ","^1?",false,"^1J",6,"^1B",6,"^1<",["^16",[["~$g","^23","^24","^25"],["~$g","^23","^24","^25","~$q","^3S"]]],"^15",["^16",[["~$g","^23","^24","^25"],["~$g","^23","^24","^25","~$q","^3S"]]],"^1>",["^16",[null,null]]],"^1<",["^16",[["~$g","^23","^24","^25"],["~$g","^23","^24","^25","~$q","^3S"]]],"^1=",null,"^1J",6,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^1L",[["^ ","^1J",4,"^1?",false,"^1M","^1A"],["^ ","^1J",6,"^1?",false,"^1M",["^7",["^1F","^1A"]]]],"^10",598,"^12",598,"^1B",6,"^1C",true,"^15",["^16",[["~$g","^23","^24","^25"],["~$g","^23","^24","^25","~$q","^3S"]]],"^1:","Returns the shortest path using A* algorithm. Returns a map of predecessors."],"~$max-flow",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",517,"^11",7,"^12",517,"^13",15,"^15",["^16",["^17",["^16",[["~$g","~$source","~$sink","~$&",["^ ","^1W",["~$method"],"^1Y",["^ ","^3X","~:edmonds-karp"]]]]]]],"^1:","Returns [flow-map flow-value], where flow-map is a weighted adjacency map\n   representing the maximum flow.  The argument should be a weighted digraph,\n   where the edge weights are flow capacities.  Source and sink are the vertices\n   representing the flow source and sink vertices.  Optionally, pass in\n     :method :algorithm to use.  Currently, the only option is :edmonds-karp .","^1I",["^ ","^1?",true,"^1J",3,"^1B",3,"^1<",[["^16",["~$g","^3V","^3W",["^ ","^1W",["^3X"],"^1Y",["^ ","^3X","^3Y"]]]]],"^15",["^16",[["~$g","^3V","^3W","~$&",["^ ","^1W",["^3X"],"^1Y",["^ ","^3X","^3Y"]]]]],"^1>",["^16",[null]]]],"^8","~$loom.alg/max-flow","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",15,"^1I",["^ ","^1?",true,"^1J",3,"^1B",3,"^1<",[["^16",["~$g","^3V","^3W",["^ ","^1W",["^3X"],"^1Y",["^ ","^3X","^3Y"]]]]],"^15",["^16",[["~$g","^3V","^3W","~$&",["^ ","^1W",["^3X"],"^1Y",["^ ","^3X","^3Y"]]]]],"^1>",["^16",[null]]],"^1<",[["^16",["~$g","^3V","^3W",["^ ","^1W",["^3X"],"^1Y",["^ ","^3X","^3Y"]]]]],"^1=",null,"^1J",3,"^1>",["^16",[null]],"^11",1,"^1?",true,"^1L",[["^ ","^1J",3,"^1?",true,"^1M","^1G"]],"^10",517,"^1@","^1A","^12",517,"^1B",3,"^1C",true,"^15",["^16",[["~$g","^3V","^3W","~$&",["^ ","^1W",["^3X"],"^1Y",["^ ","^3X","^3Y"]]]]],"^1:","Returns [flow-map flow-value], where flow-map is a weighted adjacency map\n   representing the maximum flow.  The argument should be a weighted digraph,\n   where the edge weights are flow capacities.  Source and sink are the vertices\n   representing the flow source and sink vertices.  Optionally, pass in\n     :method :algorithm to use.  Currently, the only option is :edmonds-karp ."],"~$connect",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",388,"^11",7,"^12",388,"^13",14,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns graph g with all connected components connected to each other"],"^8","~$loom.alg/connect","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",14,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",388,"^1@",["^7",[null,"^1A"]],"^12",388,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Returns graph g with all connected components connected to each other"],"~$coloring?",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",486,"^11",7,"^12",486,"^13",16,"^15",["^16",["^17",["^16",[["~$g","^2S"]]]]],"^1:","Returns true if a map of nodes to colors is a proper coloring of a graph."],"^8","~$loom.alg/coloring?","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",16,"^1<",["^16",[["~$g","^2S"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",486,"^12",486,"^1B",2,"^1C",true,"^15",["^16",["^17",["^16",[["~$g","^2S"]]]]],"^1:","Returns true if a map of nodes to colors is a proper coloring of a graph."],"~$can-relax-edge?",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",169,"^11",8,"^12",169,"^13",23,"^14",true,"^15",["^16",["^17",["^16",[[["~$u","~$v","^3C","^3D"],"^T","^3E"]]]]],"^1:","Tests for whether we can improve the shortest path to v found so far\n   by going through u."],"^14",true,"^8","~$loom.alg/can-relax-edge?","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",23,"^1<",["^16",[["~$p__38987","^T","^3E"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",169,"^1@","^1U","^12",169,"^1B",3,"^1C",true,"^15",["^16",["^17",["^16",[[["~$u","~$v","^3C","^3D"],"^T","^3E"]]]]],"^1:","Tests for whether we can improve the shortest path to v found so far\n   by going through u."],"~$bipartite-color",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",426,"^11",7,"^12",426,"^13",22,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Attempts a two-coloring of graph g. When successful, returns a map of\n  nodes to colors (1 or 0). Otherwise, returns nil."],"^8","~$loom.alg/bipartite-color","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",22,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",426,"^12",426,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Attempts a two-coloring of graph g. When successful, returns a map of\n  nodes to colors (1 or 0). Otherwise, returns nil."],"~$prim-mst",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",587,"^11",7,"^12",587,"^13",15,"^15",["^16",["^17",["^16",[["^2Z"]]]]],"^1:","Minimum spanning tree of given graph. If the graph contains more than one\n   component then returns a spanning forest of minimum spanning trees."],"^8","~$loom.alg/prim-mst","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",15,"^1<",["^16",[["^2Z"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",587,"^1@","^1A","^12",587,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["^2Z"]]]]],"^1:","Minimum spanning tree of given graph. If the graph contains more than one\n   component then returns a spanning forest of minimum spanning trees."],"~$dijkstra-span",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",149,"^11",7,"^12",149,"^13",20,"^15",["^16",["^17",["^16",[["~$g"],["~$g","^18"]]]]],"^1:","Finds all shortest distances from start. Returns a map in the\n  format {node {successor distance}}","^1I",["^ ","^1?",false,"^1J",2,"^1B",2,"^1<",["^16",[["~$g"],["~$g","^18"]]],"^15",["^16",[["~$g"],["~$g","^18"]]],"^1>",["^16",[null,null]]]],"^8","~$loom.alg/dijkstra-span","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",20,"^1I",["^ ","^1?",false,"^1J",2,"^1B",2,"^1<",["^16",[["~$g"],["~$g","^18"]]],"^15",["^16",[["~$g"],["~$g","^18"]]],"^1>",["^16",[null,null]]],"^1<",["^16",[["~$g"],["~$g","^18"]]],"^1=",null,"^1J",2,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^1L",[["^ ","^1J",1,"^1?",false,"^1M",["^7",[null,"^1A"]]],["^ ","^1J",2,"^1?",false,"^1M",["^7",[null,"^1A"]]]],"^10",149,"^12",149,"^1B",2,"^1C",true,"^15",["^16",[["~$g"],["~$g","^18"]]],"^1:","Finds all shortest distances from start. Returns a map in the\n  format {node {successor distance}}"],"~$all-pairs-shortest-paths",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",332,"^11",7,"^12",332,"^13",31,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Finds all-pairs shortest paths in a graph. Uses Johnson's algorithm for weighted graphs\n  which is efficient for sparse graphs. Breadth-first spans are used for unweighted graphs."],"^8","~$loom.alg/all-pairs-shortest-paths","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",31,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",332,"^1@",["^7",[null,"^1U","^1A"]],"^12",332,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]],"^1:","Finds all-pairs shortest paths in a graph. Uses Johnson's algorithm for weighted graphs\n  which is efficient for sparse graphs. Breadth-first spans are used for unweighted graphs."],"~$isomorphism?",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",784,"^11",7,"^12",784,"^13",19,"^15",["^16",["^17",["^16",[["^1R","^1S","~$phi"]]]]],"^1:","Given a mapping phi between the vertices of two graphs, determine\n  if the mapping is an isomorphism, e.g., {(phi x), (phi y)} connected\n  in g2 iff {x, y} are connected in g1."],"^8","~$loom.alg/isomorphism?","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",19,"^1<",["^16",[["^1R","^1S","^4?"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",784,"^1@","^1U","^12",784,"^1B",3,"^1C",true,"^15",["^16",["^17",["^16",[["^1R","^1S","^4?"]]]]],"^1:","Given a mapping phi between the vertices of two graphs, determine\n  if the mapping is an isomorphism, e.g., {(phi x), (phi y)} connected\n  in g2 iff {x, y} are connected in g1."],"~$edge-weights",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",543,"^11",8,"^12",543,"^13",20,"^14",true,"^15",["^16",["^17",["^16",[["^2Z","~$v"]]]]],"^1:","Wrapper function to return edges along with weights for a given graph.\n   For un-weighted graphs a default value of one is produced. The function\n   returns values of the form [[[u v] 10] [[x y] 20] ...]"],"^14",true,"^8","~$loom.alg/edge-weights","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",20,"^1<",["^16",[["^2Z","~$v"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",543,"^1@","^2J","^12",543,"^1B",2,"^1C",true,"^15",["^16",["^17",["^16",[["^2Z","~$v"]]]]],"^1:","Wrapper function to return edges along with weights for a given graph.\n   For un-weighted graphs a default value of one is produced. The function\n   returns values of the form [[[u v] 10] [[x y] 20] ...]"],"~$strongly-connected?",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",384,"^11",7,"^12",384,"^13",26,"^15",["^16",["^17",["^16",[["~$g"]]]]]],"^8","~$loom.alg/strongly-connected?","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",26,"^1<",["^16",[["~$g"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",384,"^1@","^1U","^12",384,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["~$g"]]]]]],"~$bellman-ford-transform",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",286,"^11",8,"^12",286,"^13",30,"^14",true,"^15",["^16",["^17",["^16",[["^2Z"]]]]],"^1:","Helper function for Johnson's algorithm. Uses Bellman-Ford to remove negative weights."],"^14",true,"^8","~$loom.alg/bellman-ford-transform","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",30,"^1<",["^16",[["^2Z"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",286,"^1@",["^7",["^1U","^1A"]],"^12",286,"^1B",1,"^1C",true,"^15",["^16",["^17",["^16",[["^2Z"]]]]],"^1:","Helper function for Johnson's algorithm. Uses Bellman-Ford to remove negative weights."],"~$pre-traverse",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",32,"^11",7,"^12",32,"^13",19,"^15",["^16",["^17",["^16",[["~$g"],["~$g","^18"]]]]],"^1:","Traverses graph g depth-first from start. Returns a lazy seq of nodes.\n  When no starting node is provided, traverses the entire graph, connected\n  or not.","^1I",["^ ","^1?",false,"^1J",2,"^1B",2,"^1<",["^16",[["~$g"],["~$g","^18"]]],"^15",["^16",[["~$g"],["~$g","^18"]]],"^1>",["^16",[null,null]]]],"^8","~$loom.alg/pre-traverse","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",19,"^1I",["^ ","^1?",false,"^1J",2,"^1B",2,"^1<",["^16",[["~$g"],["~$g","^18"]]],"^15",["^16",[["~$g"],["~$g","^18"]]],"^1>",["^16",[null,null]]],"^1<",["^16",[["~$g"],["~$g","^18"]]],"^1=",null,"^1J",2,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^1L",[["^ ","^1J",1,"^1?",false,"^1M","^1F"],["^ ","^1J",2,"^1?",false,"^1M","^1A"]],"^10",32,"^12",32,"^1B",2,"^1C",true,"^15",["^16",[["~$g"],["~$g","^18"]]],"^1:","Traverses graph g depth-first from start. Returns a lazy seq of nodes.\n  When no starting node is provided, traverses the entire graph, connected\n  or not."],"~$bf-span",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",106,"^11",7,"^12",106,"^13",14,"^15",["^16",["^17",["^16",[["~$g"],["~$g","^18"]]]]],"^1:","Returns a breadth-first spanning tree of the form {node [successors]}","^1I",["^ ","^1?",false,"^1J",2,"^1B",2,"^1<",["^16",[["~$g"],["~$g","^18"]]],"^15",["^16",[["~$g"],["~$g","^18"]]],"^1>",["^16",[null,null]]]],"^8","~$loom.alg/bf-span","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",14,"^1I",["^ ","^1?",false,"^1J",2,"^1B",2,"^1<",["^16",[["~$g"],["~$g","^18"]]],"^15",["^16",[["~$g"],["~$g","^18"]]],"^1>",["^16",[null,null]]],"^1<",["^16",[["~$g"],["~$g","^18"]]],"^1=",null,"^1J",2,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^1L",[["^ ","^1J",1,"^1?",false,"^1M",["^7",[null,"^1A"]]],["^ ","^1J",2,"^1?",false,"^1M",["^7",[null,"^1A"]]]],"^10",106,"^12",106,"^1B",2,"^1C",true,"^15",["^16",[["~$g"],["~$g","^18"]]],"^1:","Returns a breadth-first spanning tree of the form {node [successors]}"],"~$bf-traverse",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",83,"^11",7,"^12",83,"^13",18,"^15",["^16",["^17",["^16",[["~$g"],["~$g","^18"],["~$g","^18","~$&","^3K"]]]]],"^1:","Traverses graph g breadth-first from start. When option :f is provided,\n  returns a lazy seq of (f node predecessor-map depth) for each node traversed.\n  Otherwise, returns a lazy seq of the nodes. When option :when is provided,\n  filters successors with (f neighbor predecessor depth).","^1I",["^ ","^1?",true,"^1J",2,"^1B",2,"^1<",["^16",[["~$g"],["~$g","^18"]]],"^15",["^16",[["~$g"],["~$g","^18"],["~$g","^18","~$&","^3K"]]],"^1>",["^16",[null,null,null]]]],"^8","~$loom.alg/bf-traverse","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",18,"^1I",["^ ","^1?",true,"^1J",2,"^1B",2,"^1<",["^16",[["~$g"],["~$g","^18"]]],"^15",["^16",[["~$g"],["~$g","^18"],["~$g","^18","~$&","^3K"]]],"^1>",["^16",[null,null,null]]],"^1<",["^16",[["~$g"],["~$g","^18"]]],"^1=",null,"^1J",2,"^1>",["^16",[null,null,null]],"^11",1,"^1?",true,"^1L",[["^ ","^1J",1,"^1?",false,"^1M",["^7",["^1A","^1N"]]],["^ ","^1J",2,"^1?",false,"^1M","^1A"],["^ ","^1J",2,"^1?",true,"^1M","^1A"]],"^10",83,"^12",83,"^1B",2,"^1C",true,"^15",["^16",[["~$g"],["~$g","^18"],["~$g","^18","~$&","^3K"]]],"^1:","Traverses graph g breadth-first from start. When option :f is provided,\n  returns a lazy seq of (f node predecessor-map depth) for each node traversed.\n  Otherwise, returns a lazy seq of the nodes. When option :when is provided,\n  filters successors with (f neighbor predecessor depth)."],"~$post-traverse",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",58,"^11",7,"^12",58,"^13",20,"^15",["^16",["^17",["^16",[["~$g"],["~$g","^18","~$&","^3K"]]]]],"^1:","Traverses graph g depth-first, post-order from start. Returns a\n  vector of the nodes.","^1I",["^ ","^1?",true,"^1J",2,"^1B",2,"^1<",["^16",[["~$g"]]],"^15",["^16",[["~$g"],["~$g","^18","~$&","^3K"]]],"^1>",["^16",[null,null]]]],"^8","~$loom.alg/post-traverse","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",20,"^1I",["^ ","^1?",true,"^1J",2,"^1B",2,"^1<",["^16",[["~$g"]]],"^15",["^16",[["~$g"],["~$g","^18","~$&","^3K"]]],"^1>",["^16",[null,null]]],"^1<",["^16",[["~$g"]]],"^1=",null,"^1J",2,"^1>",["^16",[null,null]],"^11",1,"^1?",true,"^1L",[["^ ","^1J",1,"^1?",false,"^1M","^1F"],["^ ","^1J",2,"^1?",true,"^1M","^1A"]],"^10",58,"^12",58,"^1B",2,"^1C",true,"^15",["^16",[["~$g"],["~$g","^18","~$&","^3K"]]],"^1:","Traverses graph g depth-first, post-order from start. Returns a\n  vector of the nodes."],"~$topsort",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",66,"^11",7,"^12",66,"^13",14,"^15",["^16",["^17",["^16",[["~$g"],["~$g","^18"]]]]],"^1:","Topological sort of a directed acyclic graph (DAG). Returns nil if\n  g contains any cycles.","^1I",["^ ","^1?",false,"^1J",2,"^1B",2,"^1<",["^16",[["~$g"],["~$g","^18"]]],"^15",["^16",[["~$g"],["~$g","^18"]]],"^1>",["^16",[null,null]]]],"^8","~$loom.alg/topsort","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",14,"^1I",["^ ","^1?",false,"^1J",2,"^1B",2,"^1<",["^16",[["~$g"],["~$g","^18"]]],"^15",["^16",[["~$g"],["~$g","^18"]]],"^1>",["^16",[null,null]]],"^1<",["^16",[["~$g"],["~$g","^18"]]],"^1=",null,"^1J",2,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^1L",[["^ ","^1J",1,"^1?",false,"^1M",["^7",["^2P","^2J","^1N"]]],["^ ","^1J",2,"^1?",false,"^1M","^1A"]],"^10",66,"^12",66,"^1B",2,"^1C",true,"^15",["^16",[["~$g"],["~$g","^18"]]],"^1:","Topological sort of a directed acyclic graph (DAG). Returns nil if\n  g contains any cycles."],"~$eql?",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",778,"^11",7,"^12",778,"^13",11,"^15",["^16",["^17",["^16",[["^1R","^1S"]]]]],"^1:","Returns true iff g1 is a subgraph of g2 and g2 is a subgraph of g1"],"^8","~$loom.alg/eql?","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",11,"^1<",["^16",[["^1R","^1S"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",778,"^1@","^1U","^12",778,"^1B",2,"^1C",true,"^15",["^16",["^17",["^16",[["^1R","^1S"]]]]],"^1:","Returns true iff g1 is a subgraph of g2 and g2 is a subgraph of g1"],"~$dijkstra-path",["^ ","^Y",null,"^Z",["^ ","^[","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/alg.cljc","^10",164,"^11",7,"^12",164,"^13",20,"^15",["^16",["^17",["^16",[["~$g","^18","^2B"]]]]],"^1:","Finds the shortest path from start to end"],"^8","~$loom.alg/dijkstra-path","^[","resources/public/cljs-out/dev/loom/alg.cljc","^13",20,"^1<",["^16",[["~$g","^18","^2B"]]],"^1=",null,"^1>",["^16",[null,null]],"^11",1,"^1?",false,"^10",164,"^1@",["^7",["^1A","^1N"]],"^12",164,"^1B",3,"^1C",true,"^15",["^16",["^17",["^16",[["~$g","^18","^2B"]]]]],"^1:","Finds the shortest path from start to end"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^7",["^3Y","~:method-set","~:else","~:method","~:loops","^4X","~:return-seen","~:f"]],"~:order",["^4X","^51","~:f","^50","^4[","^3Y","^4Y","^4Z"]],"^1:","Graph algorithms. Any graph record/type that satisfies the\nGraph, Digraph, or WeightedGraph protocols (as appropriate per algorithm)\ncan use these functions."]