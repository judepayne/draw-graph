["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Object",["^ "],"~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$loom.flow","~:imports",null,"~:requires",["^ ","~$gen","~$loom.alg-generic","^=","^="],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$bf-path","^="],"~:defs",["^ ","~$satisfies-mass-balance?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/flow.cljc","~:line",28,"~:column",7,"~:end-line",28,"~:end-column",30,"~:arglists",["~#list",["~$quote",["^K",[["~$flow","~$source","~$sink"]]]]],"~:doc","Given a flow, verifies whether at each node the sum of in edge\n   weights is equal to the sum of out edge weights, except at the\n   source and sink. The source should have positive net outflow, the\n   sink negative, and together they should balance."],"^8","~$loom.flow/satisfies-mass-balance?","^E","resources/public/cljs-out/dev/loom/flow.cljc","^I",30,"~:method-params",["^K",[["^M","^N","^O"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"~:variadic?",false,"^F",28,"~:ret-tag","~$boolean","^H",28,"~:max-fixed-arity",3,"~:fn-var",true,"^J",["^K",["^L",["^K",[["^M","^N","^O"]]]]],"^P","Given a flow, verifies whether at each node the sum of in edge\n   weights is equal to the sum of out edge weights, except at the\n   source and sink. The source should have positive net outflow, the\n   sink negative, and together they should balance."],"~$bf-find-augmenting-path",["^ ","^C",null,"^D",["^ ","^E","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/flow.cljc","^F",65,"^G",7,"^H",65,"^I",30,"^J",["^K",["^L",["^K",[["~$successors","~$predecessors","~$capacity","^M","~$s","~$t"]]]]],"^P","Finds a shortest path in the flow network along which there remains\n   residual capacity. Successors is a function which, given a vertex,\n   returns the vertices connected by outgoing edges. Predecessors,\n   similarly is a function to get vertices connected by incoming\n   edges. Capacity is a function which takes two vertices and returns\n   the capacity between them. Flow is an adjacency map which contains\n   the current value of network flow. s is the source node, t the\n   sink."],"^8","~$loom.flow/bf-find-augmenting-path","^E","resources/public/cljs-out/dev/loom/flow.cljc","^I",30,"^R",["^K",[["^[","^10","^11","^M","~$s","~$t"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",65,"^V",["^7",[null,"~$seq","~$cljs.core/IList","~$any","~$clj-nil"]],"^H",65,"^X",6,"^Y",true,"^J",["^K",["^L",["^K",[["^[","^10","^11","^M","~$s","~$t"]]]]],"^P","Finds a shortest path in the flow network along which there remains\n   residual capacity. Successors is a function which, given a vertex,\n   returns the vertices connected by outgoing edges. Predecessors,\n   similarly is a function to get vertices connected by incoming\n   edges. Capacity is a function which takes two vertices and returns\n   the capacity between them. Flow is an adjacency map which contains\n   the current value of network flow. s is the source node, t the\n   sink."],"~$edmonds-karp",["^ ","^C",null,"^D",["^ ","^E","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/flow.cljc","^F",110,"^G",7,"^H",110,"^I",19,"^J",["^K",["^L",["^K",[["^[","^10","^11","^N","^O"],["^[","^10","^11","^N","^O","^M"]]]]],"^P","Computes the maximum flow on a network, using the edmonds-karp algorithm.\n   Successors is a function that returns the outgoing neighbor\n   vertices of a vertex. Predecessors is a function that returns the\n   incoming neighbor vertices for a vertex. Capacity is a function of\n   two vertices that returns the capacity on the edge between them.\n   Source and sink are the unique vertices which supply and consume\n   flow respectively.\n\n   Returns a vector [flow value], where flow is an adjacency map that\n   represents flows between vertices, and value is the quantity of\n   flow passing from source to sink.","~:top-fn",["^ ","^U",false,"~:fixed-arity",6,"^X",6,"^R",["^K",[["^[","^10","^11","^N","^O"],["^[","^10","^11","^N","^O","^M"]]],"^J",["^K",[["^[","^10","^11","^N","^O"],["^[","^10","^11","^N","^O","^M"]]],"^T",["^K",[null,null]]]],"^8","~$loom.flow/edmonds-karp","^E","resources/public/cljs-out/dev/loom/flow.cljc","^I",19,"^18",["^ ","^U",false,"^19",6,"^X",6,"^R",["^K",[["^[","^10","^11","^N","^O"],["^[","^10","^11","^N","^O","^M"]]],"^J",["^K",[["^[","^10","^11","^N","^O"],["^[","^10","^11","^N","^O","^M"]]],"^T",["^K",[null,null]]],"^R",["^K",[["^[","^10","^11","^N","^O"],["^[","^10","^11","^N","^O","^M"]]],"^S",null,"^19",6,"^T",["^K",[null,null]],"^G",1,"^U",false,"~:methods",[["^ ","^19",5,"^U",false,"~:tag","^15"],["^ ","^19",6,"^U",false,"^1<","~$cljs.core/IVector"]],"^F",110,"^H",110,"^X",6,"^Y",true,"^J",["^K",[["^[","^10","^11","^N","^O"],["^[","^10","^11","^N","^O","^M"]]],"^P","Computes the maximum flow on a network, using the edmonds-karp algorithm.\n   Successors is a function that returns the outgoing neighbor\n   vertices of a vertex. Predecessors is a function that returns the\n   incoming neighbor vertices for a vertex. Capacity is a function of\n   two vertices that returns the capacity on the edge between them.\n   Source and sink are the unique vertices which supply and consume\n   flow respectively.\n\n   Returns a vector [flow value], where flow is an adjacency map that\n   represents flows between vertices, and value is the quantity of\n   flow passing from source to sink."],"~$residual-capacity",["^ ","^C",null,"^D",["^ ","^E","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/flow.cljc","^F",7,"^G",7,"^H",7,"^I",24,"^J",["^K",["^L",["^K",[["^11","^M","~$v1","~$v2"]]]]],"^P","Computes the residual capacity between nodes v1 and v2. Capacity\n   is a function that takes two nodes, and returns the capacity on the\n   edge between them, if any. Flow is the adjacency map which\n   represents the current flow in the network."],"^8","~$loom.flow/residual-capacity","^E","resources/public/cljs-out/dev/loom/flow.cljc","^I",24,"^R",["^K",[["^11","^M","^1?","^1@"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",7,"^V","~$number","^H",7,"^X",4,"^Y",true,"^J",["^K",["^L",["^K",[["^11","^M","^1?","^1@"]]]]],"^P","Computes the residual capacity between nodes v1 and v2. Capacity\n   is a function that takes two nodes, and returns the capacity on the\n   edge between them, if any. Flow is the adjacency map which\n   represents the current flow in the network."],"~$augment-along-path",["^ ","^C",null,"^D",["^ ","^E","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/flow.cljc","^F",81,"^G",7,"^H",81,"^I",25,"^J",["^K",["^L",["^K",[["^M","^11","~$path","~$increase"]]]]],"^P","Given a flow represented as an adjacency map, returns an updated flow.\n   Capacity is a function of two vertices, path is a sequence of\n   nodes, and increase is the amount by which the flow should be\n   augmented on this path. If at any point the increase exceeds forward\n   capacity, the excess is pushed in the reverse direction. An exception\n   is thrown if the augmentation is impossible given capacity constraints."],"^8","~$loom.flow/augment-along-path","^E","resources/public/cljs-out/dev/loom/flow.cljc","^I",25,"^R",["^K",[["^M","^11","^1D","^1E"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",81,"^V",["^7",[null,"~$clj","^15"]],"^H",81,"^X",4,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^11","^1D","^1E"]]]]],"^P","Given a flow represented as an adjacency map, returns an updated flow.\n   Capacity is a function of two vertices, path is a sequence of\n   nodes, and increase is the amount by which the flow should be\n   augmented on this path. If at any point the increase exceeds forward\n   capacity, the excess is pushed in the reverse direction. An exception\n   is thrown if the augmentation is impossible given capacity constraints."],"~$is-admissible-flow?",["^ ","^C",null,"^D",["^ ","^E","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/flow.cljc","^F",51,"^G",7,"^H",51,"^I",26,"^J",["^K",["^L",["^K",[["^M","^11","^N","^O"]]]]],"^P","Verifies that a flow satisfies capacity and mass balance\n   constraints. Does verify that a flow is maximum."],"^8","~$loom.flow/is-admissible-flow?","^E","resources/public/cljs-out/dev/loom/flow.cljc","^I",26,"^R",["^K",[["^M","^11","^N","^O"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",51,"^V","^W","^H",51,"^X",4,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^11","^N","^O"]]]]],"^P","Verifies that a flow satisfies capacity and mass balance\n   constraints. Does verify that a flow is maximum."],"~$min-weight-along-path",["^ ","^C",null,"^D",["^ ","^E","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/flow.cljc","^F",58,"^G",7,"^H",58,"^I",28,"^J",["^K",["^L",["^K",[["^1D","~$weight-fn"]]]]],"^P","Given a path, represented by a sequence of nodes, and\n   weight-function, computes the minimum of the edge weights along the\n   path. If an edge on the path is missing, returns 0."],"^8","~$loom.flow/min-weight-along-path","^E","resources/public/cljs-out/dev/loom/flow.cljc","^I",28,"^R",["^K",[["^1D","^1K"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",58,"^V",["^7",[null,"^15"]],"^H",58,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^1D","^1K"]]]]],"^P","Given a path, represented by a sequence of nodes, and\n   weight-function, computes the minimum of the edge weights along the\n   path. If an edge on the path is missing, returns 0."],"~$flow-balance",["^ ","^C",null,"^D",["^ ","^E","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/flow.cljc","^F",18,"^G",7,"^H",18,"^I",19,"^J",["^K",["^L",["^K",[["^M"]]]]],"^P","Given a flow, returns a map of {node (sum(in weight) - sum(out weight))}"],"^8","~$loom.flow/flow-balance","^E","resources/public/cljs-out/dev/loom/flow.cljc","^I",19,"^R",["^K",[["^M"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",18,"^V",["^7",[null,"^15","^16"]],"^H",18,"^X",1,"^Y",true,"^J",["^K",["^L",["^K",[["^M"]]]]],"^P","Given a flow, returns a map of {node (sum(in weight) - sum(out weight))}"],"~$satisfies-capacity-constraints?",["^ ","^C",null,"^D",["^ ","^E","/Users/jude/Dropbox/Projects/aws/draw-graph/draw-graph.core/resources/public/cljs-out/dev/loom/flow.cljc","^F",40,"^G",7,"^H",40,"^I",38,"^J",["^K",["^L",["^K",[["^M","^11"]]]]],"^P","Given a flow map, and a capacity function, verifies that the flow\n   on each edge is <= capacity of that edge."],"^8","~$loom.flow/satisfies-capacity-constraints?","^E","resources/public/cljs-out/dev/loom/flow.cljc","^I",38,"^R",["^K",[["^M","^11"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",40,"^V","^W","^H",40,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^11"]]]]],"^P","Given a flow map, and a capacity function, verifies that the flow\n   on each edge is <= capacity of that edge."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^7",["~:else"]],"~:order",["^1U"]],"^P","Algorithms for solving network flow"]