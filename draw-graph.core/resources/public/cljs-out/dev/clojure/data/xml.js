// Compiled by ClojureScript 1.10.520 {:static-fns true, :optimize-constants true}
goog.provide('clojure.data.xml');
goog.require('cljs.core');
goog.require('cljs.core.constants');
goog.require('clojure.data.xml.name');
goog.require('clojure.data.xml.node');
goog.require('clojure.data.xml.js.dom');
goog.require('clojure.data.xml.protocols');
clojure.data.xml.parse_qname = clojure.data.xml.name.parse_qname;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.parse_qname;},cljs.core.cst$sym$clojure$data$xml_SLASH_parse_DASH_qname,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$parse_DASH_qname,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.parse_qname)?clojure.data.xml.parse_qname.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.name.parse_qname;},cljs.core.cst$sym$clojure$data$xml$name_SLASH_parse_DASH_qname,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml/name.cljc",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml$name,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,23,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$parse_DASH_qname,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.name.parse_qname)?clojure.data.xml.name.parse_qname.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.parse_qname;},cljs.core.cst$sym$clojure$data$xml_SLASH_parse_DASH_qname,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$parse_DASH_qname,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.parse_qname)?clojure.data.xml.parse_qname.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.qname_uri = clojure.data.xml.name.qname_uri;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.qname_uri;},cljs.core.cst$sym$clojure$data$xml_SLASH_qname_DASH_uri,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$qname_DASH_uri,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.qname_uri)?clojure.data.xml.qname_uri.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.name.qname_uri;},cljs.core.cst$sym$clojure$data$xml$name_SLASH_qname_DASH_uri,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$name,cljs.core.cst$sym$qname_DASH_uri,"resources/public/cljs-out/dev/clojure/data/xml/name.cljc",16,1,39,39,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null)),"Get the namespace uri for this qname",(cljs.core.truth_(clojure.data.xml.name.qname_uri)?clojure.data.xml.name.qname_uri.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.qname_uri;},cljs.core.cst$sym$clojure$data$xml_SLASH_qname_DASH_uri,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$qname_DASH_uri,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.qname_uri)?clojure.data.xml.qname_uri.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.qname_local = clojure.data.xml.name.qname_local;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.qname_local;},cljs.core.cst$sym$clojure$data$xml_SLASH_qname_DASH_local,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$qname_DASH_local,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.qname_local)?clojure.data.xml.qname_local.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.name.qname_local;},cljs.core.cst$sym$clojure$data$xml$name_SLASH_qname_DASH_local,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$name,cljs.core.cst$sym$qname_DASH_local,"resources/public/cljs-out/dev/clojure/data/xml/name.cljc",18,1,44,44,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null)),"Get the name for this qname",(cljs.core.truth_(clojure.data.xml.name.qname_local)?clojure.data.xml.name.qname_local.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.qname_local;},cljs.core.cst$sym$clojure$data$xml_SLASH_qname_DASH_local,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$qname_DASH_local,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.qname_local)?clojure.data.xml.qname_local.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.qname = clojure.data.xml.name.qname;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.qname;},cljs.core.cst$sym$clojure$data$xml_SLASH_qname,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$qname,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.qname)?clojure.data.xml.qname.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.name.qname;},cljs.core.cst$sym$clojure$data$xml$name_SLASH_qname,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$name,cljs.core.cst$sym$qname,"resources/public/cljs-out/dev/clojure/data/xml/name.cljc",12,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,3,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$local], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uri,cljs.core.cst$sym$local], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uri,cljs.core.cst$sym$local,cljs.core.cst$sym$prefix], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$local], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uri,cljs.core.cst$sym$local], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uri,cljs.core.cst$sym$local,cljs.core.cst$sym$prefix], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,49,49,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$local], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uri,cljs.core.cst$sym$local], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uri,cljs.core.cst$sym$local,cljs.core.cst$sym$prefix], null)),null,(cljs.core.truth_(clojure.data.xml.name.qname)?clojure.data.xml.name.qname.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.qname;},cljs.core.cst$sym$clojure$data$xml_SLASH_qname,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$qname,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.qname)?clojure.data.xml.qname.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.as_qname = clojure.data.xml.name.as_qname;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.as_qname;},cljs.core.cst$sym$clojure$data$xml_SLASH_as_DASH_qname,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$as_DASH_qname,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.as_qname)?clojure.data.xml.as_qname.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.name.as_qname;},cljs.core.cst$sym$clojure$data$xml$name_SLASH_as_DASH_qname,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$name,cljs.core.cst$sym$as_DASH_qname,"resources/public/cljs-out/dev/clojure/data/xml/name.cljc",15,1,83,83,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,(cljs.core.truth_(clojure.data.xml.name.as_qname)?clojure.data.xml.name.as_qname.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.as_qname;},cljs.core.cst$sym$clojure$data$xml_SLASH_as_DASH_qname,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$as_DASH_qname,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.as_qname)?clojure.data.xml.as_qname.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.uri_symbol = clojure.data.xml.name.uri_symbol;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.uri_symbol;},cljs.core.cst$sym$clojure$data$xml_SLASH_uri_DASH_symbol,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$uri_DASH_symbol,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.uri_symbol)?clojure.data.xml.uri_symbol.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.name.uri_symbol;},cljs.core.cst$sym$clojure$data$xml$name_SLASH_uri_DASH_symbol,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$name,cljs.core.cst$sym$uri_DASH_symbol,"resources/public/cljs-out/dev/clojure/data/xml/name.cljc",17,1,30,30,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uri], null)),null,(cljs.core.truth_(clojure.data.xml.name.uri_symbol)?clojure.data.xml.name.uri_symbol.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.uri_symbol;},cljs.core.cst$sym$clojure$data$xml_SLASH_uri_DASH_symbol,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$uri_DASH_symbol,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.uri_symbol)?clojure.data.xml.uri_symbol.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.symbol_uri = clojure.data.xml.name.symbol_uri;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.symbol_uri;},cljs.core.cst$sym$clojure$data$xml_SLASH_symbol_DASH_uri,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$symbol_DASH_uri,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.symbol_uri)?clojure.data.xml.symbol_uri.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.name.symbol_uri;},cljs.core.cst$sym$clojure$data$xml$name_SLASH_symbol_DASH_uri,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$name,cljs.core.cst$sym$symbol_DASH_uri,"resources/public/cljs-out/dev/clojure/data/xml/name.cljc",17,1,33,33,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ss], null)),null,(cljs.core.truth_(clojure.data.xml.name.symbol_uri)?clojure.data.xml.name.symbol_uri.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.symbol_uri;},cljs.core.cst$sym$clojure$data$xml_SLASH_symbol_DASH_uri,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$symbol_DASH_uri,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.symbol_uri)?clojure.data.xml.symbol_uri.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.element_STAR_ = clojure.data.xml.node.element_STAR_;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.element_STAR_;},cljs.core.cst$sym$clojure$data$xml_SLASH_element_STAR_,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$element_STAR_,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.element_STAR_)?clojure.data.xml.element_STAR_.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.node.element_STAR_;},cljs.core.cst$sym$clojure$data$xml$node_SLASH_element_STAR_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$node,cljs.core.cst$sym$element_STAR_,"resources/public/cljs-out/dev/clojure/data/xml/node.cljc",15,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,false,cljs.core.cst$kw$fixed_DASH_arity,4,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$attrs,cljs.core.cst$sym$content,cljs.core.cst$sym$meta], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$attrs,cljs.core.cst$sym$content], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$attrs,cljs.core.cst$sym$content,cljs.core.cst$sym$meta], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$attrs,cljs.core.cst$sym$content], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),1,185,185,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$attrs,cljs.core.cst$sym$content,cljs.core.cst$sym$meta], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$attrs,cljs.core.cst$sym$content], null)),"Create an xml element from a content collection and optional metadata",(cljs.core.truth_(clojure.data.xml.node.element_STAR_)?clojure.data.xml.node.element_STAR_.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.element_STAR_;},cljs.core.cst$sym$clojure$data$xml_SLASH_element_STAR_,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$element_STAR_,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.element_STAR_)?clojure.data.xml.element_STAR_.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.element = clojure.data.xml.node.element;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.element;},cljs.core.cst$sym$clojure$data$xml_SLASH_element,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$element,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.element)?clojure.data.xml.element.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.node.element;},cljs.core.cst$sym$clojure$data$xml$node_SLASH_element,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$node,cljs.core.cst$sym$element,"resources/public/cljs-out/dev/clojure/data/xml/node.cljc",14,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$variadic_QMARK_,true,cljs.core.cst$kw$fixed_DASH_arity,(2),cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$attrs], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$attrs], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$attrs,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$content], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),1,201,201,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$attrs], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$attrs,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$content], null)),"Create an xml Element from content varargs",(cljs.core.truth_(clojure.data.xml.node.element)?clojure.data.xml.node.element.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.element;},cljs.core.cst$sym$clojure$data$xml_SLASH_element,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$element,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.element)?clojure.data.xml.element.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.cdata = clojure.data.xml.node.cdata;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.cdata;},cljs.core.cst$sym$clojure$data$xml_SLASH_cdata,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$cdata,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.cdata)?clojure.data.xml.cdata.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.node.cdata;},cljs.core.cst$sym$clojure$data$xml$node_SLASH_cdata,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$node,cljs.core.cst$sym$cdata,"resources/public/cljs-out/dev/clojure/data/xml/node.cljc",12,1,207,207,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$content], null)),"Create a CData node",(cljs.core.truth_(clojure.data.xml.node.cdata)?clojure.data.xml.node.cdata.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.cdata;},cljs.core.cst$sym$clojure$data$xml_SLASH_cdata,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$cdata,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.cdata)?clojure.data.xml.cdata.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.xml_comment = clojure.data.xml.node.xml_comment;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.xml_comment;},cljs.core.cst$sym$clojure$data$xml_SLASH_xml_DASH_comment,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$xml_DASH_comment,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.xml_comment)?clojure.data.xml.xml_comment.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.node.xml_comment;},cljs.core.cst$sym$clojure$data$xml$node_SLASH_xml_DASH_comment,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$node,cljs.core.cst$sym$xml_DASH_comment,"resources/public/cljs-out/dev/clojure/data/xml/node.cljc",18,1,212,212,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$content], null)),"Create a Comment node",(cljs.core.truth_(clojure.data.xml.node.xml_comment)?clojure.data.xml.node.xml_comment.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.xml_comment;},cljs.core.cst$sym$clojure$data$xml_SLASH_xml_DASH_comment,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$xml_DASH_comment,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.xml_comment)?clojure.data.xml.xml_comment.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.element_QMARK_ = clojure.data.xml.node.element_QMARK_;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.element_QMARK_;},cljs.core.cst$sym$clojure$data$xml_SLASH_element_QMARK_,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$element_QMARK_,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.element_QMARK_)?clojure.data.xml.element_QMARK_.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.node.element_QMARK_;},cljs.core.cst$sym$clojure$data$xml$node_SLASH_element_QMARK_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$node,cljs.core.cst$sym$element_QMARK_,"resources/public/cljs-out/dev/clojure/data/xml/node.cljc",15,1,226,226,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$el], null)),null,(cljs.core.truth_(clojure.data.xml.node.element_QMARK_)?clojure.data.xml.node.element_QMARK_.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.element_QMARK_;},cljs.core.cst$sym$clojure$data$xml_SLASH_element_QMARK_,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$element_QMARK_,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.element_QMARK_)?clojure.data.xml.element_QMARK_.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.extend_dom_as_data_BANG_ = clojure.data.xml.js.dom.extend_dom_as_data_BANG_;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.extend_dom_as_data_BANG_;},cljs.core.cst$sym$clojure$data$xml_SLASH_extend_DASH_dom_DASH_as_DASH_data_BANG_,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$extend_DASH_dom_DASH_as_DASH_data_BANG_,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.extend_dom_as_data_BANG_)?clojure.data.xml.extend_dom_as_data_BANG_.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.js.dom.extend_dom_as_data_BANG_;},cljs.core.cst$sym$clojure$data$xml$js$dom_SLASH_extend_DASH_dom_DASH_as_DASH_data_BANG_,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$js$dom,cljs.core.cst$sym$extend_DASH_dom_DASH_as_DASH_data_BANG_,"resources/public/cljs-out/dev/clojure/data/xml/js/dom.cljs",26,1,172,172,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,(cljs.core.truth_(clojure.data.xml.js.dom.extend_dom_as_data_BANG_)?clojure.data.xml.js.dom.extend_dom_as_data_BANG_.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.extend_dom_as_data_BANG_;},cljs.core.cst$sym$clojure$data$xml_SLASH_extend_DASH_dom_DASH_as_DASH_data_BANG_,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$extend_DASH_dom_DASH_as_DASH_data_BANG_,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.extend_dom_as_data_BANG_)?clojure.data.xml.extend_dom_as_data_BANG_.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.element_node = clojure.data.xml.js.dom.element_node;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.element_node;},cljs.core.cst$sym$clojure$data$xml_SLASH_element_DASH_node,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$element_DASH_node,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.element_node)?clojure.data.xml.element_node.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.js.dom.element_node;},cljs.core.cst$sym$clojure$data$xml$js$dom_SLASH_element_DASH_node,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$js$dom,cljs.core.cst$sym$element_DASH_node,"resources/public/cljs-out/dev/clojure/data/xml/js/dom.cljs",19,1,89,89,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$el], null)),"Coerce xml elements to dom nodes",(cljs.core.truth_(clojure.data.xml.js.dom.element_node)?clojure.data.xml.js.dom.element_node.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.element_node;},cljs.core.cst$sym$clojure$data$xml_SLASH_element_DASH_node,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$element_DASH_node,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.element_node)?clojure.data.xml.element_node.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));

clojure.data.xml.element_data = clojure.data.xml.js.dom.element_data;

cljs.core.alter_meta_BANG_(new cljs.core.Var(function(){return clojure.data.xml.element_data;},cljs.core.cst$sym$clojure$data$xml_SLASH_element_DASH_data,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$element_DASH_data,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.element_data)?clojure.data.xml.element_data.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)),cljs.core.constantly(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.meta(new cljs.core.Var(function(){return clojure.data.xml.js.dom.element_data;},cljs.core.cst$sym$clojure$data$xml$js$dom_SLASH_element_DASH_data,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$ns,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$test],[cljs.core.cst$sym$clojure$data$xml$js$dom,cljs.core.cst$sym$element_DASH_data,"resources/public/cljs-out/dev/clojure/data/xml/js/dom.cljs",19,1,146,146,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$el], null)),"Coerce xml elements to element maps / content vectors",(cljs.core.truth_(clojure.data.xml.js.dom.element_data)?clojure.data.xml.js.dom.element_data.cljs$lang$test:null)]))),cljs.core.cst$kw$wrapped_DASH_by,new cljs.core.Var(function(){return clojure.data.xml.element_data;},cljs.core.cst$sym$clojure$data$xml_SLASH_element_DASH_data,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"resources/public/cljs-out/dev/clojure/data/xml.cljs",cljs.core.cst$kw$ns,cljs.core.cst$sym$clojure$data$xml,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$line,10,cljs.core.cst$kw$column,1,cljs.core.cst$kw$name,cljs.core.cst$sym$element_DASH_data,cljs.core.cst$kw$test,(cljs.core.truth_(clojure.data.xml.element_data)?clojure.data.xml.element_data.cljs$lang$test:null),cljs.core.cst$kw$arglists,cljs.core.List.EMPTY], null)))));
/**
 * Use DOMParser to parse xml string
 */
clojure.data.xml.parse_str = (function clojure$data$xml$parse_str(var_args){
var args__4736__auto__ = [];
var len__4730__auto___23513 = arguments.length;
var i__4731__auto___23514 = (0);
while(true){
if((i__4731__auto___23514 < len__4730__auto___23513)){
args__4736__auto__.push((arguments[i__4731__auto___23514]));

var G__23515 = (i__4731__auto___23514 + (1));
i__4731__auto___23514 = G__23515;
continue;
} else {
}
break;
}

var argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);
return clojure.data.xml.parse_str.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);
});

clojure.data.xml.parse_str.cljs$core$IFn$_invoke$arity$variadic = (function (s,p__23510){
var map__23511 = p__23510;
var map__23511__$1 = (((((!((map__23511 == null))))?(((((map__23511.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__23511.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__23511):map__23511);
var content_type = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__23511__$1,cljs.core.cst$kw$content_DASH_type,"text/xml");
var on_error = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__23511__$1,cljs.core.cst$kw$on_DASH_error,((function (map__23511,map__23511__$1,content_type){
return (function (p1__23507_SHARP_){
throw cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2("XML parser error",new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$doc,p1__23507_SHARP_,cljs.core.cst$kw$input,s], null));
});})(map__23511,map__23511__$1,content_type))
);
var raw = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__23511__$1,cljs.core.cst$kw$raw);
var dom = (new DOMParser()).parseFromString(s,content_type);
var doc = dom.documentElement;
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2("parsererror",doc.nodeName)){
return (on_error.cljs$core$IFn$_invoke$arity$1 ? on_error.cljs$core$IFn$_invoke$arity$1(doc) : on_error.call(null,doc));
} else {
if(cljs.core.truth_(raw)){
return doc;
} else {
return (clojure.data.xml.element_data.cljs$core$IFn$_invoke$arity$1 ? clojure.data.xml.element_data.cljs$core$IFn$_invoke$arity$1(doc) : clojure.data.xml.element_data.call(null,doc));

}
}
});

clojure.data.xml.parse_str.cljs$lang$maxFixedArity = (1);

/** @this {Function} */
clojure.data.xml.parse_str.cljs$lang$applyTo = (function (seq23508){
var G__23509 = cljs.core.first(seq23508);
var seq23508__$1 = cljs.core.next(seq23508);
var self__4717__auto__ = this;
return self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23509,seq23508__$1);
});

/**
 * Use XMLSerializer to render an xml string
 */
clojure.data.xml.emit_str = (function clojure$data$xml$emit_str(var_args){
var args__4736__auto__ = [];
var len__4730__auto___23521 = arguments.length;
var i__4731__auto___23522 = (0);
while(true){
if((i__4731__auto___23522 < len__4730__auto___23521)){
args__4736__auto__.push((arguments[i__4731__auto___23522]));

var G__23523 = (i__4731__auto___23522 + (1));
i__4731__auto___23522 = G__23523;
continue;
} else {
}
break;
}

var argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);
return clojure.data.xml.emit_str.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);
});

clojure.data.xml.emit_str.cljs$core$IFn$_invoke$arity$variadic = (function (e,p__23518){
var map__23519 = p__23518;
var map__23519__$1 = (((((!((map__23519 == null))))?(((((map__23519.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__23519.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__23519):map__23519);
return (new XMLSerializer()).serializeToString((clojure.data.xml.element_node.cljs$core$IFn$_invoke$arity$1 ? clojure.data.xml.element_node.cljs$core$IFn$_invoke$arity$1(e) : clojure.data.xml.element_node.call(null,e)));
});

clojure.data.xml.emit_str.cljs$lang$maxFixedArity = (1);

/** @this {Function} */
clojure.data.xml.emit_str.cljs$lang$applyTo = (function (seq23516){
var G__23517 = cljs.core.first(seq23516);
var seq23516__$1 = cljs.core.next(seq23516);
var self__4717__auto__ = this;
return self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__23517,seq23516__$1);
});

