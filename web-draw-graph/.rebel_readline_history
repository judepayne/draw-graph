1547401056993:(session/state)
1547401071728:(in-ns 'draw-graph.core)
1547401077736:session/state
1547401098482::cljs/quit
1547414004327:@selected-page
1547414021892:(in-ns 'draw-graph.core)
1547414028108:selected-page
1547414035713:@selected-page
1547414967529::cljs/quit
1547416117445:(def a "\nThis library uses Graphviz to actually draw the graphs and their are a few places where to get the graph looking as you want, you have to know something about some of the graphviz options that are useful. These place are marked with a [*].\nGraphviz is infinitely flexible but only a small portion of options are exposed through this library. In general, edge formats are specified in the data you specify for the description of the graph itself (see Section 1. below), whereas node, cluster and layout options can only be specified by a smaller number of higher level options that are described in Section 2. below.\n\n## 1. Input and Output format details\n\n### A. Input formats\nCSV1 and JGF share the same structure but differ in description of their \ndata payloads. The overall structure is:\n\n    { "data-format" : *format name*: i.e. "csv1" or "jgf"\n      "options" : *a map of processing options* (section 2.)\n      "data" : *the data* in i.e. CSV1 data format or JGF format\n\n### B. CSV1 data format\nRules for *csv1* format:\n\n* a string (presumed from slurping a csv)\n* (ususally) two columns+\n* each row specifies two nodes that are joined as an edge\n* the header row specifies the format of the nodes,\ne.g. `hierarchy:node_id:node_name:additional_fact1:...`\n* : (colon) is used as the separator in the header and subsequent rows.\n* Note: the string should use as a line separator as multiline strings\nare not allowed in Json.\n* +it's ok to have a third column an any/all rows describing an edge (not the header row). The third part of an edge definition specifies a set of Graphviz attributes about the edge in K,V form, using : again as a separator e.g. `color:red:label:important!` For more information about Graphviz edge attributes, please see [here.](https://www.graphviz.org/doc/info/attrs.html)\n\nCommon ones include: `color` (Graphviz has a wide range of color names [here](https://www.graphviz.org/doc/info/colors.html), `label` (a text label for the edge), `style` (e.g. set to 'dashed' or don't set for an undashed line), `penwidth` (the thickness of the edge, for example, try a value of 5 for a thick line).\n\n### C. JGF data format\nexample:\n\n    [[{'tree':'CRM','id':'0','name':'CRM'},\n    {'tree':'CRM','id':'A','name':'Above The Line'}],\n     [{'tree':'CRM','id':'A','name':'Above The Line'},...\n     ...\n     [{'id':'4'}{'id':'5'}{'color':'red','thickness':'2'}]]     \ni.e. A vector of graph edges, where each edge is two nodes and each node is a map of Keys and Values. The third row above demonstrates that it's possible to have a third map inside an edge definition, after the two nodes, that holds attributes of that edge.\n\n### D. Output Format: DOT\nThe format used for input into the Graphviz program. See [here](https://en.wikipedia.org/wiki/DOT_(graph_description_language))\nThe final (dot format) out is Json, in the form `{"dot" : *dot string*}`\n\n## 2.OPTIONS\n\nThe possible options are:\n\n`hide-leaves?` :true/false - will suppress (show as point nodes) the leaves of the graph.\n\n`show-roots?` :true/false - will highlight root nodes in the graph as stars symbols.\n\n`from-node` : a map describing all of part of a node in the graph e.g. {'id':'A'} which is used to filter a graph and only show that node and child nodes (recursively). This is useful to filter large graphs and just show selected parts.\n\n`cluster-on` : cluster the graph on one of the keys in the node definition. For example, setting cluster-on to 'hierarchy' (see section B above) will create a new cluster in the graph every time that changes.\n\n[*] `layout` : this is a graphviz setting that determines how the graph gets laid out. possible settings are 'dot' 'fdp' 'neato' 'circo' & 'twopi'. Please note, that some of these don't support clustering. Please experiment. More information is available [here.](https://www.graphviz.org) (under 'Roadmap'). 'dot' and 'neato' are usually your two first choices. 'dot' is alot faster than 'neato' for large graphs.\n\n")
1547417327487::cljs/quit
1547419243604:(in-ns 'draw-graph.home)
1547419248923:test-svg
1547419263233:(hickory/parse test-svg)
1547419280930:(hickory/as-hiccup (hickory/parse test-svg))
1547419501671:(html->hiccup test-svg)
1547419521742:(svg->hiccup test-svg)
1547419725541:(hickzip/hiccup-zip (html->hiccup test-svg))
1547419796744:(def c (html->hiccup test-svg))
1547419797891:c
1547419826860:(hickory.zip/hiccup-zip c)
1547419905163::cljs/quit
1547419944553:(in-ns 'draw-graph.gome)
1547419961966:(def c (html->hiccup test-svg))
1547419985501:test-svg
1547420009318:(in-ns 'draw-graph.home)
1547420011906:(def c (html->hiccup test-svg))
1547420023312:test-svg
1547420033854:(def c (html->hiccup test-svg))
1547420035237:c
1547420068630:(def c (html->hiccup (test-svg)))
1547420069956:c
1547420091085:(hickzip/hiccup-zip c)
1547420130629:(-> (hickzip/hiccup-zip c) zip/next zip/next zip/node)
1547420148405:(-> (hickzip/hiccup-zip c) zip/next zip/next zip/next zip/next zip/node)
1547420172570:(svg->hiccup c)
1547420330670:(svg->hiccup (test-svg))
1547421127989:(html->hiccup (test-svg))
1547466460025:(test-svg)
1547466490519:(utils/handle-parse (test-svg))
1547466676588::xljs/quit
1547466686513::cljs/quit
1547466828846:(in-ns 'draw-graph.utils)
1547466858565:(def svg "<svg>\n    <rect x='10' y='10' height='100' width='100'\n          style='stroke:#ff0000; fill: #0000ff'/>\n</svg>")
1547466887114:(html->hiccup svg true)
1547466927921:(handle-parse svg)
1547466960552:(clojure.string/blank? "")
1547466984212:(string/blank? "")
1547467129262:(string/replace "jude" #"u" "AAA")
1547467137840:svg
1547467155391:(handle-parse svg)
1547467169231:svg
1547467241613:(handle svg)
1547467746685:(cljs.reader/read-string (handle svg))
1547467802769:(cljs.reader/read-string (html->hiccup svg true))
1547467863177:(handle svg)
1547469406898:(def svg "<svg>\n    <rect x='10' y='10' height='100' width='100' stroke='#ff0000' fill='#0000ff'/>\n  </svg>")
1547469409614:svg
1547469431002:(handle svg)
1547469454750:(html->hiccup svg)
1547475898508::cljs/quit
1547543767481:(in-ns 'draw-graph.home)
1547543791703:(.getElementById js/document "uploadImage")
1547543807852:(.-id (.getElementById js/document "uploadImage"))
1547543818324:(.-value (.getElementById js/document "uploadImage"))
1547543931511:(.-click (.getElementById js/document "uploadImage"))
1547544024316:(.click (.getElementById js/document "uploadImage"))
1547545338331:(reset-autobuild)
1547552581412:@file-data
1547553818351:(in-ns 'draw-graph.home)
1547553824427:(form-template)
1547553840513:form-template
1547561240862:(:contents @file-data)
1547561257713:form-template
1547561272148:@file-data
1547561305663:@options
1547561385725:(clj->js @options)
1547561444297:(clj->json @options)
1547561549123:(json->clj (clj->json @options))
1547561642921:(clj->json @options)
1547561650833:(json->clj (clj->json @options))
1547561727246:@options
1547561735026:(json->clj (clj->json @options))
1547561776317:@file-data
1547561943335:(dot-input)
1547562083820:(gen-dot)
1547562100354:(get-dot)
1547562166007:(clj->json (dot-input))
1547562214571:(dot-input)
1547562310021:(get-dot)
1547563497570:(dot-input)
1547563502751:(get-dot)
1547572112310:(-> (get-dot) (p/then log))
1547572166958:(-> (get-dot) (p/then (fn [resp] (log (:body resp)))))
1547572346192:(get-dot)
1547574021655:(dot-input)
1547574063573:(get-dot)
1547574416293:(->dot (clj->json (dot-input)))
1547574428098:(dot-input)
1547574439183:(clj->json (dot-input))
1547574521800:(log (->dot (clj->json (dot-input))))
1547574567070:(defn add [x y] (+ x y))
1547574585566:(def add-2 [y] (partial add 2))
1547574597681:(defn add-2 [y] (partial add 2))
1547574603232:(add-2 4)
1547574656621:((add-2 4))
1547574755201:(add 2 4)
1547574770422:((partial add 2) 4)
1547574820115:(defn add-2 [y] ((partial add 2) y))
1547574826636:(add-2 4)
1547574926139:(log (->dot (clj->json (dot-input))))
1547574957571:(p/resolve (->dot (clj->json (dot-input))))
1547574984712:(def a (->dot (clj->json (dot-input))))
1547574987281:a
1547575192844:(def a (->> (->dot (clj->json (dot-input))) (p/map json->clj)))
1547575197854:a
1547575525941:(def a (->> (->dot (clj->json (dot-input))) (p/map transform-out-to-in)))
1547575530696:a
1547575603781:(def a (->> (->dot (clj->json (dot-input))) (p/map transform-out-to-in) (p/map dot->svg)))
1547575610643:a
1547575783648:(get-svg)
1547575807668:(p/resolve (get-svg))
1547575848147:(def t  (get-svg))
1547575849759:t
1547576220443:(get-svg)
1547576225882:@svg
1547576361574:(get-svg)
1547583692234:(map row form-template)
1547583754043:(count (map row form-template))
1547583800867:(type (map row form-template))
1547584146498:(map row crap)
1547584259339:(make-fields (map row crap))
1547584286643:(reset-autobuild)
1547584351963:(make-fields (map row crap))
1547584377253:(make-form (map row crap))
1547584400541:(make-form (map row crap) 1)
1547584425584:(type (make-form (map row crap) 1))
1547586134659:(vec '(1 2))
1547586219914:form-template2
1547586258187:(map row2 form-template2)
1547586413070:form-template2
1547586559098:((controls2))
1547593187437::cljs/quit
1547621616140:(reset-autobuild)
1547622751608:(in-ns draw-graph.home)
1547622763645:(in-ns 'draw-graph.home)
1547622806789:(def m {:a 1 :b "jude" :c "" :d 72 :e "fortune" :f ""})
1547622816059:(remove-empty-strings m)
1547634349435::cljs/quit
1547793823150:(in-ns 'draw-graph.home)
1547793837603:@file-data
1547793902967:(swap! file-data assoc :contents "jude")
1547794127867:@file-data
1547802947081::cljs/quit
1547893932544:(in-ns 'draw-graph.home)
1547893939835:@file-data
1547893958169:@options
1547893974695:@svg
1547893982557:@local-state
1547894023573:@file-data
1547921866252:(def local (atom {:options {:node-label "name"}}))
1547921871483:@local
1547921896594:(def cur (cursor local [:options]))
1547921902657:@cursor
1547922052418:@cur
1547923140970:(truth 1)
1547923150138:(truth_\n 1)
1547923311465:(utils/html->hiccup @svg)
1547923528423:git add *
1547924760577:@processing
1547924775631:(reset! processing true)
1547924952977:@load-button-state
1547929304109::cljs/quit
1548085491435:(in-ns 'draw-graph.check)
1548085506847:(as-and-bs "aaaaabbbaaaabb")
1548085526290:(def as-and-bs\n  (insta/parser\n    "S = AB*\n     AB = A B\n     A = 'a'+\n     B = 'b'+"))
1548085567892:(+ 1 1)
1548085570422:insta
1548085615531:(def as-and-bs\n  (insta/parser\n    "S = AB*\n     AB = A B\n     A = 'a'+\n     B = 'b'+"))
1548085629245::cljs/quit
1548085735885:(in-ns 'draw-graph.check)
1548085739081:insta
1548085759647:as-and-bs
1548085797770:(as-and-bs "aaaaabbbaaaabb")
1548089548329:(header "a:a")
1548089605398:(header "a\na")
1548089623766:(header "aa")
1548089636554:(header "aa:")
1548089675701:(header "aa")
1548089727848:(header "aa:")
1548089796287:(header "aa")
1548089809868:(header "aa:bb:")
1548089815863:(header "aa:bb")
1548089905032:(header "a")
1548089909878:(header "a:")
1548089916812:(header "a:a")
1548089923467:(header "a:a:")
1548089990979:(header "a:ab:")
1548089998487:(header "a1425:ab:")
1548090025158:(header "a 1425:ab:")
1548090081565:(header "a 1425:ab:a")
1548090098968:(header "a 1425:ab:a:")
1548090152645:(header "a 1425:ab:a_")
1548090162973:(header "a 1425:ab:a")
1548090185110:(header "a 1425:ab:a-")
1548090206545:(header "a 1425:ab:a-:")
1548090229226:(header "a 1425:ab:a-")
1548090237211:(header "a 1425:ab:a")
1548090251708:(header "a 1425:ab:a_")
1548090268624:(header "a 1425:ab:a_.-")
1548090273251:(header "a 1425:ab:a_.-+")
1548090303190:(header "a/1425:ab:a_.-+")
1548090314583:(header "a/142'5:ab:a_.-+")
1548090636832:(number-keys "a/1425:ab:a_.-+")
1548090643391:(number-keys "a/142'5:ab:a_.-+")
1548090898875:header
1548091191038:(header "a/1425:ab:a_.-+")
1548091196549:(header2 "a/1425:ab:a_.-+")
1548091268653:(str "S = (A B)+ A; A = " ok-kv ";B = ':'")
1548091299757:(header "a/1425:ab:a_.-+")
1548091305823:(header2 "a/1425:ab:a_.-+")
1548091357172:(header "a/1425:ab:a_.-+")
1548091365850:(header2 "a/1425:ab:a_.-+")
1548091407663:(number-keys "a/1425:ab:a_.-+")
1548091412960:(number-keys "a/142'5:ab:a_.-+")
1548091474774:(number-keys "a/1425:ab:a_.-+")
1548091506496:(number-keys "a/142'5:ab:a_.-+")
1548091615137:(number-keys "a/1425:ab:a_.-+")
1548096806940:(node 2)
1548096840994:(repeat 2 "A B ")
1548096855441:(type (repeat 2 "A B "))
1548096879437:(apply concat (repeat 2 "A B "))
1548096891857:(apply str (repeat 2 "A B "))
1548096932065:(node 2)
1548096944531:(node 3\n      )
1548097005607:(row 3)
1548098176842:((row 2) "v1:v2,v3:v4")
1548098190759:((row 2) "v1:v2,v3:v4,a1:av1")
1548098212517:((row 2) "v1:v2,v3:v4,a1:av1:a2:av2")
1548098229066:((row 2) "v1:v2,v3:val4,a1:av1")
1548098344797:((row 2) "v1:v2,v3:val4,a1:av1:a2:av2")
1548098363405:(time ((row 2) "v1:v2,v3:val4,a1:av1:a2:av2"))
1548098401207:(time (dotimes [n 10] ((row 2) "v1:v2,v3:val4,a1:av1:a2:av2")))
1548098477394:(time (dotimes [n 100] ((row 2) "v1:v2,v3:val4,a1:av1:a2:av2")))
1548100530806:(in-ns 'draw-graph.home)
1548100553374:(:data @local-state)
1548100609682:(check/check-csv1 (:data @local-state))
1548100637222:(:data @local-state)
1548100640913:(check/check-csv1 (:data @local-state))
1548100673786:(:data @local-state)
1548100676464:(check/check-csv1 (:data @local-state))
1548101201256:(:data @local-state)
1548101208860:(check/check-csv1 (:data @local-state))
1548101247370:(:data @local-state)
1548101251949:(check/check-csv1 (:data @local-state))
1548102124949:(time (check/check-csv1 (:data @local-state)))
1548102142556:(time (dotimes [n 100] (check/check-csv1 (:data @local-state))))
1548102152670:(time (dotimes [n 1000] (check/check-csv1 (:data @local-state))))
1548102230059::cljs/quit
1548157622283:(clj->json (dot-input))
1548157648710:(in-ns 'draw-graph.home)
1548157652451:(clj->json (dot-input))
1548157809980:(->dot (clj->json (dot-input)))
1548157825501:(def res (->dot (clj->json (dot-input))))
1548157829407:res
1548158077520:(def res (->dot (clj->json (dot-input))))
1548158080366:res
1548158867005:(def res (->dot (clj->json (dot-input))))
1548451213990::cljs/quit
1548705049670:(in-ns 'draw-graph.home)
1548705065533:(-> (p/promise (ex-info "error" nil))\n    (p/catch (fn [error]\n               (.log js/console error))))
1548708732482:[:div <a href=\\"http://clojure.org\\">]
1548708761035:[:div "<a href=\\"http://clojure.org\\">"]
1548708791233:(html [:div "<a href=\\"http://clojure.org\\">"])
1548708836289:(hiccup.core/\n  html [:div "<a href=\\"http://clojure.org\\">"])
1548708854750:(hiccup.core/html [:div "hi"])
1548708872189:(use 'hiccup.core)
1548708956114::cljs/quit
1548709381963:(now)
1548709425533:(.getTime (js/Date.))
1548767895969::cljs/quit
1549023514960:(in-ns 'draw-graph.home)
1549023523421:(examples/example1)
1549023533264:'(examples/example1)
1549023542681:('(examples/example1))
1549023564114:(eval \n '(examples/example1))
1549023673692:(def f (quote (examples/example1)))
1549023675344:f
1549023678730:(f)
1549023701107:(def f (quote examples/example1\n              ))
1549023702468:f
1549023706632:(f)
1549023768170:(def f `examples/example1)
1549023770049:f
1549023781188:(f)
1549024026049:examples/example1
1549024080972:draw-graph.examples/example1
1549024087206:(draw-graph.examples/example1)
1549024124882:(def f examples/example1)
1549024128224:(f)
1549024311187::cljs/quit
1549025242085:(def f examples/example1)
1549025253310:(in-ns 'draw-graph.home)
1549025255447:(def f examples/example1)
1549025257213:f
1549025260318:(f)
1549025274966:(def g 'examples/example1)
1549025277362:g
1549025281356:(g)
1549025287454:((g))
1549026266274:(defn mycar [x] (first x))
1549026274869:((resolve (symbol "mycar")) [1 2 3])
1549026316821:((resolve (symbol `mycar)) [1 2 3])
1549026326418:((resolve (symbol 'mycar)) [1 2 3])
1549026356231:((resolve (quote (symbol"mycar"))) [1 2 3])
1549026382669:(defn mycar [] "hi")
1549026386427:(mycar)
1549026403077:((resolve (quote (symbol"mycar"))))
1549026431011:(resolve "my-car")
1549026444388:(resolve 'my-car)
1549026450789:(resolve `my-car)
1549026881472::cljs/quit
1549144440073:(in-ns 'draw-graph.home)
1549144453270:(bind-form)
1549181139345:(svg-filename)
1549181556342:(random-uuid)
1549181582689:(subs 0 7 (random-uuid))
1549181614785:(subs (random-uuid) 0 7)
1549181641268:(subs (str (random-uuid)) 0 7)
1549228253467::cljs/quit
1549312225327:(in-ns 'draw-graph.home)
1549312310369:(-> (js/document) (.getElementById "shape") (.-innerHTML))
1549312329053:(-> js/document (.getElementById "shape") (.-innerHTML))
1549312719168:(-> js/document (.getElementById "shape") (.-innerHTML) (.-value))
1549312733665:(-> js/document (.getElementById "shape") (.-innerHTML))
1549312754325:(-> js/document (.getElementById "shape"))
1549312801404:(-> js/document (.getElementById "shape") (.-innerHTML))
1549312948260:(set! (-> js/document (.getElementById "shape") .-value "box")\n      )
1549313003785:(set! (-> js/document (.getElementById "shape") (.-value)) "box")
1549313018992:(set! (-> js/document (.getElementById "shape") (.-value)) "ellipse")
1549313127420:(set-value "shape" "box")
1549313360929:(-> js/document (.getElementById "layout") (.-innerHTML))
1549378188812:(string/split (:data local-state) #"\\n" 1)
1549378202664:(string/split (:data @local-state) #"\\n" 1)
1549378212439:(:data @local-state)
1549378253932:(string/split (:data @local-state) #"\\n" 1)
1549378271021:(string/split (:data @local-state) "\\n" 1)
1549378326449:(string/split-lines (:data @local-state))
1549378357611:(string/split (:data @local-state) "\\n" 2\n              )
1549378374224:(string/split (:data @local-state) #"\\n" 2)
1549378384105:(first (string/split (:data @local-state) #"\\n" 2))
1549378611072:(headers local-state)
1549384651784:(:data @local-state)
1549384670813:(get-headers (:data @local-state))
1549387195174:(-> "hello\\njude" (.split "\\n"))
1549387212209:(aget (-> "hello\\njude" (.split "\\n")) 0)
1549387275935:(def s "hello\\njude")
1549387276678:s
1549387282760:(first-line s)
1549387334575:(first-line "")
1549387690364:(first-line s\n            )
1549387703116:(first-line s)
1549387764199:(def s "tree:id\\nprds:1024")
1549387768714:(first-line s)
1549401090011:(js-array->clj (first-line s))
1549401501625:(first-line s)
1549401519875:(alength (first-line s))
1549401537564:(aget (first-line s) 0)
1549401697316:(js-array->clj (first-line s))
1549402249695:(first-line "")
1549402636314:headers
1549402647701:@headers
1549402702197:(deref headers)
1549402871294:@headers
1549402936618:(cons () 1)
1549402945195:(cons 1 ())
1549402954805:(cons 2 (cons 1 ()))
1549403580231:(node-label)
1549403630481:@headers
1549403658220:(for [x @headers] [x])
1549403697689:(for [x @headers] [:option {:key x} x])
1549403917319:for [i (range 12)]\n     [:g\n      {:transform (str\n                   "translate(300,300) "\n                   "rotate(" (* i 30) ") "\n                   "translate(100)")}\n      [concentric-circles]])
1549403971752:(for [i (range 12)]\n     [:g\n      {:transform (str\n                   "translate(300,300) "\n                   "rotate(" (* i 30) ") "\n                   "translate(100)")}\n      [concentric-circles]])
1549404275778:(node-label)
1549445169665:(:hide-leaves? options)
1549445179334:(:hide-leaves? @\n                options)
1549445241593:(:hide-leaves? @options)
1549445385593:(swap assoc options :hide-leaves? true)
1549445395046:(swap! assoc options :hide-leaves? true)
1549445457192:@options
1549445485790:(swap! assoc options :hi "jude")
1549465026739:(.getElementById "cluster-on")
1549465092205:(-> js/document (.getElementById "cluster-on") (.-innerHTML))
1549465107079:(-> js/document (.getElementById "cluster-on") (.-value\n                                                ))
1549465117252:(-> js/document (.getElementById "cluster-on") (.-value))
1549465149692:(-> js/document (.getElementById "cluster-on") (.-innerHTML))
1549529307330:(swap! local-state update-in [:options] assoc :splines false)
1549529365794:(swap! local-state update-in [:options] assoc :splines "ortho")
1549531967269:(swap! local-state update-in [:options] assoc :splines "ortho" :ranksep 2)
1549531980616:(swap! local-state update-in [:options] assoc :splines "ortho" :ranksep 20)
1549532022068:(swap! local-state update-in [:options] assoc :splines "ortho" :ranksep 2)
1549546179000:(apply swap! local-state update-in [:options] assoc [:splines "ortho" :ranksep 2])
1549546418526:(apply swap! local-state update-in [:options] assoc {splines "ortho" :ranksep 2})
1549546445459:(apply swap! local-state update-in [:options] assoc [:splines "ortho" :ranksep 2])
1549546620534:(map-every-nth inc [1 2 3 4] 2)
1549546758239:(str->vec "a 1 b 2")
1549546860942:(string/split "a 1" #" ")
1549546892852:(str->vec "a 1 b 2")
1549547166458:@options
1549547172598:(dissoc @options :label :hide-leaves? :show-roots? :shape :layout :cluster-on)
1549547213070:(str (dissoc @options :label :hide-leaves? :show-roots? :shape :layout :cluster-on))
1549547343660:(map->str {})
1549547354852:(map->str {:a 1})
1549549456334:@advanced
1549616378339:[splines]
1549616387653:(splines)
1549616440079:(fixed-select [:options :splines] local-state "line" "spline" "none")
1549616496217:(cluster-on)
1549634316076::cljs/quit
1549894431283:cljs/quit
1549894437351::cljs/quit
1549979373423:(in-ns 'draw-graph.home)
1549979380197:(part-filename)
1549979441575:@options
1549979458457:(part-filename)
1549979473650:@options
1549979491593:(part-filename)
1550224596678::cljs/quit
1550433426667:(def s [1])
1550433430423:(first s)
1550433434394:(second s)
1550433447241:(nth s 2)
1550438357060::cljs/quit
1550440804466:(in-ns 'draw-graph.home)
1550440842938:(->csv1)
1550440853412:(->dot)
1550441097697:(processor/process (->dot))
1550442273736::cljs/quit
1550444027551:(in-ns 'draw-graph.home)
1550444055045:(->dot)
1550444069074:(processor/process (->dot))
1550444224606::cljs/quit
1550444338966:(in-ns 'draw-graph.home)
1550444356210:(->dot)
1550444382457:(processor/process (->dot))
1550444699830::cljs/quit
1550444798620:(in-ns 'draw-graph.home)
1550444809452:(->dot)
1550444825505:(processor/process (->dot))
1550444942349:(gensym "node")
1550444981184:(def *node-id* nil)
1550444996315:(def ^:dynamic \n  *node-id* nil)
1550445067485:(binding [*node-id* (or *node-id (memoize (fn [_#] (gensym "node"))))])
1550445079556:(binding [*node-id* (or *node-id* (memoize (fn [_#] (gensym "node"))))])
1550445085753:*node-id*
1550445336777:(gensym)
1550445347239:(gensym "node")
1550445495032:*node-id*
1550445523326:(or *node-id* 1)
1550446191412::cljs/quit
1550446239126:(in-ns 'draw-graph.home)
1550446244153:(->dot)
1550446253422:(processing/process (->dot))
1550446267260:(processor/process (->dot))
1550446630829::cljs/quit
1550446719180:(in-ns 'draw-graph.home)
1550446722823:(->dot)
1550446733049:(processor/process (->dot))
1550446801022::cljs/quit
1550446844416:(in-ns 'draw-graph.home)
1550473170243:(.toString 230 16)
1550473476145::cljs/quit
1550473522386:(in-ns 'draw-graph.home)
1550473541609:*produce-dot-locally*
1550473618109:(def *produce-dot-locally* false)
1550473643658:*produce-dot-locally*
1550473665169:(def *produce-dot-locally* true\n  )
1550475110005:(def *produce-dot-locally* false)
1550475134868:(def *produce-dot-locally* true)
1550475174592:(def *produce-dot-locally* false)
1550475272863:*produce-dot-locally*
1550475275924:(def *produce-dot-locally* false)
1550475510803:*produce-dot-locally*
1550475515708:(def *produce-dot-locally* false)
1550475517935:*produce-dot-locally*
1550475574164:(def *produce-dot-locally* false)
1550475575896:*produce-dot-locally*
1550475775923::cljs/quit
1553930991438:(in-ns 'draw-graph.help)
1553931009177:(gen-rects)
1553936311089:@state
1553936329067:(gen-rects)
1553936453279:@state
1553936462876:(gen-rects)
1553936510813:@state
1553936527407:(reset! state {:a 1})
1553936530950:@state
1553936574815:(gen-rects)
1553936601264:(type (gen-rects))
1553936614393:[1;2C\n \n \n ]
1553936665433:(reset! state nil)
1553936676268:(reset! state (gen-rects))
1553937124572::cljs/quit
1553950930086:constraints
1553950957614:(in-ns 'draw-graph.help)
1553950964228:boundary
1553950972407:constraints
1553951144353::cljs/quit
1553951925958:(in-ns 'draw-graph.help)
1553951939803:constraints
1553951949488:boundary
1553951991362:(anneal)
1553951996323:@state
1553952034168::cljs/quit
1553952070308:(in-ns 'draw-graph.help)
1553952073645:constraints
1553952107578:(anneal)
1553952113448:@state
1553952141237:(reset! state (gen-rects))
1553952156232:@state
1553952184391:(reset! state nil)
1553952189139:@state
1553952248764::cljs/quit
1553952282224:(in-ns 'draw-graph.help)
1553952285349:@state
1553961895565:(anneal)
1553962712356::cljs/quit
1554065886750:(in-ns 'draw-graph.help)
1554065893891:@state
1554065929813:(a 1)
1554065950311:(a 100)
1554065993241::cljs/quit
1554066118626:(in-ns 'draw-graph.help)
1554066140831:(time (a 6000))
1554066447474::cljs/quit
1554370971511:(in-ns 'draw-graph.help)
1554371161433::cljs/quit
1554628925656:(in-ns 'draw-graph.help)
1554628931055:(constraints)
1554629048068:(g/rand-rects (+ 3 (rand-int 7))\n                (zipmap [:x :y :w :h] boundary)\n                5))
1554629098231:(g/gen-rects 3 (zipmap [:x :y :w :h] boundary) 5))
1554629135323:(def b (zipmap [:x :y :w :h] boundary))
1554629136841:b
1554629159027:(g/rand-rects 3 b 5)
1554629174147:(g/rand-rects 1\n              b 5)
1554629593429:(constraints)
1554632202439:(-> @state :constraints :obstacles)
1554632210010:(-> @state :constraints)
1554632244435:@state
1554632299384:(let [rects (gen-rects)\n                               st (into {} (rest rects))\n                               obs [(second (first rects))]]\n                           (do (swap! state assoc :state st)\n                               (swap! state assoc :running false)\n                               (swap! state assoc :constraints\n                                      (assoc constraints :obstacles obs))))
1554632326562:(map #(apply rect-filled %) (-> @state :constraints :obstacles))
1554634767248::cljs/quit
1554889799904:(in-ns 'draw-grpah.help)
1554889803344:@state
1554889843056:page-content
1554889865647:(in-ns 'draw-graph.help)
1554889871507:@state
1554890028379:(generate)
1554890043871:(gen-rects)
1554890849673:(rand-rect \n )
1554890946334:(rand-rect)
1554890986891:(rand-rect boundary 5\n           )
1554891030901:(rand-int 20)
1554891337499:boundary
1554891343238:(rand-rect boundary 5\n           )
1554891934430:(rand-rects 5 inner-boundary 5)
1554892060263:(generate)
1554892085722:(gen-rects)
1554892129822:(generate)
1554892507118:boundary
1554892514768:(apply rect boundary)
1554892623557:boundary
1554892655147:(:x boundary)
1554892710667:(def r boundary)
1554892729940:[:rect {:x (:x r) :y (:y r) :width  (:w r) :height (:h r)\n          :style {:fill (if filled? "#98b4c7" "#d7e5ee")\n                  :stroke "#98b4c7"\n                  :stroke-width 2}}]
1554892789810:(rect boundary)
1554892892186:(generate)
1554892920637:@state
1554892938423:(def s (:state @state))
1554892939346:s
1554893051780:@state
1554893057057:(generate)
1554893063121:(def s (:state @state))
1554893106174:(rects->svg s false)
1554893112351:s
1554893135818:(rects->svg (vals s) false)
1554893145235:(vals s)
1554893178939:@state
1554893186433:(:state @state)
1554893232592:s
1554893246745:(rects->svg s false)
1554893262202:@state
1554893268119:(generate)
1554893330478:(def obs (-> @state :constraints :obstacles))
1554893332897:obs
1554893348884:(rects->svg obs false)
1554972015424::cljs/quit
1554972386032:urrent state of system\n          (figwheel.client/set-autoload false)    ;; will turn autoloading off\n          (figwheel.client/set-repl-pprint false) ;; will turn pretty printing off\n  Switch REPL build focus:\n          :cljs/quit                      ;; allows you to switch REPL to another build\n    Docs: (doc function-name-here)\n    Exit: :cljs/quit\n Results: Stored in vars *1, *2, *3, *e holds last exception object\nPrompt will show when Figwheel connects to your application\n[Rebel readline] Type :repl/help for online help info\nClojureScript 1.10.439\napp:cljs.user!{:conn 2}=> :cljs/quit\nJudes-MBP:web-draw-graph jude$ lein figwheel\nFigwheel: Cutting some fruit, just a sec ...\nFigwheel: Validating the configuration found in project.clj\nSpec Warning:  :asset-path has no effect without a :main or :modules\nFigwheel: Configuration Valid ;)\nFigwheel: Starting server at http://0.0.0.0:3449\nFigwheel: Watching build - app\nCompiling build :app to "public/js/app.js" from ["src/cljs" "env/dev/cljs"]...\nFailed to compile build :app from ["src/cljs" "env/dev/cljs"] in 1.18 seconds.\n----  Could not Analyze  public/js/out/lib_draw_graph/anneal.cljc   line:6  column:1  ----\n\n  Only [lib.ns :only (names)] and optionally `:rename {from to}` specs supported in :use / :use-macros; offending spec: [clojure.data] at line 6 public/js/out/lib_draw_graph/anneal.cljc\n\n  4    (:require [lib-draw-graph.geometry :refer [overlaps? inside? bigger? area]]))\n  5  \n  6  (use 'clojure.data)\n     ^--- Only [lib.ns :only (names)] and optionally `:rename {from to}` specs supported in :use / :use-macros; offending spec: [clojure.data] at line 6 public/js/out/lib_draw_graph/anneal.cljc\n  7  \n  8  #?(:clj (import [java.lang Math]))\n\n----  Analysis Error : Please see public/js/out/lib_draw_graph/anneal.cljc  ----\nFigwheel: Starting CSS Watcher for paths  ["public/css"]\nFigwheel: Starting nREPL server on port: 7002\nLaunching ClojureScript REPL for build: app\nFigwheel Controls:\n          (stop-autobuild)                ;; stops Figwheel autobuilder\n          (start-autobuild id ...)        ;; starts autobuilder focused on optional ids
1555866242098::cljs/quit
1556432994767:¯(in-ns 'draw-graph.home)
1556433020325:(in-ns 'draw-graph.home)
1556433050341:(csv1)
1556433069511:(->\n csv1)
1556433079850:(->csv1)
1556433119495:@local-state
1556433220768::cljs/quit
1556433246376:@local-state
1556433317451:(->csv1)
1556433332999:(in-ns 'draw-graph.home)
1556433337409:@local-state
1556433369877:(:data @local-state)
1556433662069:(in-ns 'draw-graph.home)
1556433669911:@local-state
1556433687764:(->csv1)
1556433723472:(clj->json (->csv1))
1556433752385:(->svg (clj->json (->csv1)))
1556433802346:(p/map json->clj (->svg (clj->json (->csv1))))
1556434337348:*product-dot-locally*
1556434352872:*produce-dot-locally*
1556434559467:(->csv1)
1556434680515:(:pp-font (->csv1))
1556439277620::cljs/quit
1556487386071:(in-ns 'draw-graph.home)
1556487416084:(def d "\ndigraph D {\n\n  A [shape=diamond]\n  B [shape=box]\n  C [shape=circle]\n\n  A -> B [style=dashed, color=grey]\n  A -> C [color="black:invis:black"]\n  A -> D [penwidth=5, arrowhead=none]\n\n}")
1556487531094:(def d "\ndigraph D {\n\n  A [shape=diamond]\n  B [shape=box]\n  C [shape=circle]\n\n  A -> B [style=dashed, color=grey]\n  A -> C [color=blue]\n  A -> D [penwidth=5, arrowhead=none]\n\n}")
1556487533220:d
1556487564113:(convert-dot->svg d)
1556487577815:d
1556487638644:d2
1556487646329:(convert-dot->svg d2)
1556487781476::cljs/quit
1556487819593:d2
1556487829177:(in-ns 'draw-graph.home)
1556487831830:d2
1556487846648:(convert-dot->svg d2)
1556488117426::cljs/quit
1556488145261:(in-ns 'draw-graph.home)
1556488148566:(convert-dot->svg d2)
1556488492873:(def d3 (clj->json (dot->svg d2)))
1556488495022:d3
1556488540438:(post url-lambda-draw-graph d3)
1556488704139:(js/Promise.resolve (post url-lambda-draw-graph d3))
1556488717009:(p/await (js/Promise.resolve (post url-lambda-draw-graph d3)))
1556488795141:(p/alet [k (p/await (js/Promise.resolve (post url-lambda-draw-graph d3))] k)
1556488847477:(p/alet [k (p/await (js/Promise.resolve (post url-lambda-draw-graph d3)))] k)
1556489061588:(async\n (-> (post url=lambda-draw-graph d3)\n     js/Promise.resolve\n     p/await))
1556489181581:(->csv1)
1556489191503:@local-state
1556489225704:(process-remotely)
1556533313815::cljs/quit
1557913974263:(in-ns' lib-draw-graph.svg)
1557913987007:(in-ns '\n        lib-draw-graph.svg)
1557913999979:(->xml "hello")
1557914060645::cljs/quit
