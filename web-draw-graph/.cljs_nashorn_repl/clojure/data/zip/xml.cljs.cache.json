["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$clojure.data.zip.xml","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^<","^<","~$zf","~$clojure.data.zip","^>","^>","~$zip","~$clojure.zip","^@","^@"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$xml->",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/jude/Dropbox/Projects/aws/draw-graph/web-draw-graph/.cljs_nashorn_repl/clojure/data/zip/xml.cljs","~:line",55,"~:column",7,"~:end-line",55,"~:end-column",12,"~:arglists",["~#list",["~$quote",["^M",[["~$loc","~$&","~$preds"]]]]],"~:doc","The loc is passed to the first predicate.  If the predicate returns\n  a collection, each value of the collection is passed to the next\n  predicate.  If it returns a location, the location is passed to the\n  next predicate.  If it returns true, the input location is passed to\n  the next predicate.  If it returns false or nil, the next predicate\n  is not called.\n\n  This process is repeated, passing the processed results of each\n  predicate to the next predicate.  xml-> returns the final sequence.\n  The entire chain is evaluated lazily.\n\n  There are also special predicates: keywords are converted to tag=,\n  strings to text=, and vectors to sub-queries that return true if\n  they match.\n\n  See the footer of zip-query.clj for examples.","~:top-fn",["^ ","~:variadic?",true,"~:max-fixed-arity",1,"~:method-params",[["^M",["^O","^P"]]],"^L",["^M",[["^O","~$&","^P"]]],"~:arglists-meta",["^M",[null]]]],"^7","~$clojure.data.zip.xml/xml->","^G",".cljs_nashorn_repl/clojure/data/zip/xml.cljs","^K",12,"^R",["^ ","^S",true,"^T",1,"^U",[["^M",["^O","^P"]]],"^L",["^M",[["^O","~$&","^P"]]],"^V",["^M",[null]]],"^U",[["^M",["^O","^P"]]],"~:protocol-impl",null,"^V",["^M",[null]],"^I",1,"^S",true,"^H",55,"~:ret-tag","~$any","^J",55,"^T",1,"~:fn-var",true,"^L",["^M",[["^O","~$&","^P"]]],"^Q","The loc is passed to the first predicate.  If the predicate returns\n  a collection, each value of the collection is passed to the next\n  predicate.  If it returns a location, the location is passed to the\n  next predicate.  If it returns true, the input location is passed to\n  the next predicate.  If it returns false or nil, the next predicate\n  is not called.\n\n  This process is repeated, passing the processed results of each\n  predicate to the next predicate.  xml-> returns the final sequence.\n  The entire chain is evaluated lazily.\n\n  There are also special predicates: keywords are converted to tag=,\n  strings to text=, and vectors to sub-queries that return true if\n  they match.\n\n  See the footer of zip-query.clj for examples."],"~$attr",["^ ","^E",null,"^F",["^ ","^G","/Users/jude/Dropbox/Projects/aws/draw-graph/web-draw-graph/.cljs_nashorn_repl/clojure/data/zip/xml.cljs","^H",17,"^I",7,"^J",17,"^K",11,"^L",["^M",["^N",["^M",[["~$attrname"],["^O","^11"]]]]],"^Q","Returns the xml attribute named attrname, of the xml node at location loc.","^R",["^ ","^S",false,"^T",2,"^U",["^M",[["^11"],["^O","^11"]]],"^L",["^M",[["^11"],["^O","^11"]]],"^V",["^M",[null,null]]]],"^7","~$clojure.data.zip.xml/attr","^G",".cljs_nashorn_repl/clojure/data/zip/xml.cljs","^K",11,"^R",["^ ","^S",false,"^T",2,"^U",["^M",[["^11"],["^O","^11"]]],"^L",["^M",[["^11"],["^O","^11"]]],"^V",["^M",[null,null]]],"^U",["^M",[["^11"],["^O","^11"]]],"^X",null,"^V",["^M",[null,null]],"^I",1,"^S",false,"^H",17,"^J",17,"^T",2,"^[",true,"^L",["^M",[["^11"],["^O","^11"]]],"^Q","Returns the xml attribute named attrname, of the xml node at location loc."],"~$attr=",["^ ","^E",null,"^F",["^ ","^G","/Users/jude/Dropbox/Projects/aws/draw-graph/web-draw-graph/.cljs_nashorn_repl/clojure/data/zip/xml.cljs","^H",22,"^I",7,"^J",22,"^K",12,"^L",["^M",["^N",["^M",[["^11","~$attrval"]]]]],"^Q","Returns a query predicate that matches a node when it has an\n  attribute named attrname whose value is attrval."],"^7","~$clojure.data.zip.xml/attr=","^G",".cljs_nashorn_repl/clojure/data/zip/xml.cljs","^K",12,"^U",["^M",[["^11","^14"]]],"^X",null,"^V",["^M",[null,null]],"^I",1,"^S",false,"^H",22,"^Y","~$function","^J",22,"^T",2,"^[",true,"^L",["^M",["^N",["^M",[["^11","^14"]]]]],"^Q","Returns a query predicate that matches a node when it has an\n  attribute named attrname whose value is attrval."],"~$tag=",["^ ","^E",null,"^F",["^ ","^G","/Users/jude/Dropbox/Projects/aws/draw-graph/web-draw-graph/.cljs_nashorn_repl/clojure/data/zip/xml.cljs","^H",27,"^I",7,"^J",27,"^K",11,"^L",["^M",["^N",["^M",[["~$tagname"]]]]],"^Q","Returns a query predicate that matches a node when its is a tag\n  named tagname."],"^7","~$clojure.data.zip.xml/tag=","^G",".cljs_nashorn_repl/clojure/data/zip/xml.cljs","^K",11,"^U",["^M",[["^18"]]],"^X",null,"^V",["^M",[null,null]],"^I",1,"^S",false,"^H",27,"^Y","^16","^J",27,"^T",1,"^[",true,"^L",["^M",["^N",["^M",[["^18"]]]]],"^Q","Returns a query predicate that matches a node when its is a tag\n  named tagname."],"~$text",["^ ","^E",null,"^F",["^ ","^G","/Users/jude/Dropbox/Projects/aws/draw-graph/web-draw-graph/.cljs_nashorn_repl/clojure/data/zip/xml.cljs","^H",36,"^I",7,"^J",36,"^K",11,"^L",["^M",["^N",["^M",[["^O"]]]]],"^Q","Returns the textual contents of the given location, similar to\n  xpaths's value-of"],"^7","~$clojure.data.zip.xml/text","^G",".cljs_nashorn_repl/clojure/data/zip/xml.cljs","^K",11,"^U",["^M",[["^O"]]],"^X",null,"^V",["^M",[null,null]],"^I",1,"^S",false,"^H",36,"^Y","^Z","^J",36,"^T",1,"^[",true,"^L",["^M",["^N",["^M",[["^O"]]]]],"^Q","Returns the textual contents of the given location, similar to\n  xpaths's value-of"],"~$text=",["^ ","^E",null,"^F",["^ ","^G","/Users/jude/Dropbox/Projects/aws/draw-graph/web-draw-graph/.cljs_nashorn_repl/clojure/data/zip/xml.cljs","^H",44,"^I",7,"^J",44,"^K",12,"^L",["^M",["^N",["^M",[["~$s"]]]]],"^Q","Returns a query predicate that matches a node when its textual\n  content equals s."],"^7","~$clojure.data.zip.xml/text=","^G",".cljs_nashorn_repl/clojure/data/zip/xml.cljs","^K",12,"^U",["^M",[["~$s"]]],"^X",null,"^V",["^M",[null,null]],"^I",1,"^S",false,"^H",44,"^Y","^16","^J",44,"^T",1,"^[",true,"^L",["^M",["^N",["^M",[["~$s"]]]]],"^Q","Returns a query predicate that matches a node when its textual\n  content equals s."],"~$seq-test",["^ ","^E",null,"^F",["^ ","^G","/Users/jude/Dropbox/Projects/aws/draw-graph/web-draw-graph/.cljs_nashorn_repl/clojure/data/zip/xml.cljs","^H",49,"^I",7,"^J",49,"^K",15,"^L",["^M",["^N",["^M",[["^P"]]]]],"^Q","Returns a query predicate that matches a node when its xml content\n  matches the query expresions given."],"^7","~$clojure.data.zip.xml/seq-test","^G",".cljs_nashorn_repl/clojure/data/zip/xml.cljs","^K",15,"^U",["^M",[["^P"]]],"^X",null,"^V",["^M",[null,null]],"^I",1,"^S",false,"^H",49,"^Y","^16","^J",49,"^T",1,"^[",true,"^L",["^M",["^N",["^M",[["^P"]]]]],"^Q","Returns a query predicate that matches a node when its xml content\n  matches the query expresions given."],"~$xml1->",["^ ","^E",null,"^F",["^ ","^G","/Users/jude/Dropbox/Projects/aws/draw-graph/web-draw-graph/.cljs_nashorn_repl/clojure/data/zip/xml.cljs","^H",78,"^I",7,"^J",78,"^K",13,"^L",["^M",["^N",["^M",[["^O","~$&","^P"]]]]],"^Q","Returns the first item from loc based on the query predicates\n  given.  See xml->","^R",["^ ","^S",true,"^T",1,"^U",[["^M",["^O","^P"]]],"^L",["^M",[["^O","~$&","^P"]]],"^V",["^M",[null]]]],"^7","~$clojure.data.zip.xml/xml1->","^G",".cljs_nashorn_repl/clojure/data/zip/xml.cljs","^K",13,"^R",["^ ","^S",true,"^T",1,"^U",[["^M",["^O","^P"]]],"^L",["^M",[["^O","~$&","^P"]]],"^V",["^M",[null]]],"^U",[["^M",["^O","^P"]]],"^X",null,"^V",["^M",[null]],"^I",1,"^S",true,"^H",78,"^Y","^Z","^J",78,"^T",1,"^[",true,"^L",["^M",[["^O","~$&","^P"]]],"^Q","Returns the first item from loc based on the query predicates\n  given.  See xml->"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:attrs","~:tag"]],"~:order",["^1F","^1G"]],"^Q",null]